
/home/bitcraze/projects/gap_sdk/resnet_160/BUILD/GAP8_V2/GCC_RISCV/resnet:     file format elf32-littleriscv

Sections:
Idx Name          Size      VMA       LMA       File off  Algn  Flags
  0 .data_tiny_fc 000003e0  00000004  1b000004  00001004  2**2  CONTENTS, ALLOC, LOAD, DATA
  1 .stack        00000c38  1b0003e8  1b0003e8  000013e8  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .vectors      000000a0  1c000000  1c000000  00003000  2**0  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .text         00016b28  1c0000a0  1c0000a0  000030a0  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .init_array   00000044  1c016bc8  1c016bc8  00019bc8  2**2  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   0000000c  1c016c0c  1c016c0c  00019c0c  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .init         00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS, ALLOC, LOAD, CODE
  7 .fini         00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS, ALLOC, LOAD, CODE
  8 .preinit_array 00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS, ALLOC, LOAD, DATA
  9 .boot         00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS
 10 .got          00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS, ALLOC, LOAD, DATA
 11 .shbss        00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS
 12 .gnu.offload_funcs 00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS
 13 .gnu.offload_vars 00000000  1c016c18  1c016c18  0001b064  2**0  CONTENTS
 14 .rodata       00000920  1c016c18  1c016c18  00019c18  2**3  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .data         000002dc  1c017538  1c017538  0001a538  2**2  CONTENTS, ALLOC, LOAD, DATA
 16 .bss          000003a8  1c017814  1c017814  0001a814  2**2  ALLOC
 17 .data_tiny_l1 00000018  00000004  1c017bbc  0001b004  2**2  CONTENTS, ALLOC, LOAD, DATA
 18 .l1cluster_g  00000048  1000001c  1c017bd4  0001b01c  2**2  CONTENTS, ALLOC, LOAD, DATA
 19 .bss_l1       00000000  10000064  10000064  0001b064  2**0  CONTENTS
 20 .debug_frame  00013510  00000000  00000000  0001b064  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_info   00124c47  00000000  00000000  0002e574  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_abbrev 0000edce  00000000  00000000  001531bb  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    000cca9c  00000000  00000000  00161f89  2**0  CONTENTS, READONLY, DEBUGGING
 24 .debug_aranges 000025d0  00000000  00000000  0022ea28  2**3  CONTENTS, READONLY, DEBUGGING
 25 .debug_ranges 0001a9c0  00000000  00000000  00230ff8  2**3  CONTENTS, READONLY, DEBUGGING
 26 .debug_line   00062e88  00000000  00000000  0024b9b8  2**0  CONTENTS, READONLY, DEBUGGING
 27 .debug_str    000118c3  00000000  00000000  002ae840  2**0  CONTENTS, READONLY, DEBUGGING
 28 .comment      0000001a  00000000  00000000  002c0103  2**0  CONTENTS, READONLY
 29 .Pulp_Chip.Info 0000004e  00000000  00000000  002c011d  2**0  CONTENTS, READONLY
SYMBOL TABLE:
00000004 l    d  .data_tiny_fc	00000000 .data_tiny_fc
1b0003e8 l    d  .stack	00000000 .stack
1c000000 l    d  .vectors	00000000 .vectors
1c0000a0 l    d  .text	00000000 .text
1c016bc8 l    d  .init_array	00000000 .init_array
1c016c0c l    d  .fini_array	00000000 .fini_array
1c016c18 l    d  .init	00000000 .init
1c016c18 l    d  .fini	00000000 .fini
1c016c18 l    d  .preinit_array	00000000 .preinit_array
1c016c18 l    d  .boot	00000000 .boot
1c016c18 l    d  .got	00000000 .got
1c016c18 l    d  .shbss	00000000 .shbss
1c016c18 l    d  .gnu.offload_funcs	00000000 .gnu.offload_funcs
1c016c18 l    d  .gnu.offload_vars	00000000 .gnu.offload_vars
1c016c18 l    d  .rodata	00000000 .rodata
1c017538 l    d  .data	00000000 .data
1c017814 l    d  .bss	00000000 .bss
00000004 l    d  .data_tiny_l1	00000000 .data_tiny_l1
1000001c l    d  .l1cluster_g	00000000 .l1cluster_g
10000064 l    d  .bss_l1	00000000 .bss_l1
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .Pulp_Chip.Info	00000000 .Pulp_Chip.Info
00000000 l    df *ABS*	00000000 bridge.c
1c012d90 l     F .text	0000001c __rt_event_enqueue
1c012dac l     F .text	00000020 __rt_bridge_check_bridge_req.part.5
1c012dcc l     F .text	00000046 __rt_bridge_wait
00000004 l     O .data_tiny_fc	00000004 __rt_bridge_flash_handle
00000008 l     O .data_tiny_fc	00000004 __rt_bridge_flash_type
0000000c l     O .data_tiny_fc	00000004 __rt_bridge_flash_itf
00000010 l     O .data_tiny_fc	00000004 __rt_bridge_flash_cs
00000014 l     O .data_tiny_fc	00000004 __rt_bridge_eeprom_handle
00000000 l    df *ABS*	00000000 events.c
00000000 l    df *ABS*	00000000 periph-v2.c
00000000 l    df *ABS*	00000000 hyperram-v1.c
1c014378 l     F .text	00000014 l2_memcpy
1c01438c l     F .text	00000024 rt_event_enqueue
1c0143b0 l     F .text	00000032 pi_task_wait_on.isra.4
1c0146a2 l     F .text	00000046 __pi_hyper_copy_exec
1c014802 l     F .text	00000296 __pi_hyper_copy_misaligned
1c0146e8 l     F .text	00000056 __pi_hyper_copy
1c0147b0 l     F .text	00000052 exec_pending_task
1c014a98 l     F .text	0000009e __pi_hyper_copy_2d
1c014b74 l     F .text	0000002e __rt_hyper_init
1c0178e8 l     O .bss	00000080 __pi_hyper_temp_buffer
1c0173c0 l     O .rodata	00000034 __hyper_pad
1c017b00 l     O .bss	00000004 __pi_hyper_cluster_reqs_first
1c017b04 l     O .bss	00000004 __rt_hyper_open_count
00000000 l    df *ABS*	00000000 udma-v2.c
00000000 l    df *ABS*	00000000 pwm.c
00000000 l    df *ABS*	00000000 rtc.c
00000000 l    df *ABS*	00000000 conf.c
00000000 l    df *ABS*	00000000 debug.c
00000000 l    df *ABS*	00000000 utils.c
1c012bb0 l     F .text	0000007c __rt_fc_cluster_lock_req
1b0007f0 l     O .stack	00000018 cbsys_first
00000000 l    df *ABS*	00000000 himax.c
00000000 l    df *ABS*	00000000 io.c
1c0153de l     F .text	0000000e __rt_io_end_of_flush
1c0153ec l     F .text	00000050 __rt_io_uart_wait_req
1c01543c l     F .text	00000042 __rt_do_putc_host
1c01547e l     F .text	0000005a __rt_io_start
1c0154d8 l     F .text	00000020 rt_event_execute.isra.4.constprop.12
1c0154f8 l     F .text	00000070 __rt_io_lock
1c015568 l     F .text	00000034 __rt_putc_host_cluster_req
1c01559c l     F .text	00000070 __rt_io_unlock
1c01560c l     F .text	000000da __rt_io_uart_flush.constprop.11
1c0156e6 l     F .text	00000092 __rt_io_uart_wait_pending
1c015778 l     F .text	00000028 __rt_io_stop
1c0158e4 l     F .text	000000ac tfp_putc.isra.9
1c017a58 l     O .bss	00000080 __rt_io_event
1b00080c l     O .stack	00000010 __rt_io_fc_lock
1c017794 l     O .data	00000080 __rt_putc_host_buffer
1c017b14 l     O .bss	00000004 __rt_io_event_current
1c017b18 l     O .bss	00000004 __rt_io_pending_flush
1c017b1c l     O .bss	00000004 __rt_putc_host_buffer_index
1c017b20 l     O .bss	00000004 _rt_io_uart
00000000 l    df *ABS*	00000000 crt0.o
1c000094 l       .vectors	00000000 __rt_no_irq_handler
00000000 l    df *ABS*	00000000 sched.o
1c000132 l       .text	00000000 __rt_handle_special_event
1c00012c l       .text	00000000 __rt_no_first
1c00012e l       .text	00000000 __rt_common
1c000130 l       .text	00000000 enqueue_end
1c000192 l       .text	00000000 __rt_remote_enqueue_event_loop_cluster
1c0001ce l       .text	00000000 __rt_remote_enqueue_event_loop_cluster_continue
1c0001b8 l       .text	00000000 __rt_cluster_pool_update_end
1c0001a0 l       .text	00000000 __rt_cluster_pool_update_loop
1c0001a8 l       .text	00000000 __rt_cluster_pool_update_loop_end
1c0001b0 l       .text	00000000 __rt_cluster_pool_update_no_current
1c0001ec l       .text	00000000 __rt_remote_enqueue_event_loop_next_cluster
00000000 l    df *ABS*	00000000 vectors.o
1c000266 l       .text	00000000 __rt_call_c_function
00000000 l    df *ABS*	00000000 udma-v2.o
1c000356 l       .text	00000000 __rt_udma_no_copy
1c00031e l       .text	00000000 repeat_transfer
1c00036e l       .text	00000000 handle_special_end
1c0002ca l       .text	00000000 resume_after_special_end
1c000308 l       .text	00000000 checkTask
1c0002de l       .text	00000000 __rt_udma_call_enqueue_callback_resume
1c000304 l       .text	00000000 transfer_resume
1c0002fc l       .text	00000000 hyper
1c0002fc l       .text	00000000 fc_tcdm
1c0002fc l       .text	00000000 dual
1c00031e l       .text	00000000 dmaCmd
1c000346 l       .text	00000000 not_last
1c0003b6 l       .text	00000000 i2c_step1
1c0003d2 l       .text	00000000 i2c_step2
1c000378 l       .text	00000000 spim_step3
1c000394 l       .text	00000000 spim_step2
00000000 l    df *ABS*	00000000 soc_event_eu.o
1c000426 l       .text	00000000 __rt_fc_socevents_not_hyper_rx
1c00042c l       .text	00000000 __rt_fc_socevents_not_hyper_tx
1c000446 l       .text	00000000 __rt_soc_evt_no_udma_channel
1c0004b4 l       .text	00000000 rtc_event_handler
1c000472 l       .text	00000000 __rt_soc_evt_pwm
1c000486 l       .text	00000000 __rt_soc_evt_store
1c00049a l       .text	00000000 socevents_set
00000000 l    df *ABS*	00000000 hyperram-v1_asm.o
1c000514 l       .text	00000000 __rt_hyper_handle_copy_end
1c0004ce l       .text	00000000 __rt_hyper_repeat_copy
1c000500 l       .text	00000000 __rt_hyper_repeat_copy_not_last
1c000526 l       .text	00000000 __rt_hyper_handle_emu_task
1c000540 l       .text	00000000 __rt_hyper_handle_pending_tasks
1c0005a2 l       .text	00000000 __rt_hyper_repeat_copy_not_last2
00000000 l    df *ABS*	00000000 gpio.o
1c000606 l       .text	00000000 __rt_gpio_handler_end
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 main.c
1c000c74 l     F .text	0000006c RunNN
00000000 l    df *ABS*	00000000 ImgIO.c
00000000 l    df *ABS*	00000000 resnetKernels.c
1c00148e l     F .text	00000034 __cl_dma_memcpy.constprop.12
1c017818 l     O .bss	0000001c HyperFlash
00000000 l    df *ABS*	00000000 CNN_BiasReLULinear_BasicKernels.c
1c00bae2 l     F .text	00000124 KerReductIO_Compact_fp
00000000 l    df *ABS*	00000000 CNN_Conv_DP_BasicKernels.c
1c00bfe8 l     F .text	000000ce KerConv2x3from3x3Stride1_V_DP_fp
1c00c0b6 l     F .text	000000da KerConv2x3from3x3Stride2_V_DP_fp
1c00c190 l     F .text	000000fe KerConv1x1Stride2_Body_DP_fp.isra.16
1c00c28e l     F .text	0000009a KerConv1x1Stride2_Body_DP_2In_fp.isra.58
1c00c328 l     F .text	00000144 KerConv3x3Stride1_Body_DP_fp.isra.60
1c00c46c l     F .text	00000086 KerConv3x2from3x3Stride1_H_DP_fp.isra.61
1c00c4f2 l     F .text	00000124 KerConv3x3BorderStride1_DP_fp.isra.62
1c00c616 l     F .text	00000114 KerConv3x3Stride2_Body_DP_fp.isra.63
1c00c72a l     F .text	00000088 KerConv3x2from3x3Stride2_H_DP_fp.isra.64
1c00c7b2 l     F .text	0000012e KerConv3x3BorderStride2_DP_fp.isra.65
1c00c8e0 l     F .text	0000030a KerConv7x7StrideS_Body_DP_fp.constprop.100
1c00cbea l     F .text	0000092e KerConvNxNStrideS_Border_DP_fp.constprop.102
00000000 l    df *ABS*	00000000 CNN_Pooling_BasicKernels.c
1c00dc86 l     F .text	000007d4 KerMaxPoolNxNStrideS_Border_fp
1c00e45a l     F .text	000007cc KerAvgPoolNxNStrideS_Border_fp
1c00ec26 l     F .text	0000034a KerMaxPool2x2Stride2_fp
1c00ef70 l     F .text	00000304 KerAvgPool2x2Stride2_fp
1c00f274 l     F .text	000002fc KerMaxPoolNxNStrideS_Body_fp.isra.5
1c00f570 l     F .text	000002ea KerAvgPoolNxNStrideS_Body_fp.isra.7
00000000 l    df *ABS*	00000000 CNN_MatAlgebra.c
00000000 l    df *ABS*	00000000 CNN_SoftMax.c
10000020 l     O .l1cluster_g	00000020 Reduct.16880
10000040 l     O .l1cluster_g	00000020 Reduct.16947
1c017240 l     O .rodata	00000018 FractionExpLUT
1c017258 l     O .rodata	00000018 IntegerExpLUT
00000000 l    df *ABS*	00000000 flash.c
00000000 l    df *ABS*	00000000 fs.c
1c0103fe l     F .text	00000032 pi_task_wait_on.isra.3
00000000 l    df *ABS*	00000000 read_fs.c
1c0104f4 l     F .text	00000008 pi_flash_read_async
1c0104fc l     F .text	0000003e __pi_read_fs_write
1c01053a l     F .text	00000010 __pi_read_fs_seek
1c01054a l     F .text	00000040 __pi_read_fs_direct_read_async
1c01058a l     F .text	00000018 __pi_read_fs_copy_async
1c0105a2 l     F .text	00000018 __pi_read_fs_copy_2d_async
1c0105ba l     F .text	00000024 rt_event_enqueue
1c0105de l     F .text	00000038 __pi_fs_free
1c010616 l     F .text	00000004 __pi_read_fs_unmount
1c01061a l     F .text	00000126 __pi_read_fs_open
1c010740 l     F .text	0000012a __pi_fs_mount_step
1c01086a l     F .text	0000004e __pi_read_fs_close
1c0108b8 l     F .text	0000009c __pi_read_fs_mount
1c010954 l     F .text	00000072 __pi_fs_read_cached
1c010aaa l     F .text	00000094 __pi_read_fs_try_read
1c010b3e l     F .text	00000042 __pi_read_fs_read_async
00000000 l    df *ABS*	00000000 host_fs.c
1c010b80 l     F .text	0000000c __pi_host_fs_mount
1c010b8c l     F .text	00000002 __pi_host_fs_unmount
1c010b8e l     F .text	00000024 rt_event_enqueue
1c010bb2 l     F .text	00000006 __pi_host_fs_seek
1c010bb8 l     F .text	00000084 __pi_host_fs_copy_2d_async
1c010c3c l     F .text	0000002a __pi_host_fs_write_async
1c010c66 l     F .text	00000026 __pi_host_fs_read_async
1c010c8c l     F .text	00000048 __pi_host_fs_copy_async
1c010cd4 l     F .text	00000004 __pi_host_fs_direct_read_async
1c010cd8 l     F .text	0000001c __pi_host_fs_close
1c010cf4 l     F .text	0000005c __pi_host_fs_open
1c017834 l     O .bss	00000088 bsp_fs_data
00000000 l    df *ABS*	00000000 hyperflash.c
1c010d50 l     F .text	0000001c __rt_event_enqueue
1c010d6c l     F .text	0000000e hyperflash_ioctl
1c010d7a l     F .text	0000000e hyperflash_set_reg_exec
1c010d88 l     F .text	00000040 hyperflash_stall_task
1c010dc8 l     F .text	0000008a hyperflash_read_2d_async
1c011054 l     F .text	00000106 hyperflash_handle_pending_task
1c010e52 l     F .text	0000001a hyperflash_copy_2d_async
1c010e6c l     F .text	000000be hyperflash_erase_sector_async
1c011688 l     F .text	00000054 hyperflash_check_erase
1c010f2a l     F .text	000000b4 hyperflash_erase_chip_async
1c010fde l     F .text	00000076 hyperflash_read_async
1c0112c2 l     F .text	0000005e hyperflash_program_async
1c0111ba l     F .text	00000056 hyperflash_reg_set_async
1c01115a l     F .text	00000060 hyperflash_reg_get_async
1c011210 l     F .text	000000b2 hyperflash_program_resume
1c0116dc l     F .text	00000052 hyperflash_check_program
1c011320 l     F .text	0000001c hyperflash_copy_async
1c01133c l     F .text	0000001e hyperflash_close
1c01135a l     F .text	00000088 hyperflash_open
1c0113e2 l     F .text	00000032 pi_task_wait_on.isra.3
1c011414 l     F .text	0000002c hyperflash_copy_2d
1c011440 l     F .text	00000024 hyperflash_erase_sector
1c011464 l     F .text	00000024 hyperflash_erase_chip
1c011488 l     F .text	00000024 hyperflash_read
1c0114ac l     F .text	00000024 hyperflash_reg_get
1c0114d0 l     F .text	00000024 hyperflash_reg_set
1c0114f4 l     F .text	00000024 hyperflash_program
1c011518 l     F .text	0000002e hyperflash_copy
1c011546 l     F .text	000000aa hyperflash_erase_resume
1c0115f0 l     F .text	00000044 hyperflash_erase_async
1c011634 l     F .text	00000024 hyperflash_erase
1c011658 l     F .text	00000030 hyperflash_get_status_reg
1c017598 l     O .data	00000054 hyperflash_api
00000000 l    df *ABS*	00000000 hyperram.c
1c011780 l     F .text	00000012 hyperram_copy_2d_async
1c011792 l     F .text	00000010 hyperram_copy_async
1c0117a2 l     F .text	00000022 hyperram_close
1c0117c4 l     F .text	00000094 hyperram_open
1c0175ec l     O .data	00000018 hyperram_api
00000000 l    df *ABS*	00000000 ram.c
1c011872 l     F .text	00000070 __pi_ram_cluster_req
1c0118e2 l     F .text	0000001e __pi_ram_cluster_req_done
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 partition.c
00000000 l    df *ABS*	00000000 flash_partition.c
00000000 l    df *ABS*	00000000 md5.c
1c011d08 l     F .text	000008d6 body
00000000 l    df *ABS*	00000000 semihost.c
1c0127e4 l     F .text	0000000e __internal_semihost
00000000 l    df *ABS*	00000000 ai_deck.c
1c012888 l     F .text	0000003c __bsp_init_pads
1c017af4 l     O .bss	00000004 __bsp_init_pads_done
00000000 l    df *ABS*	00000000 init.c
1c012906 l     F .text	00000026 cluster_start
1c016bcc l     O .init_array	00000004 ctor_list
1c016c10 l     O .fini_array	00000004 dtor_list
00000000 l    df *ABS*	00000000 irq.c
00000000 l    df *ABS*	00000000 alloc.c
00000000 l    df *ABS*	00000000 time.c
1c013406 l     F .text	00000018 __rt_time_poweroff
1c01341e l     F .text	00000018 __rt_time_poweron
1c017af8 l     O .bss	00000004 timer_count
00000000 l    df *ABS*	00000000 time_irq.c
00000000 l    df *ABS*	00000000 freq.c
00000000 l    df *ABS*	00000000 pmu_driver.c
1c0138c2 l     F .text	0000002c SetFllMultDivFactors
1c0138ee l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c017720 l     O .data	00000007 SystemStateToSCUFastSeq
1c017738 l     O .data	00000003 ToHWDCDC_Pos
1c017748 l     O .data	00000004 RetPMUStateToPMUState
00000000 l    df *ABS*	00000000 cluster.c
1c013d0e l     F .text	00000062 __rt_init_cluster_data
1c013d70 l     F .text	00000064 __rt_cluster_init
1c013dd4 l     F .text	0000012a __rt_cluster_mount_step
00000000 l    df *ABS*	00000000 pulpos_emu.c
1c0140ba l     F .text	0000003c __rt_cluster_pulpos_emu_init
1c0178bc l     O .bss	0000002c __rt_pulpos_emu_global_cluster_task
1c017afc l     O .bss	00000004 __rt_fc_cluster_device
00000000 l    df *ABS*	00000000 cluster_call.c
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 uart.c
1c014ba2 l     F .text	000000c4 __pi_uart_flow_control_enable
1c014c66 l     F .text	0000004a __rt_uart_setup
1c014cb0 l     F .text	00000022 __rt_uart_setfreq_after
1c014cd2 l     F .text	00000090 __pi_uart_copy_enqueue_exec_flow_control
1c014d62 l     F .text	0000002e __pi_uart_copy_enqueue_exec.isra.14
1c014d90 l     F .text	00000042 __rt_uart_wait_tx_done.isra.17
1c014dd2 l     F .text	0000002c __rt_uart_setfreq_before
1c01774c l     O .data	00000048 __rt_uart
00000000 l    df *ABS*	00000000 pads-v1.c
00000000 l    df *ABS*	00000000 alloc_extern.c
00000000 l    df *ABS*	00000000 pwm-v1.c
1c015168 l     F .text	00000028 __pos_pwm_init
1c017968 l     O .bss	00000058 __pos_pwm
00000000 l    df *ABS*	00000000 gpio-v2.c
1c0179c0 l     O .bss	00000098 __rt_gpio
00000000 l    df *ABS*	00000000 i2s-v1.c
1c0152d4 l     F .text	00000034 __rt_i2s_resume
1c015308 l     F .text	0000002a __rt_i2s_setfreq_after
1c015332 l     F .text	0000002c __rt_i2s_setfreq_before
1c017b08 l     O .bss	00000004 __rt_i2s_first
00000000 l    df *ABS*	00000000 spim-v2.c
1c017b0c l     O .bss	00000008 __rt_spim_open_count
00000000 l    df *ABS*	00000000 fprintf.c
00000000 l    df *ABS*	00000000 prf.c
1c015b1c l     F .text	00000092 _to_x
1c015bae l     F .text	00000020 _rlrshift
1c015bce l     F .text	00000044 _ldiv5
1c015c12 l     F .text	00000034 _get_digit
00000000 l    df *ABS*	00000000 uart.c
1c016722 l     F .text	00000024 __rt_uart_setup.isra.5
1c016746 l     F .text	00000022 __rt_uart_setfreq_after
1c016768 l     F .text	00000042 __rt_uart_wait_tx_done.isra.6
1c0167aa l     F .text	0000002c __rt_uart_setfreq_before
1c0167d6 l     F .text	00000042 __rt_uart_cluster_req
1c016818 l     F .text	00000026 soc_eu_fcEventMask_setEvent
1c017ad8 l     O .bss	00000010 __rt_uart
00000000 l    df *ABS*	00000000 pe-eu-v3.o
1c016ad6 l       .text	00000000 __rt_slave_start
1c016a2c l       .text	00000000 __rt_master_event
1c016a40 l       .text	00000000 __rt_master_loop
1c016a30 l       .text	00000000 __rt_push_event_to_fc_retry
1c016ac8 l       .text	00000000 __rt_push_event_to_fc_wait
1c016aba l       .text	00000000 __rt_master_sleep
1c016a48 l       .text	00000000 __rt_master_loop_update_next
1c016a9c l       .text	00000000 __rt_no_stack_check
1c016aa8 l       .text	00000000 __rt_master_no_slave_barrier
1c016ab8 l       .text	00000000 __rt_master_loop_no_slave
1c016af4 l       .text	00000000 __rt_fork_return
1c016af8 l       .text	00000000 __rt_wait_for_dispatch
1c016b0e l       .text	00000000 __rt_other_entry
1c016b08 l       .text	00000000 __rt_fork_entry
1c016b36 l       .text	00000000 __rt_no_stack_check_end
1c016ba8 l       .text	00000000 __rt_dma_2d_done
1c016b66 l       .text	00000000 __rt_dma_2d_redo
1c016b6e l       .text	00000000 __rt_dma_2d_not_last
1c016b90 l       .text	00000000 __rt_dma_2d_exit
00000000 l    df *ABS*	00000000 libgcc2.c
1c01473e g     F .text	00000016 pi_hyper_read_async
1c01507c g     F .text	00000018 __rt_udma_channel_init
1c0103f0 g     F .text	0000000c pi_flash_open
00000000 g       *ABS*	00000000 __rt_debug_init_config_trace
00000350 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_stride
1c0133e8 g     F .text	0000000e pi_l2_malloc
1c012d22 g     F .text	00000038 __rt_fc_cluster_lock
1c013a84 g     F .text	000000a4 InitOneFll
1c0133f6 g     F .text	00000010 pi_l2_free
00000000 g       *ABS*	00000000 __RT_DEBUG_CONFIG
1c00854c g     F .text	0000053e S65_Conv2d_64x64x3x3_Relu
1c017b90 g     O .bss	00000004 __rt_cluster_tasks
1c012ef4 g     F .text	00000022 __rt_bridge_send_notif
1c00d706 g     F .text	000001aa KerParConv3x3Stride1_DP_fp
1c013066 g     F .text	00000076 rt_event_alloc
00000338 g     O .data_tiny_fc	00000001 __rt_hyper_pending_emu_do_memcpy
1c014b36 g     F .text	00000018 pi_hyper_read_2d_async
1c01284c g     F .text	0000001e semihost_write
1c01313c g     F .text	00000064 __rt_event_execute
1c012b5e g     F .text	00000052 __rt_irq_init
1c013224 g     F .text	00000048 rt_user_alloc
00000310 g     O .data_tiny_fc	00000004 __rt_hyper_pending_hyper_addr
1c013f04 g     F .text	000000d8 pi_cluster_open
1c006746 g     F .text	000002a2 S45_MatAdd_32x10x10
1c015af0 g     F .text	0000002c printf
1c015094 g     F .text	0000000e pi_pwm_conf_init
ffffffff g       *ABS*	00000000 pulp__L2
1c013364 g     F .text	00000072 __rt_allocs_init
1c00bcba g     F .text	00000186 KerParLinearLayerReLU_fp
1c017b70 g     O .bss	00000004 resnet_L3_Memory
1c017b74 g     O .bss	00000004 __rt_alloc_l1
1c013efe g     F .text	00000006 pi_cluster_conf_init
ffffffff g       *ABS*	00000000 pulp__PE
1c017b24 g     O .bss	0000000c uart_device
1c0145aa g     F .text	000000a0 pi_hyper_close
1c012ac0 g     F .text	0000004c rt_irq_set_handler
1c0082aa g     F .text	000002a2 S62_MatAdd_64x5x5
00000314 g     O .data_tiny_fc	00000004 __rt_hyper_pending_addr
1c010442 g     F .text	0000002c pi_fs_mount
00000308 g     O .data_tiny_fc	00000004 __rt_hyper_udma_handle
1c013bf2 g     F .text	00000044 InitFlls
00000018 g     O .data_tiny_fc	00000004 __rt_first_free
1c011a92 g     F .text	0000000a pi_partition_get_flash_offset
1c0128c4 g     F .text	00000018 bsp_hyperram_conf_init
00000001 g       *ABS*	00000000 __ACTIVE_FC
1c0132e8 g     F .text	0000002e rt_free
1c011a9e g     F .text	00000004 pi_partition_table_load
00000400 g       *ABS*	00000000 __rt_cl_slave_stack_size
1c013884 g     F .text	0000003e __rt_freq_init
1c01292c g     F .text	00000168 __rt_init
00000001 g       *ABS*	00000000 __FC
1000001c g     O .l1cluster_g	00000004 resnet_L1_Memory
1c013cf2 g     F .text	00000012 __rt_fll_init
1c017b30 g     O .bss	00000024 hyper_conf
1b001020 g       .stack	00000000 __fc_tcdm_end
1c01501a g     F .text	00000058 rt_extern_alloc_init
1c012ff2 g     F .text	00000034 __rt_bridge_init
1c017b54 g     O .bss	0000000c HyperRam
1c00da8e g     F .text	000001f8 KerParConv7x7StrideS_DP_fp
00000018 g     O .data_tiny_l1	00000004 __rt_cluster_nb_active_pe
1c00374a g     F .text	000003fa S18_MatAdd_8x39x39
0000032c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_hyper_addr
1c016bc8 g       .text	00000000 _etext
0000030c g     O .data_tiny_fc	00000004 __rt_hyper_pending_base
1c009780 g     F .text	000001b0 S74_SoftMax
1c017538 g       .data	00000000 sdata
1c01282e g     F .text	0000001e semihost_read
1c002b2c g     F .text	0000060e S14_Conv2d_8x8x3x3_Relu
1c00be40 g     F .text	000000d6 KerDP_fp
00000001 g       *ABS*	00000000 __rt_nb_cluster
1c0128f6 g     F .text	00000010 bsp_hyperflash_open
1c01172e g     F .text	00000028 pi_hyperflash_conf_init
1c01194e g     F .text	00000052 extern_alloc_init
000003e0 g     O .data_tiny_fc	00000004 __rtc_handler
1c0132b8 g     F .text	00000030 rt_alloc
1c00f85a g     F .text	000001cc KerParPool2x2Stride2_fp
1c0166fc g     F .text	00000026 __rt_uart_cluster_req_done
1c012a94 g     F .text	00000028 __rt_deinit
1b000808 g     O .stack	00000001 camera_isAwaked
1c00010e g       .text	00000000 __rt_event_enqueue
1c0134b0 g     F .text	00000024 rt_time_wait_us
1c0157fa g     F .text	00000036 memcpy
1c00bc06 g     F .text	000000b4 KerParSetBias_DP_fp
1c0005f0 g       .text	00000000 __rt_gpio_handler
1c000246 g       .text	00000000 __rt_illegal_instr
1c01333a g     F .text	0000002a __rt_alloc_init_l1_for_fc
1c014b4e g     F .text	0000001a pi_hyper_write_2d_async
1c007996 g     F .text	000003d6 S58_Conv2d_64x32x1x1
1c0104bc g     F .text	00000026 pi_fs_write
1c01500e g     F .text	0000000c __rt_padframe_init
1c016c18 g       .fini_array	00000000 __DTOR_END__
0000020c g       *ABS*	00000000 __cluster_text_size
1c0004c8 g       .text	00000000 __rt_hyper_handle_copy
1c015990 g     F .text	0000002c puts
1c00926c g     F .text	000001f0 S70_AveragePool_2x2
1c005926 g     F .text	00000290 S35_MatAdd_16x20x20
1c017634  w    O .data	00000018 __rt_padframe_profiles
1c004c06 g     F .text	00000290 S28_MatAdd_16x20x20
00000330 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_addr
00000344 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks_last
1c0130f6 g     F .text	00000022 rt_event_get_blocking
1c017818 g       .bss	00000000 _bss_start
1c017814 g       .data	00000000 edata
1c013316 g     F .text	00000024 __rt_alloc_init_l1
1c017710  w    O .data	00000004 __rt_iodev_uart_baudrate
1c000174 g       .text	00000000 __rt_remote_enqueue_event
1c017728 g     O .data	00000010 PMUState
1c00b030 g     F .text	00000ab2 resnetCNN
1c017538 g       .data	00000000 _sdata
1c0131fc g     F .text	00000008 pi_cl_send_task_to_fc
1c011756 g     F .text	0000001e hyperram_alloc
1c005f96 g     F .text	000003dc S41_Conv2d_32x16x1x1
10000064 g       .l1cluster_g	00000000 __l1_end
1c000560 g       .text	00000000 __rt_hyper_handle_burst
1c013652 g     F .text	00000134 rt_periph_copy
1c0158a8 g     F .text	0000003c __rt_putc_uart
1b0003e8 g     O .stack	00000400 __rt_fc_stack
1c00fdf2 g     F .text	000002aa KerParMatAddDynAdjust_fp
1c0119a0 g     F .text	00000008 extern_alloc_deinit
00000010 g     O .data_tiny_l1	00000004 __rt_dma_last_pending
1c006dbc g     F .text	000003d6 S51_Conv2d_32x32x3x3
1c00013c g       .text	00000000 __rt_bridge_enqueue_event
1c015c46 g     F .text	00000ab6 _prf
10000064 g       .l1cluster_g	00000000 _libgomp_start
1c000946 g     F .text	0000032e .hidden __umoddi3
1c00945c g     F .text	00000324 S73_Linear_7x64x2x2
1c013560 g     F .text	000000f2 __rt_timer_handler
1c017b78 g     O .bss	00000004 __rt_alloc_l2
1b001020 g       .stack	00000000 stack
1c00060a g     F .text	0000033c .hidden __udivdi3
1c01190c g     F .text	00000042 pi_cl_ram_copy
1c015a74 g     F .text	0000000a abort
1c010476 g     F .text	00000008 pi_fs_open
1c0130dc g     F .text	0000001a rt_event_get
1c017b84 g     O .bss	00000008 __rt_freq_domains
00000060 g       *ABS*	00000000 _l1_preload_size
1c00010c g       .text	00000000 _init
1c002112 g     F .text	00000610 S10_Conv2d_8x8x3x3
1c007192 g     F .text	000002a2 S52_MatAdd_32x10x10
1c014e7a g     F .text	000000fa pi_uart_open
1c017b60 g     O .bss	0000000c cam_device
1c0014c2 g     F .text	00000642 S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu
1c011a06 g     F .text	0000008c extern_free
1c017bbc g       .bss	00000000 _bss_end
1c011c9c g     F .text	0000006c flash_partition_find_first
1c017614  w    O .data	00000010 __rt_padframe_hyper
1c0150a2 g     F .text	00000092 pi_pwm_open
1c012ed6 g     F .text	0000001e __rt_bridge_set_available
1c016b38 g       .text	00000000 __rt_dma_2d
1c0169bc g       .text	00000000 __rt_pe_start
1c017b80 g     O .bss	00000004 first_delayed
000003dc g     O .data_tiny_fc	00000004 __rt_rtc_init_done
00000008 g       *ABS*	00000000 __NB_ACTIVE_PE
1c0142dc g     F .text	0000004a pi_cluster_send_task_to_cl
1c013b28 g     F .text	000000ca __rt_pmu_cluster_power_up
1b000820 g       .stack	00000000 stack_start
00000004 g     O .data_tiny_l1	0000000c __rt_cluster_pool
00010000 g       *ABS*	00000000 __L1Cl
1c0046be g     F .text	00000548 S27_Conv2d_16x16x3x3_Relu
1c01684e g     F .text	0000008e __rt_uart_open
1c01478e g     F .text	00000022 pi_hyper_write
1c017538 g     O .data	0000000e model_name
1c014e60 g     F .text	0000001a pi_uart_conf_init
1c012c9a g     F .text	00000022 __rt_utils_init
1c0141e2 g     F .text	000000fa pi_cluster_send_task_to_cl_async
1c0109c6 g     F .text	000000e4 __pi_fs_read
1c005bb6 g     F .text	000003e0 S38_Conv2d_32x16x3x3_Relu
1c017604  w    O .data	00000010 __rt_padframe_default
1c0159bc g     F .text	0000001a fputc_locked
1c00313a g     F .text	00000610 S17_Conv2d_8x8x3x3
1c0133dc g     F .text	0000000c pi_cl_l1_free
1c0104ec g     F .text	00000008 pi_fs_seek
1c0053de g     F .text	00000548 S34_Conv2d_16x16x3x3
1c0168dc g     F .text	0000004e rt_uart_close
1c01444a g     F .text	00000160 pi_hyper_open
1c01326c g     F .text	0000004c rt_user_free
1c0069e8 g     F .text	000003d4 S48_Conv2d_32x32x3x3_Relu
1c01048e g     F .text	00000026 pi_fs_read
1c016bc8 g       .init_array	00000000 __CTOR_LIST__
1c013786 g     F .text	00000056 __rt_periph_wait_event
1c011858 g     F .text	0000001a pi_hyperram_conf_init
1c01383a g     F .text	0000004a rt_freq_set_and_get
1c0127f2 g     F .text	00000008 semihost_write0
1c012b0c  w    F .text	00000002 illegal_insn_handler_c
0000033c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_task
1c01400e g     F .text	00000070 __rt_cluster_push_fc_event
00000320 g     O .data_tiny_fc	00000004 __rt_hyper_end_task
1c0169bc g       .text	00000000 __cluster_text_start
1c017b6c g     O .bss	00000004 Output
1c004e96 g     F .text	00000548 S31_Conv2d_16x16x3x3_Relu
1c007d6c g     F .text	0000053e S61_Conv2d_64x64x3x3_Relu
1c014776 g     F .text	00000018 pi_hyper_write_async
1c000080 g       .vectors	00000000 _start
1c014754 g     F .text	00000022 pi_hyper_read
1c013204 g     F .text	00000020 rt_user_alloc_init
00000000 g       *ABS*	00000000 __rt_config
1c0125de g     F .text	00000032 MD5_Init
00000334 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size
1c0157b4 g     F .text	00000020 strncmp
1c017bbc g       .bss	00000000 _l1_preload_start_inL2
1c012cbc g     F .text	00000032 __rt_fc_lock
10000064 g       .l1cluster_g	00000000 __l1_heap_start
1c01304e g     F .text	00000018 __rt_wait_event_prepare_blocking
1c00afb4 g     F .text	0000007c resnetCNN_Destruct
1c012e12 g     F .text	00000078 __rt_bridge_handle_notif
1c00045e g       .text	00000000 __rt_soc_evt_no_udma
1c01047e g     F .text	00000008 pi_fs_close
10000060 g     O .l1cluster_g	00000004 __rt_cluster_fc_task_lock
1c01524e g     F .text	00000050 pi_gpio_mask_configure
00000340 g     O .data_tiny_fc	00000004 __rt_hyper_pending_tasks
1c013118 g     F .text	00000024 rt_event_push
1c012f16 g     F .text	00000022 __rt_bridge_clear_notif
1c011b74 g     F .text	00000104 flash_partition_table_load
00000014 g     O .data_tiny_l1	00000004 __rt_dma_first_pending
1c01764c g     O .data	000000c0 __hal_debug_struct
1c010430 g     F .text	00000012 pi_fs_conf_init
1c0126ac g     F .text	00000138 MD5_Final
1c0134d4 g     F .text	0000008c __rt_time_init
1c01440e g     F .text	0000002c __pi_hyper_pin_reset_settings
00080000 g       *ABS*	00000000 __L2
00000008 g       *ABS*	00000000 __rt_nb_pe
1c0000a0 g       .text	00000000 _entry
1c011aa2 g     F .text	0000005e pi_partition_find_first
1c0131a0 g     F .text	0000002c __rt_wait_event
1c007434 g     F .text	00000562 S55_Conv2d_64x32x3x3_Relu
1c013c36 g     F .text	000000bc __rt_pmu_init
1c0128ec g     F .text	0000000a bsp_hyperflash_conf_init
1c010486 g     F .text	00000008 pi_fs_read_async
1c015134 g     F .text	00000034 pi_pwm_ioctl
1c012b0e g     F .text	00000050 __rt_handle_illegal_instr
1c014f74 g     F .text	00000072 __pi_uart_init
1c0157ea g     F .text	00000010 memset
1c01464a g     F .text	00000058 __pi_hyper_copy_aligned
1c001062 g     F .text	00000012 main
00000354 g     O .data_tiny_fc	00000050 __rt_udma_channels
1c013d04 g     F .text	00000002 __rt_fll_deinit
1c0004a4 g       .text	00000000 udma_event_handler_end
1c017b7c g     O .bss	00000004 __rt_alloc_fc_tcdm
1c0153b0 g     F .text	0000000a __rt_himax_init
1c012d5a g     F .text	00000036 __rt_fc_cluster_unlock
00000318 g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat
1c015a7e g     F .text	00000072 __rt_io_init
1c017624  w    O .data	00000010 __rt_padframe_hyper_gpio
00000000 g       *ABS*	00000000 __FETCH_ALL
1c0128dc g     F .text	00000010 bsp_hyperram_open
1c0103fc g     F .text	00000002 __flash_conf_init
1c017714  w    O .data	00000004 __rt_platform
1c00d518 g     F .text	000001ee KerParConv1x1Stride2_DP_fp
1c00d8b0 g     F .text	000001de KerParConv3x3Stride2_DP_fp
1c016c0c g       .init_array	00000000 __CTOR_END__
1c015216 g     F .text	00000038 pi_gpio_pin_read
1c017548 g     O .data	00000028 __pi_read_fs_api
1c0143e2 g     F .text	0000002c __pi_hyper_pin_settings
1c0157a0 g     F .text	00000014 strcmp
1c012880 g     F .text	00000008 semihost_exit
1c016c0c g       .fini_array	00000000 __DTOR_LIST__
1c013026 g     F .text	00000028 __rt_event_init
000002e0 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback_arg
1c0005b6 g       .text	00000000 pwm_event_handler
00000348 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_size_2d
1c0159d6 g     F .text	00000028 _prf_locked
00000000 g       *ABS*	00000000 __USE_UART
1c014b68 g     F .text	00000008 __rt_hyper_resume_emu_task
1c003b44 g     F .text	0000059c S21_Conv2d_16x8x3x3_Relu
1c0139a4 g     F .text	000000e0 SetFllFrequency
1c013d06 g     F .text	00000002 __rt_flls_constructor
1c013436 g     F .text	0000007a rt_event_push_delayed
1c00010c g       .text	00000000 _fini
1c0119a8 g     F .text	0000005e extern_alloc
1c0131cc g     F .text	0000001a rt_event_wait
1c000090 g       .vectors	00000000 __rt_debug_struct_ptr
1c016c18 g     O .rodata	00000100 .hidden __clz_tab
00000328 g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_channel
1c0005da g       .text	00000000 __pi_uart_handle_copy_asm
1c016b14 g       .text	00000000 __rt_set_slave_stack
1c0131fa g     F .text	00000002 pi_task_push_delayed_us
1c0133d6 g     F .text	00000006 pi_cl_l1_malloc
1c01770c  w    O .data	00000004 __rt_fc_stack_size
1c008a8a g     F .text	00000540 S68_Conv2d_64x64x3x3
1c011b00 g     F .text	00000074 flash_partition_table_verify
1c0003f4 g       .text	00000000 __rt_fc_socevents_handler
000002b8 g     O .data_tiny_fc	00000028 __rt_udma_extra_callback
1c00bf16 g     F .text	000000d2 KerDP_IO_fp
1c009930 g     F .text	00001684 resnetCNN_Construct
000003a8 g     O .data_tiny_fc	00000034 dev_rtc
1c0104b4 g     F .text	00000008 pi_fs_write_async
1c00fd00 g     F .text	000000f2 KerParMatAdd_fp
1c00fa26 g     F .text	000002da KerParPoolNxNStrideS_fp
1c017570 g     O .data	00000028 __pi_host_fs_api
1c015072 g     F .text	0000000a rt_extern_alloc_deinit
1c01009c g     F .text	00000354 KerParSoftMax_fp
1c01435a g     F .text	0000001e pi_pad_init
1c0104e2 g     F .text	0000000a pi_fs_copy_async
1c000200 g       .text	00000000 __rt_call_external_c_function
1c012cee g     F .text	00000034 __rt_fc_unlock
1c011900 g     F .text	0000000c pi_ram_open
00000004 g       .data_tiny_l1	00000000 _l1_preload_start
1c015190 g     F .text	00000086 __pi_gpio_handler
000002b0 g     O .data_tiny_fc	00000008 __rt_socevents_status
1c012f38 g     F .text	00000042 __rt_bridge_printf_flush
1c01443a g     F .text	00000010 pi_hyper_conf_init
1c017aec  w    O .bss	00000004 __rt_iodev
0000001c g     O .data_tiny_fc	00000014 __rt_sched
1c000000 g       .vectors	00000000 __irq_vector_base
1c001074 g     F .text	0000041a ReadImageFromFile
1c017814 g       .data	00000000 _edata
00000000 g       *ABS*	00000000 __ZERO
1c0137dc g     F .text	0000005e __rt_periph_init
1c011a9c g     F .text	00000002 pi_partition_table_free
1c0153cc g     F .text	00000012 __rt_spim_init
1c012e8a g     F .text	0000004c __rt_bridge_check_connection
1c0140f6 g     F .text	00000090 rt_cluster_call
00000800 g       *ABS*	00000000 __rt_stack_size
1c014dfe g     F .text	00000062 __pi_uart_handle_copy
1c012abc g     F .text	00000004 pi_open_from_conf
ffffffff g       *ABS*	00000000 pulp__FC
1c01535e g     F .text	00000052 __rt_i2s_init
00000003 g       *ABS*	00000000 __rt_debug_init_config
1c001b04 g     F .text	0000060e S7_Conv2d_8x8x3x3_Relu
1c011c78 g     F .text	00000024 flash_partition_table_free
1c017b94 g     O .bss	00000028 __rt_fc_cluster_data
1c0159fe g     F .text	00000076 exit
1c0131e6 g     F .text	00000014 __rt_event_sched_init
0000034c g     O .data_tiny_fc	00000004 __rt_hyper_pending_emu_length
1c017ae8 g     O .bss	00000004 resnet_L3_Flash
1c0002b4 g       .text	00000000 udma_event_handler
1c013fdc g     F .text	00000032 pi_cluster_close
1c014b70 g     F .text	00000004 __rt_hyper_resume_copy
1c01771c g     O .data	00000004 resnet_L2_Memory
1c000ce0 g     F .text	00000382 start
000003a4 g     O .data_tiny_fc	00000004 pwmEventsStatus
1c01046e g     F .text	00000008 pi_fs_unmount
1c01286a g     F .text	00000016 semihost_seek
1c012c6a g     F .text	00000030 __rt_cbsys_exec
1c008fca g     F .text	000002a2 S69_MatAdd_64x5x5
0000ff9c g       .l1cluster_g	00000000 __l1_heap_size
1c013914 g     F .text	00000090 __rt_pmu_cluster_power_down
0000031c g     O .data_tiny_fc	00000004 __rt_hyper_pending_repeat_size
1b0007e8 g     O .stack	00000004 __rt_debug_config_trace
1c017af0  w    O .bss	00000004 __rt_iodev_uart_channel
1c0000a0 g       .text	00000000 _stext
1c01773c g     O .data	00000004 PMURetentionState
ffffffff g       *ABS*	00000000 pulp__L1CL
1c0040e0 g     F .text	000005de S24_Conv2d_16x8x1x1
1c0157d4 g     F .text	00000016 strlen
1c014fe6 g     F .text	00000028 rt_padframe_set
1c012826 g     F .text	00000008 semihost_close
1c014326 g     F .text	00000034 pi_pad_set_function
1c017b8c g     O .bss	00000004 __rt_wakeup_use_fast
1c002722 g     F .text	0000040a S11_MatAdd_8x39x39
00000400 g       *ABS*	00000000 __rt_cl_master_stack_size
1c015830 g     F .text	0000001a strchr
1c012f7a g     F .text	00000078 __rt_bridge_req_shutdown
1c01683e g     F .text	00000010 rt_uart_conf_init
1c01529e g     F .text	00000036 pi_gpio_pin_configure
1c016bc8 g       .text	00000000 __cluster_text_end
1c01695e g     F .text	0000005c __rt_uart_init
1c017718 g     O .data	00000004 ImageIn
1c017c1c g       *ABS*	00000000 __l2_end
1c006372 g     F .text	000003d4 S44_Conv2d_32x32x3x3_Relu
1c014186 g     F .text	0000005c rt_cluster_mount
1c0153ba g     F .text	00000012 __rt_rtc_init
1c01692a g     F .text	00000034 rt_uart_cluster_write
1c011774 g     F .text	0000000c hyperram_free
1c000098 g       .vectors	00000000 __rt_semihosting_call
1c012610 g     F .text	0000009c MD5_Update
1b0007ec g     O .stack	00000004 __rt_debug_config
1c013d08 g     F .text	00000006 __rt_fll_set_freq
1c012c2c g     F .text	0000003e __rt_cbsys_add
1c01407e g     F .text	0000003c __rt_cluster_new
1c01584a g     F .text	0000005e __rt_putc_debug_bridge
1c016bc8 g       .text	00000000 _endtext
00000324 g     O .data_tiny_fc	00000004 __rt_hyper_current_task
1c0127fa g     F .text	0000002c semihost_open
ffffffff g       *ABS*	00000000 pulp__L1FC
1c017740 g     O .data	00000008 FllsFrequency
00000030 g     O .data_tiny_fc	00000280 periph_channels



Disassembly of section .vectors:

1c000000 <__irq_vector_base>:


#ifdef ARCHI_CORE_HAS_1_10
  j __rt_illegal_instr
#else
  j __rt_no_irq_handler
1c000000:	0940006f          	j	1c000094 <__rt_no_irq_handler>
#endif

  j __rt_no_irq_handler
1c000004:	0900006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000008:	08c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00000c:	0880006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000010:	0840006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000014:	0800006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000018:	07c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00001c:	0780006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000020:	0740006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000024:	0700006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000028:	06c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00002c:	0680006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000030:	0640006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000034:	0600006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000038:	05c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00003c:	0580006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000040:	0540006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000044:	0500006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000048:	04c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00004c:	0480006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000050:	0440006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000054:	0400006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000058:	03c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00005c:	0380006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000060:	0340006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000064:	0300006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000068:	02c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00006c:	0280006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000070:	0240006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000074:	0200006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c000078:	01c0006f          	j	1c000094 <__rt_no_irq_handler>
  j __rt_no_irq_handler
1c00007c:	0180006f          	j	1c000094 <__rt_no_irq_handler>

1c000080 <_start>:


  .org 0x80
  .global _start
_start:
  jal x0, _entry
1c000080:	0200006f          	j	1c0000a0 <_entry>


#ifndef __RT_MODE_BARE

  jal x0, __rt_illegal_instr
1c000084:	1c20006f          	j	1c000246 <__rt_illegal_instr>
	...

1c000090 <__rt_debug_struct_ptr>:
1c000090:	764c                	flw	fa1,44(a2)
1c000092:	1c01                	addi	s8,s8,-32

1c000094 <__rt_no_irq_handler>:
  .word __hal_debug_struct

#endif

__rt_no_irq_handler:
  j __rt_no_irq_handler
1c000094:	0000006f          	j	1c000094 <__rt_no_irq_handler>

1c000098 <__rt_semihosting_call>:

#endif

  .global __rt_semihosting_call
__rt_semihosting_call:
  ebreak
1c000098:	00100073          	ebreak
  jr          ra
1c00009c:	00008067          	ret

Disassembly of section .text:

1c0000a0 <_entry>:
  csrw    0x7A1, x0
1c0000a0:	7a101073          	csrw	pcmr,zero
  csrr    a0, 0xF14
1c0000a4:	f1402573          	csrr	a0,mhartid
  andi    a1, a0, 0x1f
1c0000a8:	01f57593          	andi	a1,a0,31
  srli    a0, a0, 5
1c0000ac:	8115                	srli	a0,a0,0x5
  li      a2, ARCHI_FC_CID
1c0000ae:	02000613          	li	a2,32
  bne     a0, a2, __rt_pe_start
1c0000b2:	00c50463          	beq	a0,a2,1c0000ba <_entry+0x1a>
1c0000b6:	1071606f          	j	1c0169bc <__cluster_text_start>
  la      t0, _bss_start
1c0000ba:	00017297          	auipc	t0,0x17
1c0000be:	75e28293          	addi	t0,t0,1886 # 1c017818 <_bss_start>
  la      t1, _bss_end
1c0000c2:	00018317          	auipc	t1,0x18
1c0000c6:	afa30313          	addi	t1,t1,-1286 # 1c017bbc <_bss_end>
  sw      zero,0(t0)
1c0000ca:	0002a023          	sw	zero,0(t0)
  addi    t0, t0, 4
1c0000ce:	0291                	addi	t0,t0,4
  bltu    t0, t1, 1b
1c0000d0:	fe62ede3          	bltu	t0,t1,1c0000ca <_entry+0x2a>
  la   a0, __rt_fc_stack_size
1c0000d4:	00017517          	auipc	a0,0x17
1c0000d8:	63850513          	addi	a0,a0,1592 # 1c01770c <__rt_fc_stack_size>
  lw   a0, 0(a0)
1c0000dc:	4108                	lw	a0,0(a0)
  la   x2, __rt_fc_stack
1c0000de:	ff000117          	auipc	sp,0xff000
1c0000e2:	30a10113          	addi	sp,sp,778 # 1b0003e8 <__rt_fc_stack>
  add  x2, x2, a0
1c0000e6:	912a                	add	sp,sp,a0
  jal  x1, __rt_init
1c0000e8:	045120ef          	jal	ra,1c01292c <__rt_init>
  addi  a0, x0, 0
1c0000ec:	00000513          	li	a0,0
  addi  a1, x0, 0
1c0000f0:	00000593          	li	a1,0
  la    t2, main
1c0000f4:	00001397          	auipc	t2,0x1
1c0000f8:	f6e38393          	addi	t2,t2,-146 # 1c001062 <main>
  jalr  x1, t2
1c0000fc:	000380e7          	jalr	t2
  mv    s0, a0
1c000100:	842a                	mv	s0,a0
  jal  x1, __rt_deinit
1c000102:	193120ef          	jal	ra,1c012a94 <__rt_deinit>
  mv   a0, s0
1c000106:	8522                	mv	a0,s0
  jal  x1, exit
1c000108:	0f7150ef          	jal	ra,1c0159fe <exit>

1c00010c <_fini>:
  ret
1c00010c:	8082                	ret

1c00010e <__rt_event_enqueue>:
  //   x10/a0: temporary register
  //   x11/a1: the event
  //   x12/a2: temporary register

  // First check if it is a normal event
  andi    x10, x11, 0x3
1c00010e:	0035f513          	andi	a0,a1,3
  bne     x10, x0, __rt_handle_special_event
1c000112:	02051063          	bnez	a0,1c000132 <__rt_handle_special_event>

  // Enqueue normal event
  la      x10, __rt_sched
1c000116:	e4000517          	auipc	a0,0xe4000
1c00011a:	f0650513          	addi	a0,a0,-250 # 1c <__rt_sched>
  sw      x0, RT_EVENT_T_NEXT(x11)
1c00011e:	0005a023          	sw	zero,0(a1)
  lw      x12, RT_SCHED_T_FIRST(x10)
1c000122:	4110                	lw	a2,0(a0)
  beqz    x12, __rt_no_first
1c000124:	c601                	beqz	a2,1c00012c <__rt_no_first>
  lw      x12, RT_SCHED_T_LAST(x10)
1c000126:	4150                	lw	a2,4(a0)
  sw      x11, RT_EVENT_T_NEXT(x12)
1c000128:	c20c                	sw	a1,0(a2)
  j       __rt_common
1c00012a:	a011                	j	1c00012e <__rt_common>

1c00012c <__rt_no_first>:

__rt_no_first:
  sw      x11, RT_SCHED_T_FIRST(x10)
1c00012c:	c10c                	sw	a1,0(a0)

1c00012e <__rt_common>:

__rt_common:
  sw      x11, RT_SCHED_T_LAST(x10)
1c00012e:	c14c                	sw	a1,4(a0)

1c000130 <enqueue_end>:

enqueue_end:
  jr          x9
1c000130:	8482                	jr	s1

1c000132 <__rt_handle_special_event>:

__rt_handle_special_event:
  li      x10, ~0x3
1c000132:	5571                	li	a0,-4
  and     x11, x11, x10
1c000134:	8de9                	and	a1,a1,a0
  lw      x12, PI_CALLBACK_T_ENTRY(x11)
1c000136:	41d0                	lw	a2,4(a1)
  lw      x10, PI_CALLBACK_T_ARG(x11)
1c000138:	4588                	lw	a0,8(a1)
  j       __rt_call_external_c_function
1c00013a:	a0d9                	j	1c000200 <__rt_call_external_c_function>

1c00013c <__rt_bridge_enqueue_event>:
    // to enqueue an event to the FC scheduler.

    .global __rt_bridge_enqueue_event
__rt_bridge_enqueue_event:

    sw  x8, -4(sp)
1c00013c:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000140:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c000144:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000148:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c00014c:	fec12623          	sw	a2,-20(sp)

    // Everything is done from C code
    la      x12, __rt_bridge_handle_notif
1c000150:	00013617          	auipc	a2,0x13
1c000154:	cc260613          	addi	a2,a2,-830 # 1c012e12 <__rt_bridge_handle_notif>
    jal     x9, __rt_call_external_c_function
1c000158:	0a8004ef          	jal	s1,1c000200 <__rt_call_external_c_function>

    lw  x8, -4(sp)
1c00015c:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c000160:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c000164:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c000168:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c00016c:	fec12603          	lw	a2,-20(sp)

    mret
1c000170:	30200073          	mret

1c000174 <__rt_remote_enqueue_event>:
    // The FC must get it and push it to the scheduler

    .global __rt_remote_enqueue_event
__rt_remote_enqueue_event:

    sw  x8, -4(sp)
1c000174:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c000178:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c00017c:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c000180:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c000184:	fec12623          	sw	a2,-20(sp)

#ifndef ARCHI_NB_CLUSTER
    li   x8, 1
1c000188:	4405                	li	s0,1
#else
    li   x8, ARCHI_NB_CLUSTER
#endif
    la   x9, __rt_fc_cluster_data
1c00018a:	00018497          	auipc	s1,0x18
1c00018e:	a0a48493          	addi	s1,s1,-1526 # 1c017b94 <__rt_fc_cluster_data>

1c000192 <__rt_remote_enqueue_event_loop_cluster>:

    // Loop over the clusters to see if there is an event to push
__rt_remote_enqueue_event_loop_cluster:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c000192:	40cc                	lw	a1,4(s1)
    beq  a1, x0, __rt_remote_enqueue_event_loop_cluster_continue
1c000194:	02058d63          	beqz	a1,1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>

    // Everytime a task is finished, first check if we can update the queue head
    // as it is not updated by cluster side to avoid race conditions.
    // At least this task won t be there anymore after we update, and maybe even
    // more tasks, which is not an issue, as we compare against the head.
    lw   a1, RT_FC_CLUSTER_DATA_T_CLUSTER_POOL(x9)
1c000198:	48cc                	lw	a1,20(s1)
    lw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c00019a:	41c8                	lw	a0,4(a1)

    beq  a0, x0, __rt_cluster_pool_update_end
1c00019c:	00050e63          	beqz	a0,1c0001b8 <__rt_cluster_pool_update_end>

1c0001a0 <__rt_cluster_pool_update_loop>:

__rt_cluster_pool_update_loop:
    lw    a2, RT_CLUSTER_TASK_PENDING(a0)
1c0001a0:	5150                	lw	a2,36(a0)
    bnez  a2, __rt_cluster_pool_update_loop_end
1c0001a2:	e219                	bnez	a2,1c0001a8 <__rt_cluster_pool_update_loop_end>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001a4:	5108                	lw	a0,32(a0)
    bnez a0, __rt_cluster_pool_update_loop
1c0001a6:	fd6d                	bnez	a0,1c0001a0 <__rt_cluster_pool_update_loop>

1c0001a8 <__rt_cluster_pool_update_loop_end>:


__rt_cluster_pool_update_loop_end:
    
    beqz a0, __rt_cluster_pool_update_no_current
1c0001a8:	c501                	beqz	a0,1c0001b0 <__rt_cluster_pool_update_no_current>

    lw   a0, RT_CLUSTER_TASK_NEXT(a0)
1c0001aa:	5108                	lw	a0,32(a0)
    sw   a0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001ac:	c1c8                	sw	a0,4(a1)

    j    __rt_cluster_pool_update_end
1c0001ae:	a029                	j	1c0001b8 <__rt_cluster_pool_update_end>

1c0001b0 <__rt_cluster_pool_update_no_current>:

__rt_cluster_pool_update_no_current:

    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_CALL_FC(a1)
1c0001b0:	0005a223          	sw	zero,4(a1)
    sw   x0, RT_CLUSTER_CALL_POOL_T_FIRST_LAST_FC(a1)
1c0001b4:	0005a423          	sw	zero,8(a1)

1c0001b8 <__rt_cluster_pool_update_end>:




__rt_cluster_pool_update_end:
    lw   a1, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001b8:	40cc                	lw	a1,4(s1)

    lw   a2, RT_FC_CLUSTER_DATA_T_TRIG_ADDR(x9)
1c0001ba:	4890                	lw	a2,16(s1)
    sw   x0, RT_FC_CLUSTER_DATA_T_EVENTS(x9)
1c0001bc:	0004a223          	sw	zero,4(s1)

    sw   x0, 0(a2)
1c0001c0:	00062023          	sw	zero,0(a2)

    la   x9, __rt_remote_enqueue_event_loop_cluster_continue
1c0001c4:	00000497          	auipc	s1,0x0
1c0001c8:	00a48493          	addi	s1,s1,10 # 1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>
    j    __rt_event_enqueue
1c0001cc:	b789                	j	1c00010e <__rt_event_enqueue>

1c0001ce <__rt_remote_enqueue_event_loop_cluster_continue>:

__rt_remote_enqueue_event_loop_cluster_continue:
    addi x8, x8, -1
1c0001ce:	147d                	addi	s0,s0,-1
    bgt  x8, x0, __rt_remote_enqueue_event_loop_next_cluster
1c0001d0:	00804e63          	bgtz	s0,1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>



    lw  x8, -4(sp)
1c0001d4:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c0001d8:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c0001dc:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c0001e0:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c0001e4:	fec12603          	lw	a2,-20(sp)

    mret
1c0001e8:	30200073          	mret

1c0001ec <__rt_remote_enqueue_event_loop_next_cluster>:

__rt_remote_enqueue_event_loop_next_cluster:
    la   x9, __rt_fc_cluster_data
1c0001ec:	00018497          	auipc	s1,0x18
1c0001f0:	9a848493          	addi	s1,s1,-1624 # 1c017b94 <__rt_fc_cluster_data>
    li   a1, RT_FC_CLUSTER_DATA_T_SIZEOF
1c0001f4:	02800593          	li	a1,40
    mul  a1, x8, a1
1c0001f8:	02b405b3          	mul	a1,s0,a1
    add  x9, x9, a1
1c0001fc:	94ae                	add	s1,s1,a1
    j __rt_remote_enqueue_event_loop_cluster
1c0001fe:	bf51                	j	1c000192 <__rt_remote_enqueue_event_loop_cluster>

1c000200 <__rt_call_external_c_function>:
#endif

  .global __rt_call_external_c_function
__rt_call_external_c_function:

    add  sp, sp, -128
1c000200:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000202:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c000204:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c000206:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c000208:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c00020a:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c00020c:	ca1e                	sw	t2,20(sp)
    sw   a3, 0x24(sp)
1c00020e:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c000210:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c000212:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c000214:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000216:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000218:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c00021a:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c00021c:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c00021e:	c6fe                	sw	t6,76(sp)

    jalr ra, a2
1c000220:	000600e7          	jalr	a2

    lw   ra, 0x00(sp)
1c000224:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000226:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000228:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c00022a:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c00022c:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c00022e:	43d2                	lw	t2,20(sp)
    lw   a3, 0x24(sp)
1c000230:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c000232:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c000234:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c000236:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c000238:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c00023a:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c00023c:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c00023e:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c000240:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c000242:	6109                	addi	sp,sp,128

    jr   x9
1c000244:	8482                	jr	s1

1c000246 <__rt_illegal_instr>:

  .section .text
  
    .global __rt_illegal_instr
__rt_illegal_instr:
    sw   ra, -4(sp)
1c000246:	fe112e23          	sw	ra,-4(sp)
    sw   a0, -8(sp)
1c00024a:	fea12c23          	sw	a0,-8(sp)
    la   a0, __rt_handle_illegal_instr
1c00024e:	00013517          	auipc	a0,0x13
1c000252:	8c050513          	addi	a0,a0,-1856 # 1c012b0e <__rt_handle_illegal_instr>
    jal  ra, __rt_call_c_function
1c000256:	010000ef          	jal	ra,1c000266 <__rt_call_c_function>
    lw   ra, -4(sp)
1c00025a:	ffc12083          	lw	ra,-4(sp)
    lw   a0, -8(sp)
1c00025e:	ff812503          	lw	a0,-8(sp)
#if PULP_CORE == CORE_RISCV_V4
    mret
1c000262:	30200073          	mret

1c000266 <__rt_call_c_function>:
#endif


__rt_call_c_function:

    add  sp, sp, -128
1c000266:	7119                	addi	sp,sp,-128

    sw   ra, 0x00(sp)
1c000268:	c006                	sw	ra,0(sp)
    sw   gp, 0x04(sp)
1c00026a:	c20e                	sw	gp,4(sp)
    sw   tp, 0x08(sp)
1c00026c:	c412                	sw	tp,8(sp)
    sw   t0, 0x0C(sp)
1c00026e:	c616                	sw	t0,12(sp)
    sw   t1, 0x10(sp)
1c000270:	c81a                	sw	t1,16(sp)
    sw   t2, 0x14(sp)
1c000272:	ca1e                	sw	t2,20(sp)
    sw   a1, 0x1C(sp)
1c000274:	ce2e                	sw	a1,28(sp)
    sw   a2, 0x20(sp)
1c000276:	d032                	sw	a2,32(sp)
    sw   a3, 0x24(sp)
1c000278:	d236                	sw	a3,36(sp)
    sw   a4, 0x28(sp)
1c00027a:	d43a                	sw	a4,40(sp)
    sw   a5, 0x2C(sp)
1c00027c:	d63e                	sw	a5,44(sp)
    sw   a6, 0x30(sp)
1c00027e:	d842                	sw	a6,48(sp)
    sw   a7, 0x34(sp)
1c000280:	da46                	sw	a7,52(sp)
    sw   t3, 0x38(sp)
1c000282:	dc72                	sw	t3,56(sp)
    sw   t4, 0x3C(sp)
1c000284:	de76                	sw	t4,60(sp)
    sw   t5, 0x40(sp)
1c000286:	c0fa                	sw	t5,64(sp)
    sw   t6, 0x4C(sp)
1c000288:	c6fe                	sw	t6,76(sp)

    jalr ra, a0
1c00028a:	000500e7          	jalr	a0

    lw   ra, 0x00(sp)
1c00028e:	4082                	lw	ra,0(sp)
    lw   gp, 0x04(sp)
1c000290:	4192                	lw	gp,4(sp)
    lw   tp, 0x08(sp)
1c000292:	4222                	lw	tp,8(sp)
    lw   t0, 0x0C(sp)
1c000294:	42b2                	lw	t0,12(sp)
    lw   t1, 0x10(sp)
1c000296:	4342                	lw	t1,16(sp)
    lw   t2, 0x14(sp)
1c000298:	43d2                	lw	t2,20(sp)
    lw   a1, 0x1C(sp)
1c00029a:	45f2                	lw	a1,28(sp)
    lw   a2, 0x20(sp)
1c00029c:	5602                	lw	a2,32(sp)
    lw   a3, 0x24(sp)
1c00029e:	5692                	lw	a3,36(sp)
    lw   a4, 0x28(sp)
1c0002a0:	5722                	lw	a4,40(sp)
    lw   a5, 0x2C(sp)
1c0002a2:	57b2                	lw	a5,44(sp)
    lw   a6, 0x30(sp)
1c0002a4:	5842                	lw	a6,48(sp)
    lw   a7, 0x34(sp)
1c0002a6:	58d2                	lw	a7,52(sp)
    lw   t3, 0x38(sp)
1c0002a8:	5e62                	lw	t3,56(sp)
    lw   t4, 0x3C(sp)
1c0002aa:	5ef2                	lw	t4,60(sp)
    lw   t5, 0x40(sp)
1c0002ac:	4f06                	lw	t5,64(sp)
    lw   t6, 0x4C(sp)
1c0002ae:	4fb6                	lw	t6,76(sp)

    add  sp, sp, 128
1c0002b0:	6109                	addi	sp,sp,128

    jr   ra
1c0002b2:	8082                	ret

1c0002b4 <udma_event_handler>:

  .global udma_event_handler
udma_event_handler:

  // Dequeue the transfer which have just finished and mark it as done
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002b4:	4080                	lw	s0,0(s1)
  lw   x11, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)   // This is used later on, just put here to fill the slot
1c0002b6:	448c                	lw	a1,8(s1)
  beq  x8, x0, __rt_udma_no_copy                       // Special case where there is no copy, just register the event in the bitfield
1c0002b8:	08040f63          	beqz	s0,1c000356 <__rt_udma_no_copy>
  lw   x12, RT_PERIPH_COPY_T_REPEAT(x8)
1c0002bc:	4c50                	lw	a2,28(s0)
  lw   x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0002be:	4848                	lw	a0,20(s0)
  bne  x12, x0, repeat_transfer
1c0002c0:	04061f63          	bnez	a2,1c00031e <dmaCmd>
  sw   x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0002c4:	c088                	sw	a0,0(s1)
  
  // Handle any special end-of-transfer control
  lw       x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0002c6:	4448                	lw	a0,12(s0)
  bnez     x10, handle_special_end
1c0002c8:	e15d                	bnez	a0,1c00036e <handle_special_end>

1c0002ca <resume_after_special_end>:
resume_after_special_end:


  // Now check if there are some transfers enqueued in the SW FIFO to be enqueued to the UDMA
  beq x11, x0, checkTask
1c0002ca:	02058f63          	beqz	a1,1c000308 <checkTask>

  // x9 contains the pointer to the channel and x11 the first copy

  // Update the FIFO pointers and just copy from node to UDMA
  lw  x12, RT_PERIPH_COPY_T_ENQUEUE_CALLBACK(x11)
1c0002ce:	4990                	lw	a2,16(a1)
  lw  x10, RT_PERIPH_COPY_T_NEXT(x11)
1c0002d0:	49c8                	lw	a0,20(a1)
  beqz x12, __rt_udma_call_enqueue_callback_resume
1c0002d2:	c611                	beqz	a2,1c0002de <__rt_udma_call_enqueue_callback_resume>

  la  x9, __rt_udma_call_enqueue_callback_resume
1c0002d4:	00000497          	auipc	s1,0x0
1c0002d8:	00a48493          	addi	s1,s1,10 # 1c0002de <__rt_udma_call_enqueue_callback_resume>
  jr  x12
1c0002dc:	8602                	jr	a2

1c0002de <__rt_udma_call_enqueue_callback_resume>:

__rt_udma_call_enqueue_callback_resume:
  lw  x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0002de:	44d0                	lw	a2,12(s1)
  sw  x10, RT_PERIPH_CHANNEL_T_FIRST_TO_ENQUEUE(x9)
1c0002e0:	c488                	sw	a0,8(s1)
  lw  x10, RT_PERIPH_COPY_T_ADDR(x11)
1c0002e2:	4188                	lw	a0,0(a1)
  lw  x9, RT_PERIPH_COPY_T_SIZE(x11)
1c0002e4:	41c4                	lw	s1,4(a1)
  sw  x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0002e6:	c208                	sw	a0,0(a2)
  sw  x9, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0002e8:	c244                	sw	s1,4(a2)

  lw  x9, RT_PERIPH_COPY_T_CTRL(x11)
1c0002ea:	45c4                	lw	s1,12(a1)
  andi x9, x9, (1<<RT_PERIPH_COPY_CTRL_TYPE_WIDTH)-1
1c0002ec:	88bd                	andi	s1,s1,15
  li  x10, RT_PERIPH_COPY_SPECIAL_ENQUEUE_THRESHOLD
1c0002ee:	4515                	li	a0,5
  blt x9, x10, transfer_resume
1c0002f0:	00a4ca63          	blt	s1,a0,1c000304 <transfer_resume>
  li          x10, RT_PERIPH_COPY_HYPER
  beq         x9, x10, hyper
  li          x10, RT_PERIPH_COPY_FC_TCDM
  beq         x9, x10, fc_tcdm
#else
  p.beqimm      x9, RT_PERIPH_COPY_HYPER, hyper
1c0002f4:	0064a463          	p.beqimm	s1,6,1c0002fc <dual>
  p.beqimm      x9, RT_PERIPH_COPY_FC_TCDM, fc_tcdm
1c0002f8:	0074a263          	p.beqimm	s1,7,1c0002fc <dual>

1c0002fc <dual>:
#ifdef RV_ISA_RV32
  li    x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and   x9, x12, x10
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
#else
  lw    x10, RT_PERIPH_COPY_T_HYPER_ADDR(x11)
1c0002fc:	51c8                	lw	a0,36(a1)
  p.bclr  x9, x12, 0, UDMA_CHANNEL_SIZE_LOG2
1c0002fe:	c04634b3          	p.bclr	s1,a2,0,4
#endif
  sw    x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000302:	d088                	sw	a0,32(s1)

1c000304 <transfer_resume>:
#endif

transfer_resume:
  lw  x10, RT_PERIPH_COPY_T_CFG(x11)
1c000304:	4588                	lw	a0,8(a1)
  sw  x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c000306:	c608                	sw	a0,8(a2)

1c000308 <checkTask>:

checkTask:

  // Check if we have a DMA transfer from L2 to L1   
  //lw          x10, RT_PERIPH_COPY_T_DMACMD(x8)           // Not null if we must transfer
  lw          x11, RT_PERIPH_COPY_T_EVENT(x8)             // Read this in advance to fill the slot, it is used later on in case there is no DMA command
1c000308:	4c0c                	lw	a1,24(s0)

  //bne         x10, zero, dmaCmd
  la          x9, udma_event_handler_end
1c00030a:	00000497          	auipc	s1,0x0
1c00030e:	19a48493          	addi	s1,s1,410 # 1c0004a4 <udma_event_handler_end>
  bne         x11, zero, __rt_event_enqueue
1c000312:	00058463          	beqz	a1,1c00031a <checkTask+0x12>
1c000316:	df9ff06f          	j	1c00010e <__rt_event_enqueue>

  // Loop again in case there are still events in the FIFO
  j udma_event_handler_end
1c00031a:	18a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00031e <dmaCmd>:
//   x12 : number of bytes to repeat
repeat_transfer:

#ifdef ARCHI_UDMA_HAS_HYPER

  lw      x11, RT_PERIPH_CHANNEL_T_BASE(x9)
1c00031e:	44cc                	lw	a1,12(s1)
#ifdef RV_ISA_RV32
  li      x10, ~(1<<UDMA_CHANNEL_SIZE_LOG2)
  and     x9, x11, x10
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
#else
  lw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c000320:	5048                	lw	a0,36(s0)
  p.bclr  x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c000322:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add     x10, x10, x12
1c000326:	9532                	add	a0,a0,a2
  sw      x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000328:	d088                	sw	a0,32(s1)
  sw      x10, RT_PERIPH_COPY_T_HYPER_ADDR(x8)
1c00032a:	d048                	sw	a0,36(s0)

  lw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c00032c:	4008                	lw	a0,0(s0)
  lw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c00032e:	5004                	lw	s1,32(s0)
  add     x10, x10, x12
1c000330:	9532                	add	a0,a0,a2
  sub     x9, x9, x12
1c000332:	8c91                	sub	s1,s1,a2
  blt     x12, x9, not_last
1c000334:	00964963          	blt	a2,s1,1c000346 <not_last>
  mv      x12, x9
1c000338:	8626                	mv	a2,s1
  sw      x0, RT_PERIPH_COPY_T_REPEAT(x8)
1c00033a:	00042e23          	sw	zero,28(s0)
  beq     x12, x0, udma_event_handler_end
1c00033e:	00061463          	bnez	a2,1c000346 <not_last>
1c000342:	1620006f          	j	1c0004a4 <udma_event_handler_end>

1c000346 <not_last>:

not_last:
  sw      x10, RT_PERIPH_COPY_T_ADDR(x8)
1c000346:	c008                	sw	a0,0(s0)
  sw      x9, RT_PERIPH_COPY_T_REPEAT_SIZE(x8)
1c000348:	d004                	sw	s1,32(s0)
  sw      x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c00034a:	c188                	sw	a0,0(a1)
  sw      x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00034c:	c1d0                	sw	a2,4(a1)

  li      x10, UDMA_CHANNEL_CFG_EN
1c00034e:	4541                	li	a0,16
  sw      x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c000350:	c588                	sw	a0,8(a1)

#endif

  j           udma_event_handler_end
1c000352:	1520006f          	j	1c0004a4 <udma_event_handler_end>

1c000356 <__rt_udma_no_copy>:




__rt_udma_no_copy:
  la      x9, __rt_socevents_status
1c000356:	e4000497          	auipc	s1,0xe4000
1c00035a:	f5a48493          	addi	s1,s1,-166 # 2b0 <__rt_socevents_status>
  lw      x8, 0(x9)
1c00035e:	4080                	lw	s0,0(s1)
  li      x11, 1
1c000360:	4585                	li	a1,1
  sll     x10, x11, x10
1c000362:	00a59533          	sll	a0,a1,a0
  or      x8, x8, x10
1c000366:	8c49                	or	s0,s0,a0
  sw      x8, 0(x9)
1c000368:	c080                	sw	s0,0(s1)
  j udma_event_handler_end
1c00036a:	13a0006f          	j	1c0004a4 <udma_event_handler_end>

1c00036e <handle_special_end>:
  li          x12, RT_PERIPH_COPY_I2C_STEP1
  beq         x10, x12, i2c_step1
  li          x12, RT_PERIPH_COPY_I2C_STEP2
  beq         x10, x12, i2c_step2
#else
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP1, i2c_step1  
1c00036e:	04352463          	p.beqimm	a0,3,1c0003b6 <i2c_step1>
  p.beqimm    x10, RT_PERIPH_COPY_I2C_STEP2, i2c_step2
1c000372:	06452063          	p.beqimm	a0,4,1c0003d2 <i2c_step2>
#endif

  j           resume_after_special_end
1c000376:	bf91                	j	1c0002ca <resume_after_special_end>

1c000378 <spim_step3>:


spim_step3:
  // The current copy was enqueued to configure spi, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c000378:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c00037a:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00037c:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00037e:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000380:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c000382:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL2(x8)
1c000384:	5448                	lw	a0,44(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c000386:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c000388:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c00038a:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c00038c:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c00038e:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c000390:	1140006f          	j	1c0004a4 <udma_event_handler_end>

1c000394 <spim_step2>:

spim_step2:
  // Now that the user data has been pushed, we must push an EOT command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c000394:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000398:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c00039a:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c00039c:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c00039e:	4060                	lw	s0,68(s0)
  li          x12, SPI_CMD_EOT(0)
1c0003a0:	90000637          	lui	a2,0x90000
  sw          x12, 0(x8)
1c0003a4:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003a6:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003a8:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 4
1c0003aa:	4511                	li	a0,4
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ac:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ae:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003b0:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003b2:	0f20006f          	j	1c0004a4 <udma_event_handler_end>

1c0003b6 <i2c_step1>:
 */

i2c_step1:
  // The current copy was enqueued to configure i2c, cs and send command
  // now we need to reenqueue the same copy with the user buffer.
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL1(x8)
1c0003b6:	5408                	lw	a0,40(s0)
  sw          x10, RT_PERIPH_COPY_T_CTRL(x8)
1c0003b8:	c448                	sw	a0,12(s0)

  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003ba:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003bc:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003be:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003c0:	44d0                	lw	a2,12(s1)
  lw          x10, RT_PERIPH_COPY_T_ADDR(x8)
1c0003c2:	4008                	lw	a0,0(s0)
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003c4:	c208                	sw	a0,0(a2)
  lw          x10, RT_PERIPH_COPY_T_RAW_VAL0(x8)
1c0003c6:	5048                	lw	a0,36(s0)
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003c8:	c248                	sw	a0,4(a2)
  lw          x10, RT_PERIPH_COPY_T_CFG(x8)
1c0003ca:	4408                	lw	a0,8(s0)
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003cc:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003ce:	0d60006f          	j	1c0004a4 <udma_event_handler_end>

1c0003d2 <i2c_step2>:

i2c_step2:
  // Now that the user data has been pushed, we must push a STOP command
  sw          x0, RT_PERIPH_COPY_T_CTRL(x8)
1c0003d2:	00042623          	sw	zero,12(s0)
  
  // Reenqueue the same copy to the list of pending copies as it has been removed
  lw          x10, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003d6:	4088                	lw	a0,0(s1)
  sw          x10, RT_PERIPH_COPY_T_NEXT(x8)
1c0003d8:	c848                	sw	a0,20(s0)
  sw          x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c0003da:	c080                	sw	s0,0(s1)

  // And rearm the transfer in the udma
  #if PULP_CHIP_FAMILY == CHIP_GAP

  lw          x8, RT_PERIPH_COPY_T_PERIPH_DATA(x8)
1c0003dc:	4060                	lw	s0,68(s0)
  li          x12, I2C_CMD_STOP
1c0003de:	02000613          	li	a2,32
  sw          x12, 0(x8)
1c0003e2:	c010                	sw	a2,0(s0)
  lw          x12, RT_PERIPH_CHANNEL_T_BASE(x9)
1c0003e4:	44d0                	lw	a2,12(s1)
  sw          x8, UDMA_CHANNEL_SADDR_OFFSET(x12)
1c0003e6:	c200                	sw	s0,0(a2)
  addi        x10, x8, RT_PERIPH_COPY_T_PERIPH_DATA
  sw          x10, UDMA_CHANNEL_SADDR_OFFSET(x12)

  #endif

  li          x10, 1
1c0003e8:	4505                	li	a0,1
  sw          x10, UDMA_CHANNEL_SIZE_OFFSET(x12)
1c0003ea:	c248                	sw	a0,4(a2)
  li          x10, UDMA_CHANNEL_CFG_EN
1c0003ec:	4541                	li	a0,16
  sw          x10, UDMA_CHANNEL_CFG_OFFSET(x12)
1c0003ee:	c608                	sw	a0,8(a2)

  j           udma_event_handler_end
1c0003f0:	0b40006f          	j	1c0004a4 <udma_event_handler_end>

1c0003f4 <__rt_fc_socevents_handler>:

  .global __rt_fc_socevents_handler
  .extern pwm_event_handler
__rt_fc_socevents_handler:
// The stack is first adjusted to have stack-based load/store compressed
  add sp, sp, -128
1c0003f4:	7119                	addi	sp,sp,-128
  sw  x8, 0(sp)
1c0003f6:	c022                	sw	s0,0(sp)
  sw  x9, 4(sp)
1c0003f8:	c226                	sw	s1,4(sp)
  sw  x10, 8(sp)
1c0003fa:	c42a                	sw	a0,8(sp)
  sw  x11, 12(sp)
1c0003fc:	c62e                	sw	a1,12(sp)
  sw  x12, 16(sp)
1c0003fe:	c832                	sw	a2,16(sp)


  // Pop one element from the FIFO
  li  x8, ARCHI_EU_ADDR + EU_SOC_EVENTS_AREA_OFFSET + EU_SOC_EVENTS_CURRENT_EVENT
1c000400:	00201437          	lui	s0,0x201
1c000404:	f0040413          	addi	s0,s0,-256 # 200f00 <__L2+0x180f00>
  lw  x8, 0(x8)
1c000408:	4000                	lw	s0,0(s0)

  // Now that we popped the element, we can clear the soc event FIFO event as the FIFO is generating
  // an event as soon as the FIFO is not empty
  li  x9, 1<<PULP_SOC_EVENTS_EVENT
1c00040a:	080004b7          	lui	s1,0x8000
  li  x10, ARCHI_EU_DEMUX_ADDR + EU_CORE_BUFFER_CLEAR
1c00040e:	00204537          	lui	a0,0x204
1c000412:	02850513          	addi	a0,a0,40 # 204028 <__L2+0x184028>
  sw  x9, 0(x10)
1c000416:	c104                	sw	s1,0(a0)
  // Due to a HW bug in the core on Gap, we have to load this value early
#ifdef CONFIG_NO_FC_TINY
  la    x12, __rt_hyper_udma_handle
  lw    x12, 0(x12)
#else
  lw    x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000418:	30802603          	lw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif
#endif

  // Extract ID part
  p.extractu x10, x8, EU_SOC_EVENTS_EVENT_MASK_BITS-1, EU_SOC_EVENTS_EVENT_MASK_OFFSET
1c00041c:	ce041533          	p.extractu	a0,s0,7,0

#ifdef ARCHI_UDMA_HAS_HYPER
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0)), __rt_fc_socevents_not_hyper_rx
1c000420:	00653363          	p.bneimm	a0,6,1c000426 <__rt_fc_socevents_not_hyper_rx>
  jr x12
1c000424:	8602                	jr	a2

1c000426 <__rt_fc_socevents_not_hyper_rx>:

__rt_fc_socevents_not_hyper_rx:
  p.bneimm x10, UDMA_EVENT_ID(ARCHI_UDMA_HYPER_ID(0))+1, __rt_fc_socevents_not_hyper_tx
1c000426:	00753363          	p.bneimm	a0,7,1c00042c <__rt_fc_socevents_not_hyper_tx>
  jr x12
1c00042a:	8602                	jr	a2

1c00042c <__rt_fc_socevents_not_hyper_tx>:
#endif

__rt_fc_socevents_not_hyper_tx:

  // UDMA CHANNEL EVENTS
  li x9, ARCHI_SOC_EVENT_UDMA_NB_EVT
1c00042c:	44cd                	li	s1,19
  bge x10, x9, __rt_soc_evt_no_udma_channel
1c00042e:	00955c63          	ble	s1,a0,1c000446 <__rt_soc_evt_no_udma_channel>
  andi   x8, x10, 1
  srli   x10, x10, 1
  or     x10, x10, x8
#endif

  la     x8, periph_channels
1c000432:	e4000417          	auipc	s0,0xe4000
1c000436:	bfe40413          	addi	s0,s0,-1026 # 30 <periph_channels>
  slli   x9, x10, RT_PERIPH_CHANNEL_T_SIZEOF_LOG2
1c00043a:	00551493          	slli	s1,a0,0x5
  add    x9, x9, x8
1c00043e:	94a2                	add	s1,s1,s0

  lw   x11, RT_PERIPH_CHANNEL_T_CALLBACK(x9)
1c000440:	4ccc                	lw	a1,28(s1)
  lw   x8, RT_PERIPH_CHANNEL_T_FIRST(x9)
1c000442:	4080                	lw	s0,0(s1)

  jr   x11
1c000444:	8582                	jr	a1

1c000446 <__rt_soc_evt_no_udma_channel>:


__rt_soc_evt_no_udma_channel:

  li x9, ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT + ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT
1c000446:	44f9                	li	s1,30
  bge x10, x9, __rt_soc_evt_no_udma
1c000448:	00955b63          	ble	s1,a0,1c00045e <__rt_soc_evt_no_udma>

  addi x8, x10, -ARCHI_SOC_EVENT_UDMA_FIRST_EXTRA_EVT
1c00044c:	fec50413          	addi	s0,a0,-20
  slli x11, x8, 2
1c000450:	00241593          	slli	a1,s0,0x2
  la   x12, __rt_udma_extra_callback
  p.lw x12, x12(x11)
  la   x9, __rt_udma_extra_callback_arg
  p.lw x11, x9(x11)
#else
  lw   x12, %tiny(__rt_udma_extra_callback)(x11)
1c000454:	2b85a603          	lw	a2,696(a1)
  lw   x11, %tiny(__rt_udma_extra_callback_arg)(x11)
1c000458:	2e05a583          	lw	a1,736(a1)
#endif

  jr   x12
1c00045c:	8602                	jr	a2

1c00045e <__rt_soc_evt_no_udma>:

  .global __rt_soc_evt_no_udma
__rt_soc_evt_no_udma:
#ifdef RT_CONFIG_GPIO_ENABLED
  // GPIO EVENT
  li      x9, ARCHI_SOC_EVENT_GPIO
1c00045e:	02a00493          	li	s1,42
  beq     x10, x9, __rt_gpio_handler
1c000462:	00951463          	bne	a0,s1,1c00046a <__rt_soc_evt_no_udma+0xc>
1c000466:	18a0006f          	j	1c0005f0 <__rt_gpio_handler>
#endif

  li      x9, ARCHI_SOC_EVENT_RTC_IRQ
1c00046a:	02c00493          	li	s1,44
  beq     x9, x10, rtc_event_handler
1c00046e:	04a48363          	beq	s1,a0,1c0004b4 <rtc_event_handler>

1c000472 <__rt_soc_evt_pwm>:


// pwm event handler
//x9 : nb of event that will be used by handler
__rt_soc_evt_pwm:
  li x11, ARCHI_SOC_EVENT_ADV_TIMER_NB_EVT-1 // 3
1c000472:	458d                	li	a1,3
  addi x9, x11, ARCHI_SOC_EVENT_ADV_TIMER_FIRST_EVT //3+38=41
1c000474:	02658493          	addi	s1,a1,38
  sub x9, x9, x10 // 41 - 56
1c000478:	8c89                	sub	s1,s1,a0
  bgt x9, x11, __rt_soc_evt_store // if > 3 not for pwm
1c00047a:	0095c663          	blt	a1,s1,1c000486 <__rt_soc_evt_store>
  blt x9, x0,  __rt_soc_evt_store // if > 3 not for pwm
1c00047e:	0004c463          	bltz	s1,1c000486 <__rt_soc_evt_store>
  j pwm_event_handler
1c000482:	1340006f          	j	1c0005b6 <pwm_event_handler>

1c000486 <__rt_soc_evt_store>:


__rt_soc_evt_store:
  // If the event is not handled, store it in the soc event status mask
  la      x9, __rt_socevents_status
1c000486:	e4000497          	auipc	s1,0xe4000
1c00048a:	e2a48493          	addi	s1,s1,-470 # 2b0 <__rt_socevents_status>
  li      x11, 32
1c00048e:	02000593          	li	a1,32
  blt     x10, x11, socevents_set
1c000492:	00b54463          	blt	a0,a1,1c00049a <socevents_set>
  addi    x9, x9, 4
1c000496:	0491                	addi	s1,s1,4
  addi    x10, x10, -32
1c000498:	1501                	addi	a0,a0,-32

1c00049a <socevents_set>:

socevents_set:
  lw      x11, 0(x9)
1c00049a:	408c                	lw	a1,0(s1)
  p.bsetr x12, x11, x10
1c00049c:	80a5c633          	p.bsetr	a2,a1,a0
  sw      x12, 0(x9)
1c0004a0:	c090                	sw	a2,0(s1)
  j       udma_event_handler_end
1c0004a2:	a009                	j	1c0004a4 <udma_event_handler_end>

1c0004a4 <udma_event_handler_end>:

  .global udma_event_handler_end
udma_event_handler_end:
  lw  x8, 0(sp)
1c0004a4:	4402                	lw	s0,0(sp)
  lw  x9, 4(sp)
1c0004a6:	4492                	lw	s1,4(sp)
  lw  x10, 8(sp)
1c0004a8:	4522                	lw	a0,8(sp)
  lw  x11, 12(sp)
1c0004aa:	45b2                	lw	a1,12(sp)
  lw  x12, 16(sp)
1c0004ac:	4642                	lw	a2,16(sp)
  add sp, sp, 128
1c0004ae:	6109                	addi	sp,sp,128
  mret
1c0004b0:	30200073          	mret

1c0004b4 <rtc_event_handler>:


rtc_event_handler:
  lw    x11, __rtc_handler
1c0004b4:	e4000597          	auipc	a1,0xe4000
1c0004b8:	f2c5a583          	lw	a1,-212(a1) # 3e0 <__rtc_handler>
  la    x9, udma_event_handler_end
1c0004bc:	00000497          	auipc	s1,0x0
1c0004c0:	fe848493          	addi	s1,s1,-24 # 1c0004a4 <udma_event_handler_end>
  j   __rt_event_enqueue
1c0004c4:	c4bff06f          	j	1c00010e <__rt_event_enqueue>

1c0004c8 <__rt_hyper_handle_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  lw    x12, 0(x8)
#else
  lw    x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004c8:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beqz      x12, __rt_hyper_handle_copy_end
1c0004cc:	c621                	beqz	a2,1c000514 <__rt_hyper_handle_copy_end>

1c0004ce <__rt_hyper_repeat_copy>:

#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c0004ce:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004d2:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c0004d6:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c0004da:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c0004dc:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c0004de:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0004e2:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0004e6:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c0004ea:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c0004ec:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last
1c0004ee:	00964963          	blt	a2,s1,1c000500 <__rt_hyper_repeat_copy_not_last>
  mv        x12, x9
1c0004f2:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c0004f4:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c0004f8:	00061463          	bnez	a2,1c000500 <__rt_hyper_repeat_copy_not_last>
1c0004fc:	fa9ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000500 <__rt_hyper_repeat_copy_not_last>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000500:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c000504:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c000508:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c00050a:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c00050c:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c00050e:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c000510:	f95ff06f          	j	1c0004a4 <udma_event_handler_end>

1c000514 <__rt_hyper_handle_copy_end>:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_end_task
  lw        x11, 0(x8)
  sw        x0, 0(x8)
#else
  lw        x11, %tiny(__rt_hyper_end_task)(x0)
1c000514:	32002583          	lw	a1,800(zero) # 320 <__rt_hyper_end_task>
  sw        x0, %tiny(__rt_hyper_end_task)(x0)
1c000518:	32002023          	sw	zero,800(zero) # 320 <__rt_hyper_end_task>
#endif
  beqz      x11, __rt_hyper_handle_emu_task
1c00051c:	c589                	beqz	a1,1c000526 <__rt_hyper_handle_emu_task>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_current_task
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_current_task)(x0)
1c00051e:	32002223          	sw	zero,804(zero) # 324 <__rt_hyper_current_task>
#endif
  jal       x9, __rt_event_enqueue
1c000522:	bedff4ef          	jal	s1,1c00010e <__rt_event_enqueue>

1c000526 <__rt_hyper_handle_emu_task>:
__rt_hyper_handle_emu_task:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_emu_task
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_emu_task)(x0)
1c000526:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
#endif
  beqz      x10, __rt_hyper_handle_pending_tasks
1c00052a:	c919                	beqz	a0,1c000540 <__rt_hyper_handle_pending_tasks>

  la      x12, __rt_hyper_resume_emu_task
1c00052c:	00014617          	auipc	a2,0x14
1c000530:	63c60613          	addi	a2,a2,1596 # 1c014b68 <__rt_hyper_resume_emu_task>
  la        x9, udma_event_handler_end
1c000534:	00000497          	auipc	s1,0x0
1c000538:	f7048493          	addi	s1,s1,-144 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00053c:	cc5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000540 <__rt_hyper_handle_pending_tasks>:
__rt_hyper_handle_pending_tasks:
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_tasks
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_tasks)(x0)
1c000540:	34002503          	lw	a0,832(zero) # 340 <__rt_hyper_pending_tasks>
#endif
  beqz      x10, udma_event_handler_end
1c000544:	00051463          	bnez	a0,1c00054c <__rt_hyper_handle_pending_tasks+0xc>
1c000548:	f5dff06f          	j	1c0004a4 <udma_event_handler_end>

  la      x12, __rt_hyper_resume_copy
1c00054c:	00014617          	auipc	a2,0x14
1c000550:	62460613          	addi	a2,a2,1572 # 1c014b70 <__rt_hyper_resume_copy>
  la        x9, udma_event_handler_end
1c000554:	00000497          	auipc	s1,0x0
1c000558:	f5048493          	addi	s1,s1,-176 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c00055c:	ca5ff06f          	j	1c000200 <__rt_call_external_c_function>

1c000560 <__rt_hyper_handle_burst>:
  la        x8, __rt_hyper_pending_repeat
  lw        x12, 0(x8)
  la        x8, __rt_hyper_pending_base
  lw        x11, 0(x8)
#else
  lw        x12, %tiny(__rt_hyper_pending_repeat)(x0)
1c000560:	31802603          	lw	a2,792(zero) # 318 <__rt_hyper_pending_repeat>

  lw        x11, %tiny(__rt_hyper_pending_base)(x0)
1c000564:	30c02583          	lw	a1,780(zero) # 30c <__rt_hyper_pending_base>
#else
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_hyper_addr
  lw        x10, 0(x8)
#else
  lw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000568:	31002503          	lw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>
#endif
  p.bclr    x9, x11, 0, UDMA_CHANNEL_SIZE_LOG2
1c00056c:	c045b4b3          	p.bclr	s1,a1,0,4
#endif
  add       x10, x10, x12
1c000570:	9532                	add	a0,a0,a2
  sw        x10, HYPER_EXT_ADDR_CHANNEL_CUSTOM_OFFSET(x9)
1c000572:	d088                	sw	a0,32(s1)
  la        x8, __rt_hyper_pending_addr
  lw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  lw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_hyper_addr)(x0)
1c000574:	30a02823          	sw	a0,784(zero) # 310 <__rt_hyper_pending_hyper_addr>

  lw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c000578:	31402503          	lw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  lw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c00057c:	31c02483          	lw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  add       x10, x10, x12
1c000580:	9532                	add	a0,a0,a2
  sub       x9, x9, x12
1c000582:	8c91                	sub	s1,s1,a2
  blt       x12, x9, __rt_hyper_repeat_copy_not_last2
1c000584:	00964f63          	blt	a2,s1,1c0005a2 <__rt_hyper_repeat_copy_not_last2>

  la        x12, __rt_hyper_handle_copy
1c000588:	00000617          	auipc	a2,0x0
1c00058c:	f4060613          	addi	a2,a2,-192 # 1c0004c8 <__rt_hyper_handle_copy>
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_udma_handle
  sw        x12, 0(x8)
#else
  sw        x12, %tiny(__rt_hyper_udma_handle)(x0)
1c000590:	30c02423          	sw	a2,776(zero) # 308 <__rt_hyper_udma_handle>
#endif

  mv        x12, x9
1c000594:	8626                	mv	a2,s1
#ifdef CONFIG_NO_FC_TINY
  la        x8, __rt_hyper_pending_repeat
  sw        x0, 0(x8)
#else
  sw        x0, %tiny(__rt_hyper_pending_repeat)(x0)
1c000596:	30002c23          	sw	zero,792(zero) # 318 <__rt_hyper_pending_repeat>
#endif
  beq       x12, x0, udma_event_handler_end
1c00059a:	00061463          	bnez	a2,1c0005a2 <__rt_hyper_repeat_copy_not_last2>
1c00059e:	f07ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005a2 <__rt_hyper_repeat_copy_not_last2>:
  la        x8, __rt_hyper_pending_addr
  sw        x10, 0(x8)
  la        x8, __rt_hyper_pending_repeat_size
  sw        x9, 0(x8)
#else
  sw        x10, %tiny(__rt_hyper_pending_addr)(x0)
1c0005a2:	30a02a23          	sw	a0,788(zero) # 314 <__rt_hyper_pending_addr>
  sw        x9, %tiny(__rt_hyper_pending_repeat_size)(x0)
1c0005a6:	30902e23          	sw	s1,796(zero) # 31c <__rt_hyper_pending_repeat_size>
#endif
  sw        x10, UDMA_CHANNEL_SADDR_OFFSET(x11)
1c0005aa:	c188                	sw	a0,0(a1)
  sw        x12, UDMA_CHANNEL_SIZE_OFFSET(x11)
1c0005ac:	c1d0                	sw	a2,4(a1)

  li        x10, UDMA_CHANNEL_CFG_EN
1c0005ae:	4541                	li	a0,16
  sw        x10, UDMA_CHANNEL_CFG_OFFSET(x11)
1c0005b0:	c588                	sw	a0,8(a1)

  j         udma_event_handler_end
1c0005b2:	ef3ff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005b6 <pwm_event_handler>:
#include "archi/eu/eu_v3.h"

  .global pwm_event_handler
  .extern pwmEventsStatus
pwm_event_handler:
  la   x10, pwmEventsStatus
1c0005b6:	e4000517          	auipc	a0,0xe4000
1c0005ba:	dee50513          	addi	a0,a0,-530 # 3a4 <pwmEventsStatus>
  addi  x11, x0, 1
1c0005be:	00100593          	li	a1,1
  lw   x8, 0(x10)
1c0005c2:	4100                	lw	s0,0(a0)
  p.insertr x8, x11, x9
1c0005c4:	8095a433          	p.insertr	s0,a1,s1
  sw   x8, 0(x10)
1c0005c8:	c100                	sw	s0,0(a0)

  // continue with sw event raising
  li   x9, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + EU_CORE_TRIGG_SW_EVENT + (PLP_RT_NOTIF_EVENT << 2)
1c0005ca:	002044b7          	lui	s1,0x204
1c0005ce:	10c48493          	addi	s1,s1,268 # 20410c <__L2+0x18410c>
  li   x10, -1
1c0005d2:	557d                	li	a0,-1
  sw   x10, 0(x9)
1c0005d4:	c088                	sw	a0,0(s1)

  j udma_event_handler_end
1c0005d6:	ecfff06f          	j	1c0004a4 <udma_event_handler_end>

1c0005da <__pi_uart_handle_copy_asm>:
  .extern __pi_uart_handle_copy
  .global __pi_uart_handle_copy_asm
__pi_uart_handle_copy_asm:

//  mv        x11, x10
  mv        x11, x8
1c0005da:	85a2                	mv	a1,s0
  la        x12, __pi_uart_handle_copy
1c0005dc:	00015617          	auipc	a2,0x15
1c0005e0:	82260613          	addi	a2,a2,-2014 # 1c014dfe <__pi_uart_handle_copy>
  la        x9, udma_event_handler_end
1c0005e4:	00000497          	auipc	s1,0x0
1c0005e8:	ec048493          	addi	s1,s1,-320 # 1c0004a4 <udma_event_handler_end>
  j         __rt_call_external_c_function
1c0005ec:	c15ff06f          	j	1c000200 <__rt_call_external_c_function>

1c0005f0 <__rt_gpio_handler>:
  bnez     x8, __rt_gpio_ff1_loop
#endif

#else
  .extern __pi_gpio_handler
  mv        x11, x8
1c0005f0:	85a2                	mv	a1,s0
  la        x12, __pi_gpio_handler
1c0005f2:	00015617          	auipc	a2,0x15
1c0005f6:	b9e60613          	addi	a2,a2,-1122 # 1c015190 <__pi_gpio_handler>
  la        x9, __rt_gpio_handler_end
1c0005fa:	00000497          	auipc	s1,0x0
1c0005fe:	00c48493          	addi	s1,s1,12 # 1c000606 <__rt_gpio_handler_end>
  j         __rt_call_external_c_function
1c000602:	bffff06f          	j	1c000200 <__rt_call_external_c_function>

1c000606 <__rt_gpio_handler_end>:

  mret

#else

  j udma_event_handler_end
1c000606:	e9fff06f          	j	1c0004a4 <udma_event_handler_end>

1c00060a <__udivdi3>:
1c00060a:	87b2                	mv	a5,a2
1c00060c:	8736                	mv	a4,a3
1c00060e:	88aa                	mv	a7,a0
1c000610:	882e                	mv	a6,a1
1c000612:	1e069d63          	bnez	a3,1c00080c <__udivdi3+0x202>
1c000616:	1c017337          	lui	t1,0x1c017
1c00061a:	c1830313          	addi	t1,t1,-1000 # 1c016c18 <__DTOR_END__>
1c00061e:	0ac5fd63          	bleu	a2,a1,1c0006d8 <__udivdi3+0xce>
1c000622:	6741                	lui	a4,0x10
1c000624:	0ae67363          	bleu	a4,a2,1c0006ca <__udivdi3+0xc0>
1c000628:	0ff00693          	li	a3,255
1c00062c:	00c6b6b3          	sltu	a3,a3,a2
1c000630:	068e                	slli	a3,a3,0x3
1c000632:	00d65733          	srl	a4,a2,a3
1c000636:	933a                	add	t1,t1,a4
1c000638:	00034703          	lbu	a4,0(t1)
1c00063c:	02000313          	li	t1,32
1c000640:	96ba                	add	a3,a3,a4
1c000642:	40d30333          	sub	t1,t1,a3
1c000646:	00030c63          	beqz	t1,1c00065e <__udivdi3+0x54>
1c00064a:	00659733          	sll	a4,a1,t1
1c00064e:	00d556b3          	srl	a3,a0,a3
1c000652:	006617b3          	sll	a5,a2,t1
1c000656:	00e6e833          	or	a6,a3,a4
1c00065a:	006518b3          	sll	a7,a0,t1
1c00065e:	0107d513          	srli	a0,a5,0x10
1c000662:	02a85733          	divu	a4,a6,a0
1c000666:	1007d5b3          	p.exthz	a1,a5
1c00066a:	0108d693          	srli	a3,a7,0x10
1c00066e:	02a87633          	remu	a2,a6,a0
1c000672:	02e58833          	mul	a6,a1,a4
1c000676:	0642                	slli	a2,a2,0x10
1c000678:	8ed1                	or	a3,a3,a2
1c00067a:	863a                	mv	a2,a4
1c00067c:	0106fc63          	bleu	a6,a3,1c000694 <__udivdi3+0x8a>
1c000680:	96be                	add	a3,a3,a5
1c000682:	fff70613          	addi	a2,a4,-1 # ffff <__l1_heap_size+0x63>
1c000686:	00f6e763          	bltu	a3,a5,1c000694 <__udivdi3+0x8a>
1c00068a:	0106f563          	bleu	a6,a3,1c000694 <__udivdi3+0x8a>
1c00068e:	ffe70613          	addi	a2,a4,-2
1c000692:	96be                	add	a3,a3,a5
1c000694:	410686b3          	sub	a3,a3,a6
1c000698:	02a6f833          	remu	a6,a3,a0
1c00069c:	02a6d6b3          	divu	a3,a3,a0
1c0006a0:	df0828b3          	p.insert	a7,a6,15,16
1c0006a4:	02d58733          	mul	a4,a1,a3
1c0006a8:	8536                	mv	a0,a3
1c0006aa:	00e8fb63          	bleu	a4,a7,1c0006c0 <__udivdi3+0xb6>
1c0006ae:	98be                	add	a7,a7,a5
1c0006b0:	fff68513          	addi	a0,a3,-1
1c0006b4:	00f8e663          	bltu	a7,a5,1c0006c0 <__udivdi3+0xb6>
1c0006b8:	00e8f463          	bleu	a4,a7,1c0006c0 <__udivdi3+0xb6>
1c0006bc:	ffe68513          	addi	a0,a3,-2
1c0006c0:	01061793          	slli	a5,a2,0x10
1c0006c4:	8fc9                	or	a5,a5,a0
1c0006c6:	4801                	li	a6,0
1c0006c8:	a06d                	j	1c000772 <__udivdi3+0x168>
1c0006ca:	01000737          	lui	a4,0x1000
1c0006ce:	46c1                	li	a3,16
1c0006d0:	f6e661e3          	bltu	a2,a4,1c000632 <__udivdi3+0x28>
1c0006d4:	46e1                	li	a3,24
1c0006d6:	bfb1                	j	1c000632 <__udivdi3+0x28>
1c0006d8:	e601                	bnez	a2,1c0006e0 <__udivdi3+0xd6>
1c0006da:	4685                	li	a3,1
1c0006dc:	02c6d7b3          	divu	a5,a3,a2
1c0006e0:	66c1                	lui	a3,0x10
1c0006e2:	08d7fb63          	bleu	a3,a5,1c000778 <__udivdi3+0x16e>
1c0006e6:	0ff00693          	li	a3,255
1c0006ea:	00f6f363          	bleu	a5,a3,1c0006f0 <__udivdi3+0xe6>
1c0006ee:	4721                	li	a4,8
1c0006f0:	00e7d6b3          	srl	a3,a5,a4
1c0006f4:	9336                	add	t1,t1,a3
1c0006f6:	00034683          	lbu	a3,0(t1)
1c0006fa:	02000613          	li	a2,32
1c0006fe:	96ba                	add	a3,a3,a4
1c000700:	8e15                	sub	a2,a2,a3
1c000702:	e251                	bnez	a2,1c000786 <__udivdi3+0x17c>
1c000704:	40f58733          	sub	a4,a1,a5
1c000708:	4805                	li	a6,1
1c00070a:	0107d513          	srli	a0,a5,0x10
1c00070e:	1007d5b3          	p.exthz	a1,a5
1c000712:	0108d693          	srli	a3,a7,0x10
1c000716:	02a77633          	remu	a2,a4,a0
1c00071a:	02a75733          	divu	a4,a4,a0
1c00071e:	0642                	slli	a2,a2,0x10
1c000720:	8ed1                	or	a3,a3,a2
1c000722:	02e58333          	mul	t1,a1,a4
1c000726:	863a                	mv	a2,a4
1c000728:	0066fc63          	bleu	t1,a3,1c000740 <__udivdi3+0x136>
1c00072c:	96be                	add	a3,a3,a5
1c00072e:	fff70613          	addi	a2,a4,-1 # ffffff <__L2+0xf7ffff>
1c000732:	00f6e763          	bltu	a3,a5,1c000740 <__udivdi3+0x136>
1c000736:	0066f563          	bleu	t1,a3,1c000740 <__udivdi3+0x136>
1c00073a:	ffe70613          	addi	a2,a4,-2
1c00073e:	96be                	add	a3,a3,a5
1c000740:	406686b3          	sub	a3,a3,t1
1c000744:	02a6f333          	remu	t1,a3,a0
1c000748:	02a6d6b3          	divu	a3,a3,a0
1c00074c:	df0328b3          	p.insert	a7,t1,15,16
1c000750:	02d58733          	mul	a4,a1,a3
1c000754:	8536                	mv	a0,a3
1c000756:	00e8fb63          	bleu	a4,a7,1c00076c <__udivdi3+0x162>
1c00075a:	98be                	add	a7,a7,a5
1c00075c:	fff68513          	addi	a0,a3,-1 # ffff <__l1_heap_size+0x63>
1c000760:	00f8e663          	bltu	a7,a5,1c00076c <__udivdi3+0x162>
1c000764:	00e8f463          	bleu	a4,a7,1c00076c <__udivdi3+0x162>
1c000768:	ffe68513          	addi	a0,a3,-2
1c00076c:	01061793          	slli	a5,a2,0x10
1c000770:	8fc9                	or	a5,a5,a0
1c000772:	853e                	mv	a0,a5
1c000774:	85c2                	mv	a1,a6
1c000776:	8082                	ret
1c000778:	010006b7          	lui	a3,0x1000
1c00077c:	4741                	li	a4,16
1c00077e:	f6d7e9e3          	bltu	a5,a3,1c0006f0 <__udivdi3+0xe6>
1c000782:	4761                	li	a4,24
1c000784:	b7b5                	j	1c0006f0 <__udivdi3+0xe6>
1c000786:	00c797b3          	sll	a5,a5,a2
1c00078a:	00d5d333          	srl	t1,a1,a3
1c00078e:	0107de13          	srli	t3,a5,0x10
1c000792:	00c59733          	sll	a4,a1,a2
1c000796:	00c518b3          	sll	a7,a0,a2
1c00079a:	00d555b3          	srl	a1,a0,a3
1c00079e:	03c35533          	divu	a0,t1,t3
1c0007a2:	8dd9                	or	a1,a1,a4
1c0007a4:	1007d733          	p.exthz	a4,a5
1c0007a8:	0105d693          	srli	a3,a1,0x10
1c0007ac:	03c37633          	remu	a2,t1,t3
1c0007b0:	882a                	mv	a6,a0
1c0007b2:	02a70333          	mul	t1,a4,a0
1c0007b6:	0642                	slli	a2,a2,0x10
1c0007b8:	8ed1                	or	a3,a3,a2
1c0007ba:	0066fc63          	bleu	t1,a3,1c0007d2 <__udivdi3+0x1c8>
1c0007be:	96be                	add	a3,a3,a5
1c0007c0:	fff50813          	addi	a6,a0,-1
1c0007c4:	00f6e763          	bltu	a3,a5,1c0007d2 <__udivdi3+0x1c8>
1c0007c8:	0066f563          	bleu	t1,a3,1c0007d2 <__udivdi3+0x1c8>
1c0007cc:	ffe50813          	addi	a6,a0,-2
1c0007d0:	96be                	add	a3,a3,a5
1c0007d2:	406686b3          	sub	a3,a3,t1
1c0007d6:	03c6f633          	remu	a2,a3,t3
1c0007da:	03c6d6b3          	divu	a3,a3,t3
1c0007de:	df0625b3          	p.insert	a1,a2,15,16
1c0007e2:	02d70733          	mul	a4,a4,a3
1c0007e6:	8636                	mv	a2,a3
1c0007e8:	00e5fc63          	bleu	a4,a1,1c000800 <__udivdi3+0x1f6>
1c0007ec:	95be                	add	a1,a1,a5
1c0007ee:	fff68613          	addi	a2,a3,-1 # ffffff <__L2+0xf7ffff>
1c0007f2:	00f5e763          	bltu	a1,a5,1c000800 <__udivdi3+0x1f6>
1c0007f6:	00e5f563          	bleu	a4,a1,1c000800 <__udivdi3+0x1f6>
1c0007fa:	ffe68613          	addi	a2,a3,-2
1c0007fe:	95be                	add	a1,a1,a5
1c000800:	0842                	slli	a6,a6,0x10
1c000802:	40e58733          	sub	a4,a1,a4
1c000806:	00c86833          	or	a6,a6,a2
1c00080a:	b701                	j	1c00070a <__udivdi3+0x100>
1c00080c:	12d5ea63          	bltu	a1,a3,1c000940 <__udivdi3+0x336>
1c000810:	67c1                	lui	a5,0x10
1c000812:	02f6fd63          	bleu	a5,a3,1c00084c <__udivdi3+0x242>
1c000816:	0ff00793          	li	a5,255
1c00081a:	00d7b8b3          	sltu	a7,a5,a3
1c00081e:	088e                	slli	a7,a7,0x3
1c000820:	1c017737          	lui	a4,0x1c017
1c000824:	0116d7b3          	srl	a5,a3,a7
1c000828:	c1870713          	addi	a4,a4,-1000 # 1c016c18 <__DTOR_END__>
1c00082c:	97ba                	add	a5,a5,a4
1c00082e:	0007c783          	lbu	a5,0(a5) # 10000 <__L1Cl>
1c000832:	02000813          	li	a6,32
1c000836:	97c6                	add	a5,a5,a7
1c000838:	40f80833          	sub	a6,a6,a5
1c00083c:	00081f63          	bnez	a6,1c00085a <__udivdi3+0x250>
1c000840:	4785                	li	a5,1
1c000842:	f2b6e8e3          	bltu	a3,a1,1c000772 <__udivdi3+0x168>
1c000846:	04a637b3          	p.sletu	a5,a2,a0
1c00084a:	b725                	j	1c000772 <__udivdi3+0x168>
1c00084c:	010007b7          	lui	a5,0x1000
1c000850:	48c1                	li	a7,16
1c000852:	fcf6e7e3          	bltu	a3,a5,1c000820 <__udivdi3+0x216>
1c000856:	48e1                	li	a7,24
1c000858:	b7e1                	j	1c000820 <__udivdi3+0x216>
1c00085a:	00f658b3          	srl	a7,a2,a5
1c00085e:	010696b3          	sll	a3,a3,a6
1c000862:	00d8e6b3          	or	a3,a7,a3
1c000866:	00f5d333          	srl	t1,a1,a5
1c00086a:	0106de13          	srli	t3,a3,0x10
1c00086e:	00f55733          	srl	a4,a0,a5
1c000872:	03c377b3          	remu	a5,t1,t3
1c000876:	1006d8b3          	p.exthz	a7,a3
1c00087a:	010595b3          	sll	a1,a1,a6
1c00087e:	8f4d                	or	a4,a4,a1
1c000880:	01075593          	srli	a1,a4,0x10
1c000884:	01061633          	sll	a2,a2,a6
1c000888:	03c35333          	divu	t1,t1,t3
1c00088c:	07c2                	slli	a5,a5,0x10
1c00088e:	8ddd                	or	a1,a1,a5
1c000890:	02688eb3          	mul	t4,a7,t1
1c000894:	879a                	mv	a5,t1
1c000896:	01d5fc63          	bleu	t4,a1,1c0008ae <__udivdi3+0x2a4>
1c00089a:	95b6                	add	a1,a1,a3
1c00089c:	fff30793          	addi	a5,t1,-1
1c0008a0:	00d5e763          	bltu	a1,a3,1c0008ae <__udivdi3+0x2a4>
1c0008a4:	01d5f563          	bleu	t4,a1,1c0008ae <__udivdi3+0x2a4>
1c0008a8:	ffe30793          	addi	a5,t1,-2
1c0008ac:	95b6                	add	a1,a1,a3
1c0008ae:	41d585b3          	sub	a1,a1,t4
1c0008b2:	03c5f333          	remu	t1,a1,t3
1c0008b6:	03c5d5b3          	divu	a1,a1,t3
1c0008ba:	df032733          	p.insert	a4,t1,15,16
1c0008be:	02b888b3          	mul	a7,a7,a1
1c0008c2:	832e                	mv	t1,a1
1c0008c4:	01177c63          	bleu	a7,a4,1c0008dc <__udivdi3+0x2d2>
1c0008c8:	9736                	add	a4,a4,a3
1c0008ca:	fff58313          	addi	t1,a1,-1
1c0008ce:	00d76763          	bltu	a4,a3,1c0008dc <__udivdi3+0x2d2>
1c0008d2:	01177563          	bleu	a7,a4,1c0008dc <__udivdi3+0x2d2>
1c0008d6:	ffe58313          	addi	t1,a1,-2
1c0008da:	9736                	add	a4,a4,a3
1c0008dc:	07c2                	slli	a5,a5,0x10
1c0008de:	6e41                	lui	t3,0x10
1c0008e0:	0067e7b3          	or	a5,a5,t1
1c0008e4:	fffe0593          	addi	a1,t3,-1 # ffff <__l1_heap_size+0x63>
1c0008e8:	00b7f6b3          	and	a3,a5,a1
1c0008ec:	41170733          	sub	a4,a4,a7
1c0008f0:	8df1                	and	a1,a1,a2
1c0008f2:	0107d893          	srli	a7,a5,0x10
1c0008f6:	02b68333          	mul	t1,a3,a1
1c0008fa:	8241                	srli	a2,a2,0x10
1c0008fc:	02b885b3          	mul	a1,a7,a1
1c000900:	8eae                	mv	t4,a1
1c000902:	42c68eb3          	p.mac	t4,a3,a2
1c000906:	01035693          	srli	a3,t1,0x10
1c00090a:	96f6                	add	a3,a3,t4
1c00090c:	02c888b3          	mul	a7,a7,a2
1c000910:	00b6f363          	bleu	a1,a3,1c000916 <__udivdi3+0x30c>
1c000914:	98f2                	add	a7,a7,t3
1c000916:	0106d613          	srli	a2,a3,0x10
1c00091a:	98b2                	add	a7,a7,a2
1c00091c:	03176063          	bltu	a4,a7,1c00093c <__udivdi3+0x332>
1c000920:	db1713e3          	bne	a4,a7,1c0006c6 <__udivdi3+0xbc>
1c000924:	6741                	lui	a4,0x10
1c000926:	177d                	addi	a4,a4,-1
1c000928:	8ef9                	and	a3,a3,a4
1c00092a:	06c2                	slli	a3,a3,0x10
1c00092c:	00e37333          	and	t1,t1,a4
1c000930:	01051533          	sll	a0,a0,a6
1c000934:	969a                	add	a3,a3,t1
1c000936:	4801                	li	a6,0
1c000938:	e2d57de3          	bleu	a3,a0,1c000772 <__udivdi3+0x168>
1c00093c:	17fd                	addi	a5,a5,-1
1c00093e:	b361                	j	1c0006c6 <__udivdi3+0xbc>
1c000940:	4801                	li	a6,0
1c000942:	4781                	li	a5,0
1c000944:	b53d                	j	1c000772 <__udivdi3+0x168>

1c000946 <__umoddi3>:
1c000946:	88b2                	mv	a7,a2
1c000948:	8736                	mv	a4,a3
1c00094a:	87aa                	mv	a5,a0
1c00094c:	882e                	mv	a6,a1
1c00094e:	1a069963          	bnez	a3,1c000b00 <__umoddi3+0x1ba>
1c000952:	1c0176b7          	lui	a3,0x1c017
1c000956:	c1868693          	addi	a3,a3,-1000 # 1c016c18 <__DTOR_END__>
1c00095a:	0ac5f463          	bleu	a2,a1,1c000a02 <__umoddi3+0xbc>
1c00095e:	6341                	lui	t1,0x10
1c000960:	08667a63          	bleu	t1,a2,1c0009f4 <__umoddi3+0xae>
1c000964:	0ff00313          	li	t1,255
1c000968:	00c37363          	bleu	a2,t1,1c00096e <__umoddi3+0x28>
1c00096c:	4721                	li	a4,8
1c00096e:	00e65333          	srl	t1,a2,a4
1c000972:	969a                	add	a3,a3,t1
1c000974:	0006c683          	lbu	a3,0(a3)
1c000978:	02000313          	li	t1,32
1c00097c:	9736                	add	a4,a4,a3
1c00097e:	40e30333          	sub	t1,t1,a4
1c000982:	00030c63          	beqz	t1,1c00099a <__umoddi3+0x54>
1c000986:	006595b3          	sll	a1,a1,t1
1c00098a:	00e55733          	srl	a4,a0,a4
1c00098e:	006618b3          	sll	a7,a2,t1
1c000992:	00b76833          	or	a6,a4,a1
1c000996:	006517b3          	sll	a5,a0,t1
1c00099a:	0108d613          	srli	a2,a7,0x10
1c00099e:	02c87733          	remu	a4,a6,a2
1c0009a2:	1008d533          	p.exthz	a0,a7
1c0009a6:	0107d693          	srli	a3,a5,0x10
1c0009aa:	02c85833          	divu	a6,a6,a2
1c0009ae:	0742                	slli	a4,a4,0x10
1c0009b0:	8ed9                	or	a3,a3,a4
1c0009b2:	03050833          	mul	a6,a0,a6
1c0009b6:	0106f863          	bleu	a6,a3,1c0009c6 <__umoddi3+0x80>
1c0009ba:	96c6                	add	a3,a3,a7
1c0009bc:	0116e563          	bltu	a3,a7,1c0009c6 <__umoddi3+0x80>
1c0009c0:	0106f363          	bleu	a6,a3,1c0009c6 <__umoddi3+0x80>
1c0009c4:	96c6                	add	a3,a3,a7
1c0009c6:	410686b3          	sub	a3,a3,a6
1c0009ca:	02c6f733          	remu	a4,a3,a2
1c0009ce:	02c6d6b3          	divu	a3,a3,a2
1c0009d2:	df0727b3          	p.insert	a5,a4,15,16
1c0009d6:	02d506b3          	mul	a3,a0,a3
1c0009da:	00d7f863          	bleu	a3,a5,1c0009ea <__umoddi3+0xa4>
1c0009de:	97c6                	add	a5,a5,a7
1c0009e0:	0117e563          	bltu	a5,a7,1c0009ea <__umoddi3+0xa4>
1c0009e4:	00d7f363          	bleu	a3,a5,1c0009ea <__umoddi3+0xa4>
1c0009e8:	97c6                	add	a5,a5,a7
1c0009ea:	8f95                	sub	a5,a5,a3
1c0009ec:	0067d533          	srl	a0,a5,t1
1c0009f0:	4581                	li	a1,0
1c0009f2:	8082                	ret
1c0009f4:	01000337          	lui	t1,0x1000
1c0009f8:	4741                	li	a4,16
1c0009fa:	f6666ae3          	bltu	a2,t1,1c00096e <__umoddi3+0x28>
1c0009fe:	4761                	li	a4,24
1c000a00:	b7bd                	j	1c00096e <__umoddi3+0x28>
1c000a02:	e601                	bnez	a2,1c000a0a <__umoddi3+0xc4>
1c000a04:	4605                	li	a2,1
1c000a06:	031658b3          	divu	a7,a2,a7
1c000a0a:	6641                	lui	a2,0x10
1c000a0c:	06c8ff63          	bleu	a2,a7,1c000a8a <__umoddi3+0x144>
1c000a10:	0ff00613          	li	a2,255
1c000a14:	01167363          	bleu	a7,a2,1c000a1a <__umoddi3+0xd4>
1c000a18:	4721                	li	a4,8
1c000a1a:	00e8d633          	srl	a2,a7,a4
1c000a1e:	96b2                	add	a3,a3,a2
1c000a20:	0006c603          	lbu	a2,0(a3)
1c000a24:	02000313          	li	t1,32
1c000a28:	963a                	add	a2,a2,a4
1c000a2a:	40c30333          	sub	t1,t1,a2
1c000a2e:	06031563          	bnez	t1,1c000a98 <__umoddi3+0x152>
1c000a32:	411585b3          	sub	a1,a1,a7
1c000a36:	0108d713          	srli	a4,a7,0x10
1c000a3a:	1008d533          	p.exthz	a0,a7
1c000a3e:	0107d613          	srli	a2,a5,0x10
1c000a42:	02e5f6b3          	remu	a3,a1,a4
1c000a46:	02e5d5b3          	divu	a1,a1,a4
1c000a4a:	06c2                	slli	a3,a3,0x10
1c000a4c:	8ed1                	or	a3,a3,a2
1c000a4e:	02b505b3          	mul	a1,a0,a1
1c000a52:	00b6f863          	bleu	a1,a3,1c000a62 <__umoddi3+0x11c>
1c000a56:	96c6                	add	a3,a3,a7
1c000a58:	0116e563          	bltu	a3,a7,1c000a62 <__umoddi3+0x11c>
1c000a5c:	00b6f363          	bleu	a1,a3,1c000a62 <__umoddi3+0x11c>
1c000a60:	96c6                	add	a3,a3,a7
1c000a62:	40b685b3          	sub	a1,a3,a1
1c000a66:	02e5f6b3          	remu	a3,a1,a4
1c000a6a:	02e5d5b3          	divu	a1,a1,a4
1c000a6e:	df06a7b3          	p.insert	a5,a3,15,16
1c000a72:	02b505b3          	mul	a1,a0,a1
1c000a76:	00b7f863          	bleu	a1,a5,1c000a86 <__umoddi3+0x140>
1c000a7a:	97c6                	add	a5,a5,a7
1c000a7c:	0117e563          	bltu	a5,a7,1c000a86 <__umoddi3+0x140>
1c000a80:	00b7f363          	bleu	a1,a5,1c000a86 <__umoddi3+0x140>
1c000a84:	97c6                	add	a5,a5,a7
1c000a86:	8f8d                	sub	a5,a5,a1
1c000a88:	b795                	j	1c0009ec <__umoddi3+0xa6>
1c000a8a:	01000637          	lui	a2,0x1000
1c000a8e:	4741                	li	a4,16
1c000a90:	f8c8e5e3          	bltu	a7,a2,1c000a1a <__umoddi3+0xd4>
1c000a94:	4761                	li	a4,24
1c000a96:	b751                	j	1c000a1a <__umoddi3+0xd4>
1c000a98:	006898b3          	sll	a7,a7,t1
1c000a9c:	00c5d733          	srl	a4,a1,a2
1c000aa0:	006517b3          	sll	a5,a0,t1
1c000aa4:	00c55633          	srl	a2,a0,a2
1c000aa8:	006595b3          	sll	a1,a1,t1
1c000aac:	0108d513          	srli	a0,a7,0x10
1c000ab0:	8dd1                	or	a1,a1,a2
1c000ab2:	02a77633          	remu	a2,a4,a0
1c000ab6:	1008d833          	p.exthz	a6,a7
1c000aba:	0105d693          	srli	a3,a1,0x10
1c000abe:	02a75733          	divu	a4,a4,a0
1c000ac2:	0642                	slli	a2,a2,0x10
1c000ac4:	8ed1                	or	a3,a3,a2
1c000ac6:	02e80733          	mul	a4,a6,a4
1c000aca:	00e6f863          	bleu	a4,a3,1c000ada <__umoddi3+0x194>
1c000ace:	96c6                	add	a3,a3,a7
1c000ad0:	0116e563          	bltu	a3,a7,1c000ada <__umoddi3+0x194>
1c000ad4:	00e6f363          	bleu	a4,a3,1c000ada <__umoddi3+0x194>
1c000ad8:	96c6                	add	a3,a3,a7
1c000ada:	8e99                	sub	a3,a3,a4
1c000adc:	02a6f733          	remu	a4,a3,a0
1c000ae0:	02a6d6b3          	divu	a3,a3,a0
1c000ae4:	df0725b3          	p.insert	a1,a4,15,16
1c000ae8:	02d806b3          	mul	a3,a6,a3
1c000aec:	00d5f863          	bleu	a3,a1,1c000afc <__umoddi3+0x1b6>
1c000af0:	95c6                	add	a1,a1,a7
1c000af2:	0115e563          	bltu	a1,a7,1c000afc <__umoddi3+0x1b6>
1c000af6:	00d5f363          	bleu	a3,a1,1c000afc <__umoddi3+0x1b6>
1c000afa:	95c6                	add	a1,a1,a7
1c000afc:	8d95                	sub	a1,a1,a3
1c000afe:	bf25                	j	1c000a36 <__umoddi3+0xf0>
1c000b00:	eed5e9e3          	bltu	a1,a3,1c0009f2 <__umoddi3+0xac>
1c000b04:	6741                	lui	a4,0x10
1c000b06:	04e6f563          	bleu	a4,a3,1c000b50 <__umoddi3+0x20a>
1c000b0a:	0ff00e93          	li	t4,255
1c000b0e:	00deb733          	sltu	a4,t4,a3
1c000b12:	070e                	slli	a4,a4,0x3
1c000b14:	1c017337          	lui	t1,0x1c017
1c000b18:	00e6d8b3          	srl	a7,a3,a4
1c000b1c:	c1830313          	addi	t1,t1,-1000 # 1c016c18 <__DTOR_END__>
1c000b20:	989a                	add	a7,a7,t1
1c000b22:	0008ce83          	lbu	t4,0(a7)
1c000b26:	02000e13          	li	t3,32
1c000b2a:	9eba                	add	t4,t4,a4
1c000b2c:	41de0e33          	sub	t3,t3,t4
1c000b30:	020e1763          	bnez	t3,1c000b5e <__umoddi3+0x218>
1c000b34:	00b6e463          	bltu	a3,a1,1c000b3c <__umoddi3+0x1f6>
1c000b38:	00c56963          	bltu	a0,a2,1c000b4a <__umoddi3+0x204>
1c000b3c:	40c507b3          	sub	a5,a0,a2
1c000b40:	8d95                	sub	a1,a1,a3
1c000b42:	00f53533          	sltu	a0,a0,a5
1c000b46:	40a58833          	sub	a6,a1,a0
1c000b4a:	853e                	mv	a0,a5
1c000b4c:	85c2                	mv	a1,a6
1c000b4e:	b555                	j	1c0009f2 <__umoddi3+0xac>
1c000b50:	010008b7          	lui	a7,0x1000
1c000b54:	4741                	li	a4,16
1c000b56:	fb16efe3          	bltu	a3,a7,1c000b14 <__umoddi3+0x1ce>
1c000b5a:	4761                	li	a4,24
1c000b5c:	bf65                	j	1c000b14 <__umoddi3+0x1ce>
1c000b5e:	01d65733          	srl	a4,a2,t4
1c000b62:	01c696b3          	sll	a3,a3,t3
1c000b66:	8ed9                	or	a3,a3,a4
1c000b68:	01d5d7b3          	srl	a5,a1,t4
1c000b6c:	0106d813          	srli	a6,a3,0x10
1c000b70:	0307f333          	remu	t1,a5,a6
1c000b74:	1006d733          	p.exthz	a4,a3
1c000b78:	01d558b3          	srl	a7,a0,t4
1c000b7c:	01c595b3          	sll	a1,a1,t3
1c000b80:	00b8e5b3          	or	a1,a7,a1
1c000b84:	0105d893          	srli	a7,a1,0x10
1c000b88:	01c61633          	sll	a2,a2,t3
1c000b8c:	01c51533          	sll	a0,a0,t3
1c000b90:	0307d7b3          	divu	a5,a5,a6
1c000b94:	0342                	slli	t1,t1,0x10
1c000b96:	011368b3          	or	a7,t1,a7
1c000b9a:	02f70f33          	mul	t5,a4,a5
1c000b9e:	833e                	mv	t1,a5
1c000ba0:	01e8fc63          	bleu	t5,a7,1c000bb8 <__umoddi3+0x272>
1c000ba4:	98b6                	add	a7,a7,a3
1c000ba6:	fff78313          	addi	t1,a5,-1 # ffffff <__L2+0xf7ffff>
1c000baa:	00d8e763          	bltu	a7,a3,1c000bb8 <__umoddi3+0x272>
1c000bae:	01e8f563          	bleu	t5,a7,1c000bb8 <__umoddi3+0x272>
1c000bb2:	ffe78313          	addi	t1,a5,-2
1c000bb6:	98b6                	add	a7,a7,a3
1c000bb8:	41e888b3          	sub	a7,a7,t5
1c000bbc:	0308f7b3          	remu	a5,a7,a6
1c000bc0:	0308d8b3          	divu	a7,a7,a6
1c000bc4:	df07a5b3          	p.insert	a1,a5,15,16
1c000bc8:	03170733          	mul	a4,a4,a7
1c000bcc:	87c6                	mv	a5,a7
1c000bce:	00e5fc63          	bleu	a4,a1,1c000be6 <__umoddi3+0x2a0>
1c000bd2:	95b6                	add	a1,a1,a3
1c000bd4:	fff88793          	addi	a5,a7,-1 # ffffff <__L2+0xf7ffff>
1c000bd8:	00d5e763          	bltu	a1,a3,1c000be6 <__umoddi3+0x2a0>
1c000bdc:	00e5f563          	bleu	a4,a1,1c000be6 <__umoddi3+0x2a0>
1c000be0:	ffe88793          	addi	a5,a7,-2
1c000be4:	95b6                	add	a1,a1,a3
1c000be6:	0342                	slli	t1,t1,0x10
1c000be8:	6f41                	lui	t5,0x10
1c000bea:	00f36333          	or	t1,t1,a5
1c000bee:	ffff0793          	addi	a5,t5,-1 # ffff <__l1_heap_size+0x63>
1c000bf2:	00f37833          	and	a6,t1,a5
1c000bf6:	01035313          	srli	t1,t1,0x10
1c000bfa:	8ff1                	and	a5,a5,a2
1c000bfc:	02f808b3          	mul	a7,a6,a5
1c000c00:	8d99                	sub	a1,a1,a4
1c000c02:	01065713          	srli	a4,a2,0x10
1c000c06:	02f307b3          	mul	a5,t1,a5
1c000c0a:	8fbe                	mv	t6,a5
1c000c0c:	42e80fb3          	p.mac	t6,a6,a4
1c000c10:	0108d813          	srli	a6,a7,0x10
1c000c14:	987e                	add	a6,a6,t6
1c000c16:	02e30333          	mul	t1,t1,a4
1c000c1a:	00f87363          	bleu	a5,a6,1c000c20 <__umoddi3+0x2da>
1c000c1e:	937a                	add	t1,t1,t5
1c000c20:	01085713          	srli	a4,a6,0x10
1c000c24:	933a                	add	t1,t1,a4
1c000c26:	6741                	lui	a4,0x10
1c000c28:	177d                	addi	a4,a4,-1
1c000c2a:	00e87833          	and	a6,a6,a4
1c000c2e:	0842                	slli	a6,a6,0x10
1c000c30:	00e8f733          	and	a4,a7,a4
1c000c34:	9742                	add	a4,a4,a6
1c000c36:	0065e663          	bltu	a1,t1,1c000c42 <__umoddi3+0x2fc>
1c000c3a:	00659d63          	bne	a1,t1,1c000c54 <__umoddi3+0x30e>
1c000c3e:	00e57b63          	bleu	a4,a0,1c000c54 <__umoddi3+0x30e>
1c000c42:	40c70633          	sub	a2,a4,a2
1c000c46:	00c73733          	sltu	a4,a4,a2
1c000c4a:	40d30333          	sub	t1,t1,a3
1c000c4e:	40e30333          	sub	t1,t1,a4
1c000c52:	8732                	mv	a4,a2
1c000c54:	40e50733          	sub	a4,a0,a4
1c000c58:	00e53533          	sltu	a0,a0,a4
1c000c5c:	406585b3          	sub	a1,a1,t1
1c000c60:	8d89                	sub	a1,a1,a0
1c000c62:	01d597b3          	sll	a5,a1,t4
1c000c66:	01c75733          	srl	a4,a4,t3
1c000c6a:	00e7e533          	or	a0,a5,a4
1c000c6e:	01c5d5b3          	srl	a1,a1,t3
1c000c72:	b341                	j	1c0009f2 <__umoddi3+0xac>

1c000c74 <RunNN>:
short int * Output;
char model_name[] = "resnet.tflite";

static void RunNN()
{
    printf("===RunNN===");
1c000c74:	1c017537          	lui	a0,0x1c017
{
1c000c78:	1141                	addi	sp,sp,-16
    printf("===RunNN===");
1c000c7a:	d1850513          	addi	a0,a0,-744 # 1c016d18 <__clz_tab+0x100>
{
1c000c7e:	c606                	sw	ra,12(sp)
1c000c80:	c422                	sw	s0,8(sp)
1c000c82:	c226                	sw	s1,4(sp)
    printf("===RunNN===");
1c000c84:	66d140ef          	jal	ra,1c015af0 <printf>

/* Configure the active events. eventMask is an OR of events got through SPR_PCER_EVENT_MASK */
static inline void cpu_perf_conf_events(unsigned int eventMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A0, %0" : "+r" (eventMask));
1c000c88:	67c1                	lui	a5,0x10
1c000c8a:	7a079073          	csrw	pcer,a5

static inline uint32_t timer_cmp_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_CMP_HI_OFFSET); }
static inline void timer_cmp_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_HI_OFFSET, value); }

static inline uint32_t timer_start_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_LO_OFFSET); }
static inline void timer_start_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_LO_OFFSET, value); }
1c000c8e:	10200437          	lui	s0,0x10200
1c000c92:	40040413          	addi	s0,s0,1024 # 10200400 <__l1_end+0x20039c>
1c000c96:	4785                	li	a5,1
1c000c98:	00f42c23          	sw	a5,24(s0)

/* Configure the mode. confMask is an OR of all SPR_PCMR_* macros */
static inline void cpu_perf_conf(unsigned int confMask)
{
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x7A1, %0" :: "r" (confMask));
1c000c9c:	478d                	li	a5,3
1c000c9e:	7a179073          	csrw	pcmr,a5

static inline uint32_t timer_start_hi_get(uint32_t base) { return ARCHI_READ(base, TIMER_START_HI_OFFSET); }
static inline void timer_start_hi_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_START_HI_OFFSET, value); }

static inline uint32_t timer_reset_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_RESET_LO_OFFSET); }
static inline void timer_reset_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_RESET_LO_OFFSET, value); }
1c000ca2:	4785                	li	a5,1
1c000ca4:	02f42023          	sw	a5,32(s0)
}

/* Set all counters to the specified value */
static inline void cpu_perf_setall(unsigned int value) {
#ifndef PLP_NO_PERF_COUNTERS
  asm volatile ("csrw 0x79F, %0" :: "r" (value));
1c000ca8:	4781                	li	a5,0
1c000caa:	79f79073          	csrw	pccr31,a5
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c000cae:	00842483          	lw	s1,8(s0)
    unsigned int ti,ti_nn;
    gap_cl_starttimer();
    gap_cl_resethwtimer();
    ti = gap_cl_readhwtimer();

    resnetCNN(ImageIn, Output);
1c000cb2:	1c0187b7          	lui	a5,0x1c018
1c000cb6:	b6c7a583          	lw	a1,-1172(a5) # 1c017b6c <Output>
1c000cba:	1c0177b7          	lui	a5,0x1c017
1c000cbe:	7187a503          	lw	a0,1816(a5) # 1c017718 <ImageIn>
1c000cc2:	36e0a0ef          	jal	ra,1c00b030 <resnetCNN>
1c000cc6:	00842583          	lw	a1,8(s0)
    ti_nn = gap_cl_readhwtimer()-ti;
    printf("Cycles NN : %10d\n",ti_nn);
}
1c000cca:	4422                	lw	s0,8(sp)
1c000ccc:	40b2                	lw	ra,12(sp)
    printf("Cycles NN : %10d\n",ti_nn);
1c000cce:	8d85                	sub	a1,a1,s1
}
1c000cd0:	4492                	lw	s1,4(sp)
    printf("Cycles NN : %10d\n",ti_nn);
1c000cd2:	1c017537          	lui	a0,0x1c017
1c000cd6:	d2450513          	addi	a0,a0,-732 # 1c016d24 <__clz_tab+0x10c>
}
1c000cda:	0141                	addi	sp,sp,16
    printf("Cycles NN : %10d\n",ti_nn);
1c000cdc:	6151406f          	j	1c015af0 <printf>

1c000ce0 <start>:
    return domain == PI_FREQ_DOMAIN_FC ? RT_FREQ_DOMAIN_FC : domain == PI_FREQ_DOMAIN_CL ? RT_FREQ_DOMAIN_CL : RT_FREQ_DOMAIN_PERIPH;
}

static inline int32_t pi_freq_set(pi_freq_domain_e domain, uint32_t freq)
{
    return rt_freq_set_and_get(__pi_freq_get_domain(domain), freq, NULL);
1c000ce0:	0ee6b5b7          	lui	a1,0xee6b

    return 0;
}

int start()
{   //main app process
1c000ce4:	711d                	addi	sp,sp,-96
1c000ce6:	4601                	li	a2,0
1c000ce8:	28058593          	addi	a1,a1,640 # ee6b280 <__L2+0xedeb280>
1c000cec:	4501                	li	a0,0
1c000cee:	ce86                	sw	ra,92(sp)
1c000cf0:	cca2                	sw	s0,88(sp)
1c000cf2:	caa6                	sw	s1,84(sp)
1c000cf4:	c8ca                	sw	s2,80(sp)
1c000cf6:	c6ce                	sw	s3,76(sp)
1c000cf8:	c4d2                	sw	s4,72(sp)
1c000cfa:	c2d6                	sw	s5,68(sp)
1c000cfc:	33f120ef          	jal	ra,1c01383a <rt_freq_set_and_get>
1c000d00:	0a6e55b7          	lui	a1,0xa6e5
1c000d04:	9c058593          	addi	a1,a1,-1600 # a6e49c0 <__L2+0xa6649c0>
1c000d08:	4601                	li	a2,0
1c000d0a:	4505                	li	a0,1
1c000d0c:	32f120ef          	jal	ra,1c01383a <rt_freq_set_and_get>
    //0. Voltage-Frequency settings
	uint32_t voltage =1200;
	pi_freq_set(PI_FREQ_DOMAIN_FC, FREQ_FC*1000*1000);
	pi_freq_set(PI_FREQ_DOMAIN_CL, FREQ_CL*1000*1000);
	//PMU_set_voltage(voltage, 0);
	printf("Set VDD voltage as %.2f, FC Frequency as %d MHz, CL Frequency = %d MHz\n", 
1c000d10:	1c0177b7          	lui	a5,0x1c017
1c000d14:	d5078793          	addi	a5,a5,-688 # 1c016d50 <__clz_tab+0x138>
1c000d18:	4390                	lw	a2,0(a5)
1c000d1a:	43d4                	lw	a3,4(a5)
1c000d1c:	1c017537          	lui	a0,0x1c017
1c000d20:	0af00793          	li	a5,175
1c000d24:	0fa00713          	li	a4,250
1c000d28:	d5850513          	addi	a0,a0,-680 # 1c016d58 <__clz_tab+0x140>
1c000d2c:	5c5140ef          	jal	ra,1c015af0 <printf>
		(float)voltage/1000, FREQ_FC, FREQ_CL);
    
    //1. Initialize & open ram
  	pi_hyperram_conf_init(&hyper_conf);
1c000d30:	1c0184b7          	lui	s1,0x1c018
1c000d34:	b3048513          	addi	a0,s1,-1232 # 1c017b30 <hyper_conf>
1c000d38:	321100ef          	jal	ra,1c011858 <pi_hyperram_conf_init>
    pi_open_from_conf(&HyperRam, &hyper_conf);
1c000d3c:	1c018437          	lui	s0,0x1c018
1c000d40:	b5440513          	addi	a0,s0,-1196 # 1c017b54 <HyperRam>
1c000d44:	b3048593          	addi	a1,s1,-1232
1c000d48:	575110ef          	jal	ra,1c012abc <pi_open_from_conf>
	if (pi_ram_open(&HyperRam))
1c000d4c:	b5440513          	addi	a0,s0,-1196
1c000d50:	3b1100ef          	jal	ra,1c011900 <pi_ram_open>
1c000d54:	c911                	beqz	a0,1c000d68 <start+0x88>
	{
		printf("Error ram open !\n");
1c000d56:	1c017537          	lui	a0,0x1c017
1c000d5a:	da050513          	addi	a0,a0,-608 # 1c016da0 <__clz_tab+0x188>
1c000d5e:	433140ef          	jal	ra,1c015990 <puts>
  return -1;
}

static inline void pmsis_exit(int err)
{
  exit(err);
1c000d62:	5575                	li	a0,-3
1c000d64:	49b140ef          	jal	ra,1c0159fe <exit>
		pmsis_exit(-3);
	}
    printf("HyperRAM config done\n");
1c000d68:	1c017537          	lui	a0,0x1c017
1c000d6c:	db450513          	addi	a0,a0,-588 # 1c016db4 <__clz_tab+0x19c>
1c000d70:	421140ef          	jal	ra,1c015990 <puts>
    /*
    read image from camera or host pc
    allocate l2 input image
    */
    char *ImageName ="../../../test_samples/test63.pgm"; //main code inside BUILD/GAP_V3/GCC_RISCV
    unsigned int Wi = 324, Hi = 244;
1c000d74:	14400793          	li	a5,324
        pmsis_exit(-1);
    }

#else

    unsigned char *ImageInChar = (unsigned char *) pmsis_l2_malloc( W * H * sizeof(short int));
1c000d78:	6535                	lui	a0,0xd
    unsigned int Wi = 324, Hi = 244;
1c000d7a:	c03e                	sw	a5,0(sp)
    unsigned char *ImageInChar = (unsigned char *) pmsis_l2_malloc( W * H * sizeof(short int));
1c000d7c:	80050513          	addi	a0,a0,-2048 # c800 <__rt_stack_size+0xc000>
    unsigned int Wi = 324, Hi = 244;
1c000d80:	0f400793          	li	a5,244
1c000d84:	c23e                	sw	a5,4(sp)
    unsigned char *ImageInChar = (unsigned char *) pmsis_l2_malloc( W * H * sizeof(short int));
1c000d86:	662120ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c000d8a:	84aa                	mv	s1,a0
    if(ImageInChar==0)
1c000d8c:	c921                	beqz	a0,1c000ddc <start+0xfc>
    {
        printf("Failed to allocate Memory for Image (%d bytes)\n",W*H*sizeof(unsigned char));
        pmsis_exit(-6);
    }
    
    printf("Loading Image from File\n");
1c000d8e:	1c017537          	lui	a0,0x1c017
1c000d92:	dfc50513          	addi	a0,a0,-516 # 1c016dfc <__clz_tab+0x1e4>
1c000d96:	3fb140ef          	jal	ra,1c015990 <puts>

    if(ReadImageFromFile(ImageName, &Wi, &Hi, ImageInChar, W * H * sizeof(unsigned char))==0 ||(Wi!=W)||(Hi!=H))
1c000d9a:	6419                	lui	s0,0x6
1c000d9c:	1c0179b7          	lui	s3,0x1c017
1c000da0:	40040713          	addi	a4,s0,1024 # 6400 <__rt_stack_size+0x5c00>
1c000da4:	86a6                	mv	a3,s1
1c000da6:	0050                	addi	a2,sp,4
1c000da8:	858a                	mv	a1,sp
1c000daa:	e1498513          	addi	a0,s3,-492 # 1c016e14 <__clz_tab+0x1fc>
1c000dae:	24d9                	jal	1c001074 <ReadImageFromFile>
1c000db0:	4702                	lw	a4,0(sp)
1c000db2:	c509                	beqz	a0,1c000dbc <start+0xdc>
1c000db4:	0a000793          	li	a5,160
1c000db8:	02f70e63          	beq	a4,a5,1c000df4 <start+0x114>
1c000dbc:	4792                	lw	a5,4(sp)
    {
        printf("Failed to load image %s or dimension mismatch Expects [%dx%d], Got [%dx%d]\n", ImageName, W, H, Wi, Hi);
1c000dbe:	1c017537          	lui	a0,0x1c017
1c000dc2:	0a000693          	li	a3,160
1c000dc6:	0a000613          	li	a2,160
1c000dca:	e1498593          	addi	a1,s3,-492
1c000dce:	e3850513          	addi	a0,a0,-456 # 1c016e38 <__clz_tab+0x220>
1c000dd2:	51f140ef          	jal	ra,1c015af0 <printf>
1c000dd6:	5569                	li	a0,-6
1c000dd8:	427140ef          	jal	ra,1c0159fe <exit>
        printf("Failed to allocate Memory for Image (%d bytes)\n",W*H*sizeof(unsigned char));
1c000ddc:	6599                	lui	a1,0x6
1c000dde:	1c017537          	lui	a0,0x1c017
1c000de2:	40058593          	addi	a1,a1,1024 # 6400 <__rt_stack_size+0x5c00>
1c000de6:	dcc50513          	addi	a0,a0,-564 # 1c016dcc <__clz_tab+0x1b4>
1c000dea:	507140ef          	jal	ra,1c015af0 <printf>
1c000dee:	5569                	li	a0,-6
1c000df0:	40f140ef          	jal	ra,1c0159fe <exit>
    if(ReadImageFromFile(ImageName, &Wi, &Hi, ImageInChar, W * H * sizeof(unsigned char))==0 ||(Wi!=W)||(Hi!=H))
1c000df4:	4792                	lw	a5,4(sp)
1c000df6:	fce794e3          	bne	a5,a4,1c000dbe <start+0xde>
        pmsis_exit(-6);
    }
    ImageIn=(short int *)ImageInChar;
1c000dfa:	1c0179b7          	lui	s3,0x1c017
    printf("===ImageIn sizeof(ImageIn)=%d\n",sizeof(ImageIn));
1c000dfe:	1c017537          	lui	a0,0x1c017
    ImageIn=(short int *)ImageInChar;
1c000e02:	71898993          	addi	s3,s3,1816 # 1c017718 <ImageIn>
    printf("===ImageIn sizeof(ImageIn)=%d\n",sizeof(ImageIn));
1c000e06:	4591                	li	a1,4
1c000e08:	e8450513          	addi	a0,a0,-380 # 1c016e84 <__clz_tab+0x26c>
    ImageIn=(short int *)ImageInChar;
1c000e0c:	0099a023          	sw	s1,0(s3)
    printf("===ImageIn sizeof(ImageIn)=%d\n",sizeof(ImageIn));
1c000e10:	4e1140ef          	jal	ra,1c015af0 <printf>
1c000e14:	0009a603          	lw	a2,0(s3)
1c000e18:	67b1                	lui	a5,0xc
1c000e1a:	3ff40693          	addi	a3,s0,1023
1c000e1e:	7fe78793          	addi	a5,a5,2046 # c7fe <__rt_stack_size+0xbffe>
1c000e22:	96a6                	add	a3,a3,s1
1c000e24:	963e                	add	a2,a2,a5
1c000e26:	40040713          	addi	a4,s0,1024
1c000e2a:	005740fb          	lp.setup	x1,a4,1c000e34 <start+0x154>
    
    for (int i = W * H - 1; i >= 0; i--)
    {
        ImageIn[i] = (int16_t)ImageInChar[i] << INPUT_1_Q-8; //Input is naturally Q8
1c000e2e:	fff6c78b          	p.lbu	a5,-1(a3!)
1c000e32:	079e                	slli	a5,a5,0x7
1c000e34:	fef61f2b          	p.sh	a5,-2(a2!) # fffffe <__L2+0xf7fffe>
    }
    printf("===2ImageIn sizeof(ImageIn)=%d\n",sizeof(ImageIn));
1c000e38:	1c017537          	lui	a0,0x1c017
1c000e3c:	4591                	li	a1,4
1c000e3e:	ea450513          	addi	a0,a0,-348 # 1c016ea4 <__clz_tab+0x28c>
1c000e42:	4af140ef          	jal	ra,1c015af0 <printf>

#endif

    //3. Allocate output buffer
    printf("==output_size %d \n",NUM_CLASSES);
1c000e46:	1c017537          	lui	a0,0x1c017
1c000e4a:	459d                	li	a1,7
1c000e4c:	ec450513          	addi	a0,a0,-316 # 1c016ec4 <__clz_tab+0x2ac>
1c000e50:	4a1140ef          	jal	ra,1c015af0 <printf>
    // pi_ram_alloc(&HyperRam, &Output, NUM_CLASSES * sizeof(short int));
    Output = (short int *) pmsis_l2_malloc( NUM_CLASSES*sizeof(short int));
1c000e54:	4539                	li	a0,14
1c000e56:	592120ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c000e5a:	1c018437          	lui	s0,0x1c018
1c000e5e:	b6a42623          	sw	a0,-1172(s0) # 1c017b6c <Output>
    if(Output==NULL)
1c000e62:	c92d                	beqz	a0,1c000ed4 <start+0x1f4>
    {
        printf("Error Allocating OUTPUTs in L2\n");
        pmsis_exit(-7);
    }
    printf("===output sizeof(Output)= %d\n",sizeof(Output));
1c000e64:	1c017537          	lui	a0,0x1c017
1c000e68:	4591                	li	a1,4
1c000e6a:	ef850513          	addi	a0,a0,-264 # 1c016ef8 <__clz_tab+0x2e0>
1c000e6e:	483140ef          	jal	ra,1c015af0 <printf>
    //4. Configure And open cluster.
    struct pi_device cluster_dev;
    struct pi_cluster_conf cl_conf;
    cl_conf.id = 0; //pi_cluster_conf_init(&conf);
    printf("1\n");
1c000e72:	1c017537          	lui	a0,0x1c017
1c000e76:	f1850513          	addi	a0,a0,-232 # 1c016f18 <__clz_tab+0x300>
    cl_conf.id = 0; //pi_cluster_conf_init(&conf);
1c000e7a:	d602                	sw	zero,44(sp)
    printf("1\n");
1c000e7c:	315140ef          	jal	ra,1c015990 <puts>
    pi_open_from_conf(&cluster_dev, (void *) &cl_conf);
1c000e80:	102c                	addi	a1,sp,40
1c000e82:	0068                	addi	a0,sp,12
1c000e84:	439110ef          	jal	ra,1c012abc <pi_open_from_conf>
    printf("2\n");
1c000e88:	1c017537          	lui	a0,0x1c017
1c000e8c:	f1c50513          	addi	a0,a0,-228 # 1c016f1c <__clz_tab+0x304>
1c000e90:	301140ef          	jal	ra,1c015990 <puts>
    if (pi_cluster_open(&cluster_dev))
1c000e94:	0068                	addi	a0,sp,12
1c000e96:	06e130ef          	jal	ra,1c013f04 <pi_cluster_open>
1c000e9a:	c911                	beqz	a0,1c000eae <start+0x1ce>
    {
        printf("Cluster open failed !\n");
1c000e9c:	1c017537          	lui	a0,0x1c017
1c000ea0:	f2050513          	addi	a0,a0,-224 # 1c016f20 <__clz_tab+0x308>
1c000ea4:	2ed140ef          	jal	ra,1c015990 <puts>
1c000ea8:	5565                	li	a0,-7
1c000eaa:	355140ef          	jal	ra,1c0159fe <exit>
        pmsis_exit(-7);
    }

    printf("=== Network Constructor Network Constructor ===\n");
1c000eae:	1c017537          	lui	a0,0x1c017
1c000eb2:	f3850513          	addi	a0,a0,-200 # 1c016f38 <__clz_tab+0x320>
1c000eb6:	2db140ef          	jal	ra,1c015990 <puts>
    //5. Network Constructor
	// IMPORTANT: MUST BE CALLED AFTER THE CLUSTER IS ON!
	int ret_state;
	if (ret_state= resnetCNN_Construct())
1c000eba:	277080ef          	jal	ra,1c009930 <resnetCNN_Construct>
1c000ebe:	c505                	beqz	a0,1c000ee6 <start+0x206>
	{
	  printf("Graph constructor exited with error: %d\n", ret_state);
1c000ec0:	85aa                	mv	a1,a0
1c000ec2:	1c017537          	lui	a0,0x1c017
1c000ec6:	f6850513          	addi	a0,a0,-152 # 1c016f68 <__clz_tab+0x350>
1c000eca:	427140ef          	jal	ra,1c015af0 <printf>
1c000ece:	5571                	li	a0,-4
1c000ed0:	32f140ef          	jal	ra,1c0159fe <exit>
        printf("Error Allocating OUTPUTs in L2\n");
1c000ed4:	1c017537          	lui	a0,0x1c017
1c000ed8:	ed850513          	addi	a0,a0,-296 # 1c016ed8 <__clz_tab+0x2c0>
1c000edc:	2b5140ef          	jal	ra,1c015990 <puts>
1c000ee0:	5565                	li	a0,-7
1c000ee2:	31d140ef          	jal	ra,1c0159fe <exit>
	  pmsis_exit(-4);
	}
	printf("Network Constructor was OK!\n");
1c000ee6:	1c017537          	lui	a0,0x1c017
1c000eea:	f9450513          	addi	a0,a0,-108 # 1c016f94 <__clz_tab+0x37c>
1c000eee:	2a3140ef          	jal	ra,1c015990 <puts>

    //6. Task setup
    struct pi_cluster_task *task = pmsis_l2_malloc(sizeof(struct pi_cluster_task));
1c000ef2:	02c00513          	li	a0,44
1c000ef6:	4f2120ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c000efa:	84aa                	mv	s1,a0
    printf("3 \n");
1c000efc:	1c017537          	lui	a0,0x1c017
1c000f00:	fb050513          	addi	a0,a0,-80 # 1c016fb0 <__clz_tab+0x398>
1c000f04:	28d140ef          	jal	ra,1c015990 <puts>
    if(task==NULL) {
1c000f08:	14048463          	beqz	s1,1c001050 <start+0x370>
1c000f0c:	0a6e55b7          	lui	a1,0xa6e5
1c000f10:	4601                	li	a2,0
1c000f12:	9c058593          	addi	a1,a1,-1600 # a6e49c0 <__L2+0xa6649c0>
1c000f16:	4505                	li	a0,1
1c000f18:	123120ef          	jal	ra,1c01383a <rt_freq_set_and_get>
1c000f1c:	1c0189b7          	lui	s3,0x1c018
1c000f20:	b2498793          	addi	a5,s3,-1244 # 1c017b24 <uart_device>
    pi_uart_conf_init(&uart_conf);
1c000f24:	0828                	addi	a0,sp,24
1c000f26:	c43e                	sw	a5,8(sp)
1c000f28:	739130ef          	jal	ra,1c014e60 <pi_uart_conf_init>
    uart_conf.baudrate_bps = 115200;
1c000f2c:	67f1                	lui	a5,0x1c
1c000f2e:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
    pi_open_from_conf(&uart_device1, &uart_conf);
1c000f32:	082c                	addi	a1,sp,24
1c000f34:	0028                	addi	a0,sp,8
    uart_conf.baudrate_bps = 115200;
1c000f36:	cc3e                	sw	a5,24(sp)
    pi_open_from_conf(&uart_device1, &uart_conf);
1c000f38:	385110ef          	jal	ra,1c012abc <pi_open_from_conf>
    if (pi_uart_open(&uart_device1))
1c000f3c:	0028                	addi	a0,sp,8
1c000f3e:	73d130ef          	jal	ra,1c014e7a <pi_uart_open>
1c000f42:	8a2a                	mv	s4,a0
1c000f44:	0e051d63          	bnez	a0,1c00103e <start+0x35e>
    {
        printf("Failed to open uart\n");
        pmsis_exit(-2);
    }
    else
        printf("Debug2: UART open done.\n");
1c000f48:	1c017537          	lui	a0,0x1c017
1c000f4c:	fd850513          	addi	a0,a0,-40 # 1c016fd8 <__clz_tab+0x3c0>
1c000f50:	241140ef          	jal	ra,1c015990 <puts>
        
    pi_uart_open(&uart_device);
1c000f54:	b2498513          	addi	a0,s3,-1244
1c000f58:	723130ef          	jal	ra,1c014e7a <pi_uart_open>

    int iter=1;
    while(iter)
    {
        printf("enter while, iter = %d.\n", iter);
1c000f5c:	1c017537          	lui	a0,0x1c017
1c000f60:	4585                	li	a1,1
1c000f62:	ff050513          	addi	a0,a0,-16 # 1c016ff0 <__clz_tab+0x3d8>
1c000f66:	38b140ef          	jal	ra,1c015af0 <printf>
                    ImageIn[y*W+x] = ((short int)ImageInChar[((y+Yoffset)*Wi)+(x+Xoffset)]) << INPUT_1_Q-8;
                }
            }
        #endif

        printf("=== Task setup\n");
1c000f6a:	1c017537          	lui	a0,0x1c017
1c000f6e:	00c50513          	addi	a0,a0,12 # 1c01700c <__clz_tab+0x3f4>
1c000f72:	21f140ef          	jal	ra,1c015990 <puts>
        memset(task, 0, sizeof(struct pi_cluster_task));
1c000f76:	02400613          	li	a2,36
1c000f7a:	4581                	li	a1,0
1c000f7c:	00848513          	addi	a0,s1,8
1c000f80:	06b140ef          	jal	ra,1c0157ea <memset>
        task->entry = RunNN;
1c000f84:	1c0017b7          	lui	a5,0x1c001
1c000f88:	c7478793          	addi	a5,a5,-908 # 1c000c74 <RunNN>
1c000f8c:	c09c                	sw	a5,0(s1)
        task->arg = (void *) NULL;
        task->stack_size = (uint32_t) CLUSTER_STACK_SIZE;
1c000f8e:	6785                	lui	a5,0x1
1c000f90:	c4dc                	sw	a5,12(s1)
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
1c000f92:	40000793          	li	a5,1024
        task->arg = (void *) NULL;
1c000f96:	0004a223          	sw	zero,4(s1)
        task->slave_stack_size = (uint32_t) CLUSTER_SLAVE_STACK_SIZE;
1c000f9a:	c89c                	sw	a5,16(s1)
        //Dispatch task on cluster
        pi_cluster_send_task_to_cl(&cluster_dev, task);
1c000f9c:	85a6                	mv	a1,s1
1c000f9e:	0068                	addi	a0,sp,12
1c000fa0:	33c130ef          	jal	ra,1c0142dc <pi_cluster_send_task_to_cl>
        //Check Results
	int outclass, MaxPrediction = 0;
	for(int i=0; i<NUM_CLASSES; i++){
1c000fa4:	4481                	li	s1,0
1c000fa6:	1c017ab7          	lui	s5,0x1c017
        printf("Class%d confidence:\t%d\n", i,Output[i]);
1c000faa:	b6c42783          	lw	a5,-1172(s0)
1c000fae:	00149993          	slli	s3,s1,0x1
1c000fb2:	85a6                	mv	a1,s1
1c000fb4:	97ce                	add	a5,a5,s3
1c000fb6:	00079603          	lh	a2,0(a5) # 1000 <__rt_stack_size+0x800>
1c000fba:	01ca8513          	addi	a0,s5,28 # 1c01701c <__clz_tab+0x404>
1c000fbe:	333140ef          	jal	ra,1c015af0 <printf>
		if (Output[i] > MaxPrediction){
1c000fc2:	b6c42783          	lw	a5,-1172(s0)
1c000fc6:	99be                	add	s3,s3,a5
1c000fc8:	00099783          	lh	a5,0(s3)
1c000fcc:	00fa5463          	ble	a5,s4,1c000fd4 <start+0x2f4>
1c000fd0:	8a3e                	mv	s4,a5
1c000fd2:	8926                	mv	s2,s1
	for(int i=0; i<NUM_CLASSES; i++){
1c000fd4:	0485                	addi	s1,s1,1
1c000fd6:	fc74bae3          	p.bneimm	s1,7,1c000faa <start+0x2ca>
			outclass = i;
			MaxPrediction = Output[i];
		}
        }
            printf("\nModel:\t%s\n\n", model_name);
1c000fda:	1c0175b7          	lui	a1,0x1c017
1c000fde:	1c017537          	lui	a0,0x1c017
1c000fe2:	53858593          	addi	a1,a1,1336 # 1c017538 <model_name>
1c000fe6:	03450513          	addi	a0,a0,52 # 1c017034 <__clz_tab+0x41c>
1c000fea:	307140ef          	jal	ra,1c015af0 <printf>
	    printf("Predicted class:\t%d\n", outclass);
1c000fee:	1c017537          	lui	a0,0x1c017
1c000ff2:	85ca                	mv	a1,s2
1c000ff4:	04450513          	addi	a0,a0,68 # 1c017044 <__clz_tab+0x42c>
1c000ff8:	2f9140ef          	jal	ra,1c015af0 <printf>
	    printf("With confidence:\t%d\n", MaxPrediction);
1c000ffc:	1c017537          	lui	a0,0x1c017
1c001000:	85d2                	mv	a1,s4
1c001002:	05c50513          	addi	a0,a0,92 # 1c01705c <__clz_tab+0x444>
1c001006:	2eb140ef          	jal	ra,1c015af0 <printf>
            printf("=== Task ended \n ");
1c00100a:	1c017537          	lui	a0,0x1c017
1c00100e:	07450513          	addi	a0,a0,116 # 1c017074 <__clz_tab+0x45c>
1c001012:	2df140ef          	jal	ra,1c015af0 <printf>
            printf("uart write Value");
        #endif
      }
	
    //7. Netwrok Destructor and close cluster
	resnetCNN_Destruct();
1c001016:	79f090ef          	jal	ra,1c00afb4 <resnetCNN_Destruct>
        printf("=== CNN_Destruct");
1c00101a:	1c017537          	lui	a0,0x1c017
1c00101e:	08850513          	addi	a0,a0,136 # 1c017088 <__clz_tab+0x470>
1c001022:	2cf140ef          	jal	ra,1c015af0 <printf>
    //8. postprocess
    //Draw BBs
    // drawBboxes(&bbxs,ImageInChar);

    //9. finally close cluster
	pi_cluster_close(&cluster_dev);
1c001026:	0068                	addi	a0,sp,12
1c001028:	7b5120ef          	jal	ra,1c013fdc <pi_cluster_close>
        printf("End \n");
1c00102c:	1c017537          	lui	a0,0x1c017
1c001030:	09c50513          	addi	a0,a0,156 # 1c01709c <__clz_tab+0x484>
1c001034:	15d140ef          	jal	ra,1c015990 <puts>
1c001038:	4501                	li	a0,0
1c00103a:	1c5140ef          	jal	ra,1c0159fe <exit>
        printf("Failed to open uart\n");
1c00103e:	1c017537          	lui	a0,0x1c017
1c001042:	fc450513          	addi	a0,a0,-60 # 1c016fc4 <__clz_tab+0x3ac>
1c001046:	14b140ef          	jal	ra,1c015990 <puts>
1c00104a:	5579                	li	a0,-2
1c00104c:	1b3140ef          	jal	ra,1c0159fe <exit>
        printf("Alloc Error! \n");
1c001050:	1c017537          	lui	a0,0x1c017
1c001054:	fb450513          	addi	a0,a0,-76 # 1c016fb4 <__clz_tab+0x39c>
1c001058:	139140ef          	jal	ra,1c015990 <puts>
1c00105c:	556d                	li	a0,-5
1c00105e:	1a1140ef          	jal	ra,1c0159fe <exit>

1c001062 <main>:



int main(void)
{
    printf("\n\n\t *** NN on GAP ***\n");
1c001062:	1c017537          	lui	a0,0x1c017
{
1c001066:	1141                	addi	sp,sp,-16
    printf("\n\n\t *** NN on GAP ***\n");
1c001068:	d3850513          	addi	a0,a0,-712 # 1c016d38 <__clz_tab+0x120>
{
1c00106c:	c606                	sw	ra,12(sp)
    printf("\n\n\t *** NN on GAP ***\n");
1c00106e:	123140ef          	jal	ra,1c015990 <puts>
  ((void (*)())arg)();
1c001072:	31bd                	jal	1c000ce0 <start>

1c001074 <ReadImageFromFile>:
	return Err;
}

unsigned char *ReadImageFromFile(char *ImageName, unsigned int *W, unsigned int *H, unsigned char *InBuffer, unsigned int BuffSize)

{
1c001074:	7119                	addi	sp,sp,-128
1c001076:	cede                	sw	s7,92(sp)
1c001078:	8baa                	mv	s7,a0
	unsigned int IsRGB, HeaderSize, Size, AlignedSize, ReadSize=0;
	unsigned char *ImagePtr = 0;
	int Allocated = 0;

	struct pi_fs_conf conf;
	pi_fs_conf_init(&conf);
1c00107a:	0828                	addi	a0,sp,24
{
1c00107c:	de86                	sw	ra,124(sp)
1c00107e:	dca2                	sw	s0,120(sp)
1c001080:	d8ca                	sw	s2,112(sp)
1c001082:	d2d6                	sw	s5,100(sp)
1c001084:	cce2                	sw	s8,88(sp)
1c001086:	cae6                	sw	s9,84(sp)
1c001088:	daa6                	sw	s1,116(sp)
1c00108a:	d6ce                	sw	s3,108(sp)
1c00108c:	d4d2                	sw	s4,104(sp)
1c00108e:	d0da                	sw	s6,96(sp)
1c001090:	c8ea                	sw	s10,80(sp)
1c001092:	c6ee                	sw	s11,76(sp)
1c001094:	8c2e                	mv	s8,a1
1c001096:	8cb2                	mv	s9,a2
1c001098:	8ab6                	mv	s5,a3
1c00109a:	893a                	mv	s2,a4
	pi_fs_conf_init(&conf);
1c00109c:	3940f0ef          	jal	ra,1c010430 <pi_fs_conf_init>
  	struct pi_device fs;

	conf.type = PI_FS_HOST;

	pi_open_from_conf(&fs, &conf);
1c0010a0:	850a                	mv	a0,sp
	conf.type = PI_FS_HOST;
1c0010a2:	4405                	li	s0,1
	pi_open_from_conf(&fs, &conf);
1c0010a4:	082c                	addi	a1,sp,24
	conf.type = PI_FS_HOST;
1c0010a6:	cc22                	sw	s0,24(sp)
	pi_open_from_conf(&fs, &conf);
1c0010a8:	215110ef          	jal	ra,1c012abc <pi_open_from_conf>

	if (pi_fs_mount(&fs))
1c0010ac:	850a                	mv	a0,sp
1c0010ae:	3940f0ef          	jal	ra,1c010442 <pi_fs_mount>
1c0010b2:	16051f63          	bnez	a0,1c001230 <ReadImageFromFile+0x1bc>
	pi_fs_conf_init(&conf);
1c0010b6:	1068                	addi	a0,sp,44
1c0010b8:	3780f0ef          	jal	ra,1c010430 <pi_fs_conf_init>
	pi_open_from_conf(&fs, &conf);
1c0010bc:	0068                	addi	a0,sp,12
1c0010be:	106c                	addi	a1,sp,44
	conf.type = PI_FS_HOST;
1c0010c0:	d622                	sw	s0,44(sp)
	pi_open_from_conf(&fs, &conf);
1c0010c2:	1fb110ef          	jal	ra,1c012abc <pi_open_from_conf>
	if (pi_fs_mount(&fs))
1c0010c6:	0068                	addi	a0,sp,12
1c0010c8:	37a0f0ef          	jal	ra,1c010442 <pi_fs_mount>
1c0010cc:	e531                	bnez	a0,1c001118 <ReadImageFromFile+0xa4>
	void *File = pi_fs_open(&fs, Name, PI_FS_FLAGS_READ);
1c0010ce:	4601                	li	a2,0
1c0010d0:	85de                	mv	a1,s7
1c0010d2:	0068                	addi	a0,sp,12
1c0010d4:	3a20f0ef          	jal	ra,1c010476 <pi_fs_open>
	*W = 0; *H = 0; *IsRGB = 0; *HeaderSize = 0;
1c0010d8:	000c2023          	sw	zero,0(s8)
1c0010dc:	000ca023          	sw	zero,0(s9)
	void *File = pi_fs_open(&fs, Name, PI_FS_FLAGS_READ);
1c0010e0:	842a                	mv	s0,a0
	if (File) {
1c0010e2:	c159                	beqz	a0,1c001168 <ReadImageFromFile+0xf4>
		unsigned char *Header = (unsigned char *) pmsis_l2_malloc( 256);
1c0010e4:	10000513          	li	a0,256
1c0010e8:	300120ef          	jal	ra,1c0133e8 <pi_l2_malloc>
		if (pi_fs_read(File,Header, 256) == 256) {
1c0010ec:	85aa                	mv	a1,a0
		unsigned char *Header = (unsigned char *) pmsis_l2_malloc( 256);
1c0010ee:	84aa                	mv	s1,a0
		if (pi_fs_read(File,Header, 256) == 256) {
1c0010f0:	10000613          	li	a2,256
1c0010f4:	8522                	mv	a0,s0
1c0010f6:	3980f0ef          	jal	ra,1c01048e <pi_fs_read>
1c0010fa:	10000793          	li	a5,256
1c0010fe:	04f50463          	beq	a0,a5,1c001146 <ReadImageFromFile+0xd2>
		pmsis_l2_malloc_free( Header,256);
1c001102:	10000593          	li	a1,256
1c001106:	8526                	mv	a0,s1
1c001108:	2ee120ef          	jal	ra,1c0133f6 <pi_l2_free>
		pi_fs_close(File);
1c00110c:	8522                	mv	a0,s0
1c00110e:	3700f0ef          	jal	ra,1c01047e <pi_fs_close>
		pi_fs_unmount(&fs);
1c001112:	0068                	addi	a0,sp,12
1c001114:	35a0f0ef          	jal	ra,1c01046e <pi_fs_unmount>
		return NULL;

	if (GetInputImageInfos(ImageName, W, H, &IsRGB, &HeaderSize)) {
		printf("Failed to get input images infos, %s\n", ImageName); goto Fail;
1c001118:	1c017537          	lui	a0,0x1c017
1c00111c:	85de                	mv	a1,s7
1c00111e:	0a450513          	addi	a0,a0,164 # 1c0170a4 <__clz_tab+0x48c>
1c001122:	1cf140ef          	jal	ra,1c015af0 <printf>
	void *File = NULL;
1c001126:	4981                	li	s3,0
	printf("Image %s, [W: %d, H: %d], Gray, Size: %d bytes, Loaded sucessfully\n", ImageName, *W, *H, AlignedSize);

	return (ImagePtr);
Fail:
	if (ImagePtr && Allocated) pmsis_l2_malloc_free(ImagePtr, AlignedSize);
	pi_fs_close(File);
1c001128:	854e                	mv	a0,s3
1c00112a:	3540f0ef          	jal	ra,1c01047e <pi_fs_close>
	pi_fs_unmount(&fs);
1c00112e:	850a                	mv	a0,sp
1c001130:	33e0f0ef          	jal	ra,1c01046e <pi_fs_unmount>
	printf("Failed to load image %s from flash\n", ImageName);
1c001134:	1c017537          	lui	a0,0x1c017
1c001138:	85de                	mv	a1,s7
1c00113a:	1a850513          	addi	a0,a0,424 # 1c0171a8 <__clz_tab+0x590>
1c00113e:	1b3140ef          	jal	ra,1c015af0 <printf>
	return 0;
1c001142:	4a81                	li	s5,0
1c001144:	a055                	j	1c0011e8 <ReadImageFromFile+0x174>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c001146:	0004c703          	lbu	a4,0(s1)
1c00114a:	05000793          	li	a5,80
1c00114e:	10f70263          	beq	a4,a5,1c001252 <ReadImageFromFile+0x1de>
		pmsis_l2_malloc_free( Header,256);
1c001152:	10000593          	li	a1,256
1c001156:	8526                	mv	a0,s1
1c001158:	29e120ef          	jal	ra,1c0133f6 <pi_l2_free>
		pi_fs_close(File);
1c00115c:	8522                	mv	a0,s0
1c00115e:	3200f0ef          	jal	ra,1c01047e <pi_fs_close>
		pi_fs_unmount(&fs);
1c001162:	0068                	addi	a0,sp,12
1c001164:	30a0f0ef          	jal	ra,1c01046e <pi_fs_unmount>
	else return 0;
1c001168:	4b01                	li	s6,0
	File = pi_fs_open(&fs, ImageName, PI_FS_FLAGS_READ);
1c00116a:	4601                	li	a2,0
1c00116c:	85de                	mv	a1,s7
1c00116e:	850a                	mv	a0,sp
1c001170:	3060f0ef          	jal	ra,1c010476 <pi_fs_open>
1c001174:	89aa                	mv	s3,a0
	if (File == 0) {
1c001176:	2e050e63          	beqz	a0,1c001472 <ReadImageFromFile+0x3fe>
	Size = (*W)*(*H)*(IsRGB?3:1);
1c00117a:	000c2a03          	lw	s4,0(s8)
1c00117e:	000ca783          	lw	a5,0(s9)
1c001182:	02fa0a33          	mul	s4,s4,a5
	if (InBuffer && (BuffSize >= Size)) {
1c001186:	080a8163          	beqz	s5,1c001208 <ReadImageFromFile+0x194>
1c00118a:	07496f63          	bltu	s2,s4,1c001208 <ReadImageFromFile+0x194>
	int Allocated = 0;
1c00118e:	4d01                	li	s10,0
	pi_fs_seek(File,HeaderSize);
1c001190:	85da                	mv	a1,s6
1c001192:	854e                	mv	a0,s3
1c001194:	3580f0ef          	jal	ra,1c0104ec <pi_fs_seek>
		while (RemainSize > 0) {
1c001198:	020a0663          	beqz	s4,1c0011c4 <ReadImageFromFile+0x150>
1c00119c:	84d2                	mv	s1,s4
1c00119e:	8956                	mv	s2,s5
	unsigned int IsRGB, HeaderSize, Size, AlignedSize, ReadSize=0;
1c0011a0:	4d81                	li	s11,0
			unsigned int Chunk = Min(4096, RemainSize);
1c0011a2:	6b05                	lui	s6,0x1
1c0011a4:	a019                	j	1c0011aa <ReadImageFromFile+0x136>
			TargetImg += Chunk; RemainSize -= Chunk;
1c0011a6:	9922                	add	s2,s2,s0
		while (RemainSize > 0) {
1c0011a8:	cc81                	beqz	s1,1c0011c0 <ReadImageFromFile+0x14c>
			unsigned int Chunk = Min(4096, RemainSize);
1c0011aa:	0564d433          	p.minu	s0,s1,s6
			unsigned R = pi_fs_read(File,TargetImg, Chunk);
1c0011ae:	85ca                	mv	a1,s2
1c0011b0:	8622                	mv	a2,s0
1c0011b2:	854e                	mv	a0,s3
1c0011b4:	2da0f0ef          	jal	ra,1c01048e <pi_fs_read>
			TargetImg += Chunk; RemainSize -= Chunk;
1c0011b8:	8c81                	sub	s1,s1,s0
			ReadSize+=R;
1c0011ba:	9daa                	add	s11,s11,a0
			if (R!=Chunk) break;
1c0011bc:	fea405e3          	beq	s0,a0,1c0011a6 <ReadImageFromFile+0x132>
	if (AlignedSize!=ReadSize) {
1c0011c0:	074d9a63          	bne	s11,s4,1c001234 <ReadImageFromFile+0x1c0>
	pi_fs_close(File);
1c0011c4:	854e                	mv	a0,s3
1c0011c6:	2b80f0ef          	jal	ra,1c01047e <pi_fs_close>
	pi_fs_unmount(&fs);
1c0011ca:	850a                	mv	a0,sp
1c0011cc:	2a20f0ef          	jal	ra,1c01046e <pi_fs_unmount>
	printf("Image %s, [W: %d, H: %d], Gray, Size: %d bytes, Loaded sucessfully\n", ImageName, *W, *H, AlignedSize);
1c0011d0:	000ca683          	lw	a3,0(s9)
1c0011d4:	000c2603          	lw	a2,0(s8)
1c0011d8:	1c017537          	lui	a0,0x1c017
1c0011dc:	8752                	mv	a4,s4
1c0011de:	85de                	mv	a1,s7
1c0011e0:	16450513          	addi	a0,a0,356 # 1c017164 <__clz_tab+0x54c>
1c0011e4:	10d140ef          	jal	ra,1c015af0 <printf>
}
1c0011e8:	50f6                	lw	ra,124(sp)
1c0011ea:	5466                	lw	s0,120(sp)
1c0011ec:	8556                	mv	a0,s5
1c0011ee:	54d6                	lw	s1,116(sp)
1c0011f0:	5946                	lw	s2,112(sp)
1c0011f2:	59b6                	lw	s3,108(sp)
1c0011f4:	5a26                	lw	s4,104(sp)
1c0011f6:	5a96                	lw	s5,100(sp)
1c0011f8:	5b06                	lw	s6,96(sp)
1c0011fa:	4bf6                	lw	s7,92(sp)
1c0011fc:	4c66                	lw	s8,88(sp)
1c0011fe:	4cd6                	lw	s9,84(sp)
1c001200:	4d46                	lw	s10,80(sp)
1c001202:	4db6                	lw	s11,76(sp)
1c001204:	6109                	addi	sp,sp,128
1c001206:	8082                	ret
		AlignedSize = ALIGN(Size, 2);
1c001208:	fa2a37b3          	p.bclr	a5,s4,29,2
1c00120c:	c781                	beqz	a5,1c001214 <ReadImageFromFile+0x1a0>
1c00120e:	c20a3a33          	p.bclr	s4,s4,1,0
1c001212:	0a11                	addi	s4,s4,4
		ImagePtr = (unsigned char *) pmsis_l2_malloc( AlignedSize);
1c001214:	8552                	mv	a0,s4
1c001216:	1d2120ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c00121a:	8aaa                	mv	s5,a0
		Allocated = 1;
1c00121c:	4d05                	li	s10,1
	if (ImagePtr == 0) {
1c00121e:	f92d                	bnez	a0,1c001190 <ReadImageFromFile+0x11c>
		printf("Failed to allocate %d bytes for input image\n", AlignedSize); goto Fail;
1c001220:	1c017537          	lui	a0,0x1c017
1c001224:	85d2                	mv	a1,s4
1c001226:	11050513          	addi	a0,a0,272 # 1c017110 <__clz_tab+0x4f8>
1c00122a:	0c7140ef          	jal	ra,1c015af0 <printf>
1c00122e:	bded                	j	1c001128 <ReadImageFromFile+0xb4>
		return NULL;
1c001230:	4a81                	li	s5,0
1c001232:	bf5d                	j	1c0011e8 <ReadImageFromFile+0x174>
		printf("Error, expects %d bytes but got %d\n", AlignedSize, ReadSize); goto Fail;
1c001234:	1c017537          	lui	a0,0x1c017
1c001238:	866e                	mv	a2,s11
1c00123a:	85d2                	mv	a1,s4
1c00123c:	14050513          	addi	a0,a0,320 # 1c017140 <__clz_tab+0x528>
1c001240:	0b1140ef          	jal	ra,1c015af0 <printf>
	if (ImagePtr && Allocated) pmsis_l2_malloc_free(ImagePtr, AlignedSize);
1c001244:	ee0d02e3          	beqz	s10,1c001128 <ReadImageFromFile+0xb4>
1c001248:	85d2                	mv	a1,s4
1c00124a:	8556                	mv	a0,s5
1c00124c:	1aa120ef          	jal	ra,1c0133f6 <pi_l2_free>
1c001250:	bde1                	j	1c001128 <ReadImageFromFile+0xb4>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c001252:	0014c783          	lbu	a5,1(s1)
1c001256:	03500713          	li	a4,53
1c00125a:	22e78463          	beq	a5,a4,1c001482 <ReadImageFromFile+0x40e>
	else if (ImgIn[0] == 'P' && ImgIn[1] == '6' && ImgIn[2] == '\n') *IsRGB = 1;
1c00125e:	03600713          	li	a4,54
1c001262:	eee798e3          	bne	a5,a4,1c001152 <ReadImageFromFile+0xde>
1c001266:	0024c783          	lbu	a5,2(s1)
1c00126a:	eea7b4e3          	p.bneimm	a5,10,1c001152 <ReadImageFromFile+0xde>
1c00126e:	4985                	li	s3,1
1c001270:	0034c603          	lbu	a2,3(s1)
	while (Img[Ind] == '#') {
1c001274:	02300793          	li	a5,35
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c001278:	470d                	li	a4,3
	while (Img[Ind] == '#') {
1c00127a:	02300593          	li	a1,35
1c00127e:	02f61163          	bne	a2,a5,1c0012a0 <ReadImageFromFile+0x22c>
1c001282:	00170793          	addi	a5,a4,1 # 10001 <__L1Cl+0x1>
1c001286:	00f48733          	add	a4,s1,a5
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c00128a:	0017468b          	p.lbu	a3,1(a4!)
1c00128e:	0785                	addi	a5,a5,1
1c001290:	fea6bde3          	p.bneimm	a3,10,1c00128a <ReadImageFromFile+0x216>
		Ind++;
1c001294:	873e                	mv	a4,a5
	while (Img[Ind] == '#') {
1c001296:	97a6                	add	a5,a5,s1
1c001298:	0007c603          	lbu	a2,0(a5)
1c00129c:	feb603e3          	beq	a2,a1,1c001282 <ReadImageFromFile+0x20e>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c0012a0:	fd060793          	addi	a5,a2,-48
1c0012a4:	0ff7f793          	andi	a5,a5,255
1c0012a8:	46a5                	li	a3,9
1c0012aa:	02f6f163          	bleu	a5,a3,1c0012cc <ReadImageFromFile+0x258>
1c0012ae:	00170793          	addi	a5,a4,1
1c0012b2:	00f485b3          	add	a1,s1,a5
1c0012b6:	4525                	li	a0,9
1c0012b8:	0015c60b          	p.lbu	a2,1(a1!)
1c0012bc:	873e                	mv	a4,a5
1c0012be:	0785                	addi	a5,a5,1
1c0012c0:	fd060693          	addi	a3,a2,-48
1c0012c4:	0ff6f693          	andi	a3,a3,255
1c0012c8:	fed568e3          	bltu	a0,a3,1c0012b8 <ReadImageFromFile+0x244>
1c0012cc:	00170793          	addi	a5,a4,1
1c0012d0:	00f48533          	add	a0,s1,a5
    Val = 0;
1c0012d4:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c0012d6:	4825                	li	a6,9
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0012d8:	00259693          	slli	a3,a1,0x2
1c0012dc:	96ae                	add	a3,a3,a1
1c0012de:	0686                	slli	a3,a3,0x1
1c0012e0:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c0012e2:	88aa                	mv	a7,a0
1c0012e4:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c0012e8:	fd068593          	addi	a1,a3,-48
		Ind++;
1c0012ec:	873e                	mv	a4,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c0012ee:	fd060693          	addi	a3,a2,-48
1c0012f2:	0ff6f693          	andi	a3,a3,255
1c0012f6:	0785                	addi	a5,a5,1
1c0012f8:	fed870e3          	bleu	a3,a6,1c0012d8 <ReadImageFromFile+0x264>
	*W = Val;
1c0012fc:	00bc2023          	sw	a1,0(s8)
	while (Img[Ind] == '#') {
1c001300:	0008c603          	lbu	a2,0(a7)
1c001304:	02300793          	li	a5,35
1c001308:	02f61663          	bne	a2,a5,1c001334 <ReadImageFromFile+0x2c0>
1c00130c:	02300593          	li	a1,35
1c001310:	00170793          	addi	a5,a4,1
1c001314:	00f486b3          	add	a3,s1,a5
1c001318:	a019                	j	1c00131e <ReadImageFromFile+0x2aa>
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c00131a:	873e                	mv	a4,a5
1c00131c:	0785                	addi	a5,a5,1
1c00131e:	0016c60b          	p.lbu	a2,1(a3!)
1c001322:	fea63ce3          	p.bneimm	a2,10,1c00131a <ReadImageFromFile+0x2a6>
		Ind++;
1c001326:	0709                	addi	a4,a4,2
	while (Img[Ind] == '#') {
1c001328:	00e487b3          	add	a5,s1,a4
1c00132c:	0007c603          	lbu	a2,0(a5)
1c001330:	feb600e3          	beq	a2,a1,1c001310 <ReadImageFromFile+0x29c>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c001334:	fd060793          	addi	a5,a2,-48
1c001338:	0ff7f793          	andi	a5,a5,255
1c00133c:	46a5                	li	a3,9
1c00133e:	02f6f163          	bleu	a5,a3,1c001360 <ReadImageFromFile+0x2ec>
1c001342:	00170793          	addi	a5,a4,1
1c001346:	00f485b3          	add	a1,s1,a5
1c00134a:	4525                	li	a0,9
1c00134c:	0015c60b          	p.lbu	a2,1(a1!)
1c001350:	873e                	mv	a4,a5
1c001352:	0785                	addi	a5,a5,1
1c001354:	fd060693          	addi	a3,a2,-48
1c001358:	0ff6f693          	andi	a3,a3,255
1c00135c:	fed568e3          	bltu	a0,a3,1c00134c <ReadImageFromFile+0x2d8>
1c001360:	00170793          	addi	a5,a4,1
1c001364:	00f48533          	add	a0,s1,a5
    Val = 0;
1c001368:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c00136a:	4825                	li	a6,9
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c00136c:	00259693          	slli	a3,a1,0x2
1c001370:	96ae                	add	a3,a3,a1
1c001372:	0686                	slli	a3,a3,0x1
1c001374:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c001376:	88aa                	mv	a7,a0
1c001378:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c00137c:	fd068593          	addi	a1,a3,-48
		Ind++;
1c001380:	873e                	mv	a4,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c001382:	fd060693          	addi	a3,a2,-48
1c001386:	0ff6f693          	andi	a3,a3,255
1c00138a:	0785                	addi	a5,a5,1
1c00138c:	fed870e3          	bleu	a3,a6,1c00136c <ReadImageFromFile+0x2f8>
	*H = Val;
1c001390:	00bca023          	sw	a1,0(s9)
	while (Img[Ind] == '#') {
1c001394:	0008c603          	lbu	a2,0(a7)
1c001398:	02300793          	li	a5,35
1c00139c:	02f61663          	bne	a2,a5,1c0013c8 <ReadImageFromFile+0x354>
1c0013a0:	02300593          	li	a1,35
1c0013a4:	00170793          	addi	a5,a4,1
1c0013a8:	00f486b3          	add	a3,s1,a5
1c0013ac:	a019                	j	1c0013b2 <ReadImageFromFile+0x33e>
		while (Img[Ind] != '\n') {if(Debug) printf("%c", Img[Ind]);Ind++;}
1c0013ae:	873e                	mv	a4,a5
1c0013b0:	0785                	addi	a5,a5,1
1c0013b2:	0016c60b          	p.lbu	a2,1(a3!)
1c0013b6:	fea63ce3          	p.bneimm	a2,10,1c0013ae <ReadImageFromFile+0x33a>
		Ind++;
1c0013ba:	0709                	addi	a4,a4,2
	while (Img[Ind] == '#') {
1c0013bc:	00e487b3          	add	a5,s1,a4
1c0013c0:	0007c603          	lbu	a2,0(a5)
1c0013c4:	feb600e3          	beq	a2,a1,1c0013a4 <ReadImageFromFile+0x330>
	while (!IS_DIGIT(ImgIn[Ind])) Ind++;
1c0013c8:	fd060793          	addi	a5,a2,-48
1c0013cc:	0ff7f793          	andi	a5,a5,255
1c0013d0:	46a5                	li	a3,9
1c0013d2:	02f6f163          	bleu	a5,a3,1c0013f4 <ReadImageFromFile+0x380>
1c0013d6:	00170793          	addi	a5,a4,1
1c0013da:	00f485b3          	add	a1,s1,a5
1c0013de:	4525                	li	a0,9
1c0013e0:	0015c60b          	p.lbu	a2,1(a1!)
1c0013e4:	873e                	mv	a4,a5
1c0013e6:	0785                	addi	a5,a5,1
1c0013e8:	fd060693          	addi	a3,a2,-48
1c0013ec:	0ff6f693          	andi	a3,a3,255
1c0013f0:	fed568e3          	bltu	a0,a3,1c0013e0 <ReadImageFromFile+0x36c>
1c0013f4:	00170793          	addi	a5,a4,1
1c0013f8:	00f48533          	add	a0,s1,a5
    Val = 0;
1c0013fc:	4581                	li	a1,0
	while (IS_DIGIT(ImgIn[Ind])) {
1c0013fe:	48a5                	li	a7,9
1c001400:	a019                	j	1c001406 <ReadImageFromFile+0x392>
		Ind++;
1c001402:	873e                	mv	a4,a5
1c001404:	0785                	addi	a5,a5,1
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c001406:	00259693          	slli	a3,a1,0x2
1c00140a:	96ae                	add	a3,a3,a1
1c00140c:	0686                	slli	a3,a3,0x1
1c00140e:	96b2                	add	a3,a3,a2
	while (IS_DIGIT(ImgIn[Ind])) {
1c001410:	0015460b          	p.lbu	a2,1(a0!)
		Val = Val*10 + (ImgIn[Ind] - 0x30);
1c001414:	fd068593          	addi	a1,a3,-48
		Ind++;
1c001418:	883e                	mv	a6,a5
	while (IS_DIGIT(ImgIn[Ind])) {
1c00141a:	fd060693          	addi	a3,a2,-48
1c00141e:	0ff6f693          	andi	a3,a3,255
1c001422:	fed8f0e3          	bleu	a3,a7,1c001402 <ReadImageFromFile+0x38e>
	if (Val != 255) return 0;
1c001426:	0ff00793          	li	a5,255
1c00142a:	4b01                	li	s6,0
1c00142c:	00f59e63          	bne	a1,a5,1c001448 <ReadImageFromFile+0x3d4>
	while (ImgIn[Ind] != 0xA) Ind++;
1c001430:	00a62a63          	p.beqimm	a2,10,1c001444 <ReadImageFromFile+0x3d0>
1c001434:	00270793          	addi	a5,a4,2
1c001438:	97a6                	add	a5,a5,s1
1c00143a:	0017c70b          	p.lbu	a4,1(a5!)
1c00143e:	0805                	addi	a6,a6,1
1c001440:	fea73de3          	p.bneimm	a4,10,1c00143a <ReadImageFromFile+0x3c6>
	return (Ind+1);
1c001444:	00180b13          	addi	s6,a6,1
		pmsis_l2_malloc_free( Header,256);
1c001448:	10000593          	li	a1,256
1c00144c:	8526                	mv	a0,s1
1c00144e:	7a9110ef          	jal	ra,1c0133f6 <pi_l2_free>
		pi_fs_close(File);
1c001452:	8522                	mv	a0,s0
1c001454:	02a0f0ef          	jal	ra,1c01047e <pi_fs_close>
		pi_fs_unmount(&fs);
1c001458:	0068                	addi	a0,sp,12
1c00145a:	0140f0ef          	jal	ra,1c01046e <pi_fs_unmount>
	if (IsRGB) {
1c00145e:	d00986e3          	beqz	s3,1c00116a <ReadImageFromFile+0xf6>
		printf("Only Gray levels supported, found RGB\n"); goto Fail;
1c001462:	1c017537          	lui	a0,0x1c017
1c001466:	0cc50513          	addi	a0,a0,204 # 1c0170cc <__clz_tab+0x4b4>
1c00146a:	526140ef          	jal	ra,1c015990 <puts>
	void *File = NULL;
1c00146e:	4981                	li	s3,0
1c001470:	b965                	j	1c001128 <ReadImageFromFile+0xb4>
		printf("Failed to open file, %s\n", ImageName); goto Fail;
1c001472:	1c017537          	lui	a0,0x1c017
1c001476:	85de                	mv	a1,s7
1c001478:	0f450513          	addi	a0,a0,244 # 1c0170f4 <__clz_tab+0x4dc>
1c00147c:	674140ef          	jal	ra,1c015af0 <printf>
1c001480:	b165                	j	1c001128 <ReadImageFromFile+0xb4>
	if      (ImgIn[0] == 'P' && ImgIn[1] == '5' && ImgIn[2] == '\n') *IsRGB = 0;
1c001482:	0024c783          	lbu	a5,2(s1)
1c001486:	4981                	li	s3,0
1c001488:	cca7b5e3          	p.bneimm	a5,10,1c001152 <ReadImageFromFile+0xde>
1c00148c:	b3d5                	j	1c001270 <ReadImageFromFile+0x1fc>

1c00148e <__cl_dma_memcpy.constprop.12>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00148e:	30047773          	csrrci	a4,mstatus,8
#define DMA_WRITE(value, offset) pulp_write32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset), (value))
#define DMA_READ(offset) pulp_read32(ARCHI_DEMUX_PERIPHERALS_ADDR + ARCHI_MCHAN_DEMUX_OFFSET + (offset))
#endif

static inline int plp_dma_counter_alloc() {
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001492:	002047b7          	lui	a5,0x204
1c001496:	4007a783          	lw	a5,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(0,  ext2loc,      1, PLP_DMA_TYPE_BIT);
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00149a:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00149e:	01066633          	or	a2,a2,a6
static inline unsigned int plp_dma_getStrides(unsigned short stride, unsigned short len) {
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
}

static inline void plp_dma_cmd_push(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr) {
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0014a2:	00204837          	lui	a6,0x204
1c0014a6:	40c82023          	sw	a2,1024(a6) # 204400 <__L2+0x184400>
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0014aa:	00204637          	lui	a2,0x204
1c0014ae:	40b62023          	sw	a1,1024(a2) # 204400 <__L2+0x184400>
#if defined(ARCHI_HAS_MCHAN_64) && ARCHI_HAS_MCHAN_64 == 1
  DMA_WRITE((int)extAddr, PLP_DMA_QUEUE_OFFSET);
  DMA_WRITE((int)(extAddr>>32), PLP_DMA_QUEUE_OFFSET);
#else
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0014b2:	40a62023          	sw	a0,1024(a2)
        unsigned int cmd = plp_dma_getCmd(dir, size, PLP_DMA_1D, PLP_DMA_TRIG_EVT, PLP_DMA_NO_TRIG_IRQ, PLP_DMA_SHARED);
        // Prevent the compiler from pushing the transfer before all previous
        // stores are done
        __asm__ __volatile__ ("" : : : "memory");
        plp_dma_cmd_push(cmd, loc, ext);
        if (!merge) copy->id = id;
1c0014b6:	c29c                	sw	a5,0(a3)

        copy->length = 0;
1c0014b8:	0006a823          	sw	zero,16(a3)
  __builtin_pulp_spr_write(reg, val);
1c0014bc:	30071073          	csrw	mstatus,a4
    rt_irq_restore(irq);

    #ifdef __RT_USE_PROFILE
    gv_vcd_dump_trace(trace, 1);
    #endif
}
1c0014c0:	8082                	ret

1c0014c2 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0014c2:	7149                	addi	sp,sp,-368
1c0014c4:	16912223          	sw	s1,356(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 199712, 199712]][Tile0, 10:[79x9, 8:79x9, 79x7], 4]
		Tile0: [0, 22752, 2844], Tile1: [0, 22752, 2844], Tile2; [0, 22752, 2844]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20512);
1c0014c8:	100004b7          	lui	s1,0x10000
1c0014cc:	01c48493          	addi	s1,s1,28 # 1000001c <resnet_L1_Memory>
1c0014d0:	4098                	lw	a4,0(s1)
	KerArg0->W = (unsigned short int) (79);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14720);
1c0014d2:	6791                	lui	a5,0x4
1c0014d4:	98078893          	addi	a7,a5,-1664 # 3980 <__rt_stack_size+0x3180>
1c0014d8:	98ba                	add	a7,a7,a4
	KerArg0->NormBias = (signed char) (14);
	KerArg1->W = (unsigned short int) (160);
1c0014da:	1c0173b7          	lui	t2,0x1c017
{
1c0014de:	17212023          	sw	s2,352(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14720);
1c0014e2:	c0c6                	sw	a7,64(sp)
{
1c0014e4:	892e                	mv	s2,a1
  __cl_dma_wait(copy);
}

static inline void pi_cl_dma_cmd(uint32_t ext, uint32_t loc, uint32_t size, pi_cl_dma_dir_e dir, pi_cl_dma_cmd_t *cmd)
{
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c0014e6:	85c6                	mv	a1,a7
	KerArg1->W = (unsigned short int) (160);
1c0014e8:	1e83a883          	lw	a7,488(t2) # 1c0171e8 <__clz_tab+0x5d0>
{
1c0014ec:	15312e23          	sw	s3,348(sp)
1c0014f0:	89b2                	mv	s3,a2
	KerArg1->UsedW = (unsigned short int) (160);
	KerArg1->InFeatures = (unsigned short int) (1);
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14736);
1c0014f2:	99078613          	addi	a2,a5,-1648
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20512);
1c0014f6:	6795                	lui	a5,0x5
	KerArg1->InFeatures = (unsigned short int) (1);
1c0014f8:	1c0172b7          	lui	t0,0x1c017
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20512);
1c0014fc:	02078793          	addi	a5,a5,32 # 5020 <__rt_stack_size+0x4820>
1c001500:	97ba                	add	a5,a5,a4
	KerArg1->W = (unsigned short int) (160);
1c001502:	d3c6                	sw	a7,228(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14736);
1c001504:	9732                	add	a4,a4,a2
	KerArg1->InFeatures = (unsigned short int) (1);
1c001506:	1ec2a883          	lw	a7,492(t0) # 1c0171ec <__clz_tab+0x5d4>
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14736);
1c00150a:	dbba                	sw	a4,244(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+20512);
	KerArg1->Norm = (unsigned char) (14);
	KerArg1->TotalInFeatures = (short int) (1);
1c00150c:	4705                	li	a4,1
	KerArg0->OutFeatures = (unsigned short int) (8);
1c00150e:	4321                	li	t1,8
	KerArg0->NormBias = (signed char) (14);
1c001510:	4e39                	li	t3,14
	KerArg0->W = (unsigned short int) (79);
1c001512:	04f00e93          	li	t4,79
	KerArg1->TotalInFeatures = (short int) (1);
1c001516:	0ee11823          	sh	a4,240(sp)
	KerArg1->Orientation = (unsigned char) (1);
	KerArg1->S = (unsigned char) (2);
1c00151a:	10200713          	li	a4,258
{
1c00151e:	16112623          	sw	ra,364(sp)
1c001522:	15912223          	sw	s9,324(sp)
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
	KerArg3->In = (short int * __restrict__) (resnet_L1_Memory+20512);
	KerArg3->W = (unsigned short int) (79);
1c001526:	1c017fb7          	lui	t6,0x1c017
{
1c00152a:	d62a                	sw	a0,44(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20512);
1c00152c:	da3e                	sw	a5,52(sp)
	KerArg0->W = (unsigned short int) (79);
1c00152e:	03d11c23          	sh	t4,56(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c001532:	02611e23          	sh	t1,60(sp)
	KerArg0->NormBias = (signed char) (14);
1c001536:	03c10f23          	sb	t3,62(sp)
	KerArg1->InFeatures = (unsigned short int) (1);
1c00153a:	d7c6                	sw	a7,236(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+20512);
1c00153c:	ddbe                	sw	a5,248(sp)
	KerArg1->Norm = (unsigned char) (14);
1c00153e:	11c10023          	sb	t3,256(sp)
	KerArg1->S = (unsigned char) (2);
1c001542:	10e11123          	sh	a4,258(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+20512);
1c001546:	c2be                	sw	a5,68(sp)
	KerArg2->W = (unsigned short int) (79);
1c001548:	05d11423          	sh	t4,72(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20512);
1c00154c:	c6be                	sw	a5,76(sp)
{
1c00154e:	16812423          	sw	s0,360(sp)
1c001552:	15412c23          	sw	s4,344(sp)
1c001556:	15512a23          	sw	s5,340(sp)
1c00155a:	15612823          	sw	s6,336(sp)
1c00155e:	15712623          	sw	s7,332(sp)
1c001562:	15812423          	sw	s8,328(sp)
1c001566:	15a12023          	sw	s10,320(sp)
1c00156a:	13b12e23          	sw	s11,316(sp)
	KerArg2->Norm = (unsigned char) (14);
1c00156e:	05c10823          	sb	t3,80(sp)
	KerArg3->In = (short int * __restrict__) (resnet_L1_Memory+20512);
1c001572:	10f12423          	sw	a5,264(sp)
	KerArg3->W = (unsigned short int) (79);
1c001576:	1f0fa783          	lw	a5,496(t6) # 1c0171f0 <__clz_tab+0x5d8>
	KerArg3->UsedW = (unsigned short int) (79);
	KerArg3->OutFeatures = (unsigned short int) (8);
	KerArg3->Pad = (v4s) 0;
	KerArg3->M = (unsigned char) (3);
1c00157a:	1c017f37          	lui	t5,0x1c017
	KerArg2->UB = (int) (32767);
1c00157e:	6821                	lui	a6,0x8
	KerArg3->W = (unsigned short int) (79);
1c001580:	10f12623          	sw	a5,268(sp)
	KerArg3->M = (unsigned char) (3);
1c001584:	1f4f2783          	lw	a5,500(t5) # 1c0171f4 <__clz_tab+0x5dc>
	KerArg2->UB = (int) (32767);
1c001588:	187d                	addi	a6,a6,-1
	KerArg3->Pad = (v4s) 0;
1c00158a:	00007757          	pv.add.sci.b	a4,zero,0
{
1c00158e:	8cb6                	mv	s9,a3
1c001590:	4641                	li	a2,16
1c001592:	1094                	addi	a3,sp,96
1c001594:	854e                	mv	a0,s3
	KerArg3->M = (unsigned char) (3);
1c001596:	12f12023          	sw	a5,288(sp)
	KerArg2->InFeatures = (unsigned short int) (8);
1c00159a:	04611923          	sh	t1,82(sp)
	KerArg2->LB = (int) (0);
1c00159e:	ca82                	sw	zero,84(sp)
	KerArg2->UB = (int) (32767);
1c0015a0:	ccc2                	sw	a6,88(sp)
	KerArg3->OutFeatures = (unsigned short int) (8);
1c0015a2:	10611a23          	sh	t1,276(sp)
	KerArg3->Pad = (v4s) 0;
1c0015a6:	10e12e23          	sw	a4,284(sp)
	KerArg3->S = (unsigned char) (2);
	KerArg3->Orientation = (unsigned char) (1);
	KerArg3->Oper = (unsigned char) (1);
	KerArg3->LB = (int) (0);
1c0015aa:	12012423          	sw	zero,296(sp)
	KerArg3->UB = (int) (32767);
1c0015ae:	13012623          	sw	a6,300(sp)
1c0015b2:	3df1                	jal	1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c0015b4:	57c6                	lw	a5,112(sp)
1c0015b6:	48078963          	beqz	a5,1c001a48 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x586>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0015ba:	56e6                	lw	a3,120(sp)
  This is useful when the mask must be updated before waiting for a specific event without modifying the other events (this saves a few instructions)
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is set in the event mask.
  */
static inline void eu_evt_maskSet(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015bc:	02000713          	li	a4,32
1c0015c0:	002047b7          	lui	a5,0x204
1c0015c4:	ca89                	beqz	a3,1c0015d6 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x114>
1c0015c6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0015ca:	03c7e683          	p.elw	a3,60(a5)
  This is the opposite of eu_evt_maskSet. For each bit at 1 in the new value, the corresponding bit is set to 0 in the event mask and the others remain the same.
  \param evtMask Bit mask used to update the event mask. There is 1 bit per event, 1 means the corresponding bit is cleared in the event mask.
  */
static inline void eu_evt_maskClr(unsigned int evtMask)
{
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0015ce:	00e7a223          	sw	a4,4(a5)
1c0015d2:	56e6                	lw	a3,120(sp)
1c0015d4:	faed                	bnez	a3,1c0015c6 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x104>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=2496; _LC_Out=312;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14720), 16, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14736), 784, 0, &DmaR_Evt2);
1c0015d6:	408c                	lw	a1,0(s1)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c0015d8:	6791                	lui	a5,0x4
1c0015da:	99078793          	addi	a5,a5,-1648 # 3990 <__rt_stack_size+0x3190>
1c0015de:	95be                	add	a1,a1,a5
1c0015e0:	0114                	addi	a3,sp,128
1c0015e2:	31000613          	li	a2,784
1c0015e6:	854a                	mv	a0,s2
1c0015e8:	355d                	jal	1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c0015ea:	47ca                	lw	a5,144(sp)
1c0015ec:	40078263          	beqz	a5,1c0019f0 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x52e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0015f0:	46ea                	lw	a3,152(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0015f2:	02000713          	li	a4,32
1c0015f6:	002047b7          	lui	a5,0x204
1c0015fa:	ca89                	beqz	a3,1c00160c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x14a>
1c0015fc:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001600:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001604:	00e7a223          	sw	a4,4(a5)
1c001608:	46ea                	lw	a3,152(sp)
1c00160a:	faed                	bnez	a3,1c0015fc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x13a>
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c00160c:	408c                	lw	a1,0(s1)
1c00160e:	5532                	lw	a0,44(sp)
1c001610:	6a09                	lui	s4,0x2
1c001612:	1114                	addi	a3,sp,160
1c001614:	900a0613          	addi	a2,s4,-1792 # 1900 <__rt_stack_size+0x1100>
1c001618:	3d9d                	jal	1c00148e <__cl_dma_memcpy.constprop.12>
1c00161a:	6905                	lui	s2,0x1
1c00161c:	c3090713          	addi	a4,s2,-976 # c30 <__rt_stack_size+0x430>
1c001620:	af890d93          	addi	s11,s2,-1288
1c001624:	9de6                	add	s11,s11,s9
#endif
}

static inline void eu_dispatch_team_config(unsigned value)
{
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001626:	00204d37          	lui	s10,0x204
1c00162a:	9766                	add	a4,a4,s9
1c00162c:	4a81                	li	s5,0
	_C_Out=0; _SC_Out=2496; _LC_Out=312;
1c00162e:	13800793          	li	a5,312
1c001632:	9c090913          	addi	s2,s2,-1600
1c001636:	1854                	addi	a3,sp,52
1c001638:	d26e                	sw	s11,36(sp)
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1, D0Ind_NextLast = 1;
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(T0Ind_Last)) {
					_N_In = _N_In + (5120-(960*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?6080:7360)); 
1c00163a:	6985                	lui	s3,0x1
1c00163c:	d43a                	sw	a4,40(sp)
	_N_In=0;
1c00163e:	cc02                	sw	zero,24(sp)
	_C_Out=0; _SC_Out=2496; _LC_Out=312;
1c001640:	d03e                	sw	a5,32(sp)
	_SP_Out=0;
1c001642:	ce02                	sw	zero,28(sp)
1c001644:	c836                	sw	a3,16(sp)
1c001646:	0e010c13          	addi	s8,sp,224
1c00164a:	04410b93          	addi	s7,sp,68
1c00164e:	10810b13          	addi	s6,sp,264
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001652:	200d0d93          	addi	s11,s10,512 # 204200 <__L2+0x184200>
			KerArg2->H = (unsigned short int) (T0Ind_Last?7:9);
			AT_FORK(gap_ncore(), (void *) KerDP_IO_fp, (void *) KerArg2);
			__CALL(KerDP_IO_fp, KerArg2);
			KerArg3->H = (unsigned short int) (T0Ind_Last?7:9);
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?7:9);
			KerArg3->Out = (short int * __restrict__) (resnet_L1_Memory+15520+2496*((T0Ind_Total)%2));
1c001656:	ca4a                	sw	s2,20(sp)
1c001658:	8a56                	mv	s4,s5
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00165a:	0ff00793          	li	a5,255
			KerArg0->H = (unsigned short int) (T0Ind_Last?7:9);
1c00165e:	469a2363          	p.beqimm	s4,9,1c001ac4 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x602>
1c001662:	46a5                	li	a3,9
1c001664:	02d11d23          	sh	a3,58(sp)
1c001668:	08fd2223          	sw	a5,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00166c:	00fda023          	sw	a5,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001670:	00fda623          	sw	a5,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001674:	1c00c737          	lui	a4,0x1c00c
1c001678:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c00167c:	08ed2023          	sw	a4,128(s10)
1c001680:	47c2                	lw	a5,16(sp)
1c001682:	08fd2023          	sw	a5,128(s10)
#endif

  if (nb_cores) __rt_team_config(nb_cores);
  eu_dispatch_push((int)entry);
  eu_dispatch_push((int)arg);
  entry(arg);
1c001686:	1848                	addi	a0,sp,52
1c001688:	57e0a0ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00168c:	01cde783          	p.elw	a5,28(s11)
					_N_In = _N_In + (5120-(960*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?6080:7360)); 
1c001690:	400a0a63          	beqz	s4,1c001aa4 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x5e2>
1c001694:	46e2                	lw	a3,24(sp)
1c001696:	40098793          	addi	a5,s3,1024 # 1400 <__rt_stack_size+0xc00>
1c00169a:	1c017737          	lui	a4,0x1c017
1c00169e:	96be                	add	a3,a3,a5
1c0016a0:	1f870713          	addi	a4,a4,504 # 1c0171f8 <__clz_tab+0x5e0>
1c0016a4:	cc36                	sw	a3,24(sp)
			KerArg0->H = (unsigned short int) (T0Ind_Last?7:9);
1c0016a6:	4425                	li	s0,9
					_N_In = _N_In + (5120-(960*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?6080:7360)); 
1c0016a8:	4308                	lw	a0,0(a4)
1c0016aa:	408a2a63          	p.beqimm	s4,8,1c001abe <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x5fc>
  if (copy->length == 0)
1c0016ae:	57ca                	lw	a5,176(sp)
1c0016b0:	1c078463          	beqz	a5,1c001878 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x3b6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0016b4:	56ea                	lw	a3,184(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0016b6:	02000793          	li	a5,32
1c0016ba:	ca89                	beqz	a3,1c0016cc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x20a>
1c0016bc:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0016c0:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0016c4:	00fd2223          	sw	a5,4(s10)
1c0016c8:	576a                	lw	a4,184(sp)
1c0016ca:	fb6d                	bnez	a4,1c0016bc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x1fa>
1c0016cc:	409c                	lw	a5,0(s1)
1c0016ce:	001a0613          	addi	a2,s4,1
				if (_SN_In) {
1c0016d2:	1e051d63          	bnez	a0,1c0018cc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x40a>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7360*((D0Ind_Total)%2));
1c0016d6:	6709                	lui	a4,0x2
1c0016d8:	fc1a3ab3          	p.bclr	s5,s4,30,1
1c0016dc:	cc070713          	addi	a4,a4,-832 # 1cc0 <__rt_stack_size+0x14c0>
1c0016e0:	42ea87b3          	p.mac	a5,s5,a4
1c0016e4:	d1be                	sw	a5,224(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?19:23)-3*(T0Ind==0));
1c0016e6:	229a2f63          	p.beqimm	s4,9,1c001924 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x462>
1c0016ea:	001a3793          	seqz	a5,s4
1c0016ee:	00179693          	slli	a3,a5,0x1
1c0016f2:	96be                	add	a3,a3,a5
1c0016f4:	47dd                	li	a5,23
1c0016f6:	8f95                	sub	a5,a5,a3
1c0016f8:	1007d7b3          	p.exthz	a5,a5
1c0016fc:	0ef11423          	sh	a5,232(sp)
				KerArg1->UsedH = (unsigned short int) (((T0Ind_Last)?19:23)-3*(T0Ind==0));
1c001700:	0ef11523          	sh	a5,234(sp)
				KerArg1->Pad = (v4s) ((v4s){3,0,3*(T0Ind==0),0*(T0Ind_Last)});
1c001704:	380a0e63          	beqz	s4,1c001aa0 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x5de>
1c001708:	4501                	li	a0,0
1c00170a:	4781                	li	a5,0
1c00170c:	468d                	li	a3,3
1c00170e:	e0d796d7          	pv.packlo.b	a3,a5,a3
1c001712:	d8a796d7          	pv.packhi.b	a3,a5,a0
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001716:	0ff00913          	li	s2,255
1c00171a:	dfb6                	sw	a3,252(sp)
1c00171c:	092d2223          	sw	s2,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001720:	012da023          	sw	s2,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001724:	012da623          	sw	s2,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001728:	1c00e7b7          	lui	a5,0x1c00e
1c00172c:	a8e78793          	addi	a5,a5,-1394 # 1c00da8e <KerParConv7x7StrideS_DP_fp>
1c001730:	08fd2023          	sw	a5,128(s10)
1c001734:	098d2023          	sw	s8,128(s10)
1c001738:	8562                	mv	a0,s8
1c00173a:	c632                	sw	a2,12(sp)
1c00173c:	3520c0ef          	jal	ra,1c00da8e <KerParConv7x7StrideS_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001740:	01cde683          	p.elw	a3,28(s11)
			KerArg2->H = (unsigned short int) (T0Ind_Last?7:9);
1c001744:	04811523          	sh	s0,74(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001748:	092d2223          	sw	s2,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00174c:	012da023          	sw	s2,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001750:	012da623          	sw	s2,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001754:	1c00c6b7          	lui	a3,0x1c00c
1c001758:	f1668693          	addi	a3,a3,-234 # 1c00bf16 <KerDP_IO_fp>
1c00175c:	08dd2023          	sw	a3,128(s10)
1c001760:	097d2023          	sw	s7,128(s10)
1c001764:	855e                	mv	a0,s7
1c001766:	7b00a0ef          	jal	ra,1c00bf16 <KerDP_IO_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00176a:	01cde683          	p.elw	a3,28(s11)
			KerArg3->Out = (short int * __restrict__) (resnet_L1_Memory+15520+2496*((T0Ind_Total)%2));
1c00176e:	6711                	lui	a4,0x4
1c001770:	9c098693          	addi	a3,s3,-1600
1c001774:	ca070713          	addi	a4,a4,-864 # 3ca0 <__rt_stack_size+0x34a0>
1c001778:	42da8733          	p.mac	a4,s5,a3
1c00177c:	408c                	lw	a1,0(s1)
			KerArg3->H = (unsigned short int) (T0Ind_Last?7:9);
1c00177e:	10811823          	sh	s0,272(sp)
			KerArg3->UsedH = (unsigned short int) (T0Ind_Last?7:9);
1c001782:	10811923          	sh	s0,274(sp)
			KerArg3->Out = (short int * __restrict__) (resnet_L1_Memory+15520+2496*((T0Ind_Total)%2));
1c001786:	95ba                	add	a1,a1,a4
1c001788:	8aba                	mv	s5,a4
1c00178a:	10b12c23          	sw	a1,280(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00178e:	092d2223          	sw	s2,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001792:	012da023          	sw	s2,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001796:	012da623          	sw	s2,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00179a:	1c0107b7          	lui	a5,0x1c010
1c00179e:	a2678793          	addi	a5,a5,-1498 # 1c00fa26 <KerParPoolNxNStrideS_fp>
1c0017a2:	08fd2023          	sw	a5,128(s10)
1c0017a6:	096d2023          	sw	s6,128(s10)
1c0017aa:	855a                	mv	a0,s6
1c0017ac:	27a0e0ef          	jal	ra,1c00fa26 <KerParPoolNxNStrideS_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0017b0:	01cde783          	p.elw	a5,28(s11)
			AT_FORK(gap_ncore(), (void *) KerParPoolNxNStrideS_fp, (void *) KerArg3);
			__CALL(KerParPoolNxNStrideS_fp, KerArg3);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0017b4:	46f2                	lw	a3,28(sp)
1c0017b6:	4632                	lw	a2,12(sp)
1c0017b8:	16069a63          	bnez	a3,1c00192c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x46a>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15520+2496*((T0Ind_Total)%2)),
1c0017bc:	4094                	lw	a3,0(s1)
1c0017be:	96d6                	add	a3,a3,s5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0017c0:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0017c4:	400d2503          	lw	a0,1024(s10)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0017c8:	4752                	lw	a4,20(sp)
1c0017ca:	100757b3          	p.exthz	a5,a4
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0017ce:	c517c7b3          	p.bset	a5,a5,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0017d2:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0017d6:	40fd2023          	sw	a5,1024(s10)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0017da:	40dd2023          	sw	a3,1024(s10)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0017de:	419d2023          	sw	s9,1024(s10)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0017e2:	5682                	lw	a3,32(sp)
1c0017e4:	0be207b7          	lui	a5,0xbe20
1c0017e8:	00f6eab3          	or	s5,a3,a5
#endif
}

static inline void plp_dma_cmd_push_2d(unsigned int cmd, unsigned int locAddr, mchan_ext_t extAddr, unsigned int stride, unsigned int length) {
  plp_dma_cmd_push(cmd, locAddr, extAddr);
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0017ec:	415d2023          	sw	s5,1024(s10)
        if (!merge) copy->id = id;
1c0017f0:	c1aa                	sw	a0,192(sp)
        copy->length = 0;
1c0017f2:	c982                	sw	zero,208(sp)
  __builtin_pulp_spr_write(reg, val);
1c0017f4:	30059073          	csrw	mstatus,a1
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c0017f8:	5712                	lw	a4,36(sp)
1c0017fa:	03970263          	beq	a4,s9,1c00181e <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x35c>
				_C_Out = _C_Out + (312); _LC_Out = ((T0Ind_NextLast)?234:312); _SC_Out = (8*_LC_Out); 
1c0017fe:	2e8a2d63          	p.beqimm	s4,8,1c001af8 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x636>
1c001802:	13800693          	li	a3,312
1c001806:	9c098793          	addi	a5,s3,-1600
1c00180a:	d036                	sw	a3,32(sp)
1c00180c:	46d2                	lw	a3,20(sp)
		for (T0Ind=0; T0Ind<10; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00180e:	5722                	lw	a4,40(sp)
1c001810:	138c8c93          	addi	s9,s9,312
1c001814:	ce36                	sw	a3,28(sp)
				_C_Out = _C_Out + (312); _LC_Out = ((T0Ind_NextLast)?234:312); _SC_Out = (8*_LC_Out); 
1c001816:	ca3e                	sw	a5,20(sp)
1c001818:	8a32                	mv	s4,a2
		for (T0Ind=0; T0Ind<10; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00181a:	e59710e3          	bne	a4,s9,1c00165a <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x198>
  if (copy->length == 0)
1c00181e:	47ce                	lw	a5,208(sp)
1c001820:	16078c63          	beqz	a5,1c001998 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x4d6>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001824:	46ee                	lw	a3,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001826:	02000713          	li	a4,32
1c00182a:	002047b7          	lui	a5,0x204
1c00182e:	ca89                	beqz	a3,1c001840 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x37e>
1c001830:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001834:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001838:	00e7a223          	sw	a4,4(a5)
1c00183c:	46ee                	lw	a3,216(sp)
1c00183e:	faed                	bnez	a3,1c001830 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x36e>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001840:	16c12083          	lw	ra,364(sp)
1c001844:	16812403          	lw	s0,360(sp)
1c001848:	16412483          	lw	s1,356(sp)
1c00184c:	16012903          	lw	s2,352(sp)
1c001850:	15c12983          	lw	s3,348(sp)
1c001854:	15812a03          	lw	s4,344(sp)
1c001858:	15412a83          	lw	s5,340(sp)
1c00185c:	15012b03          	lw	s6,336(sp)
1c001860:	14c12b83          	lw	s7,332(sp)
1c001864:	14812c03          	lw	s8,328(sp)
1c001868:	14412c83          	lw	s9,324(sp)
1c00186c:	14012d03          	lw	s10,320(sp)
1c001870:	13c12d83          	lw	s11,316(sp)
1c001874:	6175                	addi	sp,sp,368
1c001876:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001878:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00187c:	404d2783          	lw	a5,1028(s10)
1c001880:	568a                	lw	a3,160(sp)
1c001882:	40d7d7b3          	sra	a5,a5,a3
1c001886:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00188a:	c78d                	beqz	a5,1c0018b4 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x3f2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00188c:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c001890:	30061073          	csrw	mstatus,a2
1c001894:	00bd2423          	sw	a1,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001898:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00189c:	00bd2223          	sw	a1,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018a0:	30047673          	csrrci	a2,mstatus,8
1c0018a4:	404d2783          	lw	a5,1028(s10)
1c0018a8:	568a                	lw	a3,160(sp)
1c0018aa:	40d7d7b3          	sra	a5,a5,a3
1c0018ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0018b2:	fff9                	bnez	a5,1c001890 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x3ce>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0018b4:	4785                	li	a5,1
1c0018b6:	00d796b3          	sll	a3,a5,a3
1c0018ba:	40dd2223          	sw	a3,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c0018be:	30061073          	csrw	mstatus,a2
1c0018c2:	409c                	lw	a5,0(s1)
1c0018c4:	001a0613          	addi	a2,s4,1
				if (_SN_In) {
1c0018c8:	e00507e3          	beqz	a0,1c0016d6 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x214>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0018cc:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0018d0:	400d2303          	lw	t1,1024(s10)
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0018d4:	000306b7          	lui	a3,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0018d8:	de0526b3          	p.insert	a3,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0018dc:	c136c6b3          	p.bset	a3,a3,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0018e0:	c156c6b3          	p.bset	a3,a3,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0018e4:	40dd2023          	sw	a3,1024(s10)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7360*((D0Ind_Total+1)%2)),
1c0018e8:	6709                	lui	a4,0x2
1c0018ea:	fc1636b3          	p.bclr	a3,a2,30,1
1c0018ee:	cc070713          	addi	a4,a4,-832 # 1cc0 <__rt_stack_size+0x14c0>
1c0018f2:	42e687b3          	p.mac	a5,a3,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0018f6:	40fd2023          	sw	a5,1024(s10)
1c0018fa:	5732                	lw	a4,44(sp)
1c0018fc:	46e2                	lw	a3,24(sp)
1c0018fe:	00d707b3          	add	a5,a4,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001902:	40fd2023          	sw	a5,1024(s10)
        if (!merge) copy->id = id;
1c001906:	d11a                	sw	t1,160(sp)
        copy->length = 0;
1c001908:	d902                	sw	zero,176(sp)
  __builtin_pulp_spr_write(reg, val);
1c00190a:	30059073          	csrw	mstatus,a1
1c00190e:	409c                	lw	a5,0(s1)
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7360*((D0Ind_Total)%2));
1c001910:	6709                	lui	a4,0x2
1c001912:	fc1a3ab3          	p.bclr	s5,s4,30,1
1c001916:	cc070713          	addi	a4,a4,-832 # 1cc0 <__rt_stack_size+0x14c0>
1c00191a:	42ea87b3          	p.mac	a5,s5,a4
1c00191e:	d1be                	sw	a5,224(sp)
				KerArg1->H = (unsigned short int) (((T0Ind_Last)?19:23)-3*(T0Ind==0));
1c001920:	dc9a35e3          	p.bneimm	s4,9,1c0016ea <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x228>
1c001924:	02906757          	pv.add.sci.h	a4,zero,19
1c001928:	d5ba                	sw	a4,232(sp)
1c00192a:	bbf9                	j	1c001708 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x246>
  if (copy->length == 0)
1c00192c:	47ce                	lw	a5,208(sp)
1c00192e:	cf99                	beqz	a5,1c00194c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x48a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001930:	46ee                	lw	a3,216(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001932:	02000793          	li	a5,32
1c001936:	e80683e3          	beqz	a3,1c0017bc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x2fa>
1c00193a:	00fd2423          	sw	a5,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00193e:	03cd6703          	p.elw	a4,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001942:	00fd2223          	sw	a5,4(s10)
1c001946:	476e                	lw	a4,216(sp)
1c001948:	fb6d                	bnez	a4,1c00193a <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x478>
1c00194a:	bd8d                	j	1c0017bc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x2fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00194c:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001950:	404d2783          	lw	a5,1028(s10)
1c001954:	468e                	lw	a3,192(sp)
1c001956:	40d7d7b3          	sra	a5,a5,a3
1c00195a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00195e:	c78d                	beqz	a5,1c001988 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x4c6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001960:	10000513          	li	a0,256
  __builtin_pulp_spr_write(reg, val);
1c001964:	30059073          	csrw	mstatus,a1
1c001968:	00ad2423          	sw	a0,8(s10)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00196c:	03cd6783          	p.elw	a5,60(s10)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001970:	00ad2223          	sw	a0,4(s10)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001974:	300475f3          	csrrci	a1,mstatus,8
1c001978:	404d2783          	lw	a5,1028(s10)
1c00197c:	468e                	lw	a3,192(sp)
1c00197e:	40d7d7b3          	sra	a5,a5,a3
1c001982:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001986:	fff9                	bnez	a5,1c001964 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x4a2>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001988:	4785                	li	a5,1
1c00198a:	00d796b3          	sll	a3,a5,a3
1c00198e:	40dd2223          	sw	a3,1028(s10)
  __builtin_pulp_spr_write(reg, val);
1c001992:	30059073          	csrw	mstatus,a1
1c001996:	b51d                	j	1c0017bc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x2fa>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001998:	30047673          	csrrci	a2,mstatus,8
1c00199c:	002047b7          	lui	a5,0x204
1c0019a0:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0019a4:	468e                	lw	a3,192(sp)
1c0019a6:	40d7d7b3          	sra	a5,a5,a3
1c0019aa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0019ae:	c79d                	beqz	a5,1c0019dc <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x51a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0019b0:	10000593          	li	a1,256
1c0019b4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0019b8:	30061073          	csrw	mstatus,a2
1c0019bc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0019c0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0019c4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019c8:	30047673          	csrrci	a2,mstatus,8
1c0019cc:	40472783          	lw	a5,1028(a4)
1c0019d0:	468e                	lw	a3,192(sp)
1c0019d2:	40d7d7b3          	sra	a5,a5,a3
1c0019d6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0019da:	fff9                	bnez	a5,1c0019b8 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x4f6>
1c0019dc:	4785                	li	a5,1
1c0019de:	00d796b3          	sll	a3,a5,a3
1c0019e2:	002047b7          	lui	a5,0x204
1c0019e6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0019ea:	30061073          	csrw	mstatus,a2
1c0019ee:	bd89                	j	1c001840 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x37e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0019f0:	30047673          	csrrci	a2,mstatus,8
1c0019f4:	002047b7          	lui	a5,0x204
1c0019f8:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0019fc:	468a                	lw	a3,128(sp)
1c0019fe:	40d7d7b3          	sra	a5,a5,a3
1c001a02:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a06:	c79d                	beqz	a5,1c001a34 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x572>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a08:	10000593          	li	a1,256
1c001a0c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001a10:	30061073          	csrw	mstatus,a2
1c001a14:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a18:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a1c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a20:	30047673          	csrrci	a2,mstatus,8
1c001a24:	40472783          	lw	a5,1028(a4)
1c001a28:	468a                	lw	a3,128(sp)
1c001a2a:	40d7d7b3          	sra	a5,a5,a3
1c001a2e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a32:	fff9                	bnez	a5,1c001a10 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x54e>
1c001a34:	4785                	li	a5,1
1c001a36:	00d796b3          	sll	a3,a5,a3
1c001a3a:	002047b7          	lui	a5,0x204
1c001a3e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001a42:	30061073          	csrw	mstatus,a2
1c001a46:	b6d9                	j	1c00160c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x14a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a48:	30047673          	csrrci	a2,mstatus,8
1c001a4c:	002047b7          	lui	a5,0x204
1c001a50:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c001a54:	5686                	lw	a3,96(sp)
1c001a56:	40d7d7b3          	sra	a5,a5,a3
1c001a5a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a5e:	c79d                	beqz	a5,1c001a8c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x5ca>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001a60:	10000593          	li	a1,256
1c001a64:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001a68:	30061073          	csrw	mstatus,a2
1c001a6c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001a70:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001a74:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001a78:	30047673          	csrrci	a2,mstatus,8
1c001a7c:	40472783          	lw	a5,1028(a4)
1c001a80:	5686                	lw	a3,96(sp)
1c001a82:	40d7d7b3          	sra	a5,a5,a3
1c001a86:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001a8a:	fff9                	bnez	a5,1c001a68 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x5a6>
1c001a8c:	4785                	li	a5,1
1c001a8e:	00d796b3          	sll	a3,a5,a3
1c001a92:	002047b7          	lui	a5,0x204
1c001a96:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c001a9a:	30061073          	csrw	mstatus,a2
1c001a9e:	be25                	j	1c0015d6 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x114>
				KerArg1->Pad = (v4s) ((v4s){3,0,3*(T0Ind==0),0*(T0Ind_Last)});
1c001aa0:	450d                	li	a0,3
1c001aa2:	b1a5                	j	1c00170a <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x248>
					_N_In = _N_In + (5120-(960*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?6080:7360)); 
1c001aa4:	4762                	lw	a4,24(sp)
1c001aa6:	6785                	lui	a5,0x1
1c001aa8:	04078793          	addi	a5,a5,64 # 1040 <__rt_stack_size+0x840>
1c001aac:	1c0176b7          	lui	a3,0x1c017
1c001ab0:	973e                	add	a4,a4,a5
1c001ab2:	1f868693          	addi	a3,a3,504 # 1c0171f8 <__clz_tab+0x5e0>
1c001ab6:	cc3a                	sw	a4,24(sp)
			KerArg0->H = (unsigned short int) (T0Ind_Last?7:9);
1c001ab8:	4425                	li	s0,9
					_N_In = _N_In + (5120-(960*(T0Ind==0))); _SN_In = (1*((T0Ind_NextLast)?6080:7360)); 
1c001aba:	4288                	lw	a0,0(a3)
1c001abc:	becd                	j	1c0016ae <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x1ec>
1c001abe:	7c098513          	addi	a0,s3,1984
1c001ac2:	b6f5                	j	1c0016ae <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x1ec>
			KerArg0->H = (unsigned short int) (T0Ind_Last?7:9);
1c001ac4:	469d                	li	a3,7
1c001ac6:	02d11d23          	sh	a3,58(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001aca:	08fd2223          	sw	a5,132(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001ace:	00fda023          	sw	a5,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001ad2:	00fda623          	sw	a5,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001ad6:	1c00c7b7          	lui	a5,0x1c00c
1c001ada:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c001ade:	08fd2023          	sw	a5,128(s10)
1c001ae2:	46c2                	lw	a3,16(sp)
1c001ae4:	08dd2023          	sw	a3,128(s10)
1c001ae8:	1848                	addi	a0,sp,52
1c001aea:	11c0a0ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001aee:	01cde783          	p.elw	a5,28(s11)
1c001af2:	441d                	li	s0,7
				_SN_In = 0;
1c001af4:	4501                	li	a0,0
1c001af6:	be65                	j	1c0016ae <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x1ec>
				_C_Out = _C_Out + (312); _LC_Out = ((T0Ind_NextLast)?234:312); _SC_Out = (8*_LC_Out); 
1c001af8:	0ea00713          	li	a4,234
1c001afc:	75000793          	li	a5,1872
1c001b00:	d03a                	sw	a4,32(sp)
1c001b02:	b329                	j	1c00180c <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu+0x34a>

1c001b04 <S7_Conv2d_8x8x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c001b04:	7129                	addi	sp,sp,-320
1c001b06:	12812c23          	sw	s0,312(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 48672, 48672]][Tile0, 3:[39x13, 1:39x13, 39x13], 4]
		Tile0: [0, 16224, 2028], Tile1: [0, 16224, 2028], Tile2; [0, 16224, 2028]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b0a:	10000437          	lui	s0,0x10000
1c001b0e:	01c40413          	addi	s0,s0,28 # 1000001c <resnet_L1_Memory>
1c001b12:	00042803          	lw	a6,0(s0)
	KerArg0->W = (unsigned short int) (39);
1c001b16:	1c0177b7          	lui	a5,0x1c017
1c001b1a:	2107af03          	lw	t5,528(a5) # 1c017210 <__clz_tab+0x5f8>
	KerArg0->H = (unsigned short int) (13);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c001b1e:	678d                	lui	a5,0x3
1c001b20:	6d878313          	addi	t1,a5,1752 # 36d8 <__rt_stack_size+0x2ed8>
	KerArg0->NormBias = (signed char) (13);
	KerArg1->W = (unsigned short int) (39);
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c001b24:	6e878793          	addi	a5,a5,1768
{
1c001b28:	13212823          	sw	s2,304(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c001b2c:	97c2                	add	a5,a5,a6
	KerArg1->W = (unsigned short int) (39);
1c001b2e:	1c017fb7          	lui	t6,0x1c017
{
1c001b32:	8936                	mv	s2,a3
	KerArg0->NormBias = (signed char) (13);
1c001b34:	46b5                	li	a3,13
1c001b36:	02d10b23          	sb	a3,54(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c001b3a:	d7be                	sw	a5,236(sp)
	KerArg1->W = (unsigned short int) (39);
1c001b3c:	214fa683          	lw	a3,532(t6) # 1c017214 <__clz_tab+0x5fc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b40:	68a1                	lui	a7,0x8
	KerArg1->OutFeatures = (unsigned short int) (8);
1c001b42:	000807b7          	lui	a5,0x80
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b46:	ac888713          	addi	a4,a7,-1336 # 7ac8 <__rt_stack_size+0x72c8>
	KerArg1->OutFeatures = (unsigned short int) (8);
1c001b4a:	07a1                	addi	a5,a5,8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b4c:	9742                	add	a4,a4,a6
	KerArg0->OutFeatures = (unsigned short int) (8);
1c001b4e:	4e21                	li	t3,8
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
	KerArg1->Norm = (unsigned char) (15);
1c001b50:	4ebd                	li	t4,15
	KerArg1->OutFeatures = (unsigned short int) (8);
1c001b52:	0ef12323          	sw	a5,230(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c001b56:	006802b3          	add	t0,a6,t1
	KerArg1->TotalInFeatures = (short int) (8);
	KerArg1->Orientation = (unsigned char) (1);
1c001b5a:	4785                	li	a5,1
{
1c001b5c:	13312623          	sw	s3,300(sp)
1c001b60:	ce2a                	sw	a0,28(sp)
1c001b62:	12112e23          	sw	ra,316(sp)
1c001b66:	12912a23          	sw	s1,308(sp)
1c001b6a:	13412423          	sw	s4,296(sp)
1c001b6e:	13512223          	sw	s5,292(sp)
1c001b72:	13612023          	sw	s6,288(sp)
1c001b76:	11712e23          	sw	s7,284(sp)
1c001b7a:	11812c23          	sw	s8,280(sp)
1c001b7e:	11912a23          	sw	s9,276(sp)
1c001b82:	11a12823          	sw	s10,272(sp)
1c001b86:	11b12623          	sw	s11,268(sp)
	KerArg2->W = (unsigned short int) (39);
	KerArg2->H = (unsigned short int) (13);
	KerArg2->Norm = (unsigned char) (15);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c001b8a:	18fd                	addi	a7,a7,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b8c:	d63a                	sw	a4,44(sp)
	KerArg0->W = (unsigned short int) (39);
1c001b8e:	d87a                	sw	t5,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c001b90:	03c11a23          	sh	t3,52(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c001b94:	dc16                	sw	t0,56(sp)
	KerArg1->W = (unsigned short int) (39);
1c001b96:	cfb6                	sw	a3,220(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c001b98:	d9ba                	sw	a4,240(sp)
	KerArg1->Norm = (unsigned char) (15);
1c001b9a:	0fd10c23          	sb	t4,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c001b9e:	0ef10da3          	sb	a5,251(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31432);
1c001ba2:	de3a                	sw	a4,60(sp)
	KerArg2->W = (unsigned short int) (39);
1c001ba4:	c0fa                	sw	t5,64(sp)
	KerArg2->Norm = (unsigned char) (15);
1c001ba6:	05d10423          	sb	t4,72(sp)
	KerArg2->InFeatures = (unsigned short int) (8);
1c001baa:	05c11523          	sh	t3,74(sp)
{
1c001bae:	89ae                	mv	s3,a1
1c001bb0:	8532                	mv	a0,a2
	KerArg2->UB = (int) (32767);
1c001bb2:	c8c6                	sw	a7,80(sp)
	KerArg2->LB = (int) (0);
1c001bb4:	c682                	sw	zero,76(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001bb6:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001bba:	002044b7          	lui	s1,0x204
1c001bbe:	4004a683          	lw	a3,1024(s1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001bc2:	000727b7          	lui	a5,0x72
1c001bc6:	99878793          	addi	a5,a5,-1640 # 71998 <__L1Cl+0x61998>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001bca:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001bce:	c157c7b3          	p.bset	a5,a5,0,21
1c001bd2:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001bd6:	4104a023          	sw	a6,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001bda:	47f2                	lw	a5,28(sp)
1c001bdc:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001be0:	0be207b7          	lui	a5,0xbe20
1c001be4:	44478793          	addi	a5,a5,1092 # be20444 <__L2+0xbda0444>
1c001be8:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c001bec:	ccb6                	sw	a3,88(sp)
        copy->length = 0;
1c001bee:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c001bf0:	30071073          	csrw	mstatus,a4
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 6552, 3042, 1092, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14040), 16, 0, &DmaR_Evt2);
1c001bf4:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c001bf6:	18b4                	addi	a3,sp,120
1c001bf8:	4641                	li	a2,16
1c001bfa:	959a                	add	a1,a1,t1
1c001bfc:	893ff0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c001c00:	47aa                	lw	a5,136(sp)
1c001c02:	44078f63          	beqz	a5,1c002060 <S7_Conv2d_8x8x3x3_Relu+0x55c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001c06:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c08:	02000713          	li	a4,32
1c001c0c:	002047b7          	lui	a5,0x204
1c001c10:	ca89                	beqz	a3,1c001c22 <S7_Conv2d_8x8x3x3_Relu+0x11e>
1c001c12:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c16:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c1a:	00e7a223          	sw	a4,4(a5)
1c001c1e:	46ca                	lw	a3,144(sp)
1c001c20:	faed                	bnez	a3,1c001c12 <S7_Conv2d_8x8x3x3_Relu+0x10e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14056), 1152, 0, &DmaR_Evt3);
1c001c22:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c001c24:	678d                	lui	a5,0x3
1c001c26:	6e878793          	addi	a5,a5,1768 # 36e8 <__rt_stack_size+0x2ee8>
1c001c2a:	95be                	add	a1,a1,a5
1c001c2c:	0934                	addi	a3,sp,152
1c001c2e:	48000613          	li	a2,1152
1c001c32:	854e                	mv	a0,s3
1c001c34:	85bff0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c001c38:	57aa                	lw	a5,168(sp)
1c001c3a:	3c078763          	beqz	a5,1c002008 <S7_Conv2d_8x8x3x3_Relu+0x504>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001c3e:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001c40:	02000713          	li	a4,32
1c001c44:	002047b7          	lui	a5,0x204
1c001c48:	ca89                	beqz	a3,1c001c5a <S7_Conv2d_8x8x3x3_Relu+0x156>
1c001c4a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001c4e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001c52:	00e7a223          	sw	a4,4(a5)
1c001c56:	56ca                	lw	a3,176(sp)
1c001c58:	faed                	bnez	a3,1c001c4a <S7_Conv2d_8x8x3x3_Relu+0x146>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001c5a:	6509                	lui	a0,0x2
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c001c5c:	00060737          	lui	a4,0x60
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001c60:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c001c64:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c001c68:	c1374733          	p.bset	a4,a4,0,19
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001c6c:	00204db7          	lui	s11,0x204
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001c70:	c1574733          	p.bset	a4,a4,0,21
{
1c001c74:	ca02                	sw	zero,20(sp)
1c001c76:	c402                	sw	zero,8(sp)
1c001c78:	4b81                	li	s7,0
1c001c7a:	02c10c93          	addi	s9,sp,44
1c001c7e:	09a4                	addi	s1,sp,216
1c001c80:	03c10c13          	addi	s8,sp,60
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001c84:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
1c001c88:	cc3a                	sw	a4,24(sp)
	_SP_Out=0;
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c001c8a:	ffeb8993          	addi	s3,s7,-2
1c001c8e:	0019b993          	seqz	s3,s3
1c001c92:	001b9613          	slli	a2,s7,0x1
1c001c96:	0ff9fa93          	andi	s5,s3,255
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001c9a:	0ff00793          	li	a5,255
1c001c9e:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001ca2:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001ca6:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001caa:	1c00c5b7          	lui	a1,0x1c00c
1c001cae:	c0658593          	addi	a1,a1,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c001cb2:	08bda023          	sw	a1,128(s11)
1c001cb6:	099da023          	sw	s9,128(s11)
1c001cba:	8566                	mv	a0,s9
1c001cbc:	c232                	sw	a2,4(sp)
1c001cbe:	749090ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001cc2:	01cd6783          	p.elw	a5,28(s10)
1c001cc6:	1c0176b7          	lui	a3,0x1c017
1c001cca:	001bb793          	seqz	a5,s7
1c001cce:	21868693          	addi	a3,a3,536 # 1c017218 <__clz_tab+0x600>
1c001cd2:	0ff7f893          	andi	a7,a5,255
1c001cd6:	428c                	lw	a1,0(a3)
1c001cd8:	01588733          	add	a4,a7,s5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c001cdc:	46a2                	lw	a3,8(sp)
1c001cde:	48bd                	li	a7,15
1c001ce0:	40e888b3          	sub	a7,a7,a4
1c001ce4:	6711                	lui	a4,0x4
1c001ce6:	d8f995d7          	pv.packhi.b	a1,s3,a5
1c001cea:	74c70793          	addi	a5,a4,1868 # 474c <__rt_stack_size+0x3f4c>
1c001cee:	96be                	add	a3,a3,a5
1c001cf0:	680d                	lui	a6,0x3
1c001cf2:	c62e                	sw	a1,12(sp)
1c001cf4:	c436                	sw	a3,8(sp)
1c001cf6:	1008dab3          	p.exthz	s5,a7
1c001cfa:	6e880b13          	addi	s6,a6,1768 # 36e8 <__rt_stack_size+0x2ee8>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c001cfe:	4a01                	li	s4,0
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c001d00:	4612                	lw	a2,4(sp)
1c001d02:	3c2bad63          	p.beqimm	s7,2,1c0020dc <S7_Conv2d_8x8x3x3_Relu+0x5d8>
1c001d06:	6e05                	lui	t3,0x1
1c001d08:	3c0b8463          	beqz	s7,1c0020d0 <S7_Conv2d_8x8x3x3_Relu+0x5cc>
1c001d0c:	49200713          	li	a4,1170
1c001d10:	924e0e13          	addi	t3,t3,-1756 # 924 <__rt_stack_size+0x124>
1c001d14:	c83a                	sw	a4,16(sp)
  if (copy->length == 0)
1c001d16:	57a6                	lw	a5,104(sp)
1c001d18:	10078963          	beqz	a5,1c001e2a <S7_Conv2d_8x8x3x3_Relu+0x326>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001d1c:	5746                	lw	a4,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001d1e:	02000793          	li	a5,32
1c001d22:	cb09                	beqz	a4,1c001d34 <S7_Conv2d_8x8x3x3_Relu+0x230>
1c001d24:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d28:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001d2c:	00fda223          	sw	a5,4(s11)
1c001d30:	5746                	lw	a4,112(sp)
1c001d32:	fb6d                	bnez	a4,1c001d24 <S7_Conv2d_8x8x3x3_Relu+0x220>
1c001d34:	401c                	lw	a5,0(s0)
1c001d36:	00160993          	addi	s3,a2,1
					_N_In = _N_In + (-1950)+(-18252); _LN_In = (1092); _SN_In = (6*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c001d3a:	140e1263          	bnez	t3,1c001e7e <S7_Conv2d_8x8x3x3_Relu+0x37a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c001d3e:	6509                	lui	a0,0x2
1c001d40:	fc163633          	p.bclr	a2,a2,30,1
1c001d44:	873e                	mv	a4,a5
1c001d46:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c001d4a:	42a60733          	p.mac	a4,a2,a0
				KerArg1->H = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c001d4e:	0f511023          	sh	s5,224(sp)
				KerArg1->UsedH = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c001d52:	0f511123          	sh	s5,226(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c001d56:	4699                	li	a3,6
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c001d58:	cdba                	sw	a4,216(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c001d5a:	381a2863          	p.beqimm	s4,1,1c0020ea <S7_Conv2d_8x8x3x3_Relu+0x5e6>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c001d5e:	45b2                	lw	a1,12(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c001d60:	97da                	add	a5,a5,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001d62:	0ff00713          	li	a4,255
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c001d66:	0ed11223          	sh	a3,228(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c001d6a:	d7be                	sw	a5,236(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c001d6c:	dbae                	sw	a1,244(sp)
1c001d6e:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001d72:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001d76:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001d7a:	1c00d6b7          	lui	a3,0x1c00d
1c001d7e:	70668693          	addi	a3,a3,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c001d82:	08dda023          	sw	a3,128(s11)
1c001d86:	089da023          	sw	s1,128(s11)
1c001d8a:	8526                	mv	a0,s1
1c001d8c:	17b0b0ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001d90:	01cd6783          	p.elw	a5,28(s10)
1c001d94:	06cb0b13          	addi	s6,s6,108 # 106c <__rt_stack_size+0x86c>
1c001d98:	864e                	mv	a2,s3
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c001d9a:	121a3b63          	p.bneimm	s4,1,1c001ed0 <S7_Conv2d_8x8x3x3_Relu+0x3cc>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+15208+8112*((T0Ind_Total)%2));
1c001d9e:	6991                	lui	s3,0x4
1c001da0:	6709                	lui	a4,0x2
1c001da2:	fc1bb7b3          	p.bclr	a5,s7,30,1
1c001da6:	fb070713          	addi	a4,a4,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c001daa:	b6898993          	addi	s3,s3,-1176 # 3b68 <__rt_stack_size+0x3368>
1c001dae:	42e789b3          	p.mac	s3,a5,a4
1c001db2:	4018                	lw	a4,0(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c001db4:	0ff00793          	li	a5,255
1c001db8:	974e                	add	a4,a4,s3
1c001dba:	c2ba                	sw	a4,68(sp)
1c001dbc:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c001dc0:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c001dc4:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c001dc8:	1c00c7b7          	lui	a5,0x1c00c
1c001dcc:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c001dd0:	08fda023          	sw	a5,128(s11)
1c001dd4:	098da023          	sw	s8,128(s11)
1c001dd8:	8562                	mv	a0,s8
1c001dda:	0660a0ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001dde:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c001de2:	45d2                	lw	a1,20(sp)
1c001de4:	16059f63          	bnez	a1,1c001f62 <S7_Conv2d_8x8x3x3_Relu+0x45e>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15208+8112*((T0Ind_Total)%2)),
1c001de8:	401c                	lw	a5,0(s0)
1c001dea:	99be                	add	s3,s3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001dec:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001df0:	400da683          	lw	a3,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001df4:	47e2                	lw	a5,24(sp)
1c001df6:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001dfa:	413da023          	sw	s3,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001dfe:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001e02:	0be207b7          	lui	a5,0xbe20
1c001e06:	3f678793          	addi	a5,a5,1014 # be203f6 <__L2+0xbda03f6>
1c001e0a:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c001e0e:	dd36                	sw	a3,184(sp)
        copy->length = 0;
1c001e10:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c001e12:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c001e16:	0e2baa63          	p.beqimm	s7,2,1c001f0a <S7_Conv2d_8x8x3x3_Relu+0x406>
1c001e1a:	6509                	lui	a0,0x2
1c001e1c:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c001e20:	0b85                	addi	s7,s7,1
1c001e22:	3f690913          	addi	s2,s2,1014
1c001e26:	ca2a                	sw	a0,20(sp)
1c001e28:	b58d                	j	1c001c8a <S7_Conv2d_8x8x3x3_Relu+0x186>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e2a:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001e2e:	404da783          	lw	a5,1028(s11)
1c001e32:	4766                	lw	a4,88(sp)
1c001e34:	40e7d7b3          	sra	a5,a5,a4
1c001e38:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e3c:	c78d                	beqz	a5,1c001e66 <S7_Conv2d_8x8x3x3_Relu+0x362>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001e3e:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c001e42:	30069073          	csrw	mstatus,a3
1c001e46:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001e4a:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001e4e:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e52:	300476f3          	csrrci	a3,mstatus,8
1c001e56:	404da783          	lw	a5,1028(s11)
1c001e5a:	4766                	lw	a4,88(sp)
1c001e5c:	40e7d7b3          	sra	a5,a5,a4
1c001e60:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001e64:	fff9                	bnez	a5,1c001e42 <S7_Conv2d_8x8x3x3_Relu+0x33e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001e66:	4785                	li	a5,1
1c001e68:	00e79733          	sll	a4,a5,a4
1c001e6c:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c001e70:	30069073          	csrw	mstatus,a3
1c001e74:	401c                	lw	a5,0(s0)
1c001e76:	00160993          	addi	s3,a2,1
				if (_SN_In) {
1c001e7a:	ec0e02e3          	beqz	t3,1c001d3e <S7_Conv2d_8x8x3x3_Relu+0x23a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001e7e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c001e82:	400da583          	lw	a1,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c001e86:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c001e8a:	de0e2733          	p.insert	a4,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c001e8e:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c001e92:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c001e96:	40eda023          	sw	a4,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
1c001e9a:	6509                	lui	a0,0x2
1c001e9c:	fc19b733          	p.bclr	a4,s3,30,1
1c001ea0:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c001ea4:	42a707b3          	p.mac	a5,a4,a0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c001ea8:	40fda023          	sw	a5,1024(s11)
1c001eac:	4772                	lw	a4,28(sp)
1c001eae:	4522                	lw	a0,8(sp)
1c001eb0:	00a707b3          	add	a5,a4,a0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c001eb4:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c001eb8:	4742                	lw	a4,16(sp)
1c001eba:	0be207b7          	lui	a5,0xbe20
1c001ebe:	8fd9                	or	a5,a5,a4
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c001ec0:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c001ec4:	ccae                	sw	a1,88(sp)
        copy->length = 0;
1c001ec6:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c001ec8:	30069073          	csrw	mstatus,a3
1c001ecc:	401c                	lw	a5,0(s0)
1c001ece:	bd85                	j	1c001d3e <S7_Conv2d_8x8x3x3_Relu+0x23a>
1c001ed0:	4a05                	li	s4,1
				} else if (!(T0Ind_Last)) {
1c001ed2:	222bae63          	p.beqimm	s7,2,1c00210e <S7_Conv2d_8x8x3x3_Relu+0x60a>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c001ed6:	200b8c63          	beqz	s7,1c0020ee <S7_Conv2d_8x8x3x3_Relu+0x5ea>
1c001eda:	4722                	lw	a4,8(sp)
1c001edc:	76f1                	lui	a3,0xffffc
1c001ede:	caa68793          	addi	a5,a3,-854 # ffffbcaa <pulp__FC+0xffffbcab>
1c001ee2:	973e                	add	a4,a4,a5
1c001ee4:	49200593          	li	a1,1170
1c001ee8:	1c0177b7          	lui	a5,0x1c017
1c001eec:	21c78793          	addi	a5,a5,540 # 1c01721c <__clz_tab+0x604>
1c001ef0:	c43a                	sw	a4,8(sp)
1c001ef2:	c82e                	sw	a1,16(sp)
1c001ef4:	0007ae03          	lw	t3,0(a5)
1c001ef8:	e01bbfe3          	p.bneimm	s7,1,1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>
1c001efc:	6689                	lui	a3,0x2
1c001efe:	44400713          	li	a4,1092
1c001f02:	99868e13          	addi	t3,a3,-1640 # 1998 <__rt_stack_size+0x1198>
1c001f06:	c83a                	sw	a4,16(sp)
1c001f08:	b539                	j	1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>
  if (copy->length == 0)
1c001f0a:	472e                	lw	a4,200(sp)
1c001f0c:	c745                	beqz	a4,1c001fb4 <S7_Conv2d_8x8x3x3_Relu+0x4b0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c001f0e:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f10:	02000713          	li	a4,32
1c001f14:	002047b7          	lui	a5,0x204
1c001f18:	ca89                	beqz	a3,1c001f2a <S7_Conv2d_8x8x3x3_Relu+0x426>
1c001f1a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f1e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f22:	00e7a223          	sw	a4,4(a5)
1c001f26:	46ce                	lw	a3,208(sp)
1c001f28:	faed                	bnez	a3,1c001f1a <S7_Conv2d_8x8x3x3_Relu+0x416>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c001f2a:	13c12083          	lw	ra,316(sp)
1c001f2e:	13812403          	lw	s0,312(sp)
1c001f32:	13412483          	lw	s1,308(sp)
1c001f36:	13012903          	lw	s2,304(sp)
1c001f3a:	12c12983          	lw	s3,300(sp)
1c001f3e:	12812a03          	lw	s4,296(sp)
1c001f42:	12412a83          	lw	s5,292(sp)
1c001f46:	12012b03          	lw	s6,288(sp)
1c001f4a:	11c12b83          	lw	s7,284(sp)
1c001f4e:	11812c03          	lw	s8,280(sp)
1c001f52:	11412c83          	lw	s9,276(sp)
1c001f56:	11012d03          	lw	s10,272(sp)
1c001f5a:	10c12d83          	lw	s11,268(sp)
1c001f5e:	6131                	addi	sp,sp,320
1c001f60:	8082                	ret
  if (copy->length == 0)
1c001f62:	47ae                	lw	a5,200(sp)
1c001f64:	14079863          	bnez	a5,1c0020b4 <S7_Conv2d_8x8x3x3_Relu+0x5b0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f68:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c001f6c:	404da783          	lw	a5,1028(s11)
1c001f70:	576a                	lw	a4,184(sp)
1c001f72:	40e7d7b3          	sra	a5,a5,a4
1c001f76:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001f7a:	c78d                	beqz	a5,1c001fa4 <S7_Conv2d_8x8x3x3_Relu+0x4a0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001f7c:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c001f80:	30069073          	csrw	mstatus,a3
1c001f84:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001f88:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001f8c:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001f90:	300476f3          	csrrci	a3,mstatus,8
1c001f94:	404da783          	lw	a5,1028(s11)
1c001f98:	576a                	lw	a4,184(sp)
1c001f9a:	40e7d7b3          	sra	a5,a5,a4
1c001f9e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001fa2:	fff9                	bnez	a5,1c001f80 <S7_Conv2d_8x8x3x3_Relu+0x47c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c001fa4:	4785                	li	a5,1
1c001fa6:	00e79733          	sll	a4,a5,a4
1c001faa:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c001fae:	30069073          	csrw	mstatus,a3
1c001fb2:	bd1d                	j	1c001de8 <S7_Conv2d_8x8x3x3_Relu+0x2e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001fb4:	30047673          	csrrci	a2,mstatus,8
1c001fb8:	404da783          	lw	a5,1028(s11)
1c001fbc:	56ea                	lw	a3,184(sp)
1c001fbe:	40d7d7b3          	sra	a5,a5,a3
1c001fc2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001fc6:	c79d                	beqz	a5,1c001ff4 <S7_Conv2d_8x8x3x3_Relu+0x4f0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c001fc8:	10000593          	li	a1,256
1c001fcc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c001fd0:	30061073          	csrw	mstatus,a2
1c001fd4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c001fd8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c001fdc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c001fe0:	30047673          	csrrci	a2,mstatus,8
1c001fe4:	40472783          	lw	a5,1028(a4)
1c001fe8:	56ea                	lw	a3,184(sp)
1c001fea:	40d7d7b3          	sra	a5,a5,a3
1c001fee:	fc17b7b3          	p.bclr	a5,a5,30,1
1c001ff2:	fff9                	bnez	a5,1c001fd0 <S7_Conv2d_8x8x3x3_Relu+0x4cc>
1c001ff4:	4785                	li	a5,1
1c001ff6:	00d796b3          	sll	a3,a5,a3
1c001ffa:	002047b7          	lui	a5,0x204
1c001ffe:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002002:	30061073          	csrw	mstatus,a2
1c002006:	b715                	j	1c001f2a <S7_Conv2d_8x8x3x3_Relu+0x426>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002008:	30047673          	csrrci	a2,mstatus,8
1c00200c:	002047b7          	lui	a5,0x204
1c002010:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002014:	46ea                	lw	a3,152(sp)
1c002016:	40d7d7b3          	sra	a5,a5,a3
1c00201a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00201e:	c79d                	beqz	a5,1c00204c <S7_Conv2d_8x8x3x3_Relu+0x548>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002020:	10000593          	li	a1,256
1c002024:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002028:	30061073          	csrw	mstatus,a2
1c00202c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002030:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002034:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002038:	30047673          	csrrci	a2,mstatus,8
1c00203c:	40472783          	lw	a5,1028(a4)
1c002040:	46ea                	lw	a3,152(sp)
1c002042:	40d7d7b3          	sra	a5,a5,a3
1c002046:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00204a:	fff9                	bnez	a5,1c002028 <S7_Conv2d_8x8x3x3_Relu+0x524>
1c00204c:	4785                	li	a5,1
1c00204e:	00d796b3          	sll	a3,a5,a3
1c002052:	002047b7          	lui	a5,0x204
1c002056:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00205a:	30061073          	csrw	mstatus,a2
1c00205e:	bef5                	j	1c001c5a <S7_Conv2d_8x8x3x3_Relu+0x156>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002060:	30047673          	csrrci	a2,mstatus,8
1c002064:	4044a783          	lw	a5,1028(s1)
1c002068:	56e6                	lw	a3,120(sp)
1c00206a:	40d7d7b3          	sra	a5,a5,a3
1c00206e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002072:	c79d                	beqz	a5,1c0020a0 <S7_Conv2d_8x8x3x3_Relu+0x59c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002074:	10000593          	li	a1,256
1c002078:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00207c:	30061073          	csrw	mstatus,a2
1c002080:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002084:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002088:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00208c:	30047673          	csrrci	a2,mstatus,8
1c002090:	40472783          	lw	a5,1028(a4)
1c002094:	56e6                	lw	a3,120(sp)
1c002096:	40d7d7b3          	sra	a5,a5,a3
1c00209a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00209e:	fff9                	bnez	a5,1c00207c <S7_Conv2d_8x8x3x3_Relu+0x578>
1c0020a0:	4785                	li	a5,1
1c0020a2:	00d796b3          	sll	a3,a5,a3
1c0020a6:	002047b7          	lui	a5,0x204
1c0020aa:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0020ae:	30061073          	csrw	mstatus,a2
1c0020b2:	be85                	j	1c001c22 <S7_Conv2d_8x8x3x3_Relu+0x11e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0020b4:	474e                	lw	a4,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0020b6:	02000793          	li	a5,32
1c0020ba:	d20707e3          	beqz	a4,1c001de8 <S7_Conv2d_8x8x3x3_Relu+0x2e4>
1c0020be:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0020c2:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0020c6:	00fda223          	sw	a5,4(s11)
1c0020ca:	474e                	lw	a4,208(sp)
1c0020cc:	fb6d                	bnez	a4,1c0020be <S7_Conv2d_8x8x3x3_Relu+0x5ba>
1c0020ce:	bb29                	j	1c001de8 <S7_Conv2d_8x8x3x3_Relu+0x2e4>
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c0020d0:	44400593          	li	a1,1092
1c0020d4:	888e0e13          	addi	t3,t3,-1912
1c0020d8:	c82e                	sw	a1,16(sp)
1c0020da:	b935                	j	1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>
1c0020dc:	6e05                	lui	t3,0x1
1c0020de:	44400793          	li	a5,1092
1c0020e2:	888e0e13          	addi	t3,t3,-1912 # 888 <__rt_stack_size+0x88>
1c0020e6:	c83e                	sw	a5,16(sp)
1c0020e8:	b13d                	j	1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c0020ea:	4689                	li	a3,2
1c0020ec:	b98d                	j	1c001d5e <S7_Conv2d_8x8x3x3_Relu+0x25a>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c0020ee:	45a2                	lw	a1,8(sp)
1c0020f0:	76f1                	lui	a3,0xffffc
1c0020f2:	c5c68693          	addi	a3,a3,-932 # ffffbc5c <pulp__FC+0xffffbc5d>
1c0020f6:	1c017737          	lui	a4,0x1c017
1c0020fa:	95b6                	add	a1,a1,a3
1c0020fc:	21c70713          	addi	a4,a4,540 # 1c01721c <__clz_tab+0x604>
1c002100:	49200793          	li	a5,1170
1c002104:	c42e                	sw	a1,8(sp)
1c002106:	00072e03          	lw	t3,0(a4)
1c00210a:	c83e                	sw	a5,16(sp)
1c00210c:	b129                	j	1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>
				_SN_In = 0;
1c00210e:	4e01                	li	t3,0
1c002110:	b119                	j	1c001d16 <S7_Conv2d_8x8x3x3_Relu+0x212>

1c002112 <S10_Conv2d_8x8x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c002112:	7129                	addi	sp,sp,-320
1c002114:	12812c23          	sw	s0,312(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 48672, 48672]][Tile0, 3:[39x13, 1:39x13, 39x13], 4]
		Tile0: [0, 16224, 2028], Tile1: [0, 16224, 2028], Tile2; [0, 16224, 2028]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002118:	10000437          	lui	s0,0x10000
1c00211c:	01c40413          	addi	s0,s0,28 # 1000001c <resnet_L1_Memory>
1c002120:	00042803          	lw	a6,0(s0)
	KerArg0->W = (unsigned short int) (39);
1c002124:	1c0177b7          	lui	a5,0x1c017
1c002128:	2107af03          	lw	t5,528(a5) # 1c017210 <__clz_tab+0x5f8>
	KerArg0->H = (unsigned short int) (13);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c00212c:	678d                	lui	a5,0x3
1c00212e:	6d878313          	addi	t1,a5,1752 # 36d8 <__rt_stack_size+0x2ed8>
	KerArg0->NormBias = (signed char) (13);
	KerArg1->W = (unsigned short int) (39);
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c002132:	6e878793          	addi	a5,a5,1768
{
1c002136:	13212823          	sw	s2,304(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c00213a:	97c2                	add	a5,a5,a6
	KerArg1->W = (unsigned short int) (39);
1c00213c:	1c017fb7          	lui	t6,0x1c017
{
1c002140:	8936                	mv	s2,a3
	KerArg0->NormBias = (signed char) (13);
1c002142:	46b5                	li	a3,13
1c002144:	02d10b23          	sb	a3,54(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c002148:	d7be                	sw	a5,236(sp)
	KerArg1->W = (unsigned short int) (39);
1c00214a:	214fa683          	lw	a3,532(t6) # 1c017214 <__clz_tab+0x5fc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c00214e:	68a1                	lui	a7,0x8
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002150:	000807b7          	lui	a5,0x80
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002154:	ac888713          	addi	a4,a7,-1336 # 7ac8 <__rt_stack_size+0x72c8>
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002158:	07a1                	addi	a5,a5,8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c00215a:	9742                	add	a4,a4,a6
	KerArg0->OutFeatures = (unsigned short int) (8);
1c00215c:	4e21                	li	t3,8
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
	KerArg1->Norm = (unsigned char) (16);
1c00215e:	4ec1                	li	t4,16
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002160:	0ef12323          	sw	a5,230(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c002164:	006802b3          	add	t0,a6,t1
	KerArg1->TotalInFeatures = (short int) (8);
	KerArg1->Orientation = (unsigned char) (1);
1c002168:	4785                	li	a5,1
{
1c00216a:	13312623          	sw	s3,300(sp)
1c00216e:	ce2a                	sw	a0,28(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c002170:	0ef10da3          	sb	a5,251(sp)
{
1c002174:	12112e23          	sw	ra,316(sp)
1c002178:	12912a23          	sw	s1,308(sp)
1c00217c:	13412423          	sw	s4,296(sp)
1c002180:	13512223          	sw	s5,292(sp)
1c002184:	13612023          	sw	s6,288(sp)
1c002188:	11712e23          	sw	s7,284(sp)
1c00218c:	11812c23          	sw	s8,280(sp)
1c002190:	11912a23          	sw	s9,276(sp)
1c002194:	11a12823          	sw	s10,272(sp)
1c002198:	11b12623          	sw	s11,268(sp)
	KerArg2->W = (unsigned short int) (39);
	KerArg2->H = (unsigned short int) (13);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c00219c:	18fd                	addi	a7,a7,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c00219e:	d63a                	sw	a4,44(sp)
	KerArg0->W = (unsigned short int) (39);
1c0021a0:	d87a                	sw	t5,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c0021a2:	03c11a23          	sh	t3,52(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c0021a6:	dc16                	sw	t0,56(sp)
	KerArg1->W = (unsigned short int) (39);
1c0021a8:	cfb6                	sw	a3,220(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c0021aa:	d9ba                	sw	a4,240(sp)
	KerArg1->Norm = (unsigned char) (16);
1c0021ac:	0fd10c23          	sb	t4,248(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31432);
1c0021b0:	de3a                	sw	a4,60(sp)
	KerArg2->W = (unsigned short int) (39);
1c0021b2:	c0fa                	sw	t5,64(sp)
	KerArg2->Norm = (unsigned char) (16);
1c0021b4:	05d10423          	sb	t4,72(sp)
	KerArg2->InFeatures = (unsigned short int) (8);
1c0021b8:	05c11523          	sh	t3,74(sp)
	KerArg2->LB = (int) (-32768);
1c0021bc:	77e1                	lui	a5,0xffff8
{
1c0021be:	89ae                	mv	s3,a1
1c0021c0:	8532                	mv	a0,a2
	KerArg2->LB = (int) (-32768);
1c0021c2:	c6be                	sw	a5,76(sp)
	KerArg2->UB = (int) (32767);
1c0021c4:	c8c6                	sw	a7,80(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0021c6:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0021ca:	002044b7          	lui	s1,0x204
1c0021ce:	4004a683          	lw	a3,1024(s1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0021d2:	000727b7          	lui	a5,0x72
1c0021d6:	99878793          	addi	a5,a5,-1640 # 71998 <__L1Cl+0x61998>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0021da:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0021de:	c157c7b3          	p.bset	a5,a5,0,21
1c0021e2:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0021e6:	4104a023          	sw	a6,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0021ea:	47f2                	lw	a5,28(sp)
1c0021ec:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0021f0:	0be207b7          	lui	a5,0xbe20
1c0021f4:	44478793          	addi	a5,a5,1092 # be20444 <__L2+0xbda0444>
1c0021f8:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c0021fc:	ccb6                	sw	a3,88(sp)
        copy->length = 0;
1c0021fe:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c002200:	30071073          	csrw	mstatus,a4
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 6552, 3042, 1092, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14040), 16, 0, &DmaR_Evt2);
1c002204:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c002206:	18b4                	addi	a3,sp,120
1c002208:	4641                	li	a2,16
1c00220a:	959a                	add	a1,a1,t1
1c00220c:	a82ff0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c002210:	47aa                	lw	a5,136(sp)
1c002212:	44078f63          	beqz	a5,1c002670 <S10_Conv2d_8x8x3x3+0x55e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002216:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002218:	02000713          	li	a4,32
1c00221c:	002047b7          	lui	a5,0x204
1c002220:	ca89                	beqz	a3,1c002232 <S10_Conv2d_8x8x3x3+0x120>
1c002222:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002226:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00222a:	00e7a223          	sw	a4,4(a5)
1c00222e:	46ca                	lw	a3,144(sp)
1c002230:	faed                	bnez	a3,1c002222 <S10_Conv2d_8x8x3x3+0x110>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14056), 1152, 0, &DmaR_Evt3);
1c002232:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c002234:	678d                	lui	a5,0x3
1c002236:	6e878793          	addi	a5,a5,1768 # 36e8 <__rt_stack_size+0x2ee8>
1c00223a:	95be                	add	a1,a1,a5
1c00223c:	0934                	addi	a3,sp,152
1c00223e:	48000613          	li	a2,1152
1c002242:	854e                	mv	a0,s3
1c002244:	a4aff0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c002248:	57aa                	lw	a5,168(sp)
1c00224a:	3c078763          	beqz	a5,1c002618 <S10_Conv2d_8x8x3x3+0x506>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00224e:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002250:	02000713          	li	a4,32
1c002254:	002047b7          	lui	a5,0x204
1c002258:	ca89                	beqz	a3,1c00226a <S10_Conv2d_8x8x3x3+0x158>
1c00225a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00225e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002262:	00e7a223          	sw	a4,4(a5)
1c002266:	56ca                	lw	a3,176(sp)
1c002268:	faed                	bnez	a3,1c00225a <S10_Conv2d_8x8x3x3+0x148>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00226a:	6509                	lui	a0,0x2
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c00226c:	00060737          	lui	a4,0x60
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002270:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c002274:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002278:	c1374733          	p.bset	a4,a4,0,19
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00227c:	00204db7          	lui	s11,0x204
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002280:	c1574733          	p.bset	a4,a4,0,21
{
1c002284:	ca02                	sw	zero,20(sp)
1c002286:	c402                	sw	zero,8(sp)
1c002288:	4b81                	li	s7,0
1c00228a:	02c10c93          	addi	s9,sp,44
1c00228e:	09a4                	addi	s1,sp,216
1c002290:	03c10c13          	addi	s8,sp,60
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002294:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
1c002298:	cc3a                	sw	a4,24(sp)
	_SP_Out=0;
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c00229a:	ffeb8993          	addi	s3,s7,-2
1c00229e:	0019b993          	seqz	s3,s3
1c0022a2:	001b9613          	slli	a2,s7,0x1
1c0022a6:	0ff9fa93          	andi	s5,s3,255
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0022aa:	0ff00793          	li	a5,255
1c0022ae:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0022b2:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0022b6:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0022ba:	1c00c5b7          	lui	a1,0x1c00c
1c0022be:	c0658593          	addi	a1,a1,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c0022c2:	08bda023          	sw	a1,128(s11)
1c0022c6:	099da023          	sw	s9,128(s11)
1c0022ca:	8566                	mv	a0,s9
1c0022cc:	c232                	sw	a2,4(sp)
1c0022ce:	139090ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0022d2:	01cd6783          	p.elw	a5,28(s10)
1c0022d6:	1c0176b7          	lui	a3,0x1c017
1c0022da:	001bb793          	seqz	a5,s7
1c0022de:	21868693          	addi	a3,a3,536 # 1c017218 <__clz_tab+0x600>
1c0022e2:	0ff7f893          	andi	a7,a5,255
1c0022e6:	428c                	lw	a1,0(a3)
1c0022e8:	01588733          	add	a4,a7,s5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c0022ec:	46a2                	lw	a3,8(sp)
1c0022ee:	48bd                	li	a7,15
1c0022f0:	40e888b3          	sub	a7,a7,a4
1c0022f4:	6711                	lui	a4,0x4
1c0022f6:	d8f995d7          	pv.packhi.b	a1,s3,a5
1c0022fa:	74c70793          	addi	a5,a4,1868 # 474c <__rt_stack_size+0x3f4c>
1c0022fe:	96be                	add	a3,a3,a5
1c002300:	680d                	lui	a6,0x3
1c002302:	c62e                	sw	a1,12(sp)
1c002304:	c436                	sw	a3,8(sp)
1c002306:	1008dab3          	p.exthz	s5,a7
1c00230a:	6e880b13          	addi	s6,a6,1768 # 36e8 <__rt_stack_size+0x2ee8>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00230e:	4a01                	li	s4,0
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c002310:	4612                	lw	a2,4(sp)
1c002312:	3c2bad63          	p.beqimm	s7,2,1c0026ec <S10_Conv2d_8x8x3x3+0x5da>
1c002316:	6e05                	lui	t3,0x1
1c002318:	3c0b8463          	beqz	s7,1c0026e0 <S10_Conv2d_8x8x3x3+0x5ce>
1c00231c:	49200713          	li	a4,1170
1c002320:	924e0e13          	addi	t3,t3,-1756 # 924 <__rt_stack_size+0x124>
1c002324:	c83a                	sw	a4,16(sp)
  if (copy->length == 0)
1c002326:	57a6                	lw	a5,104(sp)
1c002328:	10078963          	beqz	a5,1c00243a <S10_Conv2d_8x8x3x3+0x328>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00232c:	5746                	lw	a4,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00232e:	02000793          	li	a5,32
1c002332:	cb09                	beqz	a4,1c002344 <S10_Conv2d_8x8x3x3+0x232>
1c002334:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002338:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00233c:	00fda223          	sw	a5,4(s11)
1c002340:	5746                	lw	a4,112(sp)
1c002342:	fb6d                	bnez	a4,1c002334 <S10_Conv2d_8x8x3x3+0x222>
1c002344:	401c                	lw	a5,0(s0)
1c002346:	00160993          	addi	s3,a2,1
					_N_In = _N_In + (-1950)+(-18252); _LN_In = (1092); _SN_In = (6*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c00234a:	140e1263          	bnez	t3,1c00248e <S10_Conv2d_8x8x3x3+0x37c>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c00234e:	6509                	lui	a0,0x2
1c002350:	fc163633          	p.bclr	a2,a2,30,1
1c002354:	873e                	mv	a4,a5
1c002356:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c00235a:	42a60733          	p.mac	a4,a2,a0
				KerArg1->H = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c00235e:	0f511023          	sh	s5,224(sp)
				KerArg1->UsedH = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c002362:	0f511123          	sh	s5,226(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c002366:	4699                	li	a3,6
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c002368:	cdba                	sw	a4,216(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c00236a:	381a2863          	p.beqimm	s4,1,1c0026fa <S10_Conv2d_8x8x3x3+0x5e8>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c00236e:	45b2                	lw	a1,12(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c002370:	97da                	add	a5,a5,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002372:	0ff00713          	li	a4,255
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c002376:	0ed11223          	sh	a3,228(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c00237a:	d7be                	sw	a5,236(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c00237c:	dbae                	sw	a1,244(sp)
1c00237e:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002382:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002386:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00238a:	1c00d6b7          	lui	a3,0x1c00d
1c00238e:	70668693          	addi	a3,a3,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c002392:	08dda023          	sw	a3,128(s11)
1c002396:	089da023          	sw	s1,128(s11)
1c00239a:	8526                	mv	a0,s1
1c00239c:	36a0b0ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0023a0:	01cd6783          	p.elw	a5,28(s10)
1c0023a4:	06cb0b13          	addi	s6,s6,108
1c0023a8:	864e                	mv	a2,s3
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0023aa:	121a3b63          	p.bneimm	s4,1,1c0024e0 <S10_Conv2d_8x8x3x3+0x3ce>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+15208+8112*((T0Ind_Total)%2));
1c0023ae:	6991                	lui	s3,0x4
1c0023b0:	6709                	lui	a4,0x2
1c0023b2:	fc1bb7b3          	p.bclr	a5,s7,30,1
1c0023b6:	fb070713          	addi	a4,a4,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c0023ba:	b6898993          	addi	s3,s3,-1176 # 3b68 <__rt_stack_size+0x3368>
1c0023be:	42e789b3          	p.mac	s3,a5,a4
1c0023c2:	4018                	lw	a4,0(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0023c4:	0ff00793          	li	a5,255
1c0023c8:	974e                	add	a4,a4,s3
1c0023ca:	c2ba                	sw	a4,68(sp)
1c0023cc:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0023d0:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0023d4:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0023d8:	1c00c7b7          	lui	a5,0x1c00c
1c0023dc:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c0023e0:	08fda023          	sw	a5,128(s11)
1c0023e4:	098da023          	sw	s8,128(s11)
1c0023e8:	8562                	mv	a0,s8
1c0023ea:	257090ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0023ee:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0023f2:	45d2                	lw	a1,20(sp)
1c0023f4:	16059f63          	bnez	a1,1c002572 <S10_Conv2d_8x8x3x3+0x460>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15208+8112*((T0Ind_Total)%2)),
1c0023f8:	401c                	lw	a5,0(s0)
1c0023fa:	99be                	add	s3,s3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0023fc:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002400:	400da683          	lw	a3,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002404:	47e2                	lw	a5,24(sp)
1c002406:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00240a:	413da023          	sw	s3,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00240e:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002412:	0be207b7          	lui	a5,0xbe20
1c002416:	3f678793          	addi	a5,a5,1014 # be203f6 <__L2+0xbda03f6>
1c00241a:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c00241e:	dd36                	sw	a3,184(sp)
        copy->length = 0;
1c002420:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c002422:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c002426:	0e2baa63          	p.beqimm	s7,2,1c00251a <S10_Conv2d_8x8x3x3+0x408>
1c00242a:	6509                	lui	a0,0x2
1c00242c:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002430:	0b85                	addi	s7,s7,1
1c002432:	3f690913          	addi	s2,s2,1014
1c002436:	ca2a                	sw	a0,20(sp)
1c002438:	b58d                	j	1c00229a <S10_Conv2d_8x8x3x3+0x188>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00243a:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00243e:	404da783          	lw	a5,1028(s11)
1c002442:	4766                	lw	a4,88(sp)
1c002444:	40e7d7b3          	sra	a5,a5,a4
1c002448:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00244c:	c78d                	beqz	a5,1c002476 <S10_Conv2d_8x8x3x3+0x364>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00244e:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002452:	30069073          	csrw	mstatus,a3
1c002456:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00245a:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00245e:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002462:	300476f3          	csrrci	a3,mstatus,8
1c002466:	404da783          	lw	a5,1028(s11)
1c00246a:	4766                	lw	a4,88(sp)
1c00246c:	40e7d7b3          	sra	a5,a5,a4
1c002470:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002474:	fff9                	bnez	a5,1c002452 <S10_Conv2d_8x8x3x3+0x340>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002476:	4785                	li	a5,1
1c002478:	00e79733          	sll	a4,a5,a4
1c00247c:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002480:	30069073          	csrw	mstatus,a3
1c002484:	401c                	lw	a5,0(s0)
1c002486:	00160993          	addi	s3,a2,1
				if (_SN_In) {
1c00248a:	ec0e02e3          	beqz	t3,1c00234e <S10_Conv2d_8x8x3x3+0x23c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00248e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002492:	400da583          	lw	a1,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c002496:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00249a:	de0e2733          	p.insert	a4,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00249e:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0024a2:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0024a6:	40eda023          	sw	a4,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
1c0024aa:	6509                	lui	a0,0x2
1c0024ac:	fc19b733          	p.bclr	a4,s3,30,1
1c0024b0:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c0024b4:	42a707b3          	p.mac	a5,a4,a0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0024b8:	40fda023          	sw	a5,1024(s11)
1c0024bc:	4772                	lw	a4,28(sp)
1c0024be:	4522                	lw	a0,8(sp)
1c0024c0:	00a707b3          	add	a5,a4,a0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0024c4:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0024c8:	4742                	lw	a4,16(sp)
1c0024ca:	0be207b7          	lui	a5,0xbe20
1c0024ce:	8fd9                	or	a5,a5,a4
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0024d0:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c0024d4:	ccae                	sw	a1,88(sp)
        copy->length = 0;
1c0024d6:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c0024d8:	30069073          	csrw	mstatus,a3
1c0024dc:	401c                	lw	a5,0(s0)
1c0024de:	bd85                	j	1c00234e <S10_Conv2d_8x8x3x3+0x23c>
1c0024e0:	4a05                	li	s4,1
				} else if (!(T0Ind_Last)) {
1c0024e2:	222bae63          	p.beqimm	s7,2,1c00271e <S10_Conv2d_8x8x3x3+0x60c>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c0024e6:	200b8c63          	beqz	s7,1c0026fe <S10_Conv2d_8x8x3x3+0x5ec>
1c0024ea:	4722                	lw	a4,8(sp)
1c0024ec:	76f1                	lui	a3,0xffffc
1c0024ee:	caa68793          	addi	a5,a3,-854 # ffffbcaa <pulp__FC+0xffffbcab>
1c0024f2:	973e                	add	a4,a4,a5
1c0024f4:	49200593          	li	a1,1170
1c0024f8:	1c0177b7          	lui	a5,0x1c017
1c0024fc:	21c78793          	addi	a5,a5,540 # 1c01721c <__clz_tab+0x604>
1c002500:	c43a                	sw	a4,8(sp)
1c002502:	c82e                	sw	a1,16(sp)
1c002504:	0007ae03          	lw	t3,0(a5)
1c002508:	e01bbfe3          	p.bneimm	s7,1,1c002326 <S10_Conv2d_8x8x3x3+0x214>
1c00250c:	6689                	lui	a3,0x2
1c00250e:	44400713          	li	a4,1092
1c002512:	99868e13          	addi	t3,a3,-1640 # 1998 <__rt_stack_size+0x1198>
1c002516:	c83a                	sw	a4,16(sp)
1c002518:	b539                	j	1c002326 <S10_Conv2d_8x8x3x3+0x214>
  if (copy->length == 0)
1c00251a:	472e                	lw	a4,200(sp)
1c00251c:	c745                	beqz	a4,1c0025c4 <S10_Conv2d_8x8x3x3+0x4b2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00251e:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002520:	02000713          	li	a4,32
1c002524:	002047b7          	lui	a5,0x204
1c002528:	ca89                	beqz	a3,1c00253a <S10_Conv2d_8x8x3x3+0x428>
1c00252a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00252e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002532:	00e7a223          	sw	a4,4(a5)
1c002536:	46ce                	lw	a3,208(sp)
1c002538:	faed                	bnez	a3,1c00252a <S10_Conv2d_8x8x3x3+0x418>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00253a:	13c12083          	lw	ra,316(sp)
1c00253e:	13812403          	lw	s0,312(sp)
1c002542:	13412483          	lw	s1,308(sp)
1c002546:	13012903          	lw	s2,304(sp)
1c00254a:	12c12983          	lw	s3,300(sp)
1c00254e:	12812a03          	lw	s4,296(sp)
1c002552:	12412a83          	lw	s5,292(sp)
1c002556:	12012b03          	lw	s6,288(sp)
1c00255a:	11c12b83          	lw	s7,284(sp)
1c00255e:	11812c03          	lw	s8,280(sp)
1c002562:	11412c83          	lw	s9,276(sp)
1c002566:	11012d03          	lw	s10,272(sp)
1c00256a:	10c12d83          	lw	s11,268(sp)
1c00256e:	6131                	addi	sp,sp,320
1c002570:	8082                	ret
  if (copy->length == 0)
1c002572:	47ae                	lw	a5,200(sp)
1c002574:	14079863          	bnez	a5,1c0026c4 <S10_Conv2d_8x8x3x3+0x5b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002578:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00257c:	404da783          	lw	a5,1028(s11)
1c002580:	576a                	lw	a4,184(sp)
1c002582:	40e7d7b3          	sra	a5,a5,a4
1c002586:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00258a:	c78d                	beqz	a5,1c0025b4 <S10_Conv2d_8x8x3x3+0x4a2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00258c:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c002590:	30069073          	csrw	mstatus,a3
1c002594:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002598:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00259c:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025a0:	300476f3          	csrrci	a3,mstatus,8
1c0025a4:	404da783          	lw	a5,1028(s11)
1c0025a8:	576a                	lw	a4,184(sp)
1c0025aa:	40e7d7b3          	sra	a5,a5,a4
1c0025ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0025b2:	fff9                	bnez	a5,1c002590 <S10_Conv2d_8x8x3x3+0x47e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0025b4:	4785                	li	a5,1
1c0025b6:	00e79733          	sll	a4,a5,a4
1c0025ba:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0025be:	30069073          	csrw	mstatus,a3
1c0025c2:	bd1d                	j	1c0023f8 <S10_Conv2d_8x8x3x3+0x2e6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025c4:	30047673          	csrrci	a2,mstatus,8
1c0025c8:	404da783          	lw	a5,1028(s11)
1c0025cc:	56ea                	lw	a3,184(sp)
1c0025ce:	40d7d7b3          	sra	a5,a5,a3
1c0025d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0025d6:	c79d                	beqz	a5,1c002604 <S10_Conv2d_8x8x3x3+0x4f2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0025d8:	10000593          	li	a1,256
1c0025dc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0025e0:	30061073          	csrw	mstatus,a2
1c0025e4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0025e8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0025ec:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0025f0:	30047673          	csrrci	a2,mstatus,8
1c0025f4:	40472783          	lw	a5,1028(a4)
1c0025f8:	56ea                	lw	a3,184(sp)
1c0025fa:	40d7d7b3          	sra	a5,a5,a3
1c0025fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002602:	fff9                	bnez	a5,1c0025e0 <S10_Conv2d_8x8x3x3+0x4ce>
1c002604:	4785                	li	a5,1
1c002606:	00d796b3          	sll	a3,a5,a3
1c00260a:	002047b7          	lui	a5,0x204
1c00260e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002612:	30061073          	csrw	mstatus,a2
1c002616:	b715                	j	1c00253a <S10_Conv2d_8x8x3x3+0x428>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002618:	30047673          	csrrci	a2,mstatus,8
1c00261c:	002047b7          	lui	a5,0x204
1c002620:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c002624:	46ea                	lw	a3,152(sp)
1c002626:	40d7d7b3          	sra	a5,a5,a3
1c00262a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00262e:	c79d                	beqz	a5,1c00265c <S10_Conv2d_8x8x3x3+0x54a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002630:	10000593          	li	a1,256
1c002634:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002638:	30061073          	csrw	mstatus,a2
1c00263c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002640:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002644:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002648:	30047673          	csrrci	a2,mstatus,8
1c00264c:	40472783          	lw	a5,1028(a4)
1c002650:	46ea                	lw	a3,152(sp)
1c002652:	40d7d7b3          	sra	a5,a5,a3
1c002656:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00265a:	fff9                	bnez	a5,1c002638 <S10_Conv2d_8x8x3x3+0x526>
1c00265c:	4785                	li	a5,1
1c00265e:	00d796b3          	sll	a3,a5,a3
1c002662:	002047b7          	lui	a5,0x204
1c002666:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00266a:	30061073          	csrw	mstatus,a2
1c00266e:	bef5                	j	1c00226a <S10_Conv2d_8x8x3x3+0x158>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002670:	30047673          	csrrci	a2,mstatus,8
1c002674:	4044a783          	lw	a5,1028(s1)
1c002678:	56e6                	lw	a3,120(sp)
1c00267a:	40d7d7b3          	sra	a5,a5,a3
1c00267e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002682:	c79d                	beqz	a5,1c0026b0 <S10_Conv2d_8x8x3x3+0x59e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002684:	10000593          	li	a1,256
1c002688:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00268c:	30061073          	csrw	mstatus,a2
1c002690:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002694:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002698:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00269c:	30047673          	csrrci	a2,mstatus,8
1c0026a0:	40472783          	lw	a5,1028(a4)
1c0026a4:	56e6                	lw	a3,120(sp)
1c0026a6:	40d7d7b3          	sra	a5,a5,a3
1c0026aa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0026ae:	fff9                	bnez	a5,1c00268c <S10_Conv2d_8x8x3x3+0x57a>
1c0026b0:	4785                	li	a5,1
1c0026b2:	00d796b3          	sll	a3,a5,a3
1c0026b6:	002047b7          	lui	a5,0x204
1c0026ba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0026be:	30061073          	csrw	mstatus,a2
1c0026c2:	be85                	j	1c002232 <S10_Conv2d_8x8x3x3+0x120>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0026c4:	474e                	lw	a4,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0026c6:	02000793          	li	a5,32
1c0026ca:	d20707e3          	beqz	a4,1c0023f8 <S10_Conv2d_8x8x3x3+0x2e6>
1c0026ce:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0026d2:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0026d6:	00fda223          	sw	a5,4(s11)
1c0026da:	474e                	lw	a4,208(sp)
1c0026dc:	fb6d                	bnez	a4,1c0026ce <S10_Conv2d_8x8x3x3+0x5bc>
1c0026de:	bb29                	j	1c0023f8 <S10_Conv2d_8x8x3x3+0x2e6>
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c0026e0:	44400593          	li	a1,1092
1c0026e4:	888e0e13          	addi	t3,t3,-1912
1c0026e8:	c82e                	sw	a1,16(sp)
1c0026ea:	b935                	j	1c002326 <S10_Conv2d_8x8x3x3+0x214>
1c0026ec:	6e05                	lui	t3,0x1
1c0026ee:	44400793          	li	a5,1092
1c0026f2:	888e0e13          	addi	t3,t3,-1912 # 888 <__rt_stack_size+0x88>
1c0026f6:	c83e                	sw	a5,16(sp)
1c0026f8:	b13d                	j	1c002326 <S10_Conv2d_8x8x3x3+0x214>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c0026fa:	4689                	li	a3,2
1c0026fc:	b98d                	j	1c00236e <S10_Conv2d_8x8x3x3+0x25c>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c0026fe:	45a2                	lw	a1,8(sp)
1c002700:	76f1                	lui	a3,0xffffc
1c002702:	c5c68693          	addi	a3,a3,-932 # ffffbc5c <pulp__FC+0xffffbc5d>
1c002706:	1c017737          	lui	a4,0x1c017
1c00270a:	95b6                	add	a1,a1,a3
1c00270c:	21c70713          	addi	a4,a4,540 # 1c01721c <__clz_tab+0x604>
1c002710:	49200793          	li	a5,1170
1c002714:	c42e                	sw	a1,8(sp)
1c002716:	00072e03          	lw	t3,0(a4)
1c00271a:	c83e                	sw	a5,16(sp)
1c00271c:	b129                	j	1c002326 <S10_Conv2d_8x8x3x3+0x214>
				_SN_In = 0;
1c00271e:	4e01                	li	t3,0
1c002720:	b119                	j	1c002326 <S10_Conv2d_8x8x3x3+0x214>

1c002722 <S11_MatAdd_8x39x39>:
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 24336, 24336]][Tile0, 3:[39x13, 1:39x13, 39x13], 2]
		Tile0: [0, 8112, 1014], Tile1: [1014, 8112, 1014], Tile2; [2028, 8112, 1014]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->W = (unsigned short int) (39);
1c002722:	1c0177b7          	lui	a5,0x1c017
1c002726:	2107a783          	lw	a5,528(a5) # 1c017210 <__clz_tab+0x5f8>
{
1c00272a:	7155                	addi	sp,sp,-208
1c00272c:	d16a                	sw	s10,160(sp)
	KerArg0->W = (unsigned short int) (39);
1c00272e:	debe                	sw	a5,124(sp)
	KerArg0->H = (unsigned short int) (13);
	KerArg0->N = (unsigned short int) (8);
1c002730:	47a1                	li	a5,8
1c002732:	08f11023          	sh	a5,128(sp)
	KerArg0->LB = (int) (-32768);
1c002736:	77e1                	lui	a5,0xffff8
1c002738:	c33e                	sw	a5,132(sp)
	KerArg0->UB = (int) (32767);
	KerArg0->In1_Q = (unsigned char) (10);
	KerArg0->In2_Q = (unsigned char) (12);
	KerArg0->Out_Q = (unsigned char) (10);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 8112, 3042, 1014, 0, &DmaR_Evt1);
1c00273a:	10000d37          	lui	s10,0x10000
	KerArg0->LB = (int) (-32768);
1c00273e:	67a1                	lui	a5,0x8
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 8112, 3042, 1014, 0, &DmaR_Evt1);
1c002740:	01cd0d13          	addi	s10,s10,28 # 1000001c <resnet_L1_Memory>
	KerArg0->LB = (int) (-32768);
1c002744:	17fd                	addi	a5,a5,-1
1c002746:	c53e                	sw	a5,136(sp)
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 8112, 3042, 1014, 0, &DmaR_Evt1);
1c002748:	000d2803          	lw	a6,0(s10)
	KerArg0->UB = (int) (32767);
1c00274c:	6785                	lui	a5,0x1
1c00274e:	c0a78793          	addi	a5,a5,-1014 # c0a <__rt_stack_size+0x40a>
1c002752:	08f11623          	sh	a5,140(sp)
	KerArg0->In2_Q = (unsigned char) (12);
1c002756:	47a9                	li	a5,10
{
1c002758:	c786                	sw	ra,204(sp)
1c00275a:	c5a2                	sw	s0,200(sp)
1c00275c:	c3a6                	sw	s1,196(sp)
1c00275e:	c1ca                	sw	s2,192(sp)
1c002760:	df4e                	sw	s3,188(sp)
1c002762:	dd52                	sw	s4,184(sp)
1c002764:	db56                	sw	s5,180(sp)
1c002766:	d95a                	sw	s6,176(sp)
1c002768:	d75e                	sw	s7,172(sp)
1c00276a:	d562                	sw	s8,168(sp)
1c00276c:	d366                	sw	s9,164(sp)
1c00276e:	cf6e                	sw	s11,156(sp)
1c002770:	c42a                	sw	a0,8(sp)
1c002772:	c62e                	sw	a1,12(sp)
1c002774:	c232                	sw	a2,4(sp)
	KerArg0->In2_Q = (unsigned char) (12);
1c002776:	08f10723          	sb	a5,142(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00277a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00277e:	002047b7          	lui	a5,0x204
1c002782:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002786:	6b89                	lui	s7,0x2
1c002788:	fb0b8b93          	addi	s7,s7,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c00278c:	00070737          	lui	a4,0x70
1c002790:	de0ba733          	p.insert	a4,s7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002794:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002798:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00279c:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0027a0:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0027a4:	45a2                	lw	a1,8(sp)
1c0027a6:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0027aa:	0be204b7          	lui	s1,0xbe20
1c0027ae:	3f648493          	addi	s1,s1,1014 # be203f6 <__L2+0xbda03f6>
1c0027b2:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c0027b6:	c832                	sw	a2,16(sp)
        copy->length = 0;
1c0027b8:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c0027ba:	30069073          	csrw	mstatus,a3
	_N_In1=0;
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+0), 8112, 3042, 1014, 0, &DmaR_Evt2);
1c0027be:	000d2683          	lw	a3,0(s10)
1c0027c2:	6911                	lui	s2,0x4
1c0027c4:	f6090913          	addi	s2,s2,-160 # 3f60 <__rt_stack_size+0x3760>
1c0027c8:	96ca                	add	a3,a3,s2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0027ca:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0027ce:	4007a583          	lw	a1,1024(a5)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0027d2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0027d6:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0027da:	46b2                	lw	a3,12(sp)
1c0027dc:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0027e0:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c0027e4:	d82e                	sw	a1,48(sp)
        copy->length = 0;
1c0027e6:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c0027e8:	30061073          	csrw	mstatus,a2
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0027ec:	00204437          	lui	s0,0x204
	_N_In2=0;
	_C_Out=0; _SC_Out=8112; _LC_Out=1014;
	_SP_Out=0;
1c0027f0:	4a01                	li	s4,0
	_N_In1=0;
1c0027f2:	4c01                	li	s8,0
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1, D0Ind_NextLast = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0027f4:	4701                	li	a4,0
1c0027f6:	07010b13          	addi	s6,sp,112
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
			/*================================= Prepare Tiles ===================================*/
			_SN_In1 = 0;
			if (!(T0Ind_Last)) {
				_N_In1 = _N_In1 + (1014); _LN_In1 = (1014); _SN_In1 = (8*_LN_In1); 
1c0027fa:	8ade                	mv	s5,s7
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0027fc:	20040d93          	addi	s11,s0,512 # 204200 <__L2+0x184200>
			if (!(T0Ind_Last)) {
1c002800:	32272363          	p.beqimm	a4,2,1c002b26 <S11_MatAdd_8x39x39+0x404>
				_N_In1 = _N_In1 + (1014); _LN_In1 = (1014); _SN_In1 = (8*_LN_In1); 
1c002804:	3f6c0813          	addi	a6,s8,1014
1c002808:	8cd6                	mv	s9,s5
  if (copy->length == 0)
1c00280a:	5782                	lw	a5,32(sp)
1c00280c:	18078363          	beqz	a5,1c002992 <S11_MatAdd_8x39x39+0x270>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002810:	5522                	lw	a0,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002812:	02000793          	li	a5,32
1c002816:	c909                	beqz	a0,1c002828 <S11_MatAdd_8x39x39+0x106>
1c002818:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00281c:	03c46503          	p.elw	a0,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002820:	00f42223          	sw	a5,4(s0)
1c002824:	5522                	lw	a0,40(sp)
1c002826:	f96d                	bnez	a0,1c002818 <S11_MatAdd_8x39x39+0xf6>
1c002828:	00170993          	addi	s3,a4,1 # 70001 <__L1Cl+0x60001>
				_N_In2 = _N_In2 + (1014); _LN_In2 = (1014); _SN_In2 = (8*_LN_In2); 
			}
			/*============================= End Prepare Tiles ===================================*/
			/*================================= Read Tiles ======================================*/
			AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
			if (_SN_In1) {
1c00282c:	1a0c9c63          	bnez	s9,1c0029e4 <S11_MatAdd_8x39x39+0x2c2>
  if (copy->length == 0)
1c002830:	4786                	lw	a5,64(sp)
1c002832:	c3e9                	beqz	a5,1c0028f4 <S11_MatAdd_8x39x39+0x1d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002834:	4526                	lw	a0,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002836:	02000793          	li	a5,32
1c00283a:	c909                	beqz	a0,1c00284c <S11_MatAdd_8x39x39+0x12a>
1c00283c:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002840:	03c46503          	p.elw	a0,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002844:	00f42223          	sw	a5,4(s0)
1c002848:	4526                	lw	a0,72(sp)
1c00284a:	f96d                	bnez	a0,1c00283c <S11_MatAdd_8x39x39+0x11a>
1c00284c:	000d2503          	lw	a0,0(s10)
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+_N_In1), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+8112*((T0Ind_Total+1)%2)),
						_SN_In1, 3042, _LN_In1, 0, &DmaR_Evt1);
			}
			AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read In2 */
			if (_SN_In2) {
1c002850:	0e0c9b63          	bnez	s9,1c002946 <S11_MatAdd_8x39x39+0x224>
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+_N_In2), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+8112*((T0Ind_Total+1)%2)),
						_SN_In2, 3042, _LN_In2, 0, &DmaR_Evt2);
			}
			/*============================= End Read Tiles ======================================*/
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c002854:	fc173733          	p.bclr	a4,a4,30,1
1c002858:	03570733          	mul	a4,a4,s5
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c00285c:	6791                	lui	a5,0x4
1c00285e:	f6078793          	addi	a5,a5,-160 # 3f60 <__rt_stack_size+0x3760>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002862:	0ff00313          	li	t1,255
1c002866:	00f70e33          	add	t3,a4,a5
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c00286a:	67a1                	lui	a5,0x8
1c00286c:	ec078793          	addi	a5,a5,-320 # 7ec0 <__rt_stack_size+0x76c0>
1c002870:	00f70933          	add	s2,a4,a5
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c002874:	9e2a                	add	t3,t3,a0
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c002876:	972a                	add	a4,a4,a0
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c002878:	954a                	add	a0,a0,s2
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c00287a:	d8ba                	sw	a4,112(sp)
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c00287c:	daf2                	sw	t3,116(sp)
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c00287e:	dcaa                	sw	a0,120(sp)
1c002880:	08642223          	sw	t1,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002884:	006da023          	sw	t1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002888:	006da623          	sw	t1,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00288c:	1c0105b7          	lui	a1,0x1c010
1c002890:	df258593          	addi	a1,a1,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c002894:	08b42023          	sw	a1,128(s0)
1c002898:	09642023          	sw	s6,128(s0)
1c00289c:	855a                	mv	a0,s6
1c00289e:	c042                	sw	a6,0(sp)
1c0028a0:	5520d0ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0028a4:	01cde703          	p.elw	a4,28(s11)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0028a8:	4802                	lw	a6,0(sp)
1c0028aa:	1a0a1e63          	bnez	s4,1c002a66 <S11_MatAdd_8x39x39+0x344>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+32448+8112*((T0Ind_Total)%2)),
1c0028ae:	000d2703          	lw	a4,0(s10)
1c0028b2:	012707b3          	add	a5,a4,s2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028b6:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0028ba:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0028be:	100bd733          	p.exthz	a4,s7
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0028c2:	c5174733          	p.bset	a4,a4,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0028c6:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0028ca:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0028ce:	40f42023          	sw	a5,1024(s0)
1c0028d2:	4692                	lw	a3,4(sp)
1c0028d4:	9c36                	add	s8,s8,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0028d6:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0028da:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c0028de:	c8aa                	sw	a0,80(sp)
        copy->length = 0;
1c0028e0:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c0028e2:	30059073          	csrw	mstatus,a1
1c0028e6:	8a5e                	mv	s4,s7
1c0028e8:	874e                	mv	a4,s3
1c0028ea:	8be6                	mv	s7,s9
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c0028ec:	1239ae63          	p.beqimm	s3,3,1c002a28 <S11_MatAdd_8x39x39+0x306>
1c0028f0:	8c42                	mv	s8,a6
1c0028f2:	b739                	j	1c002800 <S11_MatAdd_8x39x39+0xde>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0028f4:	30047373          	csrrci	t1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0028f8:	40442783          	lw	a5,1028(s0)
1c0028fc:	5542                	lw	a0,48(sp)
1c0028fe:	40a7d7b3          	sra	a5,a5,a0
1c002902:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002906:	c78d                	beqz	a5,1c002930 <S11_MatAdd_8x39x39+0x20e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002908:	10000e13          	li	t3,256
  __builtin_pulp_spr_write(reg, val);
1c00290c:	30031073          	csrw	mstatus,t1
1c002910:	01c42423          	sw	t3,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002914:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002918:	01c42223          	sw	t3,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00291c:	30047373          	csrrci	t1,mstatus,8
1c002920:	40442783          	lw	a5,1028(s0)
1c002924:	5542                	lw	a0,48(sp)
1c002926:	40a7d7b3          	sra	a5,a5,a0
1c00292a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00292e:	fff9                	bnez	a5,1c00290c <S11_MatAdd_8x39x39+0x1ea>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002930:	4785                	li	a5,1
1c002932:	00a79533          	sll	a0,a5,a0
1c002936:	40a42223          	sw	a0,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c00293a:	30031073          	csrw	mstatus,t1
1c00293e:	000d2503          	lw	a0,0(s10)
			if (_SN_In2) {
1c002942:	f00c89e3          	beqz	s9,1c002854 <S11_MatAdd_8x39x39+0x132>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002946:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00294a:	40042e03          	lw	t3,1024(s0)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c00294e:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002952:	de0ca7b3          	p.insert	a5,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002956:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00295a:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00295e:	40f42023          	sw	a5,1024(s0)
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+_N_In2), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+8112*((T0Ind_Total+1)%2)),
1c002962:	6591                	lui	a1,0x4
1c002964:	fc19b7b3          	p.bclr	a5,s3,30,1
1c002968:	f6058593          	addi	a1,a1,-160 # 3f60 <__rt_stack_size+0x3760>
1c00296c:	435785b3          	p.mac	a1,a5,s5
1c002970:	952e                	add	a0,a0,a1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002972:	40a42023          	sw	a0,1024(s0)
1c002976:	46b2                	lw	a3,12(sp)
1c002978:	010687b3          	add	a5,a3,a6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00297c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002980:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c002984:	d872                	sw	t3,48(sp)
        copy->length = 0;
1c002986:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c002988:	30031073          	csrw	mstatus,t1
1c00298c:	000d2503          	lw	a0,0(s10)
1c002990:	b5d1                	j	1c002854 <S11_MatAdd_8x39x39+0x132>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002992:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002996:	40442783          	lw	a5,1028(s0)
1c00299a:	4542                	lw	a0,16(sp)
1c00299c:	40a7d7b3          	sra	a5,a5,a0
1c0029a0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029a4:	c78d                	beqz	a5,1c0029ce <S11_MatAdd_8x39x39+0x2ac>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0029a6:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c0029aa:	30089073          	csrw	mstatus,a7
1c0029ae:	00642423          	sw	t1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0029b2:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0029b6:	00642223          	sw	t1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029ba:	300478f3          	csrrci	a7,mstatus,8
1c0029be:	40442783          	lw	a5,1028(s0)
1c0029c2:	4542                	lw	a0,16(sp)
1c0029c4:	40a7d7b3          	sra	a5,a5,a0
1c0029c8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0029cc:	fff9                	bnez	a5,1c0029aa <S11_MatAdd_8x39x39+0x288>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0029ce:	4785                	li	a5,1
1c0029d0:	00a79533          	sll	a0,a5,a0
1c0029d4:	40a42223          	sw	a0,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0029d8:	30089073          	csrw	mstatus,a7
1c0029dc:	00170993          	addi	s3,a4,1
			if (_SN_In1) {
1c0029e0:	e40c88e3          	beqz	s9,1c002830 <S11_MatAdd_8x39x39+0x10e>
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+_N_In1), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+8112*((T0Ind_Total+1)%2)),
1c0029e4:	000d2503          	lw	a0,0(s10)
1c0029e8:	fc19b7b3          	p.bclr	a5,s3,30,1
1c0029ec:	43578533          	p.mac	a0,a5,s5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0029f0:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0029f4:	40042e03          	lw	t3,1024(s0)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c0029f8:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0029fc:	de0ca7b3          	p.insert	a5,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002a00:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002a04:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002a08:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002a0c:	40a42023          	sw	a0,1024(s0)
1c002a10:	46a2                	lw	a3,8(sp)
1c002a12:	010687b3          	add	a5,a3,a6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002a16:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002a1a:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c002a1e:	c872                	sw	t3,16(sp)
        copy->length = 0;
1c002a20:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c002a22:	30031073          	csrw	mstatus,t1
1c002a26:	b529                	j	1c002830 <S11_MatAdd_8x39x39+0x10e>
  if (copy->length == 0)
1c002a28:	5786                	lw	a5,96(sp)
1c002a2a:	c7d1                	beqz	a5,1c002ab6 <S11_MatAdd_8x39x39+0x394>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002a2c:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a2e:	02000713          	li	a4,32
1c002a32:	002047b7          	lui	a5,0x204
1c002a36:	ca89                	beqz	a3,1c002a48 <S11_MatAdd_8x39x39+0x326>
1c002a38:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a3c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a40:	00e7a223          	sw	a4,4(a5)
1c002a44:	56a6                	lw	a3,104(sp)
1c002a46:	faed                	bnez	a3,1c002a38 <S11_MatAdd_8x39x39+0x316>
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002a48:	40be                	lw	ra,204(sp)
1c002a4a:	442e                	lw	s0,200(sp)
1c002a4c:	449e                	lw	s1,196(sp)
1c002a4e:	490e                	lw	s2,192(sp)
1c002a50:	59fa                	lw	s3,188(sp)
1c002a52:	5a6a                	lw	s4,184(sp)
1c002a54:	5ada                	lw	s5,180(sp)
1c002a56:	5b4a                	lw	s6,176(sp)
1c002a58:	5bba                	lw	s7,172(sp)
1c002a5a:	5c2a                	lw	s8,168(sp)
1c002a5c:	5c9a                	lw	s9,164(sp)
1c002a5e:	5d0a                	lw	s10,160(sp)
1c002a60:	4dfa                	lw	s11,156(sp)
1c002a62:	6169                	addi	sp,sp,208
1c002a64:	8082                	ret
  if (copy->length == 0)
1c002a66:	5706                	lw	a4,96(sp)
1c002a68:	e34d                	bnez	a4,1c002b0a <S11_MatAdd_8x39x39+0x3e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a6a:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002a6e:	40442703          	lw	a4,1028(s0)
1c002a72:	45c6                	lw	a1,80(sp)
1c002a74:	40b75733          	sra	a4,a4,a1
1c002a78:	fc173733          	p.bclr	a4,a4,30,1
1c002a7c:	c70d                	beqz	a4,1c002aa6 <S11_MatAdd_8x39x39+0x384>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002a7e:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c002a82:	30051073          	csrw	mstatus,a0
1c002a86:	00642423          	sw	t1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002a8a:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002a8e:	00642223          	sw	t1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002a92:	30047573          	csrrci	a0,mstatus,8
1c002a96:	40442703          	lw	a4,1028(s0)
1c002a9a:	45c6                	lw	a1,80(sp)
1c002a9c:	40b75733          	sra	a4,a4,a1
1c002aa0:	fc173733          	p.bclr	a4,a4,30,1
1c002aa4:	ff79                	bnez	a4,1c002a82 <S11_MatAdd_8x39x39+0x360>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002aa6:	4705                	li	a4,1
1c002aa8:	00b715b3          	sll	a1,a4,a1
1c002aac:	40b42223          	sw	a1,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c002ab0:	30051073          	csrw	mstatus,a0
1c002ab4:	bbed                	j	1c0028ae <S11_MatAdd_8x39x39+0x18c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ab6:	30047673          	csrrci	a2,mstatus,8
1c002aba:	40442783          	lw	a5,1028(s0)
1c002abe:	46c6                	lw	a3,80(sp)
1c002ac0:	40d7d7b3          	sra	a5,a5,a3
1c002ac4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002ac8:	c79d                	beqz	a5,1c002af6 <S11_MatAdd_8x39x39+0x3d4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002aca:	10000593          	li	a1,256
1c002ace:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002ad2:	30061073          	csrw	mstatus,a2
1c002ad6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002ada:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002ade:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ae2:	30047673          	csrrci	a2,mstatus,8
1c002ae6:	40472783          	lw	a5,1028(a4)
1c002aea:	46c6                	lw	a3,80(sp)
1c002aec:	40d7d7b3          	sra	a5,a5,a3
1c002af0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002af4:	fff9                	bnez	a5,1c002ad2 <S11_MatAdd_8x39x39+0x3b0>
1c002af6:	4785                	li	a5,1
1c002af8:	00d796b3          	sll	a3,a5,a3
1c002afc:	002047b7          	lui	a5,0x204
1c002b00:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c002b04:	30061073          	csrw	mstatus,a2
1c002b08:	b781                	j	1c002a48 <S11_MatAdd_8x39x39+0x326>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002b0a:	55a6                	lw	a1,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002b0c:	02000713          	li	a4,32
1c002b10:	d8058fe3          	beqz	a1,1c0028ae <S11_MatAdd_8x39x39+0x18c>
1c002b14:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002b18:	03c46583          	p.elw	a1,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002b1c:	00e42223          	sw	a4,4(s0)
1c002b20:	55a6                	lw	a1,104(sp)
1c002b22:	f9ed                	bnez	a1,1c002b14 <S11_MatAdd_8x39x39+0x3f2>
1c002b24:	b369                	j	1c0028ae <S11_MatAdd_8x39x39+0x18c>
1c002b26:	8862                	mv	a6,s8
			_SN_In1 = 0;
1c002b28:	4c81                	li	s9,0
1c002b2a:	b1c5                	j	1c00280a <S11_MatAdd_8x39x39+0xe8>

1c002b2c <S14_Conv2d_8x8x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c002b2c:	7129                	addi	sp,sp,-320
1c002b2e:	12812c23          	sw	s0,312(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 48672, 48672]][Tile0, 3:[39x13, 1:39x13, 39x13], 4]
		Tile0: [0, 16224, 2028], Tile1: [0, 16224, 2028], Tile2; [0, 16224, 2028]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002b32:	10000437          	lui	s0,0x10000
1c002b36:	01c40413          	addi	s0,s0,28 # 1000001c <resnet_L1_Memory>
1c002b3a:	00042803          	lw	a6,0(s0)
	KerArg0->W = (unsigned short int) (39);
1c002b3e:	1c0177b7          	lui	a5,0x1c017
1c002b42:	2107af03          	lw	t5,528(a5) # 1c017210 <__clz_tab+0x5f8>
	KerArg0->H = (unsigned short int) (13);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c002b46:	678d                	lui	a5,0x3
1c002b48:	6d878313          	addi	t1,a5,1752 # 36d8 <__rt_stack_size+0x2ed8>
	KerArg0->NormBias = (signed char) (11);
	KerArg1->W = (unsigned short int) (39);
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c002b4c:	6e878793          	addi	a5,a5,1768
{
1c002b50:	13212823          	sw	s2,304(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c002b54:	97c2                	add	a5,a5,a6
	KerArg1->W = (unsigned short int) (39);
1c002b56:	1c017fb7          	lui	t6,0x1c017
{
1c002b5a:	8936                	mv	s2,a3
	KerArg0->NormBias = (signed char) (11);
1c002b5c:	46ad                	li	a3,11
1c002b5e:	02d10b23          	sb	a3,54(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c002b62:	d7be                	sw	a5,236(sp)
	KerArg1->W = (unsigned short int) (39);
1c002b64:	214fa683          	lw	a3,532(t6) # 1c017214 <__clz_tab+0x5fc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002b68:	68a1                	lui	a7,0x8
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002b6a:	000807b7          	lui	a5,0x80
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002b6e:	ac888713          	addi	a4,a7,-1336 # 7ac8 <__rt_stack_size+0x72c8>
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002b72:	07a1                	addi	a5,a5,8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002b74:	9742                	add	a4,a4,a6
	KerArg0->OutFeatures = (unsigned short int) (8);
1c002b76:	4e21                	li	t3,8
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
	KerArg1->Norm = (unsigned char) (13);
1c002b78:	4eb5                	li	t4,13
	KerArg1->OutFeatures = (unsigned short int) (8);
1c002b7a:	0ef12323          	sw	a5,230(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c002b7e:	006802b3          	add	t0,a6,t1
	KerArg1->TotalInFeatures = (short int) (8);
	KerArg1->Orientation = (unsigned char) (1);
1c002b82:	4785                	li	a5,1
{
1c002b84:	13312623          	sw	s3,300(sp)
1c002b88:	ce2a                	sw	a0,28(sp)
1c002b8a:	12112e23          	sw	ra,316(sp)
1c002b8e:	12912a23          	sw	s1,308(sp)
1c002b92:	13412423          	sw	s4,296(sp)
1c002b96:	13512223          	sw	s5,292(sp)
1c002b9a:	13612023          	sw	s6,288(sp)
1c002b9e:	11712e23          	sw	s7,284(sp)
1c002ba2:	11812c23          	sw	s8,280(sp)
1c002ba6:	11912a23          	sw	s9,276(sp)
1c002baa:	11a12823          	sw	s10,272(sp)
1c002bae:	11b12623          	sw	s11,268(sp)
	KerArg2->W = (unsigned short int) (39);
	KerArg2->H = (unsigned short int) (13);
	KerArg2->Norm = (unsigned char) (13);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c002bb2:	18fd                	addi	a7,a7,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002bb4:	d63a                	sw	a4,44(sp)
	KerArg0->W = (unsigned short int) (39);
1c002bb6:	d87a                	sw	t5,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c002bb8:	03c11a23          	sh	t3,52(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c002bbc:	dc16                	sw	t0,56(sp)
	KerArg1->W = (unsigned short int) (39);
1c002bbe:	cfb6                	sw	a3,220(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c002bc0:	d9ba                	sw	a4,240(sp)
	KerArg1->Norm = (unsigned char) (13);
1c002bc2:	0fd10c23          	sb	t4,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c002bc6:	0ef10da3          	sb	a5,251(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31432);
1c002bca:	de3a                	sw	a4,60(sp)
	KerArg2->W = (unsigned short int) (39);
1c002bcc:	c0fa                	sw	t5,64(sp)
	KerArg2->Norm = (unsigned char) (13);
1c002bce:	05d10423          	sb	t4,72(sp)
	KerArg2->InFeatures = (unsigned short int) (8);
1c002bd2:	05c11523          	sh	t3,74(sp)
{
1c002bd6:	89ae                	mv	s3,a1
1c002bd8:	8532                	mv	a0,a2
	KerArg2->UB = (int) (32767);
1c002bda:	c8c6                	sw	a7,80(sp)
	KerArg2->LB = (int) (0);
1c002bdc:	c682                	sw	zero,76(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002bde:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002be2:	002044b7          	lui	s1,0x204
1c002be6:	4004a683          	lw	a3,1024(s1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002bea:	000727b7          	lui	a5,0x72
1c002bee:	99878793          	addi	a5,a5,-1640 # 71998 <__L1Cl+0x61998>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002bf2:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002bf6:	c157c7b3          	p.bset	a5,a5,0,21
1c002bfa:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002bfe:	4104a023          	sw	a6,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002c02:	47f2                	lw	a5,28(sp)
1c002c04:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002c08:	0be207b7          	lui	a5,0xbe20
1c002c0c:	44478793          	addi	a5,a5,1092 # be20444 <__L2+0xbda0444>
1c002c10:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c002c14:	ccb6                	sw	a3,88(sp)
        copy->length = 0;
1c002c16:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c002c18:	30071073          	csrw	mstatus,a4
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 6552, 3042, 1092, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14040), 16, 0, &DmaR_Evt2);
1c002c1c:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c002c1e:	18b4                	addi	a3,sp,120
1c002c20:	4641                	li	a2,16
1c002c22:	959a                	add	a1,a1,t1
1c002c24:	86bfe0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c002c28:	47aa                	lw	a5,136(sp)
1c002c2a:	44078f63          	beqz	a5,1c003088 <S14_Conv2d_8x8x3x3_Relu+0x55c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002c2e:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c30:	02000713          	li	a4,32
1c002c34:	002047b7          	lui	a5,0x204
1c002c38:	ca89                	beqz	a3,1c002c4a <S14_Conv2d_8x8x3x3_Relu+0x11e>
1c002c3a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c3e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c42:	00e7a223          	sw	a4,4(a5)
1c002c46:	46ca                	lw	a3,144(sp)
1c002c48:	faed                	bnez	a3,1c002c3a <S14_Conv2d_8x8x3x3_Relu+0x10e>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14056), 1152, 0, &DmaR_Evt3);
1c002c4a:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c002c4c:	678d                	lui	a5,0x3
1c002c4e:	6e878793          	addi	a5,a5,1768 # 36e8 <__rt_stack_size+0x2ee8>
1c002c52:	95be                	add	a1,a1,a5
1c002c54:	0934                	addi	a3,sp,152
1c002c56:	48000613          	li	a2,1152
1c002c5a:	854e                	mv	a0,s3
1c002c5c:	833fe0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c002c60:	57aa                	lw	a5,168(sp)
1c002c62:	3c078763          	beqz	a5,1c003030 <S14_Conv2d_8x8x3x3_Relu+0x504>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002c66:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002c68:	02000713          	li	a4,32
1c002c6c:	002047b7          	lui	a5,0x204
1c002c70:	ca89                	beqz	a3,1c002c82 <S14_Conv2d_8x8x3x3_Relu+0x156>
1c002c72:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002c76:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002c7a:	00e7a223          	sw	a4,4(a5)
1c002c7e:	56ca                	lw	a3,176(sp)
1c002c80:	faed                	bnez	a3,1c002c72 <S14_Conv2d_8x8x3x3_Relu+0x146>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002c82:	6509                	lui	a0,0x2
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c002c84:	00060737          	lui	a4,0x60
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002c88:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c002c8c:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c002c90:	c1374733          	p.bset	a4,a4,0,19
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002c94:	00204db7          	lui	s11,0x204
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002c98:	c1574733          	p.bset	a4,a4,0,21
{
1c002c9c:	ca02                	sw	zero,20(sp)
1c002c9e:	c402                	sw	zero,8(sp)
1c002ca0:	4b81                	li	s7,0
1c002ca2:	02c10c93          	addi	s9,sp,44
1c002ca6:	09a4                	addi	s1,sp,216
1c002ca8:	03c10c13          	addi	s8,sp,60
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002cac:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
1c002cb0:	cc3a                	sw	a4,24(sp)
	_SP_Out=0;
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c002cb2:	ffeb8993          	addi	s3,s7,-2
1c002cb6:	0019b993          	seqz	s3,s3
1c002cba:	001b9613          	slli	a2,s7,0x1
1c002cbe:	0ff9fa93          	andi	s5,s3,255
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002cc2:	0ff00793          	li	a5,255
1c002cc6:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002cca:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002cce:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002cd2:	1c00c5b7          	lui	a1,0x1c00c
1c002cd6:	c0658593          	addi	a1,a1,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c002cda:	08bda023          	sw	a1,128(s11)
1c002cde:	099da023          	sw	s9,128(s11)
1c002ce2:	8566                	mv	a0,s9
1c002ce4:	c232                	sw	a2,4(sp)
1c002ce6:	721080ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002cea:	01cd6783          	p.elw	a5,28(s10)
1c002cee:	1c0176b7          	lui	a3,0x1c017
1c002cf2:	001bb793          	seqz	a5,s7
1c002cf6:	21868693          	addi	a3,a3,536 # 1c017218 <__clz_tab+0x600>
1c002cfa:	0ff7f893          	andi	a7,a5,255
1c002cfe:	428c                	lw	a1,0(a3)
1c002d00:	01588733          	add	a4,a7,s5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c002d04:	46a2                	lw	a3,8(sp)
1c002d06:	48bd                	li	a7,15
1c002d08:	40e888b3          	sub	a7,a7,a4
1c002d0c:	6711                	lui	a4,0x4
1c002d0e:	d8f995d7          	pv.packhi.b	a1,s3,a5
1c002d12:	74c70793          	addi	a5,a4,1868 # 474c <__rt_stack_size+0x3f4c>
1c002d16:	96be                	add	a3,a3,a5
1c002d18:	680d                	lui	a6,0x3
1c002d1a:	c62e                	sw	a1,12(sp)
1c002d1c:	c436                	sw	a3,8(sp)
1c002d1e:	1008dab3          	p.exthz	s5,a7
1c002d22:	6e880b13          	addi	s6,a6,1768 # 36e8 <__rt_stack_size+0x2ee8>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c002d26:	4a01                	li	s4,0
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c002d28:	4612                	lw	a2,4(sp)
1c002d2a:	3c2bad63          	p.beqimm	s7,2,1c003104 <S14_Conv2d_8x8x3x3_Relu+0x5d8>
1c002d2e:	6e05                	lui	t3,0x1
1c002d30:	3c0b8463          	beqz	s7,1c0030f8 <S14_Conv2d_8x8x3x3_Relu+0x5cc>
1c002d34:	49200713          	li	a4,1170
1c002d38:	924e0e13          	addi	t3,t3,-1756 # 924 <__rt_stack_size+0x124>
1c002d3c:	c83a                	sw	a4,16(sp)
  if (copy->length == 0)
1c002d3e:	57a6                	lw	a5,104(sp)
1c002d40:	10078963          	beqz	a5,1c002e52 <S14_Conv2d_8x8x3x3_Relu+0x326>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002d44:	5746                	lw	a4,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002d46:	02000793          	li	a5,32
1c002d4a:	cb09                	beqz	a4,1c002d5c <S14_Conv2d_8x8x3x3_Relu+0x230>
1c002d4c:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002d50:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002d54:	00fda223          	sw	a5,4(s11)
1c002d58:	5746                	lw	a4,112(sp)
1c002d5a:	fb6d                	bnez	a4,1c002d4c <S14_Conv2d_8x8x3x3_Relu+0x220>
1c002d5c:	401c                	lw	a5,0(s0)
1c002d5e:	00160993          	addi	s3,a2,1
					_N_In = _N_In + (-1950)+(-18252); _LN_In = (1092); _SN_In = (6*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c002d62:	140e1263          	bnez	t3,1c002ea6 <S14_Conv2d_8x8x3x3_Relu+0x37a>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c002d66:	6509                	lui	a0,0x2
1c002d68:	fc163633          	p.bclr	a2,a2,30,1
1c002d6c:	873e                	mv	a4,a5
1c002d6e:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c002d72:	42a60733          	p.mac	a4,a2,a0
				KerArg1->H = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c002d76:	0f511023          	sh	s5,224(sp)
				KerArg1->UsedH = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c002d7a:	0f511123          	sh	s5,226(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c002d7e:	4699                	li	a3,6
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c002d80:	cdba                	sw	a4,216(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c002d82:	381a2863          	p.beqimm	s4,1,1c003112 <S14_Conv2d_8x8x3x3_Relu+0x5e6>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c002d86:	45b2                	lw	a1,12(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c002d88:	97da                	add	a5,a5,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002d8a:	0ff00713          	li	a4,255
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c002d8e:	0ed11223          	sh	a3,228(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c002d92:	d7be                	sw	a5,236(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c002d94:	dbae                	sw	a1,244(sp)
1c002d96:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002d9a:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002d9e:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002da2:	1c00d6b7          	lui	a3,0x1c00d
1c002da6:	70668693          	addi	a3,a3,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c002daa:	08dda023          	sw	a3,128(s11)
1c002dae:	089da023          	sw	s1,128(s11)
1c002db2:	8526                	mv	a0,s1
1c002db4:	1530a0ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002db8:	01cd6783          	p.elw	a5,28(s10)
1c002dbc:	06cb0b13          	addi	s6,s6,108
1c002dc0:	864e                	mv	a2,s3
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c002dc2:	121a3b63          	p.bneimm	s4,1,1c002ef8 <S14_Conv2d_8x8x3x3_Relu+0x3cc>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+15208+8112*((T0Ind_Total)%2));
1c002dc6:	6991                	lui	s3,0x4
1c002dc8:	6709                	lui	a4,0x2
1c002dca:	fc1bb7b3          	p.bclr	a5,s7,30,1
1c002dce:	fb070713          	addi	a4,a4,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c002dd2:	b6898993          	addi	s3,s3,-1176 # 3b68 <__rt_stack_size+0x3368>
1c002dd6:	42e789b3          	p.mac	s3,a5,a4
1c002dda:	4018                	lw	a4,0(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c002ddc:	0ff00793          	li	a5,255
1c002de0:	974e                	add	a4,a4,s3
1c002de2:	c2ba                	sw	a4,68(sp)
1c002de4:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c002de8:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c002dec:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c002df0:	1c00c7b7          	lui	a5,0x1c00c
1c002df4:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c002df8:	08fda023          	sw	a5,128(s11)
1c002dfc:	098da023          	sw	s8,128(s11)
1c002e00:	8562                	mv	a0,s8
1c002e02:	03e090ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002e06:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c002e0a:	45d2                	lw	a1,20(sp)
1c002e0c:	16059f63          	bnez	a1,1c002f8a <S14_Conv2d_8x8x3x3_Relu+0x45e>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15208+8112*((T0Ind_Total)%2)),
1c002e10:	401c                	lw	a5,0(s0)
1c002e12:	99be                	add	s3,s3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e14:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002e18:	400da683          	lw	a3,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002e1c:	47e2                	lw	a5,24(sp)
1c002e1e:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002e22:	413da023          	sw	s3,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002e26:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002e2a:	0be207b7          	lui	a5,0xbe20
1c002e2e:	3f678793          	addi	a5,a5,1014 # be203f6 <__L2+0xbda03f6>
1c002e32:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002e36:	dd36                	sw	a3,184(sp)
        copy->length = 0;
1c002e38:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c002e3a:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c002e3e:	0e2baa63          	p.beqimm	s7,2,1c002f32 <S14_Conv2d_8x8x3x3_Relu+0x406>
1c002e42:	6509                	lui	a0,0x2
1c002e44:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c002e48:	0b85                	addi	s7,s7,1
1c002e4a:	3f690913          	addi	s2,s2,1014
1c002e4e:	ca2a                	sw	a0,20(sp)
1c002e50:	b58d                	j	1c002cb2 <S14_Conv2d_8x8x3x3_Relu+0x186>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e52:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002e56:	404da783          	lw	a5,1028(s11)
1c002e5a:	4766                	lw	a4,88(sp)
1c002e5c:	40e7d7b3          	sra	a5,a5,a4
1c002e60:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e64:	c78d                	beqz	a5,1c002e8e <S14_Conv2d_8x8x3x3_Relu+0x362>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002e66:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c002e6a:	30069073          	csrw	mstatus,a3
1c002e6e:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002e72:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002e76:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002e7a:	300476f3          	csrrci	a3,mstatus,8
1c002e7e:	404da783          	lw	a5,1028(s11)
1c002e82:	4766                	lw	a4,88(sp)
1c002e84:	40e7d7b3          	sra	a5,a5,a4
1c002e88:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002e8c:	fff9                	bnez	a5,1c002e6a <S14_Conv2d_8x8x3x3_Relu+0x33e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002e8e:	4785                	li	a5,1
1c002e90:	00e79733          	sll	a4,a5,a4
1c002e94:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002e98:	30069073          	csrw	mstatus,a3
1c002e9c:	401c                	lw	a5,0(s0)
1c002e9e:	00160993          	addi	s3,a2,1
				if (_SN_In) {
1c002ea2:	ec0e02e3          	beqz	t3,1c002d66 <S14_Conv2d_8x8x3x3_Relu+0x23a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002ea6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c002eaa:	400da583          	lw	a1,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c002eae:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c002eb2:	de0e2733          	p.insert	a4,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c002eb6:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c002eba:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c002ebe:	40eda023          	sw	a4,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
1c002ec2:	6509                	lui	a0,0x2
1c002ec4:	fc19b733          	p.bclr	a4,s3,30,1
1c002ec8:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c002ecc:	42a707b3          	p.mac	a5,a4,a0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c002ed0:	40fda023          	sw	a5,1024(s11)
1c002ed4:	4772                	lw	a4,28(sp)
1c002ed6:	4522                	lw	a0,8(sp)
1c002ed8:	00a707b3          	add	a5,a4,a0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c002edc:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c002ee0:	4742                	lw	a4,16(sp)
1c002ee2:	0be207b7          	lui	a5,0xbe20
1c002ee6:	8fd9                	or	a5,a5,a4
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c002ee8:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c002eec:	ccae                	sw	a1,88(sp)
        copy->length = 0;
1c002eee:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c002ef0:	30069073          	csrw	mstatus,a3
1c002ef4:	401c                	lw	a5,0(s0)
1c002ef6:	bd85                	j	1c002d66 <S14_Conv2d_8x8x3x3_Relu+0x23a>
1c002ef8:	4a05                	li	s4,1
				} else if (!(T0Ind_Last)) {
1c002efa:	222bae63          	p.beqimm	s7,2,1c003136 <S14_Conv2d_8x8x3x3_Relu+0x60a>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c002efe:	200b8c63          	beqz	s7,1c003116 <S14_Conv2d_8x8x3x3_Relu+0x5ea>
1c002f02:	4722                	lw	a4,8(sp)
1c002f04:	76f1                	lui	a3,0xffffc
1c002f06:	caa68793          	addi	a5,a3,-854 # ffffbcaa <pulp__FC+0xffffbcab>
1c002f0a:	973e                	add	a4,a4,a5
1c002f0c:	49200593          	li	a1,1170
1c002f10:	1c0177b7          	lui	a5,0x1c017
1c002f14:	21c78793          	addi	a5,a5,540 # 1c01721c <__clz_tab+0x604>
1c002f18:	c43a                	sw	a4,8(sp)
1c002f1a:	c82e                	sw	a1,16(sp)
1c002f1c:	0007ae03          	lw	t3,0(a5)
1c002f20:	e01bbfe3          	p.bneimm	s7,1,1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>
1c002f24:	6689                	lui	a3,0x2
1c002f26:	44400713          	li	a4,1092
1c002f2a:	99868e13          	addi	t3,a3,-1640 # 1998 <__rt_stack_size+0x1198>
1c002f2e:	c83a                	sw	a4,16(sp)
1c002f30:	b539                	j	1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>
  if (copy->length == 0)
1c002f32:	472e                	lw	a4,200(sp)
1c002f34:	c745                	beqz	a4,1c002fdc <S14_Conv2d_8x8x3x3_Relu+0x4b0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c002f36:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002f38:	02000713          	li	a4,32
1c002f3c:	002047b7          	lui	a5,0x204
1c002f40:	ca89                	beqz	a3,1c002f52 <S14_Conv2d_8x8x3x3_Relu+0x426>
1c002f42:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002f46:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002f4a:	00e7a223          	sw	a4,4(a5)
1c002f4e:	46ce                	lw	a3,208(sp)
1c002f50:	faed                	bnez	a3,1c002f42 <S14_Conv2d_8x8x3x3_Relu+0x416>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c002f52:	13c12083          	lw	ra,316(sp)
1c002f56:	13812403          	lw	s0,312(sp)
1c002f5a:	13412483          	lw	s1,308(sp)
1c002f5e:	13012903          	lw	s2,304(sp)
1c002f62:	12c12983          	lw	s3,300(sp)
1c002f66:	12812a03          	lw	s4,296(sp)
1c002f6a:	12412a83          	lw	s5,292(sp)
1c002f6e:	12012b03          	lw	s6,288(sp)
1c002f72:	11c12b83          	lw	s7,284(sp)
1c002f76:	11812c03          	lw	s8,280(sp)
1c002f7a:	11412c83          	lw	s9,276(sp)
1c002f7e:	11012d03          	lw	s10,272(sp)
1c002f82:	10c12d83          	lw	s11,268(sp)
1c002f86:	6131                	addi	sp,sp,320
1c002f88:	8082                	ret
  if (copy->length == 0)
1c002f8a:	47ae                	lw	a5,200(sp)
1c002f8c:	14079863          	bnez	a5,1c0030dc <S14_Conv2d_8x8x3x3_Relu+0x5b0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002f90:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c002f94:	404da783          	lw	a5,1028(s11)
1c002f98:	576a                	lw	a4,184(sp)
1c002f9a:	40e7d7b3          	sra	a5,a5,a4
1c002f9e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002fa2:	c78d                	beqz	a5,1c002fcc <S14_Conv2d_8x8x3x3_Relu+0x4a0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002fa4:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c002fa8:	30069073          	csrw	mstatus,a3
1c002fac:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c002fb0:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c002fb4:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fb8:	300476f3          	csrrci	a3,mstatus,8
1c002fbc:	404da783          	lw	a5,1028(s11)
1c002fc0:	576a                	lw	a4,184(sp)
1c002fc2:	40e7d7b3          	sra	a5,a5,a4
1c002fc6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002fca:	fff9                	bnez	a5,1c002fa8 <S14_Conv2d_8x8x3x3_Relu+0x47c>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c002fcc:	4785                	li	a5,1
1c002fce:	00e79733          	sll	a4,a5,a4
1c002fd2:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c002fd6:	30069073          	csrw	mstatus,a3
1c002fda:	bd1d                	j	1c002e10 <S14_Conv2d_8x8x3x3_Relu+0x2e4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c002fdc:	30047673          	csrrci	a2,mstatus,8
1c002fe0:	404da783          	lw	a5,1028(s11)
1c002fe4:	56ea                	lw	a3,184(sp)
1c002fe6:	40d7d7b3          	sra	a5,a5,a3
1c002fea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c002fee:	c79d                	beqz	a5,1c00301c <S14_Conv2d_8x8x3x3_Relu+0x4f0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c002ff0:	10000593          	li	a1,256
1c002ff4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c002ff8:	30061073          	csrw	mstatus,a2
1c002ffc:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003000:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003004:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003008:	30047673          	csrrci	a2,mstatus,8
1c00300c:	40472783          	lw	a5,1028(a4)
1c003010:	56ea                	lw	a3,184(sp)
1c003012:	40d7d7b3          	sra	a5,a5,a3
1c003016:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00301a:	fff9                	bnez	a5,1c002ff8 <S14_Conv2d_8x8x3x3_Relu+0x4cc>
1c00301c:	4785                	li	a5,1
1c00301e:	00d796b3          	sll	a3,a5,a3
1c003022:	002047b7          	lui	a5,0x204
1c003026:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00302a:	30061073          	csrw	mstatus,a2
1c00302e:	b715                	j	1c002f52 <S14_Conv2d_8x8x3x3_Relu+0x426>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003030:	30047673          	csrrci	a2,mstatus,8
1c003034:	002047b7          	lui	a5,0x204
1c003038:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00303c:	46ea                	lw	a3,152(sp)
1c00303e:	40d7d7b3          	sra	a5,a5,a3
1c003042:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003046:	c79d                	beqz	a5,1c003074 <S14_Conv2d_8x8x3x3_Relu+0x548>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003048:	10000593          	li	a1,256
1c00304c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003050:	30061073          	csrw	mstatus,a2
1c003054:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003058:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00305c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003060:	30047673          	csrrci	a2,mstatus,8
1c003064:	40472783          	lw	a5,1028(a4)
1c003068:	46ea                	lw	a3,152(sp)
1c00306a:	40d7d7b3          	sra	a5,a5,a3
1c00306e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003072:	fff9                	bnez	a5,1c003050 <S14_Conv2d_8x8x3x3_Relu+0x524>
1c003074:	4785                	li	a5,1
1c003076:	00d796b3          	sll	a3,a5,a3
1c00307a:	002047b7          	lui	a5,0x204
1c00307e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003082:	30061073          	csrw	mstatus,a2
1c003086:	bef5                	j	1c002c82 <S14_Conv2d_8x8x3x3_Relu+0x156>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003088:	30047673          	csrrci	a2,mstatus,8
1c00308c:	4044a783          	lw	a5,1028(s1)
1c003090:	56e6                	lw	a3,120(sp)
1c003092:	40d7d7b3          	sra	a5,a5,a3
1c003096:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00309a:	c79d                	beqz	a5,1c0030c8 <S14_Conv2d_8x8x3x3_Relu+0x59c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00309c:	10000593          	li	a1,256
1c0030a0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0030a4:	30061073          	csrw	mstatus,a2
1c0030a8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030ac:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030b0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0030b4:	30047673          	csrrci	a2,mstatus,8
1c0030b8:	40472783          	lw	a5,1028(a4)
1c0030bc:	56e6                	lw	a3,120(sp)
1c0030be:	40d7d7b3          	sra	a5,a5,a3
1c0030c2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0030c6:	fff9                	bnez	a5,1c0030a4 <S14_Conv2d_8x8x3x3_Relu+0x578>
1c0030c8:	4785                	li	a5,1
1c0030ca:	00d796b3          	sll	a3,a5,a3
1c0030ce:	002047b7          	lui	a5,0x204
1c0030d2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0030d6:	30061073          	csrw	mstatus,a2
1c0030da:	be85                	j	1c002c4a <S14_Conv2d_8x8x3x3_Relu+0x11e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0030dc:	474e                	lw	a4,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0030de:	02000793          	li	a5,32
1c0030e2:	d20707e3          	beqz	a4,1c002e10 <S14_Conv2d_8x8x3x3_Relu+0x2e4>
1c0030e6:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0030ea:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0030ee:	00fda223          	sw	a5,4(s11)
1c0030f2:	474e                	lw	a4,208(sp)
1c0030f4:	fb6d                	bnez	a4,1c0030e6 <S14_Conv2d_8x8x3x3_Relu+0x5ba>
1c0030f6:	bb29                	j	1c002e10 <S14_Conv2d_8x8x3x3_Relu+0x2e4>
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c0030f8:	44400593          	li	a1,1092
1c0030fc:	888e0e13          	addi	t3,t3,-1912
1c003100:	c82e                	sw	a1,16(sp)
1c003102:	b935                	j	1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>
1c003104:	6e05                	lui	t3,0x1
1c003106:	44400793          	li	a5,1092
1c00310a:	888e0e13          	addi	t3,t3,-1912 # 888 <__rt_stack_size+0x88>
1c00310e:	c83e                	sw	a5,16(sp)
1c003110:	b13d                	j	1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c003112:	4689                	li	a3,2
1c003114:	b98d                	j	1c002d86 <S14_Conv2d_8x8x3x3_Relu+0x25a>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c003116:	45a2                	lw	a1,8(sp)
1c003118:	76f1                	lui	a3,0xffffc
1c00311a:	c5c68693          	addi	a3,a3,-932 # ffffbc5c <pulp__FC+0xffffbc5d>
1c00311e:	1c017737          	lui	a4,0x1c017
1c003122:	95b6                	add	a1,a1,a3
1c003124:	21c70713          	addi	a4,a4,540 # 1c01721c <__clz_tab+0x604>
1c003128:	49200793          	li	a5,1170
1c00312c:	c42e                	sw	a1,8(sp)
1c00312e:	00072e03          	lw	t3,0(a4)
1c003132:	c83e                	sw	a5,16(sp)
1c003134:	b129                	j	1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>
				_SN_In = 0;
1c003136:	4e01                	li	t3,0
1c003138:	b119                	j	1c002d3e <S14_Conv2d_8x8x3x3_Relu+0x212>

1c00313a <S17_Conv2d_8x8x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00313a:	7129                	addi	sp,sp,-320
1c00313c:	12812c23          	sw	s0,312(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 48672, 48672]][Tile0, 3:[39x13, 1:39x13, 39x13], 4]
		Tile0: [0, 16224, 2028], Tile1: [0, 16224, 2028], Tile2; [0, 16224, 2028]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c003140:	10000437          	lui	s0,0x10000
1c003144:	01c40413          	addi	s0,s0,28 # 1000001c <resnet_L1_Memory>
1c003148:	00042803          	lw	a6,0(s0)
	KerArg0->W = (unsigned short int) (39);
1c00314c:	1c0177b7          	lui	a5,0x1c017
1c003150:	2107af03          	lw	t5,528(a5) # 1c017210 <__clz_tab+0x5f8>
	KerArg0->H = (unsigned short int) (13);
	KerArg0->OutFeatures = (unsigned short int) (8);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c003154:	678d                	lui	a5,0x3
1c003156:	6d878313          	addi	t1,a5,1752 # 36d8 <__rt_stack_size+0x2ed8>
	KerArg0->NormBias = (signed char) (12);
	KerArg1->W = (unsigned short int) (39);
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->OutFeatures = (unsigned short int) (8);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c00315a:	6e878793          	addi	a5,a5,1768
{
1c00315e:	13212823          	sw	s2,304(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c003162:	97c2                	add	a5,a5,a6
	KerArg1->W = (unsigned short int) (39);
1c003164:	1c017fb7          	lui	t6,0x1c017
{
1c003168:	8936                	mv	s2,a3
	KerArg0->NormBias = (signed char) (12);
1c00316a:	46b1                	li	a3,12
1c00316c:	02d10b23          	sb	a3,54(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056);
1c003170:	d7be                	sw	a5,236(sp)
	KerArg1->W = (unsigned short int) (39);
1c003172:	214fa683          	lw	a3,532(t6) # 1c017214 <__clz_tab+0x5fc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c003176:	68a1                	lui	a7,0x8
	KerArg1->OutFeatures = (unsigned short int) (8);
1c003178:	000807b7          	lui	a5,0x80
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c00317c:	ac888713          	addi	a4,a7,-1336 # 7ac8 <__rt_stack_size+0x72c8>
	KerArg1->OutFeatures = (unsigned short int) (8);
1c003180:	07a1                	addi	a5,a5,8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c003182:	9742                	add	a4,a4,a6
	KerArg0->OutFeatures = (unsigned short int) (8);
1c003184:	4e21                	li	t3,8
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
	KerArg1->Norm = (unsigned char) (16);
1c003186:	4ec1                	li	t4,16
	KerArg1->OutFeatures = (unsigned short int) (8);
1c003188:	0ef12323          	sw	a5,230(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c00318c:	006802b3          	add	t0,a6,t1
	KerArg1->TotalInFeatures = (short int) (8);
	KerArg1->Orientation = (unsigned char) (1);
1c003190:	4785                	li	a5,1
{
1c003192:	13312623          	sw	s3,300(sp)
1c003196:	ce2a                	sw	a0,28(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c003198:	0ef10da3          	sb	a5,251(sp)
{
1c00319c:	12112e23          	sw	ra,316(sp)
1c0031a0:	12912a23          	sw	s1,308(sp)
1c0031a4:	13412423          	sw	s4,296(sp)
1c0031a8:	13512223          	sw	s5,292(sp)
1c0031ac:	13612023          	sw	s6,288(sp)
1c0031b0:	11712e23          	sw	s7,284(sp)
1c0031b4:	11812c23          	sw	s8,280(sp)
1c0031b8:	11912a23          	sw	s9,276(sp)
1c0031bc:	11a12823          	sw	s10,272(sp)
1c0031c0:	11b12623          	sw	s11,268(sp)
	KerArg2->W = (unsigned short int) (39);
	KerArg2->H = (unsigned short int) (13);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (8);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c0031c4:	18fd                	addi	a7,a7,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c0031c6:	d63a                	sw	a4,44(sp)
	KerArg0->W = (unsigned short int) (39);
1c0031c8:	d87a                	sw	t5,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (8);
1c0031ca:	03c11a23          	sh	t3,52(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+14040);
1c0031ce:	dc16                	sw	t0,56(sp)
	KerArg1->W = (unsigned short int) (39);
1c0031d0:	cfb6                	sw	a3,220(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31432);
1c0031d2:	d9ba                	sw	a4,240(sp)
	KerArg1->Norm = (unsigned char) (16);
1c0031d4:	0fd10c23          	sb	t4,248(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31432);
1c0031d8:	de3a                	sw	a4,60(sp)
	KerArg2->W = (unsigned short int) (39);
1c0031da:	c0fa                	sw	t5,64(sp)
	KerArg2->Norm = (unsigned char) (16);
1c0031dc:	05d10423          	sb	t4,72(sp)
	KerArg2->InFeatures = (unsigned short int) (8);
1c0031e0:	05c11523          	sh	t3,74(sp)
	KerArg2->LB = (int) (-32768);
1c0031e4:	77e1                	lui	a5,0xffff8
{
1c0031e6:	89ae                	mv	s3,a1
1c0031e8:	8532                	mv	a0,a2
	KerArg2->LB = (int) (-32768);
1c0031ea:	c6be                	sw	a5,76(sp)
	KerArg2->UB = (int) (32767);
1c0031ec:	c8c6                	sw	a7,80(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0031ee:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0031f2:	002044b7          	lui	s1,0x204
1c0031f6:	4004a683          	lw	a3,1024(s1) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0031fa:	000727b7          	lui	a5,0x72
1c0031fe:	99878793          	addi	a5,a5,-1640 # 71998 <__L1Cl+0x61998>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003202:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003206:	c157c7b3          	p.bset	a5,a5,0,21
1c00320a:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00320e:	4104a023          	sw	a6,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003212:	47f2                	lw	a5,28(sp)
1c003214:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003218:	0be207b7          	lui	a5,0xbe20
1c00321c:	44478793          	addi	a5,a5,1092 # be20444 <__L2+0xbda0444>
1c003220:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c003224:	ccb6                	sw	a3,88(sp)
        copy->length = 0;
1c003226:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c003228:	30071073          	csrw	mstatus,a4
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 6552, 3042, 1092, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14040), 16, 0, &DmaR_Evt2);
1c00322c:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c00322e:	18b4                	addi	a3,sp,120
1c003230:	4641                	li	a2,16
1c003232:	959a                	add	a1,a1,t1
1c003234:	a5afe0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c003238:	47aa                	lw	a5,136(sp)
1c00323a:	44078f63          	beqz	a5,1c003698 <S17_Conv2d_8x8x3x3+0x55e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00323e:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003240:	02000713          	li	a4,32
1c003244:	002047b7          	lui	a5,0x204
1c003248:	ca89                	beqz	a3,1c00325a <S17_Conv2d_8x8x3x3+0x120>
1c00324a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00324e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003252:	00e7a223          	sw	a4,4(a5)
1c003256:	46ca                	lw	a3,144(sp)
1c003258:	faed                	bnez	a3,1c00324a <S17_Conv2d_8x8x3x3+0x110>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+14056), 1152, 0, &DmaR_Evt3);
1c00325a:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c00325c:	678d                	lui	a5,0x3
1c00325e:	6e878793          	addi	a5,a5,1768 # 36e8 <__rt_stack_size+0x2ee8>
1c003262:	95be                	add	a1,a1,a5
1c003264:	0934                	addi	a3,sp,152
1c003266:	48000613          	li	a2,1152
1c00326a:	854e                	mv	a0,s3
1c00326c:	a22fe0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c003270:	57aa                	lw	a5,168(sp)
1c003272:	3c078763          	beqz	a5,1c003640 <S17_Conv2d_8x8x3x3+0x506>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003276:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003278:	02000713          	li	a4,32
1c00327c:	002047b7          	lui	a5,0x204
1c003280:	ca89                	beqz	a3,1c003292 <S17_Conv2d_8x8x3x3+0x158>
1c003282:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003286:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00328a:	00e7a223          	sw	a4,4(a5)
1c00328e:	56ca                	lw	a3,176(sp)
1c003290:	faed                	bnez	a3,1c003282 <S17_Conv2d_8x8x3x3+0x148>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003292:	6509                	lui	a0,0x2
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c003294:	00060737          	lui	a4,0x60
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003298:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c00329c:	de052733          	p.insert	a4,a0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0032a0:	c1374733          	p.bset	a4,a4,0,19
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0032a4:	00204db7          	lui	s11,0x204
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0032a8:	c1574733          	p.bset	a4,a4,0,21
{
1c0032ac:	ca02                	sw	zero,20(sp)
1c0032ae:	c402                	sw	zero,8(sp)
1c0032b0:	4b81                	li	s7,0
1c0032b2:	02c10c93          	addi	s9,sp,44
1c0032b6:	09a4                	addi	s1,sp,216
1c0032b8:	03c10c13          	addi	s8,sp,60
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0032bc:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
1c0032c0:	cc3a                	sw	a4,24(sp)
	_SP_Out=0;
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
1c0032c2:	ffeb8993          	addi	s3,s7,-2
1c0032c6:	0019b993          	seqz	s3,s3
1c0032ca:	001b9613          	slli	a2,s7,0x1
1c0032ce:	0ff9fa93          	andi	s5,s3,255
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0032d2:	0ff00793          	li	a5,255
1c0032d6:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0032da:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0032de:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0032e2:	1c00c5b7          	lui	a1,0x1c00c
1c0032e6:	c0658593          	addi	a1,a1,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c0032ea:	08bda023          	sw	a1,128(s11)
1c0032ee:	099da023          	sw	s9,128(s11)
1c0032f2:	8566                	mv	a0,s9
1c0032f4:	c232                	sw	a2,4(sp)
1c0032f6:	111080ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0032fa:	01cd6783          	p.elw	a5,28(s10)
1c0032fe:	1c0176b7          	lui	a3,0x1c017
1c003302:	001bb793          	seqz	a5,s7
1c003306:	21868693          	addi	a3,a3,536 # 1c017218 <__clz_tab+0x600>
1c00330a:	0ff7f893          	andi	a7,a5,255
1c00330e:	428c                	lw	a1,0(a3)
1c003310:	01588733          	add	a4,a7,s5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c003314:	46a2                	lw	a3,8(sp)
1c003316:	48bd                	li	a7,15
1c003318:	40e888b3          	sub	a7,a7,a4
1c00331c:	6711                	lui	a4,0x4
1c00331e:	d8f995d7          	pv.packhi.b	a1,s3,a5
1c003322:	74c70793          	addi	a5,a4,1868 # 474c <__rt_stack_size+0x3f4c>
1c003326:	96be                	add	a3,a3,a5
1c003328:	680d                	lui	a6,0x3
1c00332a:	c62e                	sw	a1,12(sp)
1c00332c:	c436                	sw	a3,8(sp)
1c00332e:	1008dab3          	p.exthz	s5,a7
1c003332:	6e880b13          	addi	s6,a6,1768 # 36e8 <__rt_stack_size+0x2ee8>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c003336:	4a01                	li	s4,0
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c003338:	4612                	lw	a2,4(sp)
1c00333a:	3c2bad63          	p.beqimm	s7,2,1c003714 <S17_Conv2d_8x8x3x3+0x5da>
1c00333e:	6e05                	lui	t3,0x1
1c003340:	3c0b8463          	beqz	s7,1c003708 <S17_Conv2d_8x8x3x3+0x5ce>
1c003344:	49200713          	li	a4,1170
1c003348:	924e0e13          	addi	t3,t3,-1756 # 924 <__rt_stack_size+0x124>
1c00334c:	c83a                	sw	a4,16(sp)
  if (copy->length == 0)
1c00334e:	57a6                	lw	a5,104(sp)
1c003350:	10078963          	beqz	a5,1c003462 <S17_Conv2d_8x8x3x3+0x328>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003354:	5746                	lw	a4,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003356:	02000793          	li	a5,32
1c00335a:	cb09                	beqz	a4,1c00336c <S17_Conv2d_8x8x3x3+0x232>
1c00335c:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003360:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003364:	00fda223          	sw	a5,4(s11)
1c003368:	5746                	lw	a4,112(sp)
1c00336a:	fb6d                	bnez	a4,1c00335c <S17_Conv2d_8x8x3x3+0x222>
1c00336c:	401c                	lw	a5,0(s0)
1c00336e:	00160993          	addi	s3,a2,1
					_N_In = _N_In + (-1950)+(-18252); _LN_In = (1092); _SN_In = (6*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
				if (_SN_In) {
1c003372:	140e1263          	bnez	t3,1c0034b6 <S17_Conv2d_8x8x3x3+0x37c>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt1);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c003376:	6509                	lui	a0,0x2
1c003378:	fc163633          	p.bclr	a2,a2,30,1
1c00337c:	873e                	mv	a4,a5
1c00337e:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c003382:	42a60733          	p.mac	a4,a2,a0
				KerArg1->H = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c003386:	0f511023          	sh	s5,224(sp)
				KerArg1->UsedH = (unsigned short int) (15-1*(T0Ind==0)-1*(T0Ind_Last));
1c00338a:	0f511123          	sh	s5,226(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c00338e:	4699                	li	a3,6
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7020*((D0Ind_Total)%2));
1c003390:	cdba                	sw	a4,216(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c003392:	381a2863          	p.beqimm	s4,1,1c003722 <S17_Conv2d_8x8x3x3+0x5e8>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c003396:	45b2                	lw	a1,12(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c003398:	97da                	add	a5,a5,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00339a:	0ff00713          	li	a4,255
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c00339e:	0ed11223          	sh	a3,228(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+14056+((D0Ind)*108));
1c0033a2:	d7be                	sw	a5,236(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0033a4:	dbae                	sw	a1,244(sp)
1c0033a6:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0033aa:	00ed2023          	sw	a4,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0033ae:	00ed2623          	sw	a4,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0033b2:	1c00d6b7          	lui	a3,0x1c00d
1c0033b6:	70668693          	addi	a3,a3,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c0033ba:	08dda023          	sw	a3,128(s11)
1c0033be:	089da023          	sw	s1,128(s11)
1c0033c2:	8526                	mv	a0,s1
1c0033c4:	3420a0ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0033c8:	01cd6783          	p.elw	a5,28(s10)
1c0033cc:	06cb0b13          	addi	s6,s6,108
1c0033d0:	864e                	mv	a2,s3
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0033d2:	121a3b63          	p.bneimm	s4,1,1c003508 <S17_Conv2d_8x8x3x3+0x3ce>
				__CALL(KerParConv3x3Stride1_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+15208+8112*((T0Ind_Total)%2));
1c0033d6:	6991                	lui	s3,0x4
1c0033d8:	6709                	lui	a4,0x2
1c0033da:	fc1bb7b3          	p.bclr	a5,s7,30,1
1c0033de:	fb070713          	addi	a4,a4,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c0033e2:	b6898993          	addi	s3,s3,-1176 # 3b68 <__rt_stack_size+0x3368>
1c0033e6:	42e789b3          	p.mac	s3,a5,a4
1c0033ea:	4018                	lw	a4,0(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0033ec:	0ff00793          	li	a5,255
1c0033f0:	974e                	add	a4,a4,s3
1c0033f2:	c2ba                	sw	a4,68(sp)
1c0033f4:	08fda223          	sw	a5,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0033f8:	00fd2023          	sw	a5,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0033fc:	00fd2623          	sw	a5,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003400:	1c00c7b7          	lui	a5,0x1c00c
1c003404:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c003408:	08fda023          	sw	a5,128(s11)
1c00340c:	098da023          	sw	s8,128(s11)
1c003410:	8562                	mv	a0,s8
1c003412:	22f080ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003416:	01cd6783          	p.elw	a5,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c00341a:	45d2                	lw	a1,20(sp)
1c00341c:	16059f63          	bnez	a1,1c00359a <S17_Conv2d_8x8x3x3+0x460>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15208+8112*((T0Ind_Total)%2)),
1c003420:	401c                	lw	a5,0(s0)
1c003422:	99be                	add	s3,s3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003424:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003428:	400da683          	lw	a3,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00342c:	47e2                	lw	a5,24(sp)
1c00342e:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003432:	413da023          	sw	s3,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003436:	412da023          	sw	s2,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00343a:	0be207b7          	lui	a5,0xbe20
1c00343e:	3f678793          	addi	a5,a5,1014 # be203f6 <__L2+0xbda03f6>
1c003442:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c003446:	dd36                	sw	a3,184(sp)
        copy->length = 0;
1c003448:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c00344a:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c00344e:	0e2baa63          	p.beqimm	s7,2,1c003542 <S17_Conv2d_8x8x3x3+0x408>
1c003452:	6509                	lui	a0,0x2
1c003454:	fb050513          	addi	a0,a0,-80 # 1fb0 <__rt_stack_size+0x17b0>
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003458:	0b85                	addi	s7,s7,1
1c00345a:	3f690913          	addi	s2,s2,1014
1c00345e:	ca2a                	sw	a0,20(sp)
1c003460:	b58d                	j	1c0032c2 <S17_Conv2d_8x8x3x3+0x188>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003462:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003466:	404da783          	lw	a5,1028(s11)
1c00346a:	4766                	lw	a4,88(sp)
1c00346c:	40e7d7b3          	sra	a5,a5,a4
1c003470:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003474:	c78d                	beqz	a5,1c00349e <S17_Conv2d_8x8x3x3+0x364>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003476:	10000593          	li	a1,256
  __builtin_pulp_spr_write(reg, val);
1c00347a:	30069073          	csrw	mstatus,a3
1c00347e:	00bda423          	sw	a1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003482:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003486:	00bda223          	sw	a1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00348a:	300476f3          	csrrci	a3,mstatus,8
1c00348e:	404da783          	lw	a5,1028(s11)
1c003492:	4766                	lw	a4,88(sp)
1c003494:	40e7d7b3          	sra	a5,a5,a4
1c003498:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00349c:	fff9                	bnez	a5,1c00347a <S17_Conv2d_8x8x3x3+0x340>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00349e:	4785                	li	a5,1
1c0034a0:	00e79733          	sll	a4,a5,a4
1c0034a4:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0034a8:	30069073          	csrw	mstatus,a3
1c0034ac:	401c                	lw	a5,0(s0)
1c0034ae:	00160993          	addi	s3,a2,1
				if (_SN_In) {
1c0034b2:	ec0e02e3          	beqz	t3,1c003376 <S17_Conv2d_8x8x3x3+0x23c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0034b6:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0034ba:	400da583          	lw	a1,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c0034be:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0034c2:	de0e2733          	p.insert	a4,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0034c6:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0034ca:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0034ce:	40eda023          	sw	a4,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7020*((D0Ind_Total+1)%2)),
1c0034d2:	6509                	lui	a0,0x2
1c0034d4:	fc19b733          	p.bclr	a4,s3,30,1
1c0034d8:	b6c50513          	addi	a0,a0,-1172 # 1b6c <__rt_stack_size+0x136c>
1c0034dc:	42a707b3          	p.mac	a5,a4,a0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0034e0:	40fda023          	sw	a5,1024(s11)
1c0034e4:	4772                	lw	a4,28(sp)
1c0034e6:	4522                	lw	a0,8(sp)
1c0034e8:	00a707b3          	add	a5,a4,a0
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0034ec:	40fda023          	sw	a5,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0034f0:	4742                	lw	a4,16(sp)
1c0034f2:	0be207b7          	lui	a5,0xbe20
1c0034f6:	8fd9                	or	a5,a5,a4
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0034f8:	40fda023          	sw	a5,1024(s11)
        if (!merge) copy->id = id;
1c0034fc:	ccae                	sw	a1,88(sp)
        copy->length = 0;
1c0034fe:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c003500:	30069073          	csrw	mstatus,a3
1c003504:	401c                	lw	a5,0(s0)
1c003506:	bd85                	j	1c003376 <S17_Conv2d_8x8x3x3+0x23c>
1c003508:	4a05                	li	s4,1
				} else if (!(T0Ind_Last)) {
1c00350a:	222bae63          	p.beqimm	s7,2,1c003746 <S17_Conv2d_8x8x3x3+0x60c>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c00350e:	200b8c63          	beqz	s7,1c003726 <S17_Conv2d_8x8x3x3+0x5ec>
1c003512:	4722                	lw	a4,8(sp)
1c003514:	76f1                	lui	a3,0xffffc
1c003516:	caa68793          	addi	a5,a3,-854 # ffffbcaa <pulp__FC+0xffffbcab>
1c00351a:	973e                	add	a4,a4,a5
1c00351c:	49200593          	li	a1,1170
1c003520:	1c0177b7          	lui	a5,0x1c017
1c003524:	21c78793          	addi	a5,a5,540 # 1c01721c <__clz_tab+0x604>
1c003528:	c43a                	sw	a4,8(sp)
1c00352a:	c82e                	sw	a1,16(sp)
1c00352c:	0007ae03          	lw	t3,0(a5)
1c003530:	e01bbfe3          	p.bneimm	s7,1,1c00334e <S17_Conv2d_8x8x3x3+0x214>
1c003534:	6689                	lui	a3,0x2
1c003536:	44400713          	li	a4,1092
1c00353a:	99868e13          	addi	t3,a3,-1640 # 1998 <__rt_stack_size+0x1198>
1c00353e:	c83a                	sw	a4,16(sp)
1c003540:	b539                	j	1c00334e <S17_Conv2d_8x8x3x3+0x214>
  if (copy->length == 0)
1c003542:	472e                	lw	a4,200(sp)
1c003544:	c745                	beqz	a4,1c0035ec <S17_Conv2d_8x8x3x3+0x4b2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003546:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003548:	02000713          	li	a4,32
1c00354c:	002047b7          	lui	a5,0x204
1c003550:	ca89                	beqz	a3,1c003562 <S17_Conv2d_8x8x3x3+0x428>
1c003552:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003556:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00355a:	00e7a223          	sw	a4,4(a5)
1c00355e:	46ce                	lw	a3,208(sp)
1c003560:	faed                	bnez	a3,1c003552 <S17_Conv2d_8x8x3x3+0x418>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003562:	13c12083          	lw	ra,316(sp)
1c003566:	13812403          	lw	s0,312(sp)
1c00356a:	13412483          	lw	s1,308(sp)
1c00356e:	13012903          	lw	s2,304(sp)
1c003572:	12c12983          	lw	s3,300(sp)
1c003576:	12812a03          	lw	s4,296(sp)
1c00357a:	12412a83          	lw	s5,292(sp)
1c00357e:	12012b03          	lw	s6,288(sp)
1c003582:	11c12b83          	lw	s7,284(sp)
1c003586:	11812c03          	lw	s8,280(sp)
1c00358a:	11412c83          	lw	s9,276(sp)
1c00358e:	11012d03          	lw	s10,272(sp)
1c003592:	10c12d83          	lw	s11,268(sp)
1c003596:	6131                	addi	sp,sp,320
1c003598:	8082                	ret
  if (copy->length == 0)
1c00359a:	47ae                	lw	a5,200(sp)
1c00359c:	14079863          	bnez	a5,1c0036ec <S17_Conv2d_8x8x3x3+0x5b2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035a0:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0035a4:	404da783          	lw	a5,1028(s11)
1c0035a8:	576a                	lw	a4,184(sp)
1c0035aa:	40e7d7b3          	sra	a5,a5,a4
1c0035ae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035b2:	c78d                	beqz	a5,1c0035dc <S17_Conv2d_8x8x3x3+0x4a2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0035b4:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c0035b8:	30069073          	csrw	mstatus,a3
1c0035bc:	00cda423          	sw	a2,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0035c0:	03cde783          	p.elw	a5,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0035c4:	00cda223          	sw	a2,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035c8:	300476f3          	csrrci	a3,mstatus,8
1c0035cc:	404da783          	lw	a5,1028(s11)
1c0035d0:	576a                	lw	a4,184(sp)
1c0035d2:	40e7d7b3          	sra	a5,a5,a4
1c0035d6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035da:	fff9                	bnez	a5,1c0035b8 <S17_Conv2d_8x8x3x3+0x47e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0035dc:	4785                	li	a5,1
1c0035de:	00e79733          	sll	a4,a5,a4
1c0035e2:	40eda223          	sw	a4,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0035e6:	30069073          	csrw	mstatus,a3
1c0035ea:	bd1d                	j	1c003420 <S17_Conv2d_8x8x3x3+0x2e6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0035ec:	30047673          	csrrci	a2,mstatus,8
1c0035f0:	404da783          	lw	a5,1028(s11)
1c0035f4:	56ea                	lw	a3,184(sp)
1c0035f6:	40d7d7b3          	sra	a5,a5,a3
1c0035fa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0035fe:	c79d                	beqz	a5,1c00362c <S17_Conv2d_8x8x3x3+0x4f2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003600:	10000593          	li	a1,256
1c003604:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003608:	30061073          	csrw	mstatus,a2
1c00360c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003610:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003614:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003618:	30047673          	csrrci	a2,mstatus,8
1c00361c:	40472783          	lw	a5,1028(a4)
1c003620:	56ea                	lw	a3,184(sp)
1c003622:	40d7d7b3          	sra	a5,a5,a3
1c003626:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00362a:	fff9                	bnez	a5,1c003608 <S17_Conv2d_8x8x3x3+0x4ce>
1c00362c:	4785                	li	a5,1
1c00362e:	00d796b3          	sll	a3,a5,a3
1c003632:	002047b7          	lui	a5,0x204
1c003636:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00363a:	30061073          	csrw	mstatus,a2
1c00363e:	b715                	j	1c003562 <S17_Conv2d_8x8x3x3+0x428>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003640:	30047673          	csrrci	a2,mstatus,8
1c003644:	002047b7          	lui	a5,0x204
1c003648:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00364c:	46ea                	lw	a3,152(sp)
1c00364e:	40d7d7b3          	sra	a5,a5,a3
1c003652:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003656:	c79d                	beqz	a5,1c003684 <S17_Conv2d_8x8x3x3+0x54a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003658:	10000593          	li	a1,256
1c00365c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003660:	30061073          	csrw	mstatus,a2
1c003664:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003668:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00366c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003670:	30047673          	csrrci	a2,mstatus,8
1c003674:	40472783          	lw	a5,1028(a4)
1c003678:	46ea                	lw	a3,152(sp)
1c00367a:	40d7d7b3          	sra	a5,a5,a3
1c00367e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003682:	fff9                	bnez	a5,1c003660 <S17_Conv2d_8x8x3x3+0x526>
1c003684:	4785                	li	a5,1
1c003686:	00d796b3          	sll	a3,a5,a3
1c00368a:	002047b7          	lui	a5,0x204
1c00368e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003692:	30061073          	csrw	mstatus,a2
1c003696:	bef5                	j	1c003292 <S17_Conv2d_8x8x3x3+0x158>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003698:	30047673          	csrrci	a2,mstatus,8
1c00369c:	4044a783          	lw	a5,1028(s1)
1c0036a0:	56e6                	lw	a3,120(sp)
1c0036a2:	40d7d7b3          	sra	a5,a5,a3
1c0036a6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0036aa:	c79d                	beqz	a5,1c0036d8 <S17_Conv2d_8x8x3x3+0x59e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0036ac:	10000593          	li	a1,256
1c0036b0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0036b4:	30061073          	csrw	mstatus,a2
1c0036b8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0036bc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0036c0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0036c4:	30047673          	csrrci	a2,mstatus,8
1c0036c8:	40472783          	lw	a5,1028(a4)
1c0036cc:	56e6                	lw	a3,120(sp)
1c0036ce:	40d7d7b3          	sra	a5,a5,a3
1c0036d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0036d6:	fff9                	bnez	a5,1c0036b4 <S17_Conv2d_8x8x3x3+0x57a>
1c0036d8:	4785                	li	a5,1
1c0036da:	00d796b3          	sll	a3,a5,a3
1c0036de:	002047b7          	lui	a5,0x204
1c0036e2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0036e6:	30061073          	csrw	mstatus,a2
1c0036ea:	be85                	j	1c00325a <S17_Conv2d_8x8x3x3+0x120>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0036ec:	474e                	lw	a4,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0036ee:	02000793          	li	a5,32
1c0036f2:	d20707e3          	beqz	a4,1c003420 <S17_Conv2d_8x8x3x3+0x2e6>
1c0036f6:	00fda423          	sw	a5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0036fa:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0036fe:	00fda223          	sw	a5,4(s11)
1c003702:	474e                	lw	a4,208(sp)
1c003704:	fb6d                	bnez	a4,1c0036f6 <S17_Conv2d_8x8x3x3+0x5bc>
1c003706:	bb29                	j	1c003420 <S17_Conv2d_8x8x3x3+0x2e6>
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1092:(1170-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c003708:	44400593          	li	a1,1092
1c00370c:	888e0e13          	addi	t3,t3,-1912
1c003710:	c82e                	sw	a1,16(sp)
1c003712:	b935                	j	1c00334e <S17_Conv2d_8x8x3x3+0x214>
1c003714:	6e05                	lui	t3,0x1
1c003716:	44400793          	li	a5,1092
1c00371a:	888e0e13          	addi	t3,t3,-1912 # 888 <__rt_stack_size+0x88>
1c00371e:	c83e                	sw	a5,16(sp)
1c003720:	b13d                	j	1c00334e <S17_Conv2d_8x8x3x3+0x214>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c003722:	4689                	li	a3,2
1c003724:	b98d                	j	1c003396 <S17_Conv2d_8x8x3x3+0x25c>
					_N_In = _N_In + (1014-(78*(T0Ind==0)))+(-18252); _LN_In = ((T0Ind_NextLast)?1092:1170); _SN_In = (6*_LN_In); 
1c003726:	45a2                	lw	a1,8(sp)
1c003728:	76f1                	lui	a3,0xffffc
1c00372a:	c5c68693          	addi	a3,a3,-932 # ffffbc5c <pulp__FC+0xffffbc5d>
1c00372e:	1c017737          	lui	a4,0x1c017
1c003732:	95b6                	add	a1,a1,a3
1c003734:	21c70713          	addi	a4,a4,540 # 1c01721c <__clz_tab+0x604>
1c003738:	49200793          	li	a5,1170
1c00373c:	c42e                	sw	a1,8(sp)
1c00373e:	00072e03          	lw	t3,0(a4)
1c003742:	c83e                	sw	a5,16(sp)
1c003744:	b129                	j	1c00334e <S17_Conv2d_8x8x3x3+0x214>
				_SN_In = 0;
1c003746:	4e01                	li	t3,0
1c003748:	b119                	j	1c00334e <S17_Conv2d_8x8x3x3+0x214>

1c00374a <S18_MatAdd_8x39x39>:
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 24336, 24336]][Tile0, 3:[39x13, 1:39x13, 39x13], 2]
		Tile0: [0, 8112, 1014], Tile1: [1014, 8112, 1014], Tile2; [2028, 8112, 1014]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->W = (unsigned short int) (39);
1c00374a:	1c0177b7          	lui	a5,0x1c017
1c00374e:	2107a783          	lw	a5,528(a5) # 1c017210 <__clz_tab+0x5f8>
{
1c003752:	7155                	addi	sp,sp,-208
1c003754:	d16a                	sw	s10,160(sp)
	KerArg0->H = (unsigned short int) (13);
	KerArg0->N = (unsigned short int) (8);
	KerArg0->LB = (int) (-32768);
	KerArg0->UB = (int) (32767);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 8112, 3042, 1014, 0, &DmaR_Evt1);
1c003756:	10000d37          	lui	s10,0x10000
1c00375a:	01cd0d13          	addi	s10,s10,28 # 1000001c <resnet_L1_Memory>
	KerArg0->W = (unsigned short int) (39);
1c00375e:	debe                	sw	a5,124(sp)
	KerArg0->N = (unsigned short int) (8);
1c003760:	47a1                	li	a5,8
1c003762:	08f11023          	sh	a5,128(sp)
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 8112, 3042, 1014, 0, &DmaR_Evt1);
1c003766:	000d2803          	lw	a6,0(s10)
	KerArg0->LB = (int) (-32768);
1c00376a:	77e1                	lui	a5,0xffff8
1c00376c:	c33e                	sw	a5,132(sp)
	KerArg0->UB = (int) (32767);
1c00376e:	67a1                	lui	a5,0x8
1c003770:	17fd                	addi	a5,a5,-1
{
1c003772:	c786                	sw	ra,204(sp)
1c003774:	c5a2                	sw	s0,200(sp)
1c003776:	c3a6                	sw	s1,196(sp)
1c003778:	c1ca                	sw	s2,192(sp)
1c00377a:	df4e                	sw	s3,188(sp)
1c00377c:	dd52                	sw	s4,184(sp)
1c00377e:	db56                	sw	s5,180(sp)
1c003780:	d95a                	sw	s6,176(sp)
1c003782:	d75e                	sw	s7,172(sp)
1c003784:	d562                	sw	s8,168(sp)
1c003786:	d366                	sw	s9,164(sp)
1c003788:	cf6e                	sw	s11,156(sp)
1c00378a:	c42a                	sw	a0,8(sp)
1c00378c:	c62e                	sw	a1,12(sp)
1c00378e:	c232                	sw	a2,4(sp)
	KerArg0->UB = (int) (32767);
1c003790:	c53e                	sw	a5,136(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003792:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003796:	002047b7          	lui	a5,0x204
1c00379a:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00379e:	6b89                	lui	s7,0x2
1c0037a0:	fb0b8b93          	addi	s7,s7,-80 # 1fb0 <__rt_stack_size+0x17b0>
1c0037a4:	00070737          	lui	a4,0x70
1c0037a8:	de0ba733          	p.insert	a4,s7,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0037ac:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0037b0:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0037b4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0037b8:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0037bc:	45a2                	lw	a1,8(sp)
1c0037be:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0037c2:	0be204b7          	lui	s1,0xbe20
1c0037c6:	3f648493          	addi	s1,s1,1014 # be203f6 <__L2+0xbda03f6>
1c0037ca:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c0037ce:	c832                	sw	a2,16(sp)
        copy->length = 0;
1c0037d0:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c0037d2:	30069073          	csrw	mstatus,a3
	_N_In1=0;
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+0), 8112, 3042, 1014, 0, &DmaR_Evt2);
1c0037d6:	000d2683          	lw	a3,0(s10)
1c0037da:	6911                	lui	s2,0x4
1c0037dc:	f6090913          	addi	s2,s2,-160 # 3f60 <__rt_stack_size+0x3760>
1c0037e0:	96ca                	add	a3,a3,s2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0037e2:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0037e6:	4007a583          	lw	a1,1024(a5)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0037ea:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0037ee:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0037f2:	46b2                	lw	a3,12(sp)
1c0037f4:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0037f8:	4097a023          	sw	s1,1024(a5)
        if (!merge) copy->id = id;
1c0037fc:	d82e                	sw	a1,48(sp)
        copy->length = 0;
1c0037fe:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c003800:	30061073          	csrw	mstatus,a2
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003804:	00204437          	lui	s0,0x204
	_N_In2=0;
	_C_Out=0; _SC_Out=8112; _LC_Out=1014;
	_SP_Out=0;
1c003808:	4a01                	li	s4,0
	_N_In1=0;
1c00380a:	4c01                	li	s8,0
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1, D0Ind_NextLast = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c00380c:	4701                	li	a4,0
1c00380e:	07010b13          	addi	s6,sp,112
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
			/*================================= Prepare Tiles ===================================*/
			_SN_In1 = 0;
			if (!(T0Ind_Last)) {
				_N_In1 = _N_In1 + (1014); _LN_In1 = (1014); _SN_In1 = (8*_LN_In1); 
1c003812:	8ade                	mv	s5,s7
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003814:	20040d93          	addi	s11,s0,512 # 204200 <__L2+0x184200>
			if (!(T0Ind_Last)) {
1c003818:	32272363          	p.beqimm	a4,2,1c003b3e <S18_MatAdd_8x39x39+0x3f4>
				_N_In1 = _N_In1 + (1014); _LN_In1 = (1014); _SN_In1 = (8*_LN_In1); 
1c00381c:	3f6c0813          	addi	a6,s8,1014
1c003820:	8cd6                	mv	s9,s5
  if (copy->length == 0)
1c003822:	5782                	lw	a5,32(sp)
1c003824:	18078363          	beqz	a5,1c0039aa <S18_MatAdd_8x39x39+0x260>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003828:	5522                	lw	a0,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00382a:	02000793          	li	a5,32
1c00382e:	c909                	beqz	a0,1c003840 <S18_MatAdd_8x39x39+0xf6>
1c003830:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003834:	03c46503          	p.elw	a0,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003838:	00f42223          	sw	a5,4(s0)
1c00383c:	5522                	lw	a0,40(sp)
1c00383e:	f96d                	bnez	a0,1c003830 <S18_MatAdd_8x39x39+0xe6>
1c003840:	00170993          	addi	s3,a4,1 # 70001 <__L1Cl+0x60001>
				_N_In2 = _N_In2 + (1014); _LN_In2 = (1014); _SN_In2 = (8*_LN_In2); 
			}
			/*============================= End Prepare Tiles ===================================*/
			/*================================= Read Tiles ======================================*/
			AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
			if (_SN_In1) {
1c003844:	1a0c9c63          	bnez	s9,1c0039fc <S18_MatAdd_8x39x39+0x2b2>
  if (copy->length == 0)
1c003848:	4786                	lw	a5,64(sp)
1c00384a:	c3e9                	beqz	a5,1c00390c <S18_MatAdd_8x39x39+0x1c2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00384c:	4526                	lw	a0,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00384e:	02000793          	li	a5,32
1c003852:	c909                	beqz	a0,1c003864 <S18_MatAdd_8x39x39+0x11a>
1c003854:	00f42423          	sw	a5,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003858:	03c46503          	p.elw	a0,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00385c:	00f42223          	sw	a5,4(s0)
1c003860:	4526                	lw	a0,72(sp)
1c003862:	f96d                	bnez	a0,1c003854 <S18_MatAdd_8x39x39+0x10a>
1c003864:	000d2503          	lw	a0,0(s10)
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+_N_In1), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+8112*((T0Ind_Total+1)%2)),
						_SN_In1, 3042, _LN_In1, 0, &DmaR_Evt1);
			}
			AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read In2 */
			if (_SN_In2) {
1c003868:	0e0c9b63          	bnez	s9,1c00395e <S18_MatAdd_8x39x39+0x214>
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+_N_In2), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+8112*((T0Ind_Total+1)%2)),
						_SN_In2, 3042, _LN_In2, 0, &DmaR_Evt2);
			}
			/*============================= End Read Tiles ======================================*/
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c00386c:	fc173733          	p.bclr	a4,a4,30,1
1c003870:	03570733          	mul	a4,a4,s5
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c003874:	6791                	lui	a5,0x4
1c003876:	f6078793          	addi	a5,a5,-160 # 3f60 <__rt_stack_size+0x3760>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00387a:	0ff00313          	li	t1,255
1c00387e:	00f70e33          	add	t3,a4,a5
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c003882:	67a1                	lui	a5,0x8
1c003884:	ec078793          	addi	a5,a5,-320 # 7ec0 <__rt_stack_size+0x76c0>
1c003888:	00f70933          	add	s2,a4,a5
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c00388c:	9e2a                	add	t3,t3,a0
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c00388e:	972a                	add	a4,a4,a0
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c003890:	954a                	add	a0,a0,s2
			KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0+8112*((T0Ind_Total)%2));
1c003892:	d8ba                	sw	a4,112(sp)
			KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+16224+8112*((T0Ind_Total)%2));
1c003894:	daf2                	sw	t3,116(sp)
			KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+32448+8112*((T0Ind_Total)%2));
1c003896:	dcaa                	sw	a0,120(sp)
1c003898:	08642223          	sw	t1,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00389c:	006da023          	sw	t1,0(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0038a0:	006da623          	sw	t1,12(s11)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0038a4:	1c0105b7          	lui	a1,0x1c010
1c0038a8:	d0058593          	addi	a1,a1,-768 # 1c00fd00 <KerParMatAdd_fp>
1c0038ac:	08b42023          	sw	a1,128(s0)
1c0038b0:	09642023          	sw	s6,128(s0)
1c0038b4:	855a                	mv	a0,s6
1c0038b6:	c042                	sw	a6,0(sp)
1c0038b8:	4480c0ef          	jal	ra,1c00fd00 <KerParMatAdd_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0038bc:	01cde703          	p.elw	a4,28(s11)
			AT_FORK(gap_ncore(), (void *) KerParMatAdd_fp, (void *) KerArg0);
			__CALL(KerParMatAdd_fp, KerArg0);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0038c0:	4802                	lw	a6,0(sp)
1c0038c2:	1a0a1e63          	bnez	s4,1c003a7e <S18_MatAdd_8x39x39+0x334>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+32448+8112*((T0Ind_Total)%2)),
1c0038c6:	000d2703          	lw	a4,0(s10)
1c0038ca:	012707b3          	add	a5,a4,s2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0038ce:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0038d2:	40042503          	lw	a0,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0038d6:	100bd733          	p.exthz	a4,s7
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0038da:	c5174733          	p.bset	a4,a4,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0038de:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0038e2:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0038e6:	40f42023          	sw	a5,1024(s0)
1c0038ea:	4692                	lw	a3,4(sp)
1c0038ec:	9c36                	add	s8,s8,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0038ee:	41842023          	sw	s8,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0038f2:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c0038f6:	c8aa                	sw	a0,80(sp)
        copy->length = 0;
1c0038f8:	d082                	sw	zero,96(sp)
  __builtin_pulp_spr_write(reg, val);
1c0038fa:	30059073          	csrw	mstatus,a1
1c0038fe:	8a5e                	mv	s4,s7
1c003900:	874e                	mv	a4,s3
1c003902:	8be6                	mv	s7,s9
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003904:	1239ae63          	p.beqimm	s3,3,1c003a40 <S18_MatAdd_8x39x39+0x2f6>
1c003908:	8c42                	mv	s8,a6
1c00390a:	b739                	j	1c003818 <S18_MatAdd_8x39x39+0xce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00390c:	30047373          	csrrci	t1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003910:	40442783          	lw	a5,1028(s0)
1c003914:	5542                	lw	a0,48(sp)
1c003916:	40a7d7b3          	sra	a5,a5,a0
1c00391a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00391e:	c78d                	beqz	a5,1c003948 <S18_MatAdd_8x39x39+0x1fe>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003920:	10000e13          	li	t3,256
  __builtin_pulp_spr_write(reg, val);
1c003924:	30031073          	csrw	mstatus,t1
1c003928:	01c42423          	sw	t3,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00392c:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003930:	01c42223          	sw	t3,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003934:	30047373          	csrrci	t1,mstatus,8
1c003938:	40442783          	lw	a5,1028(s0)
1c00393c:	5542                	lw	a0,48(sp)
1c00393e:	40a7d7b3          	sra	a5,a5,a0
1c003942:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003946:	fff9                	bnez	a5,1c003924 <S18_MatAdd_8x39x39+0x1da>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003948:	4785                	li	a5,1
1c00394a:	00a79533          	sll	a0,a5,a0
1c00394e:	40a42223          	sw	a0,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c003952:	30031073          	csrw	mstatus,t1
1c003956:	000d2503          	lw	a0,0(s10)
			if (_SN_In2) {
1c00395a:	f00c89e3          	beqz	s9,1c00386c <S18_MatAdd_8x39x39+0x122>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00395e:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003962:	40042e03          	lw	t3,1024(s0)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c003966:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00396a:	de0ca7b3          	p.insert	a5,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00396e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003972:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003976:	40f42023          	sw	a5,1024(s0)
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In2+_N_In2), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16224+8112*((T0Ind_Total+1)%2)),
1c00397a:	6591                	lui	a1,0x4
1c00397c:	fc19b7b3          	p.bclr	a5,s3,30,1
1c003980:	f6058593          	addi	a1,a1,-160 # 3f60 <__rt_stack_size+0x3760>
1c003984:	435785b3          	p.mac	a1,a5,s5
1c003988:	952e                	add	a0,a0,a1
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00398a:	40a42023          	sw	a0,1024(s0)
1c00398e:	46b2                	lw	a3,12(sp)
1c003990:	010687b3          	add	a5,a3,a6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003994:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003998:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c00399c:	d872                	sw	t3,48(sp)
        copy->length = 0;
1c00399e:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c0039a0:	30031073          	csrw	mstatus,t1
1c0039a4:	000d2503          	lw	a0,0(s10)
1c0039a8:	b5d1                	j	1c00386c <S18_MatAdd_8x39x39+0x122>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039aa:	300478f3          	csrrci	a7,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0039ae:	40442783          	lw	a5,1028(s0)
1c0039b2:	4542                	lw	a0,16(sp)
1c0039b4:	40a7d7b3          	sra	a5,a5,a0
1c0039b8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039bc:	c78d                	beqz	a5,1c0039e6 <S18_MatAdd_8x39x39+0x29c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0039be:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c0039c2:	30089073          	csrw	mstatus,a7
1c0039c6:	00642423          	sw	t1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0039ca:	03c46783          	p.elw	a5,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0039ce:	00642223          	sw	t1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0039d2:	300478f3          	csrrci	a7,mstatus,8
1c0039d6:	40442783          	lw	a5,1028(s0)
1c0039da:	4542                	lw	a0,16(sp)
1c0039dc:	40a7d7b3          	sra	a5,a5,a0
1c0039e0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0039e4:	fff9                	bnez	a5,1c0039c2 <S18_MatAdd_8x39x39+0x278>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0039e6:	4785                	li	a5,1
1c0039e8:	00a79533          	sll	a0,a5,a0
1c0039ec:	40a42223          	sw	a0,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c0039f0:	30089073          	csrw	mstatus,a7
1c0039f4:	00170993          	addi	s3,a4,1
			if (_SN_In1) {
1c0039f8:	e40c88e3          	beqz	s9,1c003848 <S18_MatAdd_8x39x39+0xfe>
				AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In1+_N_In1), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+8112*((T0Ind_Total+1)%2)),
1c0039fc:	000d2503          	lw	a0,0(s10)
1c003a00:	fc19b7b3          	p.bclr	a5,s3,30,1
1c003a04:	43578533          	p.mac	a0,a5,s5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a08:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003a0c:	40042e03          	lw	t3,1024(s0)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c003a10:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003a14:	de0ca7b3          	p.insert	a5,s9,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003a18:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003a1c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003a20:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003a24:	40a42023          	sw	a0,1024(s0)
1c003a28:	46a2                	lw	a3,8(sp)
1c003a2a:	010687b3          	add	a5,a3,a6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003a2e:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003a32:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c003a36:	c872                	sw	t3,16(sp)
        copy->length = 0;
1c003a38:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c003a3a:	30031073          	csrw	mstatus,t1
1c003a3e:	b529                	j	1c003848 <S18_MatAdd_8x39x39+0xfe>
  if (copy->length == 0)
1c003a40:	5786                	lw	a5,96(sp)
1c003a42:	c7d1                	beqz	a5,1c003ace <S18_MatAdd_8x39x39+0x384>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003a44:	56a6                	lw	a3,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a46:	02000713          	li	a4,32
1c003a4a:	002047b7          	lui	a5,0x204
1c003a4e:	ca89                	beqz	a3,1c003a60 <S18_MatAdd_8x39x39+0x316>
1c003a50:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003a54:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003a58:	00e7a223          	sw	a4,4(a5)
1c003a5c:	56a6                	lw	a3,104(sp)
1c003a5e:	faed                	bnez	a3,1c003a50 <S18_MatAdd_8x39x39+0x306>
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003a60:	40be                	lw	ra,204(sp)
1c003a62:	442e                	lw	s0,200(sp)
1c003a64:	449e                	lw	s1,196(sp)
1c003a66:	490e                	lw	s2,192(sp)
1c003a68:	59fa                	lw	s3,188(sp)
1c003a6a:	5a6a                	lw	s4,184(sp)
1c003a6c:	5ada                	lw	s5,180(sp)
1c003a6e:	5b4a                	lw	s6,176(sp)
1c003a70:	5bba                	lw	s7,172(sp)
1c003a72:	5c2a                	lw	s8,168(sp)
1c003a74:	5c9a                	lw	s9,164(sp)
1c003a76:	5d0a                	lw	s10,160(sp)
1c003a78:	4dfa                	lw	s11,156(sp)
1c003a7a:	6169                	addi	sp,sp,208
1c003a7c:	8082                	ret
  if (copy->length == 0)
1c003a7e:	5706                	lw	a4,96(sp)
1c003a80:	e34d                	bnez	a4,1c003b22 <S18_MatAdd_8x39x39+0x3d8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003a82:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003a86:	40442703          	lw	a4,1028(s0)
1c003a8a:	45c6                	lw	a1,80(sp)
1c003a8c:	40b75733          	sra	a4,a4,a1
1c003a90:	fc173733          	p.bclr	a4,a4,30,1
1c003a94:	c70d                	beqz	a4,1c003abe <S18_MatAdd_8x39x39+0x374>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003a96:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c003a9a:	30051073          	csrw	mstatus,a0
1c003a9e:	00642423          	sw	t1,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003aa2:	03c46703          	p.elw	a4,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003aa6:	00642223          	sw	t1,4(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003aaa:	30047573          	csrrci	a0,mstatus,8
1c003aae:	40442703          	lw	a4,1028(s0)
1c003ab2:	45c6                	lw	a1,80(sp)
1c003ab4:	40b75733          	sra	a4,a4,a1
1c003ab8:	fc173733          	p.bclr	a4,a4,30,1
1c003abc:	ff79                	bnez	a4,1c003a9a <S18_MatAdd_8x39x39+0x350>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003abe:	4705                	li	a4,1
1c003ac0:	00b715b3          	sll	a1,a4,a1
1c003ac4:	40b42223          	sw	a1,1028(s0)
  __builtin_pulp_spr_write(reg, val);
1c003ac8:	30051073          	csrw	mstatus,a0
1c003acc:	bbed                	j	1c0038c6 <S18_MatAdd_8x39x39+0x17c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003ace:	30047673          	csrrci	a2,mstatus,8
1c003ad2:	40442783          	lw	a5,1028(s0)
1c003ad6:	46c6                	lw	a3,80(sp)
1c003ad8:	40d7d7b3          	sra	a5,a5,a3
1c003adc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ae0:	c79d                	beqz	a5,1c003b0e <S18_MatAdd_8x39x39+0x3c4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003ae2:	10000593          	li	a1,256
1c003ae6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003aea:	30061073          	csrw	mstatus,a2
1c003aee:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003af2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003af6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003afa:	30047673          	csrrci	a2,mstatus,8
1c003afe:	40472783          	lw	a5,1028(a4)
1c003b02:	46c6                	lw	a3,80(sp)
1c003b04:	40d7d7b3          	sra	a5,a5,a3
1c003b08:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003b0c:	fff9                	bnez	a5,1c003aea <S18_MatAdd_8x39x39+0x3a0>
1c003b0e:	4785                	li	a5,1
1c003b10:	00d796b3          	sll	a3,a5,a3
1c003b14:	002047b7          	lui	a5,0x204
1c003b18:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c003b1c:	30061073          	csrw	mstatus,a2
1c003b20:	b781                	j	1c003a60 <S18_MatAdd_8x39x39+0x316>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003b22:	55a6                	lw	a1,104(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003b24:	02000713          	li	a4,32
1c003b28:	d8058fe3          	beqz	a1,1c0038c6 <S18_MatAdd_8x39x39+0x17c>
1c003b2c:	00e42423          	sw	a4,8(s0)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003b30:	03c46583          	p.elw	a1,60(s0)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003b34:	00e42223          	sw	a4,4(s0)
1c003b38:	55a6                	lw	a1,104(sp)
1c003b3a:	f9ed                	bnez	a1,1c003b2c <S18_MatAdd_8x39x39+0x3e2>
1c003b3c:	b369                	j	1c0038c6 <S18_MatAdd_8x39x39+0x17c>
1c003b3e:	8862                	mv	a6,s8
			_SN_In1 = 0;
1c003b40:	4c81                	li	s9,0
1c003b42:	b1c5                	j	1c003822 <S18_MatAdd_8x39x39+0xd8>

1c003b44 <S21_Conv2d_16x8x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c003b44:	7129                	addi	sp,sp,-320
1c003b46:	12812c23          	sw	s0,312(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 25600, 25600]][Tile0, 2:[20x10, 20x10], 4]
		Tile0: [0, 12800, 800], Tile1: [0, 12800, 800], Tile2; [0, 12800, 800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003b4a:	10000437          	lui	s0,0x10000
1c003b4e:	01c40413          	addi	s0,s0,28 # 1000001c <resnet_L1_Memory>
1c003b52:	4018                	lw	a4,0(s0)
	KerArg0->W = (unsigned short int) (20);
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+19656);
1c003b54:	6315                	lui	t1,0x5
	KerArg0->W = (unsigned short int) (20);
1c003b56:	1c0177b7          	lui	a5,0x1c017
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003b5a:	6821                	lui	a6,0x8
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+19656);
1c003b5c:	cc830893          	addi	a7,t1,-824 # 4cc8 <__rt_stack_size+0x44c8>
	KerArg0->W = (unsigned short int) (20);
1c003b60:	1cc7ae83          	lw	t4,460(a5) # 1c0171cc <__clz_tab+0x5b4>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+19656);
1c003b64:	98ba                	add	a7,a7,a4
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003b66:	7e880793          	addi	a5,a6,2024 # 87e8 <__rt_stack_size+0x7fe8>
	KerArg0->NormBias = (signed char) (11);
	KerArg1->W = (unsigned short int) (39);
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+19688);
1c003b6a:	ce830313          	addi	t1,t1,-792
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003b6e:	97ba                	add	a5,a5,a4
{
1c003b70:	12912a23          	sw	s1,308(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+19688);
1c003b74:	971a                	add	a4,a4,t1
	KerArg1->W = (unsigned short int) (39);
1c003b76:	1c017f37          	lui	t5,0x1c017
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+19656);
1c003b7a:	dc46                	sw	a7,56(sp)
{
1c003b7c:	84ae                	mv	s1,a1
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c003b7e:	85c6                	mv	a1,a7
	KerArg0->NormBias = (signed char) (11);
1c003b80:	48ad                	li	a7,11
1c003b82:	03110b23          	sb	a7,54(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+19688);
1c003b86:	d7ba                	sw	a4,236(sp)
	KerArg1->W = (unsigned short int) (39);
1c003b88:	214f2883          	lw	a7,532(t5) # 1c017214 <__clz_tab+0x5fc>
	KerArg1->OutFeatures = (unsigned short int) (16);
1c003b8c:	00080737          	lui	a4,0x80
1c003b90:	0741                	addi	a4,a4,16
{
1c003b92:	8fb2                	mv	t6,a2
	KerArg0->OutFeatures = (unsigned short int) (16);
1c003b94:	4e41                	li	t3,16
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+34792);
	KerArg1->Norm = (unsigned char) (14);
1c003b96:	4339                	li	t1,14
	KerArg1->OutFeatures = (unsigned short int) (16);
1c003b98:	0ee12323          	sw	a4,230(sp)
	KerArg1->TotalInFeatures = (short int) (8);
	KerArg1->Orientation = (unsigned char) (1);
1c003b9c:	4705                	li	a4,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003b9e:	d63e                	sw	a5,44(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+34792);
1c003ba0:	d9be                	sw	a5,240(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+34792);
1c003ba2:	de3e                	sw	a5,60(sp)
{
1c003ba4:	12112e23          	sw	ra,316(sp)
1c003ba8:	13512223          	sw	s5,292(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c003bac:	187d                	addi	a6,a6,-1
{
1c003bae:	cc2a                	sw	a0,24(sp)
	KerArg0->W = (unsigned short int) (20);
1c003bb0:	d876                	sw	t4,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c003bb2:	03c11a23          	sh	t3,52(sp)
	KerArg1->W = (unsigned short int) (39);
1c003bb6:	cfc6                	sw	a7,220(sp)
	KerArg1->Norm = (unsigned char) (14);
1c003bb8:	0e610c23          	sb	t1,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c003bbc:	0ee10da3          	sb	a4,251(sp)
	KerArg2->W = (unsigned short int) (20);
1c003bc0:	c0f6                	sw	t4,64(sp)
	KerArg2->Norm = (unsigned char) (14);
1c003bc2:	04610423          	sb	t1,72(sp)
	KerArg2->InFeatures = (unsigned short int) (16);
1c003bc6:	05c11523          	sh	t3,74(sp)
{
1c003bca:	13212823          	sw	s2,304(sp)
1c003bce:	13312623          	sw	s3,300(sp)
1c003bd2:	13412423          	sw	s4,296(sp)
1c003bd6:	13612023          	sw	s6,288(sp)
1c003bda:	11712e23          	sw	s7,284(sp)
1c003bde:	11812c23          	sw	s8,280(sp)
1c003be2:	11912a23          	sw	s9,276(sp)
1c003be6:	11a12823          	sw	s10,272(sp)
1c003bea:	11b12623          	sw	s11,268(sp)
1c003bee:	8ab6                	mv	s5,a3
1c003bf0:	02000613          	li	a2,32
1c003bf4:	08b4                	addi	a3,sp,88
1c003bf6:	857e                	mv	a0,t6
	KerArg2->LB = (int) (0);
1c003bf8:	c682                	sw	zero,76(sp)
	KerArg2->UB = (int) (32767);
1c003bfa:	c8c2                	sw	a6,80(sp)
1c003bfc:	893fd0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c003c00:	57a6                	lw	a5,104(sp)
1c003c02:	46078163          	beqz	a5,1c004064 <S21_Conv2d_16x8x3x3_Relu+0x520>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c06:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c08:	02000713          	li	a4,32
1c003c0c:	002047b7          	lui	a5,0x204
1c003c10:	ca89                	beqz	a3,1c003c22 <S21_Conv2d_16x8x3x3_Relu+0xde>
1c003c12:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c16:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c1a:	00e7a223          	sw	a4,4(a5)
1c003c1e:	56c6                	lw	a3,112(sp)
1c003c20:	faed                	bnez	a3,1c003c12 <S21_Conv2d_16x8x3x3_Relu+0xce>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=6400; _LC_Out=400;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+19656), 32, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+19688), 2304, 0, &DmaR_Evt2);
1c003c22:	400c                	lw	a1,0(s0)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c003c24:	6795                	lui	a5,0x5
1c003c26:	ce878793          	addi	a5,a5,-792 # 4ce8 <__rt_stack_size+0x44e8>
1c003c2a:	6605                	lui	a2,0x1
1c003c2c:	95be                	add	a1,a1,a5
1c003c2e:	18b4                	addi	a3,sp,120
1c003c30:	90060613          	addi	a2,a2,-1792 # 900 <__rt_stack_size+0x100>
1c003c34:	8526                	mv	a0,s1
1c003c36:	859fd0ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c003c3a:	47aa                	lw	a5,136(sp)
1c003c3c:	3c078863          	beqz	a5,1c00400c <S21_Conv2d_16x8x3x3_Relu+0x4c8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003c40:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003c42:	02000713          	li	a4,32
1c003c46:	002047b7          	lui	a5,0x204
1c003c4a:	ca89                	beqz	a3,1c003c5c <S21_Conv2d_16x8x3x3_Relu+0x118>
1c003c4c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003c50:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003c54:	00e7a223          	sw	a4,4(a5)
1c003c58:	46ca                	lw	a3,144(sp)
1c003c5a:	faed                	bnez	a3,1c003c4c <S21_Conv2d_16x8x3x3_Relu+0x108>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 9360, 3042, 1560, 0, &DmaR_Evt3);
1c003c5c:	400c                	lw	a1,0(s0)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003c5e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003c62:	00204737          	lui	a4,0x204
1c003c66:	40072603          	lw	a2,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c6a:	000727b7          	lui	a5,0x72
1c003c6e:	49078793          	addi	a5,a5,1168 # 72490 <__L1Cl+0x62490>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003c72:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003c76:	c157c7b3          	p.bset	a5,a5,0,21
1c003c7a:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003c7e:	40b72023          	sw	a1,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003c82:	47e2                	lw	a5,24(sp)
1c003c84:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003c88:	0be207b7          	lui	a5,0xbe20
1c003c8c:	61878793          	addi	a5,a5,1560 # be20618 <__L2+0xbda0618>
1c003c90:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c003c94:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c003c96:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c003c98:	30069073          	csrw	mstatus,a3
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c003c9c:	6589                	lui	a1,0x2
1c003c9e:	00060737          	lui	a4,0x60
1c003ca2:	90058593          	addi	a1,a1,-1792 # 1900 <__rt_stack_size+0x1100>
1c003ca6:	de05a733          	p.insert	a4,a1,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c003caa:	c1374733          	p.bset	a4,a4,0,19
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003cae:	00204cb7          	lui	s9,0x204
1c003cb2:	6915                	lui	s2,0x5
1c003cb4:	4655                	li	a2,21
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003cb6:	c1574733          	p.bset	a4,a4,0,21
1c003cba:	c456                	sw	s5,8(sp)
1c003cbc:	5e890913          	addi	s2,s2,1512 # 55e8 <__rt_stack_size+0x4de8>
1c003cc0:	c232                	sw	a2,4(sp)
	_N_In=0;
1c003cc2:	c602                	sw	zero,12(sp)
	_SP_Out=0;
1c003cc4:	ca02                	sw	zero,20(sp)
	/*============================= End Read Tiles Prolog ===============================*/
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<2; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
1c003cc6:	4481                	li	s1,0
1c003cc8:	02c10d93          	addi	s11,sp,44
1c003ccc:	0d810a13          	addi	s4,sp,216
1c003cd0:	03c10d13          	addi	s10,sp,60
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003cd4:	200c8b93          	addi	s7,s9,512 # 204200 <__L2+0x184200>
1c003cd8:	ce3a                	sw	a4,28(sp)
1c003cda:	00149893          	slli	a7,s1,0x1
1c003cde:	0014ca93          	xori	s5,s1,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003ce2:	0ff00793          	li	a5,255
1c003ce6:	08fca223          	sw	a5,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003cea:	00fba023          	sw	a5,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003cee:	00fba623          	sw	a5,12(s7)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003cf2:	1c00c6b7          	lui	a3,0x1c00c
1c003cf6:	c0668693          	addi	a3,a3,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c003cfa:	08dca023          	sw	a3,128(s9)
1c003cfe:	09bca023          	sw	s11,128(s9)
1c003d02:	856e                	mv	a0,s11
1c003d04:	c046                	sw	a7,0(sp)
1c003d06:	701070ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d0a:	01cbe783          	p.elw	a5,28(s7)
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
				int D0Ind_Last = (D0Ind==1), D0Ind_NextLast = ((D0Ind+1)==1);
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(D0Ind_Last)) {
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1560:(1638-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c003d0e:	6305                	lui	t1,0x1
1c003d10:	4712                	lw	a4,4(sp)
1c003d12:	46b2                	lw	a3,12(sp)
1c003d14:	4882                	lw	a7,0(sp)
1c003d16:	415705b3          	sub	a1,a4,s5
1c003d1a:	1005d9b3          	p.exthz	s3,a1
1c003d1e:	1c0175b7          	lui	a1,0x1c017
1c003d22:	21858593          	addi	a1,a1,536 # 1c017218 <__clz_tab+0x600>
1c003d26:	4190                	lw	a2,0(a1)
1c003d28:	6711                	lui	a4,0x4
1c003d2a:	74c70793          	addi	a5,a4,1868 # 474c <__rt_stack_size+0x3f4c>
1c003d2e:	d9549657          	pv.packhi.b	a2,s1,s5
1c003d32:	c832                	sw	a2,16(sp)
1c003d34:	96be                	add	a3,a3,a5
1c003d36:	6615                	lui	a2,0x5
1c003d38:	ce860b13          	addi	s6,a2,-792 # 4ce8 <__rt_stack_size+0x44e8>
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c003d3c:	4c01                	li	s8,0
					_N_In = _N_In + (18252); _LN_In = ((T0Ind_Last)?1560:(1638-78*(T0Ind==0))); _SN_In = (((1)?2:6)*_LN_In); 
1c003d3e:	c636                	sw	a3,12(sp)
1c003d40:	c3030313          	addi	t1,t1,-976 # c30 <__rt_stack_size+0x430>
  if (copy->length == 0)
1c003d44:	57aa                	lw	a5,168(sp)
1c003d46:	10078863          	beqz	a5,1c003e56 <S21_Conv2d_16x8x3x3_Relu+0x312>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003d4a:	574a                	lw	a4,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003d4c:	02000793          	li	a5,32
1c003d50:	cb09                	beqz	a4,1c003d62 <S21_Conv2d_16x8x3x3_Relu+0x21e>
1c003d52:	00fca423          	sw	a5,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003d56:	03cce703          	p.elw	a4,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003d5a:	00fca223          	sw	a5,4(s9)
1c003d5e:	574a                	lw	a4,176(sp)
1c003d60:	fb6d                	bnez	a4,1c003d52 <S21_Conv2d_16x8x3x3_Relu+0x20e>
1c003d62:	401c                	lw	a5,0(s0)
1c003d64:	00188a93          	addi	s5,a7,1
					_N_In = _N_In + (-1482)+(-18252); _LN_In = (1560); _SN_In = (6*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read In */
				if (_SN_In) {
1c003d68:	14031163          	bnez	t1,1c003eaa <S21_Conv2d_16x8x3x3_Relu+0x366>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+9828*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+9828*((D0Ind_Total)%2));
1c003d6c:	6589                	lui	a1,0x2
1c003d6e:	fc18b8b3          	p.bclr	a7,a7,30,1
1c003d72:	873e                	mv	a4,a5
1c003d74:	66458593          	addi	a1,a1,1636 # 2664 <__rt_stack_size+0x1e64>
1c003d78:	42b88733          	p.mac	a4,a7,a1
				KerArg1->H = (unsigned short int) (21-1*(T0Ind==0)-1*(T0Ind_Last));
1c003d7c:	0f311023          	sh	s3,224(sp)
				KerArg1->UsedH = (unsigned short int) (21-1*(T0Ind==0)-1*(T0Ind_Last));
1c003d80:	0f311123          	sh	s3,226(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c003d84:	4619                	li	a2,6
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+9828*((D0Ind_Total)%2));
1c003d86:	cdba                	sw	a4,216(sp)
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c003d88:	341c2863          	p.beqimm	s8,1,1c0040d8 <S21_Conv2d_16x8x3x3_Relu+0x594>
1c003d8c:	0ec11223          	sh	a2,228(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+19688+((D0Ind)*108));
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c003d90:	4642                	lw	a2,16(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+19688+((D0Ind)*108));
1c003d92:	97da                	add	a5,a5,s6
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003d94:	0ff00713          	li	a4,255
1c003d98:	d7be                	sw	a5,236(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c003d9a:	dbb2                	sw	a2,244(sp)
1c003d9c:	08eca223          	sw	a4,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003da0:	00eba023          	sw	a4,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003da4:	00eba623          	sw	a4,12(s7)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003da8:	1c00e6b7          	lui	a3,0x1c00e
1c003dac:	8b068693          	addi	a3,a3,-1872 # 1c00d8b0 <KerParConv3x3Stride2_DP_fp>
1c003db0:	08dca023          	sw	a3,128(s9)
1c003db4:	094ca023          	sw	s4,128(s9)
1c003db8:	8552                	mv	a0,s4
1c003dba:	2f7090ef          	jal	ra,1c00d8b0 <KerParConv3x3Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003dbe:	01cbe783          	p.elw	a5,28(s7)
1c003dc2:	06cb0b13          	addi	s6,s6,108
1c003dc6:	88d6                	mv	a7,s5
			for (D0Ind=0; D0Ind<2; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c003dc8:	121c3663          	p.bneimm	s8,1,1c003ef4 <S21_Conv2d_16x8x3x3_Relu+0x3b0>
				__CALL(KerParConv3x3Stride2_DP_fp, KerArg1);
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+21992+6400*((T0Ind_Total)%2));
1c003dcc:	4018                	lw	a4,0(s0)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c003dce:	0ff00793          	li	a5,255
1c003dd2:	974a                	add	a4,a4,s2
1c003dd4:	c2ba                	sw	a4,68(sp)
1c003dd6:	08fca223          	sw	a5,132(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c003dda:	00fba023          	sw	a5,0(s7)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c003dde:	00fba623          	sw	a5,12(s7)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c003de2:	1c00c737          	lui	a4,0x1c00c
1c003de6:	e4070713          	addi	a4,a4,-448 # 1c00be40 <KerDP_fp>
1c003dea:	08eca023          	sw	a4,128(s9)
1c003dee:	09aca023          	sw	s10,128(s9)
1c003df2:	856a                	mv	a0,s10
1c003df4:	04c080ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003df8:	01cbe783          	p.elw	a5,28(s7)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c003dfc:	47d2                	lw	a5,20(sp)
1c003dfe:	16079463          	bnez	a5,1c003f66 <S21_Conv2d_16x8x3x3_Relu+0x422>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+21992+6400*((T0Ind_Total)%2)),
1c003e02:	401c                	lw	a5,0(s0)
1c003e04:	97ca                	add	a5,a5,s2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e06:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003e0a:	400ca683          	lw	a3,1024(s9)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003e0e:	45f2                	lw	a1,28(sp)
1c003e10:	40bca023          	sw	a1,1024(s9)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003e14:	40fca023          	sw	a5,1024(s9)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003e18:	4622                	lw	a2,8(sp)
1c003e1a:	40cca023          	sw	a2,1024(s9)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003e1e:	032007b7          	lui	a5,0x3200
1c003e22:	19078793          	addi	a5,a5,400 # 3200190 <__L2+0x3180190>
1c003e26:	40fca023          	sw	a5,1024(s9)
        if (!merge) copy->id = id;
1c003e2a:	dd36                	sw	a3,184(sp)
        copy->length = 0;
1c003e2c:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c003e2e:	30071073          	csrw	mstatus,a4
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c003e32:	0c14ae63          	p.beqimm	s1,1,1c003f0e <S21_Conv2d_16x8x3x3_Relu+0x3ca>
1c003e36:	4692                	lw	a3,4(sp)
1c003e38:	6709                	lui	a4,0x2
1c003e3a:	90070713          	addi	a4,a4,-1792 # 1900 <__rt_stack_size+0x1100>
1c003e3e:	fff68993          	addi	s3,a3,-1
1c003e42:	1009d9b3          	p.exthz	s3,s3
1c003e46:	19060613          	addi	a2,a2,400
1c003e4a:	c24e                	sw	s3,4(sp)
1c003e4c:	993a                	add	s2,s2,a4
1c003e4e:	c432                	sw	a2,8(sp)
1c003e50:	4485                	li	s1,1
1c003e52:	ca3a                	sw	a4,20(sp)
1c003e54:	b559                	j	1c003cda <S21_Conv2d_16x8x3x3_Relu+0x196>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e56:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003e5a:	404ca783          	lw	a5,1028(s9)
1c003e5e:	476a                	lw	a4,152(sp)
1c003e60:	40e7d7b3          	sra	a5,a5,a4
1c003e64:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e68:	c78d                	beqz	a5,1c003e92 <S21_Conv2d_16x8x3x3_Relu+0x34e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003e6a:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c003e6e:	30069073          	csrw	mstatus,a3
1c003e72:	00cca423          	sw	a2,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003e76:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003e7a:	00cca223          	sw	a2,4(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003e7e:	300476f3          	csrrci	a3,mstatus,8
1c003e82:	404ca783          	lw	a5,1028(s9)
1c003e86:	476a                	lw	a4,152(sp)
1c003e88:	40e7d7b3          	sra	a5,a5,a4
1c003e8c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003e90:	fff9                	bnez	a5,1c003e6e <S21_Conv2d_16x8x3x3_Relu+0x32a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003e92:	4785                	li	a5,1
1c003e94:	00e79733          	sll	a4,a5,a4
1c003e98:	40eca223          	sw	a4,1028(s9)
  __builtin_pulp_spr_write(reg, val);
1c003e9c:	30069073          	csrw	mstatus,a3
1c003ea0:	401c                	lw	a5,0(s0)
1c003ea2:	00188a93          	addi	s5,a7,1
				if (_SN_In) {
1c003ea6:	ec0303e3          	beqz	t1,1c003d6c <S21_Conv2d_16x8x3x3_Relu+0x228>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003eaa:	30047773          	csrrci	a4,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c003eae:	400ca603          	lw	a2,1024(s9)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c003eb2:	c7034333          	p.bset	t1,t1,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c003eb6:	c1534333          	p.bset	t1,t1,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c003eba:	406ca023          	sw	t1,1024(s9)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+9828*((D0Ind_Total+1)%2)),
1c003ebe:	6689                	lui	a3,0x2
1c003ec0:	fc1ab5b3          	p.bclr	a1,s5,30,1
1c003ec4:	66468693          	addi	a3,a3,1636 # 2664 <__rt_stack_size+0x1e64>
1c003ec8:	42d587b3          	p.mac	a5,a1,a3
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c003ecc:	40fca023          	sw	a5,1024(s9)
1c003ed0:	45e2                	lw	a1,24(sp)
1c003ed2:	46b2                	lw	a3,12(sp)
1c003ed4:	00d587b3          	add	a5,a1,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c003ed8:	40fca023          	sw	a5,1024(s9)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c003edc:	0be207b7          	lui	a5,0xbe20
1c003ee0:	61878793          	addi	a5,a5,1560 # be20618 <__L2+0xbda0618>
1c003ee4:	40fca023          	sw	a5,1024(s9)
        if (!merge) copy->id = id;
1c003ee8:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c003eea:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c003eec:	30071073          	csrw	mstatus,a4
1c003ef0:	401c                	lw	a5,0(s0)
1c003ef2:	bdad                	j	1c003d6c <S21_Conv2d_16x8x3x3_Relu+0x228>
1c003ef4:	4c05                	li	s8,1
				} else if (!(T0Ind_Last)) {
1c003ef6:	1e14a363          	p.beqimm	s1,1,1c0040dc <S21_Conv2d_16x8x3x3_Relu+0x598>
					_N_In = _N_In + (1560-(78*(T0Ind==0)))+(-18252); _LN_In = ((1)?1560:1638); _SN_In = (6*_LN_In); 
1c003efa:	4732                	lw	a4,12(sp)
1c003efc:	77f1                	lui	a5,0xffffc
1c003efe:	e7e78793          	addi	a5,a5,-386 # ffffbe7e <pulp__FC+0xffffbe7f>
1c003f02:	973e                	add	a4,a4,a5
1c003f04:	6589                	lui	a1,0x2
1c003f06:	c63a                	sw	a4,12(sp)
1c003f08:	49058313          	addi	t1,a1,1168 # 2490 <__rt_stack_size+0x1c90>
1c003f0c:	bd25                	j	1c003d44 <S21_Conv2d_16x8x3x3_Relu+0x200>
  if (copy->length == 0)
1c003f0e:	472e                	lw	a4,200(sp)
1c003f10:	c745                	beqz	a4,1c003fb8 <S21_Conv2d_16x8x3x3_Relu+0x474>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c003f12:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f14:	02000713          	li	a4,32
1c003f18:	002047b7          	lui	a5,0x204
1c003f1c:	ca89                	beqz	a3,1c003f2e <S21_Conv2d_16x8x3x3_Relu+0x3ea>
1c003f1e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f22:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f26:	00e7a223          	sw	a4,4(a5)
1c003f2a:	46ce                	lw	a3,208(sp)
1c003f2c:	faed                	bnez	a3,1c003f1e <S21_Conv2d_16x8x3x3_Relu+0x3da>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c003f2e:	13c12083          	lw	ra,316(sp)
1c003f32:	13812403          	lw	s0,312(sp)
1c003f36:	13412483          	lw	s1,308(sp)
1c003f3a:	13012903          	lw	s2,304(sp)
1c003f3e:	12c12983          	lw	s3,300(sp)
1c003f42:	12812a03          	lw	s4,296(sp)
1c003f46:	12412a83          	lw	s5,292(sp)
1c003f4a:	12012b03          	lw	s6,288(sp)
1c003f4e:	11c12b83          	lw	s7,284(sp)
1c003f52:	11812c03          	lw	s8,280(sp)
1c003f56:	11412c83          	lw	s9,276(sp)
1c003f5a:	11012d03          	lw	s10,272(sp)
1c003f5e:	10c12d83          	lw	s11,268(sp)
1c003f62:	6131                	addi	sp,sp,320
1c003f64:	8082                	ret
  if (copy->length == 0)
1c003f66:	47ae                	lw	a5,200(sp)
1c003f68:	14079a63          	bnez	a5,1c0040bc <S21_Conv2d_16x8x3x3_Relu+0x578>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f6c:	300476f3          	csrrci	a3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c003f70:	404ca783          	lw	a5,1028(s9)
1c003f74:	576a                	lw	a4,184(sp)
1c003f76:	40e7d7b3          	sra	a5,a5,a4
1c003f7a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003f7e:	c78d                	beqz	a5,1c003fa8 <S21_Conv2d_16x8x3x3_Relu+0x464>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003f80:	10000613          	li	a2,256
  __builtin_pulp_spr_write(reg, val);
1c003f84:	30069073          	csrw	mstatus,a3
1c003f88:	00cca423          	sw	a2,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003f8c:	03cce783          	p.elw	a5,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003f90:	00cca223          	sw	a2,4(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003f94:	300476f3          	csrrci	a3,mstatus,8
1c003f98:	404ca783          	lw	a5,1028(s9)
1c003f9c:	576a                	lw	a4,184(sp)
1c003f9e:	40e7d7b3          	sra	a5,a5,a4
1c003fa2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fa6:	fff9                	bnez	a5,1c003f84 <S21_Conv2d_16x8x3x3_Relu+0x440>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c003fa8:	4785                	li	a5,1
1c003faa:	00e79733          	sll	a4,a5,a4
1c003fae:	40eca223          	sw	a4,1028(s9)
  __builtin_pulp_spr_write(reg, val);
1c003fb2:	30069073          	csrw	mstatus,a3
1c003fb6:	b5b1                	j	1c003e02 <S21_Conv2d_16x8x3x3_Relu+0x2be>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fb8:	30047673          	csrrci	a2,mstatus,8
1c003fbc:	404ca783          	lw	a5,1028(s9)
1c003fc0:	56ea                	lw	a3,184(sp)
1c003fc2:	40d7d7b3          	sra	a5,a5,a3
1c003fc6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003fca:	c79d                	beqz	a5,1c003ff8 <S21_Conv2d_16x8x3x3_Relu+0x4b4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c003fcc:	10000593          	li	a1,256
1c003fd0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c003fd4:	30061073          	csrw	mstatus,a2
1c003fd8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c003fdc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c003fe0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c003fe4:	30047673          	csrrci	a2,mstatus,8
1c003fe8:	40472783          	lw	a5,1028(a4)
1c003fec:	56ea                	lw	a3,184(sp)
1c003fee:	40d7d7b3          	sra	a5,a5,a3
1c003ff2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c003ff6:	fff9                	bnez	a5,1c003fd4 <S21_Conv2d_16x8x3x3_Relu+0x490>
1c003ff8:	4785                	li	a5,1
1c003ffa:	00d796b3          	sll	a3,a5,a3
1c003ffe:	002047b7          	lui	a5,0x204
1c004002:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004006:	30061073          	csrw	mstatus,a2
1c00400a:	b715                	j	1c003f2e <S21_Conv2d_16x8x3x3_Relu+0x3ea>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00400c:	30047673          	csrrci	a2,mstatus,8
1c004010:	002047b7          	lui	a5,0x204
1c004014:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004018:	56e6                	lw	a3,120(sp)
1c00401a:	40d7d7b3          	sra	a5,a5,a3
1c00401e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004022:	c79d                	beqz	a5,1c004050 <S21_Conv2d_16x8x3x3_Relu+0x50c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004024:	10000593          	li	a1,256
1c004028:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00402c:	30061073          	csrw	mstatus,a2
1c004030:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004034:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004038:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00403c:	30047673          	csrrci	a2,mstatus,8
1c004040:	40472783          	lw	a5,1028(a4)
1c004044:	56e6                	lw	a3,120(sp)
1c004046:	40d7d7b3          	sra	a5,a5,a3
1c00404a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00404e:	fff9                	bnez	a5,1c00402c <S21_Conv2d_16x8x3x3_Relu+0x4e8>
1c004050:	4785                	li	a5,1
1c004052:	00d796b3          	sll	a3,a5,a3
1c004056:	002047b7          	lui	a5,0x204
1c00405a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00405e:	30061073          	csrw	mstatus,a2
1c004062:	beed                	j	1c003c5c <S21_Conv2d_16x8x3x3_Relu+0x118>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004064:	30047673          	csrrci	a2,mstatus,8
1c004068:	002047b7          	lui	a5,0x204
1c00406c:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c004070:	46e6                	lw	a3,88(sp)
1c004072:	40d7d7b3          	sra	a5,a5,a3
1c004076:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00407a:	c79d                	beqz	a5,1c0040a8 <S21_Conv2d_16x8x3x3_Relu+0x564>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00407c:	10000593          	li	a1,256
1c004080:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004084:	30061073          	csrw	mstatus,a2
1c004088:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00408c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004090:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004094:	30047673          	csrrci	a2,mstatus,8
1c004098:	40472783          	lw	a5,1028(a4)
1c00409c:	46e6                	lw	a3,88(sp)
1c00409e:	40d7d7b3          	sra	a5,a5,a3
1c0040a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0040a6:	fff9                	bnez	a5,1c004084 <S21_Conv2d_16x8x3x3_Relu+0x540>
1c0040a8:	4785                	li	a5,1
1c0040aa:	00d796b3          	sll	a3,a5,a3
1c0040ae:	002047b7          	lui	a5,0x204
1c0040b2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0040b6:	30061073          	csrw	mstatus,a2
1c0040ba:	b6a5                	j	1c003c22 <S21_Conv2d_16x8x3x3_Relu+0xde>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0040bc:	474e                	lw	a4,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0040be:	02000793          	li	a5,32
1c0040c2:	d40700e3          	beqz	a4,1c003e02 <S21_Conv2d_16x8x3x3_Relu+0x2be>
1c0040c6:	00fca423          	sw	a5,8(s9)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0040ca:	03cce703          	p.elw	a4,60(s9)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0040ce:	00fca223          	sw	a5,4(s9)
1c0040d2:	474e                	lw	a4,208(sp)
1c0040d4:	fb6d                	bnez	a4,1c0040c6 <S21_Conv2d_16x8x3x3_Relu+0x582>
1c0040d6:	b335                	j	1c003e02 <S21_Conv2d_16x8x3x3_Relu+0x2be>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?2:6);
1c0040d8:	4609                	li	a2,2
1c0040da:	b94d                	j	1c003d8c <S21_Conv2d_16x8x3x3_Relu+0x248>
				_SN_In = 0;
1c0040dc:	4301                	li	t1,0
1c0040de:	b19d                	j	1c003d44 <S21_Conv2d_16x8x3x3_Relu+0x200>

1c0040e0 <S24_Conv2d_16x8x1x1>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0040e0:	7129                	addi	sp,sp,-320
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 25600, 25600]][Tile0, 3:[20x9, 1:20x9, 20x2], 4]
		Tile0: [0, 11520, 720], Tile1: [0, 11520, 720], Tile2; [0, 11520, 720]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c0040e2:	100008b7          	lui	a7,0x10000
{
1c0040e6:	13312623          	sw	s3,300(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c0040ea:	01c88993          	addi	s3,a7,28 # 1000001c <resnet_L1_Memory>
1c0040ee:	0009a703          	lw	a4,0(s3)
{
1c0040f2:	ce2a                	sw	a0,28(sp)
	KerArg0->W = (unsigned short int) (20);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+21216);
	KerArg0->NormBias = (signed char) (10);
	KerArg1->W = (unsigned short int) (39);
1c0040f4:	1c0173b7          	lui	t2,0x1c017
	KerArg0->NormBias = (signed char) (10);
1c0040f8:	4529                	li	a0,10
1c0040fa:	02a10b23          	sb	a0,54(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c0040fe:	6321                	lui	t1,0x8
	KerArg1->W = (unsigned short int) (39);
1c004100:	2143a503          	lw	a0,532(t2) # 1c017214 <__clz_tab+0x5fc>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+21216);
1c004104:	6e15                	lui	t3,0x5
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c004106:	10030793          	addi	a5,t1,256 # 8100 <__rt_stack_size+0x7900>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+21216);
1c00410a:	2e0e0813          	addi	a6,t3,736 # 52e0 <__rt_stack_size+0x4ae0>
	KerArg1->UsedW = (unsigned short int) (39);
	KerArg1->InFeatures = (unsigned short int) (8);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+21248);
1c00410e:	300e0e13          	addi	t3,t3,768
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c004112:	97ba                	add	a5,a5,a4
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+21216);
1c004114:	983a                	add	a6,a6,a4
	KerArg1->InFeatures = (unsigned short int) (8);
1c004116:	1c0172b7          	lui	t0,0x1c017
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+21248);
1c00411a:	9772                	add	a4,a4,t3
	KerArg1->W = (unsigned short int) (39);
1c00411c:	cfaa                	sw	a0,220(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+21248);
1c00411e:	d7ba                	sw	a4,236(sp)
	KerArg1->InFeatures = (unsigned short int) (8);
1c004120:	1d02a503          	lw	a0,464(t0) # 1c0171d0 <__clz_tab+0x5b8>
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+33024);
	KerArg1->Norm = (unsigned char) (15);
	KerArg1->TotalInFeatures = (short int) (8);
1c004124:	4721                	li	a4,8
1c004126:	0ee11423          	sh	a4,232(sp)
	KerArg1->Pad = (v4s) 0;
1c00412a:	00007757          	pv.add.sci.b	a4,zero,0
	KerArg0->W = (unsigned short int) (20);
1c00412e:	4fd1                	li	t6,20
	KerArg0->OutFeatures = (unsigned short int) (16);
1c004130:	4ec1                	li	t4,16
	KerArg1->Norm = (unsigned char) (15);
1c004132:	4f3d                	li	t5,15
	KerArg1->Pad = (v4s) 0;
1c004134:	dbba                	sw	a4,244(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c004136:	4705                	li	a4,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c004138:	d63e                	sw	a5,44(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+33024);
1c00413a:	d9be                	sw	a5,240(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+33024);
1c00413c:	de3e                	sw	a5,60(sp)
{
1c00413e:	12112e23          	sw	ra,316(sp)
1c004142:	12812c23          	sw	s0,312(sp)
1c004146:	12912a23          	sw	s1,308(sp)
1c00414a:	13212823          	sw	s2,304(sp)
1c00414e:	13412423          	sw	s4,296(sp)
1c004152:	13512223          	sw	s5,292(sp)
1c004156:	13612023          	sw	s6,288(sp)
1c00415a:	11712e23          	sw	s7,284(sp)
1c00415e:	11812c23          	sw	s8,280(sp)
1c004162:	11912a23          	sw	s9,276(sp)
1c004166:	11a12823          	sw	s10,272(sp)
1c00416a:	11b12623          	sw	s11,268(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->Norm = (unsigned char) (15);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c00416e:	137d                	addi	t1,t1,-1
	KerArg0->W = (unsigned short int) (20);
1c004170:	03f11823          	sh	t6,48(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c004174:	03d11a23          	sh	t4,52(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+21216);
1c004178:	dc42                	sw	a6,56(sp)
	KerArg1->InFeatures = (unsigned short int) (8);
1c00417a:	d3aa                	sw	a0,228(sp)
	KerArg1->Norm = (unsigned char) (15);
1c00417c:	0fe10c23          	sb	t5,248(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c004180:	0ee10da3          	sb	a4,251(sp)
	KerArg2->W = (unsigned short int) (20);
1c004184:	05f11023          	sh	t6,64(sp)
	KerArg2->LB = (int) (-32768);
1c004188:	77e1                	lui	a5,0xffff8
	KerArg2->Norm = (unsigned char) (15);
1c00418a:	05e10423          	sb	t5,72(sp)
	KerArg2->InFeatures = (unsigned short int) (16);
1c00418e:	05d11523          	sh	t4,74(sp)
	KerArg2->LB = (int) (-32768);
1c004192:	c6be                	sw	a5,76(sp)
	KerArg2->UB = (int) (32767);
1c004194:	c89a                	sw	t1,80(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004196:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00419a:	002047b7          	lui	a5,0x204
1c00419e:	4007a303          	lw	t1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0041a2:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0041a6:	02070713          	addi	a4,a4,32 # b0020 <__L2+0x30020>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0041aa:	c1574733          	p.bset	a4,a4,0,21
1c0041ae:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0041b2:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0041b6:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0041ba:	cc9a                	sw	t1,88(sp)
        copy->length = 0;
1c0041bc:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c0041be:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0041c2:	5726                	lw	a4,104(sp)
1c0041c4:	42070f63          	beqz	a4,1c004602 <S24_Conv2d_16x8x1x1+0x522>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0041c8:	5646                	lw	a2,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0041ca:	02000713          	li	a4,32
1c0041ce:	ca09                	beqz	a2,1c0041e0 <S24_Conv2d_16x8x1x1+0x100>
1c0041d0:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0041d4:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0041d8:	00e7a223          	sw	a4,4(a5)
1c0041dc:	5646                	lw	a2,112(sp)
1c0041de:	fa6d                	bnez	a2,1c0041d0 <S24_Conv2d_16x8x1x1+0xf0>
	/*================================= Read Tiles Prolog ===============================*/
	_C_Out=0; _SC_Out=5760; _LC_Out=360;
	_SP_Out=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+21216), 32, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+21248), 256, 0, &DmaR_Evt2);
1c0041e0:	0009a603          	lw	a2,0(s3)
1c0041e4:	6795                	lui	a5,0x5
1c0041e6:	30078793          	addi	a5,a5,768 # 5300 <__rt_stack_size+0x4b00>
1c0041ea:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0041ec:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0041f0:	002047b7          	lui	a5,0x204
1c0041f4:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0041f8:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0041fc:	10070713          	addi	a4,a4,256 # b0100 <__L2+0x30100>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004200:	c1574733          	p.bset	a4,a4,0,21
1c004204:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004208:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00420c:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004210:	dcc2                	sw	a6,120(sp)
        copy->length = 0;
1c004212:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c004214:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c004218:	472a                	lw	a4,136(sp)
1c00421a:	38070a63          	beqz	a4,1c0045ae <S24_Conv2d_16x8x1x1+0x4ce>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00421e:	464a                	lw	a2,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004220:	02000713          	li	a4,32
1c004224:	ca09                	beqz	a2,1c004236 <S24_Conv2d_16x8x1x1+0x156>
1c004226:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00422a:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00422e:	00e7a223          	sw	a4,4(a5)
1c004232:	464a                	lw	a2,144(sp)
1c004234:	fa6d                	bnez	a2,1c004226 <S24_Conv2d_16x8x1x1+0x146>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 10608, 3042, 1326, 0, &DmaR_Evt3);
1c004236:	0009a503          	lw	a0,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00423a:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00423e:	00204737          	lui	a4,0x204
1c004242:	40072583          	lw	a1,1024(a4) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004246:	640d                	lui	s0,0x3
1c004248:	97040413          	addi	s0,s0,-1680 # 2970 <__rt_stack_size+0x2170>
1c00424c:	000707b7          	lui	a5,0x70
1c004250:	de0427b3          	p.insert	a5,s0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004254:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004258:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00425c:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004260:	40a72023          	sw	a0,1024(a4)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004264:	47f2                	lw	a5,28(sp)
1c004266:	40f72023          	sw	a5,1024(a4)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00426a:	0be207b7          	lui	a5,0xbe20
1c00426e:	52e78793          	addi	a5,a5,1326 # be2052e <__L2+0xbda052e>
1c004272:	40f72023          	sw	a5,1024(a4)
        if (!merge) copy->id = id;
1c004276:	cd2e                	sw	a1,152(sp)
        copy->length = 0;
1c004278:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c00427a:	30061073          	csrw	mstatus,a2
	_C_Out=0; _SC_Out=5760; _LC_Out=360;
1c00427e:	6485                	lui	s1,0x1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004280:	00204db7          	lui	s11,0x204
1c004284:	68048493          	addi	s1,s1,1664 # 1680 <__rt_stack_size+0xe80>
1c004288:	8936                	mv	s2,a3
1c00428a:	4b81                	li	s7,0
	_N_In=0;
1c00428c:	c602                	sw	zero,12(sp)
	_C_Out=0; _SC_Out=5760; _LC_Out=360;
1c00428e:	16800c13          	li	s8,360
	_SP_Out=0;
1c004292:	c802                	sw	zero,16(sp)
1c004294:	02c10b13          	addi	s6,sp,44
1c004298:	0d810a93          	addi	s5,sp,216
1c00429c:	03c10a13          	addi	s4,sp,60
1c0042a0:	0ff00c93          	li	s9,255
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0042a4:	200d8d13          	addi	s10,s11,512 # 204200 <__L2+0x184200>
	{ /* Single iteration on D1 */
		int D1Ind_Last = 1;
		for (T0Ind=0; T0Ind<3; T0Ind++, T0Ind_Total++) { /* Iteration on Tile0 */
			int T0Ind_Last = (T0Ind==2), T0Ind_NextLast = ((T0Ind+1)==2);
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:9);
1c0042a8:	3c2baa63          	p.beqimm	s7,2,1c00467c <S24_Conv2d_16x8x1x1+0x59c>
1c0042ac:	4725                	li	a4,9
1c0042ae:	02e11923          	sh	a4,50(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0042b2:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0042b6:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0042ba:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0042be:	1c00c6b7          	lui	a3,0x1c00c
1c0042c2:	c0668693          	addi	a3,a3,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c0042c6:	08dda023          	sw	a3,128(s11)
1c0042ca:	096da023          	sw	s6,128(s11)
1c0042ce:	855a                	mv	a0,s6
1c0042d0:	137070ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0042d4:	01cd6703          	p.elw	a4,28(s10)
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1, D0Ind_NextLast = 1;
				/*================================= Prepare Tiles ===================================*/
				_SN_In = 0;
				if (!(T0Ind_Last)) {
					_N_In = _N_In + (1404); _LN_In = ((T0Ind_NextLast)?234:1326); _SN_In = (8*_LN_In); 
1c0042d8:	52e00713          	li	a4,1326
1c0042dc:	47b2                	lw	a5,12(sp)
1c0042de:	cc3a                	sw	a4,24(sp)
1c0042e0:	8e22                	mv	t3,s0
1c0042e2:	57c78793          	addi	a5,a5,1404
1c0042e6:	c63e                	sw	a5,12(sp)
1c0042e8:	3c1ba563          	p.beqimm	s7,1,1c0046b2 <S24_Conv2d_16x8x1x1+0x5d2>
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:9);
1c0042ec:	47a5                	li	a5,9
1c0042ee:	ca3e                	sw	a5,20(sp)
  if (copy->length == 0)
1c0042f0:	572a                	lw	a4,168(sp)
1c0042f2:	10070d63          	beqz	a4,1c00440c <S24_Conv2d_16x8x1x1+0x32c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0042f6:	554a                	lw	a0,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0042f8:	02000713          	li	a4,32
1c0042fc:	c909                	beqz	a0,1c00430e <S24_Conv2d_16x8x1x1+0x22e>
1c0042fe:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004302:	03cde503          	p.elw	a0,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004306:	00eda223          	sw	a4,4(s11)
1c00430a:	554a                	lw	a0,176(sp)
1c00430c:	f96d                	bnez	a0,1c0042fe <S24_Conv2d_16x8x1x1+0x21e>
1c00430e:	0009a703          	lw	a4,0(s3)
1c004312:	001b8813          	addi	a6,s7,1
					_N_In = _N_In + (-2808); _LN_In = (1326); _SN_In = (8*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read In */
				if (_SN_In) {
1c004316:	140e1663          	bnez	t3,1c004462 <S24_Conv2d_16x8x1x1+0x382>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+10608*((D0Ind_Total+1)%2)),
							_SN_In, 3042, _LN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+10608*((D0Ind_Total)%2));
1c00431a:	fc1bb333          	p.bclr	t1,s7,30,1
1c00431e:	42830733          	p.mac	a4,t1,s0
				KerArg1->H = (unsigned short int) (T0Ind_Last?3:17);
1c004322:	4545                	li	a0,17
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+10608*((D0Ind_Total)%2));
1c004324:	cdba                	sw	a4,216(sp)
				KerArg1->H = (unsigned short int) (T0Ind_Last?3:17);
1c004326:	382ba463          	p.beqimm	s7,2,1c0046ae <S24_Conv2d_16x8x1x1+0x5ce>
1c00432a:	0ea11023          	sh	a0,224(sp)
				KerArg1->UsedH = (unsigned short int) (T0Ind_Last?3:17);
1c00432e:	0ea11123          	sh	a0,226(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004332:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004336:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00433a:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00433e:	1c00d6b7          	lui	a3,0x1c00d
1c004342:	51868693          	addi	a3,a3,1304 # 1c00d518 <KerParConv1x1Stride2_DP_fp>
1c004346:	08dda023          	sw	a3,128(s11)
1c00434a:	095da023          	sw	s5,128(s11)
1c00434e:	8556                	mv	a0,s5
1c004350:	c41a                	sw	t1,8(sp)
1c004352:	c242                	sw	a6,4(sp)
1c004354:	1c4090ef          	jal	ra,1c00d518 <KerParConv1x1Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004358:	01cd6703          	p.elw	a4,28(s10)
				/*============================= End Update Arg Pipeline =============================*/
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->H = (unsigned short int) (T0Ind_Last?2:9);
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+21504+5760*((T0Ind_Total)%2));
1c00435c:	6715                	lui	a4,0x5
1c00435e:	4322                	lw	t1,8(sp)
1c004360:	6785                	lui	a5,0x1
1c004362:	68078793          	addi	a5,a5,1664 # 1680 <__rt_stack_size+0xe80>
1c004366:	40070713          	addi	a4,a4,1024 # 5400 <__rt_stack_size+0x4c00>
1c00436a:	42f30733          	p.mac	a4,t1,a5
			KerArg2->H = (unsigned short int) (T0Ind_Last?2:9);
1c00436e:	46d2                	lw	a3,20(sp)
1c004370:	04d11123          	sh	a3,66(sp)
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+21504+5760*((T0Ind_Total)%2));
1c004374:	833a                	mv	t1,a4
1c004376:	0009a703          	lw	a4,0(s3)
1c00437a:	971a                	add	a4,a4,t1
1c00437c:	c2ba                	sw	a4,68(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00437e:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004382:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004386:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00438a:	1c00c737          	lui	a4,0x1c00c
1c00438e:	e4070713          	addi	a4,a4,-448 # 1c00be40 <KerDP_fp>
1c004392:	08eda023          	sw	a4,128(s11)
1c004396:	094da023          	sw	s4,128(s11)
1c00439a:	8552                	mv	a0,s4
1c00439c:	c41a                	sw	t1,8(sp)
1c00439e:	2a3070ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0043a2:	01cd6703          	p.elw	a4,28(s10)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c0043a6:	47c2                	lw	a5,16(sp)
1c0043a8:	4322                	lw	t1,8(sp)
1c0043aa:	4812                	lw	a6,4(sp)
1c0043ac:	14079e63          	bnez	a5,1c004508 <S24_Conv2d_16x8x1x1+0x428>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+21504+5760*((T0Ind_Total)%2)),
1c0043b0:	0009a503          	lw	a0,0(s3)
1c0043b4:	951a                	add	a0,a0,t1
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0043b6:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0043ba:	400dae03          	lw	t3,1024(s11)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0043be:	1004d733          	p.exthz	a4,s1
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0043c2:	c5174733          	p.bset	a4,a4,2,17
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0043c6:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0043ca:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0043ce:	40ada023          	sw	a0,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0043d2:	412da023          	sw	s2,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c0043d6:	03200737          	lui	a4,0x3200
1c0043da:	00ec6c33          	or	s8,s8,a4
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0043de:	418da023          	sw	s8,1024(s11)
        if (!merge) copy->id = id;
1c0043e2:	dd72                	sw	t3,184(sp)
        copy->length = 0;
1c0043e4:	c582                	sw	zero,200(sp)
  __builtin_pulp_spr_write(reg, val);
1c0043e6:	30031073          	csrw	mstatus,t1
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c0043ea:	0c2ba363          	p.beqimm	s7,2,1c0044b0 <S24_Conv2d_16x8x1x1+0x3d0>
				_C_Out = _C_Out + (360); _LC_Out = ((T0Ind_NextLast)?80:360); _SC_Out = (16*_LC_Out); 
1c0043ee:	281ba263          	p.beqimm	s7,1,1c004672 <S24_Conv2d_16x8x1x1+0x592>
1c0043f2:	1c0177b7          	lui	a5,0x1c017
1c0043f6:	1d478793          	addi	a5,a5,468 # 1c0171d4 <__clz_tab+0x5bc>
1c0043fa:	4398                	lw	a4,0(a5)
1c0043fc:	16800c13          	li	s8,360
1c004400:	c826                	sw	s1,16(sp)
1c004402:	16890913          	addi	s2,s2,360
1c004406:	8bc2                	mv	s7,a6
{
1c004408:	84ba                	mv	s1,a4
1c00440a:	bd79                	j	1c0042a8 <S24_Conv2d_16x8x1x1+0x1c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00440c:	30047873          	csrrci	a6,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004410:	404da703          	lw	a4,1028(s11)
1c004414:	456a                	lw	a0,152(sp)
1c004416:	40a75733          	sra	a4,a4,a0
1c00441a:	fc173733          	p.bclr	a4,a4,30,1
1c00441e:	c70d                	beqz	a4,1c004448 <S24_Conv2d_16x8x1x1+0x368>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004420:	10000313          	li	t1,256
  __builtin_pulp_spr_write(reg, val);
1c004424:	30081073          	csrw	mstatus,a6
1c004428:	006da423          	sw	t1,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00442c:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004430:	006da223          	sw	t1,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004434:	30047873          	csrrci	a6,mstatus,8
1c004438:	404da703          	lw	a4,1028(s11)
1c00443c:	456a                	lw	a0,152(sp)
1c00443e:	40a75733          	sra	a4,a4,a0
1c004442:	fc173733          	p.bclr	a4,a4,30,1
1c004446:	ff79                	bnez	a4,1c004424 <S24_Conv2d_16x8x1x1+0x344>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004448:	4705                	li	a4,1
1c00444a:	00a71533          	sll	a0,a4,a0
1c00444e:	40ada223          	sw	a0,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c004452:	30081073          	csrw	mstatus,a6
1c004456:	0009a703          	lw	a4,0(s3)
1c00445a:	001b8813          	addi	a6,s7,1
				if (_SN_In) {
1c00445e:	ea0e0ee3          	beqz	t3,1c00431a <S24_Conv2d_16x8x1x1+0x23a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004462:	30047373          	csrrci	t1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004466:	400dae83          	lw	t4,1024(s11)
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c00446a:	00070537          	lui	a0,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00446e:	de0e2533          	p.insert	a0,t3,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c004472:	c1354533          	p.bset	a0,a0,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004476:	c1554533          	p.bset	a0,a0,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00447a:	40ada023          	sw	a0,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+10608*((D0Ind_Total+1)%2)),
1c00447e:	fc183533          	p.bclr	a0,a6,30,1
1c004482:	42850733          	p.mac	a4,a0,s0
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004486:	40eda023          	sw	a4,1024(s11)
1c00448a:	47f2                	lw	a5,28(sp)
1c00448c:	46b2                	lw	a3,12(sp)
1c00448e:	00d78733          	add	a4,a5,a3
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004492:	40eda023          	sw	a4,1024(s11)
  return (stride << PLP_DMA_2D_STRIDE_BIT) | (len << PLP_DMA_2D_LEN_BIT);
1c004496:	47e2                	lw	a5,24(sp)
1c004498:	0be20737          	lui	a4,0xbe20
1c00449c:	8f5d                	or	a4,a4,a5
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00449e:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c0044a2:	cd76                	sw	t4,152(sp)
        copy->length = 0;
1c0044a4:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c0044a6:	30031073          	csrw	mstatus,t1
1c0044aa:	0009a703          	lw	a4,0(s3)
1c0044ae:	b5b5                	j	1c00431a <S24_Conv2d_16x8x1x1+0x23a>
  if (copy->length == 0)
1c0044b0:	472e                	lw	a4,200(sp)
1c0044b2:	c745                	beqz	a4,1c00455a <S24_Conv2d_16x8x1x1+0x47a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0044b4:	46ce                	lw	a3,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0044b6:	02000713          	li	a4,32
1c0044ba:	002047b7          	lui	a5,0x204
1c0044be:	ca89                	beqz	a3,1c0044d0 <S24_Conv2d_16x8x1x1+0x3f0>
1c0044c0:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0044c4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0044c8:	00e7a223          	sw	a4,4(a5)
1c0044cc:	46ce                	lw	a3,208(sp)
1c0044ce:	faed                	bnez	a3,1c0044c0 <S24_Conv2d_16x8x1x1+0x3e0>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0044d0:	13c12083          	lw	ra,316(sp)
1c0044d4:	13812403          	lw	s0,312(sp)
1c0044d8:	13412483          	lw	s1,308(sp)
1c0044dc:	13012903          	lw	s2,304(sp)
1c0044e0:	12c12983          	lw	s3,300(sp)
1c0044e4:	12812a03          	lw	s4,296(sp)
1c0044e8:	12412a83          	lw	s5,292(sp)
1c0044ec:	12012b03          	lw	s6,288(sp)
1c0044f0:	11c12b83          	lw	s7,284(sp)
1c0044f4:	11812c03          	lw	s8,280(sp)
1c0044f8:	11412c83          	lw	s9,276(sp)
1c0044fc:	11012d03          	lw	s10,272(sp)
1c004500:	10c12d83          	lw	s11,268(sp)
1c004504:	6131                	addi	sp,sp,320
1c004506:	8082                	ret
  if (copy->length == 0)
1c004508:	472e                	lw	a4,200(sp)
1c00450a:	14071663          	bnez	a4,1c004656 <S24_Conv2d_16x8x1x1+0x576>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00450e:	30047e73          	csrrci	t3,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004512:	404da703          	lw	a4,1028(s11)
1c004516:	556a                	lw	a0,184(sp)
1c004518:	40a75733          	sra	a4,a4,a0
1c00451c:	fc173733          	p.bclr	a4,a4,30,1
1c004520:	c70d                	beqz	a4,1c00454a <S24_Conv2d_16x8x1x1+0x46a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004522:	10000e93          	li	t4,256
  __builtin_pulp_spr_write(reg, val);
1c004526:	300e1073          	csrw	mstatus,t3
1c00452a:	01dda423          	sw	t4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00452e:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004532:	01dda223          	sw	t4,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004536:	30047e73          	csrrci	t3,mstatus,8
1c00453a:	404da703          	lw	a4,1028(s11)
1c00453e:	556a                	lw	a0,184(sp)
1c004540:	40a75733          	sra	a4,a4,a0
1c004544:	fc173733          	p.bclr	a4,a4,30,1
1c004548:	ff79                	bnez	a4,1c004526 <S24_Conv2d_16x8x1x1+0x446>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00454a:	4705                	li	a4,1
1c00454c:	00a71533          	sll	a0,a4,a0
1c004550:	40ada223          	sw	a0,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c004554:	300e1073          	csrw	mstatus,t3
1c004558:	bda1                	j	1c0043b0 <S24_Conv2d_16x8x1x1+0x2d0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00455a:	30047673          	csrrci	a2,mstatus,8
1c00455e:	404da783          	lw	a5,1028(s11)
1c004562:	56ea                	lw	a3,184(sp)
1c004564:	40d7d7b3          	sra	a5,a5,a3
1c004568:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00456c:	c79d                	beqz	a5,1c00459a <S24_Conv2d_16x8x1x1+0x4ba>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00456e:	10000593          	li	a1,256
1c004572:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004576:	30061073          	csrw	mstatus,a2
1c00457a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00457e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004582:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004586:	30047673          	csrrci	a2,mstatus,8
1c00458a:	40472783          	lw	a5,1028(a4)
1c00458e:	56ea                	lw	a3,184(sp)
1c004590:	40d7d7b3          	sra	a5,a5,a3
1c004594:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004598:	fff9                	bnez	a5,1c004576 <S24_Conv2d_16x8x1x1+0x496>
1c00459a:	4785                	li	a5,1
1c00459c:	00d796b3          	sll	a3,a5,a3
1c0045a0:	002047b7          	lui	a5,0x204
1c0045a4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0045a8:	30061073          	csrw	mstatus,a2
1c0045ac:	b715                	j	1c0044d0 <S24_Conv2d_16x8x1x1+0x3f0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0045ae:	300475f3          	csrrci	a1,mstatus,8
1c0045b2:	4047a783          	lw	a5,1028(a5)
1c0045b6:	5666                	lw	a2,120(sp)
1c0045b8:	40c7d7b3          	sra	a5,a5,a2
1c0045bc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0045c0:	c79d                	beqz	a5,1c0045ee <S24_Conv2d_16x8x1x1+0x50e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0045c2:	10000513          	li	a0,256
1c0045c6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0045ca:	30059073          	csrw	mstatus,a1
1c0045ce:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0045d2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0045d6:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0045da:	300475f3          	csrrci	a1,mstatus,8
1c0045de:	40472783          	lw	a5,1028(a4)
1c0045e2:	5666                	lw	a2,120(sp)
1c0045e4:	40c7d7b3          	sra	a5,a5,a2
1c0045e8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0045ec:	fff9                	bnez	a5,1c0045ca <S24_Conv2d_16x8x1x1+0x4ea>
1c0045ee:	4785                	li	a5,1
1c0045f0:	00c79633          	sll	a2,a5,a2
1c0045f4:	002047b7          	lui	a5,0x204
1c0045f8:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0045fc:	30059073          	csrw	mstatus,a1
1c004600:	b91d                	j	1c004236 <S24_Conv2d_16x8x1x1+0x156>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004602:	30047573          	csrrci	a0,mstatus,8
1c004606:	4047a783          	lw	a5,1028(a5)
1c00460a:	4666                	lw	a2,88(sp)
1c00460c:	40c7d7b3          	sra	a5,a5,a2
1c004610:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004614:	c79d                	beqz	a5,1c004642 <S24_Conv2d_16x8x1x1+0x562>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004616:	10000813          	li	a6,256
1c00461a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00461e:	30051073          	csrw	mstatus,a0
1c004622:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004626:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00462a:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00462e:	30047573          	csrrci	a0,mstatus,8
1c004632:	40472783          	lw	a5,1028(a4)
1c004636:	4666                	lw	a2,88(sp)
1c004638:	40c7d7b3          	sra	a5,a5,a2
1c00463c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004640:	fff9                	bnez	a5,1c00461e <S24_Conv2d_16x8x1x1+0x53e>
1c004642:	4785                	li	a5,1
1c004644:	00c79633          	sll	a2,a5,a2
1c004648:	002047b7          	lui	a5,0x204
1c00464c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004650:	30051073          	csrw	mstatus,a0
1c004654:	b671                	j	1c0041e0 <S24_Conv2d_16x8x1x1+0x100>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004656:	454e                	lw	a0,208(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004658:	02000713          	li	a4,32
1c00465c:	d4050ae3          	beqz	a0,1c0043b0 <S24_Conv2d_16x8x1x1+0x2d0>
1c004660:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004664:	03cde503          	p.elw	a0,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004668:	00eda223          	sw	a4,4(s11)
1c00466c:	454e                	lw	a0,208(sp)
1c00466e:	f96d                	bnez	a0,1c004660 <S24_Conv2d_16x8x1x1+0x580>
1c004670:	b381                	j	1c0043b0 <S24_Conv2d_16x8x1x1+0x2d0>
1c004672:	50000713          	li	a4,1280
				_C_Out = _C_Out + (360); _LC_Out = ((T0Ind_NextLast)?80:360); _SC_Out = (16*_LC_Out); 
1c004676:	05000c13          	li	s8,80
1c00467a:	b359                	j	1c004400 <S24_Conv2d_16x8x1x1+0x320>
			KerArg0->H = (unsigned short int) (T0Ind_Last?2:9);
1c00467c:	03711923          	sh	s7,50(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004680:	099da223          	sw	s9,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004684:	019d2023          	sw	s9,0(s10)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004688:	019d2623          	sw	s9,12(s10)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00468c:	1c00c6b7          	lui	a3,0x1c00c
1c004690:	c0668693          	addi	a3,a3,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c004694:	08dda023          	sw	a3,128(s11)
1c004698:	096da023          	sw	s6,128(s11)
1c00469c:	855a                	mv	a0,s6
1c00469e:	568070ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0046a2:	01cd6703          	p.elw	a4,28(s10)
1c0046a6:	4709                	li	a4,2
1c0046a8:	ca3a                	sw	a4,20(sp)
				_SN_In = 0;
1c0046aa:	4e01                	li	t3,0
1c0046ac:	b191                	j	1c0042f0 <S24_Conv2d_16x8x1x1+0x210>
				KerArg1->H = (unsigned short int) (T0Ind_Last?3:17);
1c0046ae:	450d                	li	a0,3
1c0046b0:	b9ad                	j	1c00432a <S24_Conv2d_16x8x1x1+0x24a>
					_N_In = _N_In + (1404); _LN_In = ((T0Ind_NextLast)?234:1326); _SN_In = (8*_LN_In); 
1c0046b2:	0ea00713          	li	a4,234
1c0046b6:	75000e13          	li	t3,1872
1c0046ba:	cc3a                	sw	a4,24(sp)
1c0046bc:	b905                	j	1c0042ec <S24_Conv2d_16x8x1x1+0x20c>

1c0046be <S27_Conv2d_16x16x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0046be:	7169                	addi	sp,sp,-304
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 25600, 25600]][Tile0, 2:[20x10, 20x10], 4]
		Tile0: [0, 12800, 800], Tile1: [0, 12800, 800], Tile2; [0, 12800, 800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0046c0:	10000837          	lui	a6,0x10000
{
1c0046c4:	11612823          	sw	s6,272(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0046c8:	01c80b13          	addi	s6,a6,28 # 1000001c <resnet_L1_Memory>
1c0046cc:	000b2883          	lw	a7,0(s6)
	KerArg0->W = (unsigned short int) (20);
1c0046d0:	1c0177b7          	lui	a5,0x1c017
1c0046d4:	1cc7af83          	lw	t6,460(a5) # 1c0171cc <__clz_tab+0x5b4>
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c0046d8:	6791                	lui	a5,0x4
1c0046da:	c0078e93          	addi	t4,a5,-1024 # 3c00 <__rt_stack_size+0x3400>
{
1c0046de:	c62a                	sw	a0,12(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0046e0:	6321                	lui	t1,0x8
	KerArg0->NormBias = (signed char) (13);
1c0046e2:	4535                	li	a0,13
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c0046e4:	c2078793          	addi	a5,a5,-992
1c0046e8:	97c6                	add	a5,a5,a7
	KerArg0->NormBias = (signed char) (13);
1c0046ea:	02a10323          	sb	a0,38(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0046ee:	02030713          	addi	a4,t1,32 # 8020 <__rt_stack_size+0x7820>
	KerArg1->W = (unsigned short int) (20);
1c0046f2:	00a06557          	pv.add.sci.h	a0,zero,20
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0046f6:	9746                	add	a4,a4,a7
	KerArg0->OutFeatures = (unsigned short int) (16);
1c0046f8:	4e41                	li	t3,16
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
	KerArg1->Norm = (unsigned char) (14);
1c0046fa:	4f39                	li	t5,14
	KerArg1->W = (unsigned short int) (20);
1c0046fc:	c7aa                	sw	a0,204(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c0046fe:	cfbe                	sw	a5,220(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c004700:	01d882b3          	add	t0,a7,t4
	KerArg1->InFeatures = (unsigned short int) (16);
1c004704:	00806557          	pv.add.sci.h	a0,zero,16
	KerArg1->TotalInFeatures = (short int) (16);
	KerArg1->Orientation = (unsigned char) (1);
1c004708:	4785                	li	a5,1
{
1c00470a:	12112623          	sw	ra,300(sp)
1c00470e:	12812423          	sw	s0,296(sp)
1c004712:	12912223          	sw	s1,292(sp)
1c004716:	13212023          	sw	s2,288(sp)
1c00471a:	11312e23          	sw	s3,284(sp)
1c00471e:	11412c23          	sw	s4,280(sp)
1c004722:	11512a23          	sw	s5,276(sp)
1c004726:	11712623          	sw	s7,268(sp)
1c00472a:	11812423          	sw	s8,264(sp)
1c00472e:	11912223          	sw	s9,260(sp)
1c004732:	11a12023          	sw	s10,256(sp)
1c004736:	dfee                	sw	s11,252(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c004738:	137d                	addi	t1,t1,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c00473a:	ce3a                	sw	a4,28(sp)
	KerArg0->W = (unsigned short int) (20);
1c00473c:	d07e                	sw	t6,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c00473e:	03c11223          	sh	t3,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c004742:	d416                	sw	t0,40(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c004744:	cbaa                	sw	a0,212(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004746:	d1ba                	sw	a4,224(sp)
	KerArg1->Norm = (unsigned char) (14);
1c004748:	0fe10423          	sb	t5,232(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c00474c:	0dc11c23          	sh	t3,216(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c004750:	0ef105a3          	sb	a5,235(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+32800);
1c004754:	d63a                	sw	a4,44(sp)
	KerArg2->W = (unsigned short int) (20);
1c004756:	d87e                	sw	t6,48(sp)
	KerArg2->Norm = (unsigned char) (14);
1c004758:	03e10c23          	sb	t5,56(sp)
	KerArg2->InFeatures = (unsigned short int) (16);
1c00475c:	03c11d23          	sh	t3,58(sp)
	KerArg2->LB = (int) (0);
1c004760:	de02                	sw	zero,60(sp)
	KerArg2->UB = (int) (32767);
1c004762:	c09a                	sw	t1,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004764:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004768:	002047b7          	lui	a5,0x204
1c00476c:	4007a303          	lw	t1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004770:	00072737          	lui	a4,0x72
1c004774:	b8070713          	addi	a4,a4,-1152 # 71b80 <__L1Cl+0x61b80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004778:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00477c:	c1574733          	p.bset	a4,a4,0,21
1c004780:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004784:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004788:	4732                	lw	a4,12(sp)
1c00478a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00478e:	03200737          	lui	a4,0x3200
1c004792:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c004796:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00479a:	c49a                	sw	t1,72(sp)
        copy->length = 0;
1c00479c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c00479e:	30051073          	csrw	mstatus,a0
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 7040, 800, 440, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15360), 32, 0, &DmaR_Evt2);
1c0047a2:	000b2503          	lw	a0,0(s6)
1c0047a6:	9576                	add	a0,a0,t4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047a8:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0047ac:	4007a303          	lw	t1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0047b0:	00030737          	lui	a4,0x30
1c0047b4:	c0574733          	p.bset	a4,a4,0,5
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0047b8:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0047bc:	c1574733          	p.bset	a4,a4,0,21
1c0047c0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0047c4:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0047c8:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0047cc:	d49a                	sw	t1,104(sp)
        copy->length = 0;
1c0047ce:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c0047d0:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0047d4:	5766                	lw	a4,120(sp)
1c0047d6:	36070463          	beqz	a4,1c004b3e <S27_Conv2d_16x16x3x3_Relu+0x480>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0047da:	460a                	lw	a2,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0047dc:	02000713          	li	a4,32
1c0047e0:	ca09                	beqz	a2,1c0047f2 <S27_Conv2d_16x16x3x3_Relu+0x134>
1c0047e2:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0047e6:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0047ea:	00e7a223          	sw	a4,4(a5)
1c0047ee:	460a                	lw	a2,128(sp)
1c0047f0:	fa6d                	bnez	a2,1c0047e2 <S27_Conv2d_16x16x3x3_Relu+0x124>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15392), 4608, 0, &DmaR_Evt3);
1c0047f2:	000b2603          	lw	a2,0(s6)
1c0047f6:	6791                	lui	a5,0x4
1c0047f8:	c2078793          	addi	a5,a5,-992 # 3c20 <__rt_stack_size+0x3420>
1c0047fc:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0047fe:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004802:	002047b7          	lui	a5,0x204
1c004806:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00480a:	00031737          	lui	a4,0x31
1c00480e:	20070713          	addi	a4,a4,512 # 31200 <__L1Cl+0x21200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004812:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004816:	c1574733          	p.bset	a4,a4,0,21
1c00481a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00481e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004822:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004826:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c004828:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c00482a:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00482e:	476a                	lw	a4,152(sp)
1c004830:	2a070d63          	beqz	a4,1c004aea <S27_Conv2d_16x16x3x3_Relu+0x42c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004834:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004836:	02000713          	li	a4,32
1c00483a:	ca09                	beqz	a2,1c00484c <S27_Conv2d_16x16x3x3_Relu+0x18e>
1c00483c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004840:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004844:	00e7a223          	sw	a4,4(a5)
1c004848:	560a                	lw	a2,160(sp)
1c00484a:	fa6d                	bnez	a2,1c00483c <S27_Conv2d_16x16x3x3_Relu+0x17e>
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c00484c:	6789                	lui	a5,0x2
1c00484e:	90078413          	addi	s0,a5,-1792 # 1900 <__rt_stack_size+0x1100>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004852:	00204db7          	lui	s11,0x204
1c004856:	32068793          	addi	a5,a3,800
1c00485a:	1c00da37          	lui	s4,0x1c00d
1c00485e:	8bb6                	mv	s7,a3
1c004860:	c43e                	sw	a5,8(sp)
{
1c004862:	c202                	sw	zero,4(sp)
1c004864:	4481                	li	s1,0
1c004866:	4c01                	li	s8,0
1c004868:	01c10a93          	addi	s5,sp,28
1c00486c:	706a0a13          	addi	s4,s4,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c004870:	0c810d13          	addi	s10,sp,200
1c004874:	02c10913          	addi	s2,sp,44
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004878:	200d8c93          	addi	s9,s11,512 # 204200 <__L2+0x184200>
1c00487c:	001c4993          	xori	s3,s8,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004880:	0ff00713          	li	a4,255
1c004884:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004888:	00eca023          	sw	a4,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00488c:	00eca623          	sw	a4,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004890:	1c00c737          	lui	a4,0x1c00c
1c004894:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c004898:	08eda023          	sw	a4,128(s11)
1c00489c:	095da023          	sw	s5,128(s11)
1c0048a0:	8556                	mv	a0,s5
1c0048a2:	364070ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048a6:	01cce703          	p.elw	a4,28(s9)
				if (!(T0Ind_Last)) {
1c0048aa:	341c2c63          	p.beqimm	s8,1,1c004c02 <S27_Conv2d_16x16x3x3_Relu+0x544>
					_N_In = _N_In + (400-(40*(T0Ind==0))); _LN_In = ((1)?440:480); _SN_In = (16*_LN_In); 
1c0048ae:	6789                	lui	a5,0x2
1c0048b0:	16848493          	addi	s1,s1,360
1c0048b4:	b8078f93          	addi	t6,a5,-1152 # 1b80 <__rt_stack_size+0x1380>
  if (copy->length == 0)
1c0048b8:	4766                	lw	a4,88(sp)
1c0048ba:	14070163          	beqz	a4,1c0049fc <S27_Conv2d_16x16x3x3_Relu+0x33e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0048be:	5506                	lw	a0,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0048c0:	02000713          	li	a4,32
1c0048c4:	c909                	beqz	a0,1c0048d6 <S27_Conv2d_16x16x3x3_Relu+0x218>
1c0048c6:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0048ca:	03cde503          	p.elw	a0,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0048ce:	00eda223          	sw	a4,4(s11)
1c0048d2:	5506                	lw	a0,96(sp)
1c0048d4:	f96d                	bnez	a0,1c0048c6 <S27_Conv2d_16x16x3x3_Relu+0x208>
1c0048d6:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c0048da:	160f9a63          	bnez	t6,1c004a4e <S27_Conv2d_16x16x3x3_Relu+0x390>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0048de:	004c1713          	slli	a4,s8,0x4
1c0048e2:	41870733          	sub	a4,a4,s8
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0048e6:	4505                	li	a0,1
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0048e8:	0726                	slli	a4,a4,0x9
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0048ea:	e0a51557          	pv.packlo.b	a0,a0,a0
1c0048ee:	d93c1557          	pv.packhi.b	a0,s8,s3
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0048f2:	9eba                	add	t4,t4,a4
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c0048f4:	025067d7          	pv.add.sci.h	a5,zero,11
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0048f8:	0ff00993          	li	s3,255
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0048fc:	c5f6                	sw	t4,200(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0048fe:	d3aa                	sw	a0,228(sp)
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c004900:	c9be                	sw	a5,208(sp)
1c004902:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004906:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00490a:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00490e:	094da023          	sw	s4,128(s11)
1c004912:	09ada023          	sw	s10,128(s11)
1c004916:	856a                	mv	a0,s10
1c004918:	5ef080ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00491c:	01cce503          	p.elw	a0,28(s9)
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c004920:	6715                	lui	a4,0x5
1c004922:	e2070713          	addi	a4,a4,-480 # 4e20 <__rt_stack_size+0x4620>
1c004926:	428c0733          	p.mac	a4,s8,s0
1c00492a:	000b2583          	lw	a1,0(s6)
1c00492e:	8c3a                	mv	s8,a4
1c004930:	95ba                	add	a1,a1,a4
1c004932:	da2e                	sw	a1,52(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004934:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004938:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00493c:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004940:	1c00c7b7          	lui	a5,0x1c00c
1c004944:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c004948:	08fda023          	sw	a5,128(s11)
1c00494c:	092da023          	sw	s2,128(s11)
1c004950:	854a                	mv	a0,s2
1c004952:	4ee070ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004956:	01cce703          	p.elw	a4,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c00495a:	4712                	lw	a4,4(sp)
1c00495c:	12071f63          	bnez	a4,1c004a9a <S27_Conv2d_16x16x3x3_Relu+0x3dc>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+20000+6400*((T0Ind_Total)%2)),
1c004960:	000b2703          	lw	a4,0(s6)
1c004964:	9762                	add	a4,a4,s8
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004966:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00496a:	400da503          	lw	a0,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00496e:	002e27b7          	lui	a5,0x2e2
1c004972:	90078793          	addi	a5,a5,-1792 # 2e1900 <__L2+0x261900>
1c004976:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00497a:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00497e:	417da023          	sw	s7,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c004982:	032007b7          	lui	a5,0x3200
1c004986:	19078713          	addi	a4,a5,400 # 3200190 <__L2+0x3180190>
1c00498a:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c00498e:	d52a                	sw	a0,168(sp)
        copy->length = 0;
1c004990:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c004992:	30059073          	csrw	mstatus,a1
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c004996:	4722                	lw	a4,8(sp)
1c004998:	190b8b93          	addi	s7,s7,400
1c00499c:	c222                	sw	s0,4(sp)
1c00499e:	4c05                	li	s8,1
1c0049a0:	ed771ee3          	bne	a4,s7,1c00487c <S27_Conv2d_16x16x3x3_Relu+0x1be>
  if (copy->length == 0)
1c0049a4:	576a                	lw	a4,184(sp)
1c0049a6:	20070463          	beqz	a4,1c004bae <S27_Conv2d_16x16x3x3_Relu+0x4f0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0049aa:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0049ac:	02000713          	li	a4,32
1c0049b0:	002047b7          	lui	a5,0x204
1c0049b4:	ca89                	beqz	a3,1c0049c6 <S27_Conv2d_16x16x3x3_Relu+0x308>
1c0049b6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0049ba:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0049be:	00e7a223          	sw	a4,4(a5)
1c0049c2:	468e                	lw	a3,192(sp)
1c0049c4:	faed                	bnez	a3,1c0049b6 <S27_Conv2d_16x16x3x3_Relu+0x2f8>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0049c6:	12c12083          	lw	ra,300(sp)
1c0049ca:	12812403          	lw	s0,296(sp)
1c0049ce:	12412483          	lw	s1,292(sp)
1c0049d2:	12012903          	lw	s2,288(sp)
1c0049d6:	11c12983          	lw	s3,284(sp)
1c0049da:	11812a03          	lw	s4,280(sp)
1c0049de:	11412a83          	lw	s5,276(sp)
1c0049e2:	11012b03          	lw	s6,272(sp)
1c0049e6:	10c12b83          	lw	s7,268(sp)
1c0049ea:	10812c03          	lw	s8,264(sp)
1c0049ee:	10412c83          	lw	s9,260(sp)
1c0049f2:	10012d03          	lw	s10,256(sp)
1c0049f6:	5dfe                	lw	s11,252(sp)
1c0049f8:	6155                	addi	sp,sp,304
1c0049fa:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0049fc:	30047ef3          	csrrci	t4,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004a00:	404da703          	lw	a4,1028(s11)
1c004a04:	4526                	lw	a0,72(sp)
1c004a06:	40a75733          	sra	a4,a4,a0
1c004a0a:	fc173733          	p.bclr	a4,a4,30,1
1c004a0e:	c70d                	beqz	a4,1c004a38 <S27_Conv2d_16x16x3x3_Relu+0x37a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004a10:	10000f13          	li	t5,256
  __builtin_pulp_spr_write(reg, val);
1c004a14:	300e9073          	csrw	mstatus,t4
1c004a18:	01eda423          	sw	t5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004a1c:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004a20:	01eda223          	sw	t5,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a24:	30047ef3          	csrrci	t4,mstatus,8
1c004a28:	404da703          	lw	a4,1028(s11)
1c004a2c:	4526                	lw	a0,72(sp)
1c004a2e:	40a75733          	sra	a4,a4,a0
1c004a32:	fc173733          	p.bclr	a4,a4,30,1
1c004a36:	ff79                	bnez	a4,1c004a14 <S27_Conv2d_16x16x3x3_Relu+0x356>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004a38:	4705                	li	a4,1
1c004a3a:	00a71533          	sll	a0,a4,a0
1c004a3e:	40ada223          	sw	a0,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c004a42:	300e9073          	csrw	mstatus,t4
1c004a46:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c004a4a:	e80f8ae3          	beqz	t6,1c0048de <S27_Conv2d_16x16x3x3_Relu+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a4e:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004a52:	400daf03          	lw	t5,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c004a56:	c70fcfb3          	p.bset	t6,t6,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004a5a:	c15fcfb3          	p.bset	t6,t6,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004a5e:	41fda023          	sw	t6,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7680*((D0Ind_Total+1)%2)),
1c004a62:	001c4f93          	xori	t6,s8,1
1c004a66:	004f9713          	slli	a4,t6,0x4
1c004a6a:	41f70733          	sub	a4,a4,t6
1c004a6e:	0726                	slli	a4,a4,0x9
1c004a70:	9eba                	add	t4,t4,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004a72:	41dda023          	sw	t4,1024(s11)
1c004a76:	47b2                	lw	a5,12(sp)
1c004a78:	00978733          	add	a4,a5,s1
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004a7c:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c004a80:	03200737          	lui	a4,0x3200
1c004a84:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c004a88:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c004a8c:	c4fa                	sw	t5,72(sp)
        copy->length = 0;
1c004a8e:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c004a90:	30051073          	csrw	mstatus,a0
1c004a94:	000b2e83          	lw	t4,0(s6)
1c004a98:	b599                	j	1c0048de <S27_Conv2d_16x16x3x3_Relu+0x220>
  if (copy->length == 0)
1c004a9a:	576a                	lw	a4,184(sp)
1c004a9c:	eb7d                	bnez	a4,1c004b92 <S27_Conv2d_16x16x3x3_Relu+0x4d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004a9e:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004aa2:	404da703          	lw	a4,1028(s11)
1c004aa6:	55aa                	lw	a1,168(sp)
1c004aa8:	40b75733          	sra	a4,a4,a1
1c004aac:	fc173733          	p.bclr	a4,a4,30,1
1c004ab0:	c70d                	beqz	a4,1c004ada <S27_Conv2d_16x16x3x3_Relu+0x41c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004ab2:	10000e93          	li	t4,256
  __builtin_pulp_spr_write(reg, val);
1c004ab6:	30051073          	csrw	mstatus,a0
1c004aba:	01dda423          	sw	t4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004abe:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004ac2:	01dda223          	sw	t4,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004ac6:	30047573          	csrrci	a0,mstatus,8
1c004aca:	404da703          	lw	a4,1028(s11)
1c004ace:	55aa                	lw	a1,168(sp)
1c004ad0:	40b75733          	sra	a4,a4,a1
1c004ad4:	fc173733          	p.bclr	a4,a4,30,1
1c004ad8:	ff79                	bnez	a4,1c004ab6 <S27_Conv2d_16x16x3x3_Relu+0x3f8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004ada:	4705                	li	a4,1
1c004adc:	00b715b3          	sll	a1,a4,a1
1c004ae0:	40bda223          	sw	a1,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c004ae4:	30051073          	csrw	mstatus,a0
1c004ae8:	bda5                	j	1c004960 <S27_Conv2d_16x16x3x3_Relu+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004aea:	300475f3          	csrrci	a1,mstatus,8
1c004aee:	4047a783          	lw	a5,1028(a5)
1c004af2:	462a                	lw	a2,136(sp)
1c004af4:	40c7d7b3          	sra	a5,a5,a2
1c004af8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004afc:	c79d                	beqz	a5,1c004b2a <S27_Conv2d_16x16x3x3_Relu+0x46c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004afe:	10000513          	li	a0,256
1c004b02:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004b06:	30059073          	csrw	mstatus,a1
1c004b0a:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b0e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b12:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b16:	300475f3          	csrrci	a1,mstatus,8
1c004b1a:	40472783          	lw	a5,1028(a4)
1c004b1e:	462a                	lw	a2,136(sp)
1c004b20:	40c7d7b3          	sra	a5,a5,a2
1c004b24:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b28:	fff9                	bnez	a5,1c004b06 <S27_Conv2d_16x16x3x3_Relu+0x448>
1c004b2a:	4785                	li	a5,1
1c004b2c:	00c79633          	sll	a2,a5,a2
1c004b30:	002047b7          	lui	a5,0x204
1c004b34:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004b38:	30059073          	csrw	mstatus,a1
1c004b3c:	bb01                	j	1c00484c <S27_Conv2d_16x16x3x3_Relu+0x18e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b3e:	30047573          	csrrci	a0,mstatus,8
1c004b42:	4047a783          	lw	a5,1028(a5)
1c004b46:	5626                	lw	a2,104(sp)
1c004b48:	40c7d7b3          	sra	a5,a5,a2
1c004b4c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b50:	c79d                	beqz	a5,1c004b7e <S27_Conv2d_16x16x3x3_Relu+0x4c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b52:	10000893          	li	a7,256
1c004b56:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004b5a:	30051073          	csrw	mstatus,a0
1c004b5e:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004b62:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004b66:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004b6a:	30047573          	csrrci	a0,mstatus,8
1c004b6e:	40472783          	lw	a5,1028(a4)
1c004b72:	5626                	lw	a2,104(sp)
1c004b74:	40c7d7b3          	sra	a5,a5,a2
1c004b78:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004b7c:	fff9                	bnez	a5,1c004b5a <S27_Conv2d_16x16x3x3_Relu+0x49c>
1c004b7e:	4785                	li	a5,1
1c004b80:	00c79633          	sll	a2,a5,a2
1c004b84:	002047b7          	lui	a5,0x204
1c004b88:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004b8c:	30051073          	csrw	mstatus,a0
1c004b90:	b18d                	j	1c0047f2 <S27_Conv2d_16x16x3x3_Relu+0x134>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004b92:	458e                	lw	a1,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004b94:	02000713          	li	a4,32
1c004b98:	dc0584e3          	beqz	a1,1c004960 <S27_Conv2d_16x16x3x3_Relu+0x2a2>
1c004b9c:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004ba0:	03cde583          	p.elw	a1,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004ba4:	00eda223          	sw	a4,4(s11)
1c004ba8:	458e                	lw	a1,192(sp)
1c004baa:	f9ed                	bnez	a1,1c004b9c <S27_Conv2d_16x16x3x3_Relu+0x4de>
1c004bac:	bb55                	j	1c004960 <S27_Conv2d_16x16x3x3_Relu+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004bae:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004bb2:	404da783          	lw	a5,1028(s11)
1c004bb6:	56aa                	lw	a3,168(sp)
1c004bb8:	40d7d7b3          	sra	a5,a5,a3
1c004bbc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004bc0:	c79d                	beqz	a5,1c004bee <S27_Conv2d_16x16x3x3_Relu+0x530>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004bc2:	10000593          	li	a1,256
1c004bc6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004bca:	30061073          	csrw	mstatus,a2
1c004bce:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004bd2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004bd6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004bda:	30047673          	csrrci	a2,mstatus,8
1c004bde:	40472783          	lw	a5,1028(a4)
1c004be2:	56aa                	lw	a3,168(sp)
1c004be4:	40d7d7b3          	sra	a5,a5,a3
1c004be8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004bec:	fff9                	bnez	a5,1c004bca <S27_Conv2d_16x16x3x3_Relu+0x50c>
1c004bee:	4785                	li	a5,1
1c004bf0:	00d796b3          	sll	a3,a5,a3
1c004bf4:	002047b7          	lui	a5,0x204
1c004bf8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004bfc:	30061073          	csrw	mstatus,a2
1c004c00:	b3d9                	j	1c0049c6 <S27_Conv2d_16x16x3x3_Relu+0x308>
				_SN_In = 0;
1c004c02:	4f81                	li	t6,0
1c004c04:	b955                	j	1c0048b8 <S27_Conv2d_16x16x3x3_Relu+0x1fa>

1c004c06 <S28_MatAdd_16x20x20>:
void S28_MatAdd_16x20x20(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c004c06:	7135                	addi	sp,sp,-160
1c004c08:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 12800, 12800]][Tile0, 1:[20x20], 2]
		Tile0: [0, 12800, 12800], Tile1: [0, 12800, 12800], Tile2; [0, 12800, 12800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c004c0a:	10000937          	lui	s2,0x10000
1c004c0e:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c004c12:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+25600);
1c004c16:	6799                	lui	a5,0x6
1c004c18:	40078793          	addi	a5,a5,1024 # 6400 <__rt_stack_size+0x5c00>
1c004c1c:	97b6                	add	a5,a5,a3
1c004c1e:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (20);
1c004c20:	00a067d7          	pv.add.sci.h	a5,zero,20
1c004c24:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (20);
	KerArg0->N = (unsigned short int) (16);
1c004c26:	47c1                	li	a5,16
1c004c28:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c004c2c:	77e1                	lui	a5,0xffff8
1c004c2e:	dabe                	sw	a5,116(sp)
1c004c30:	67a1                	lui	a5,0x8
1c004c32:	17fd                	addi	a5,a5,-1
1c004c34:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c004c36:	670d                	lui	a4,0x3
	KerArg0->UB = (int) (32767);
1c004c38:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c004c3a:	20070713          	addi	a4,a4,512 # 3200 <__rt_stack_size+0x2a00>
	KerArg0->UB = (int) (32767);
1c004c3e:	a0c78793          	addi	a5,a5,-1524 # a0c <__rt_stack_size+0x20c>
{
1c004c42:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c004c44:	00e68833          	add	a6,a3,a4
	KerArg0->UB = (int) (32767);
1c004c48:	06f11e23          	sh	a5,124(sp)
{
1c004c4c:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (12);
	KerArg0->In2_Q = (unsigned char) (10);
1c004c4e:	47a9                	li	a5,10
{
1c004c50:	cf06                	sw	ra,156(sp)
1c004c52:	cd22                	sw	s0,152(sp)
1c004c54:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c004c56:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c004c58:	d2c2                	sw	a6,100(sp)
	KerArg0->In2_Q = (unsigned char) (10);
1c004c5a:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004c5e:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004c62:	002047b7          	lui	a5,0x204
1c004c66:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004c6a:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004c6e:	01176733          	or	a4,a4,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004c72:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004c76:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004c7a:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c004c7e:	c042                	sw	a6,0(sp)
        copy->length = 0;
1c004c80:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c004c82:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c004c86:	4742                	lw	a4,16(sp)
1c004c88:	1a070d63          	beqz	a4,1c004e42 <S28_MatAdd_16x20x20+0x23c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004c8c:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004c8e:	02000713          	li	a4,32
1c004c92:	ca89                	beqz	a3,1c004ca4 <S28_MatAdd_16x20x20+0x9e>
1c004c94:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004c98:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004c9c:	00e7a223          	sw	a4,4(a5)
1c004ca0:	46e2                	lw	a3,24(sp)
1c004ca2:	faed                	bnez	a3,1c004c94 <S28_MatAdd_16x20x20+0x8e>
	KerArg0->Out_Q = (unsigned char) (10);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 12800, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 12800, 0, &DmaR_Evt2);
1c004ca4:	00092683          	lw	a3,0(s2)
1c004ca8:	670d                	lui	a4,0x3
1c004caa:	20070713          	addi	a4,a4,512 # 3200 <__rt_stack_size+0x2a00>
1c004cae:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004cb0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004cb4:	002047b7          	lui	a5,0x204
1c004cb8:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004cbc:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c004cc0:	01076733          	or	a4,a4,a6
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004cc4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004cc8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004ccc:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004cd0:	d02a                	sw	a0,32(sp)
        copy->length = 0;
1c004cd2:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c004cd4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c004cd8:	5742                	lw	a4,48(sp)
1c004cda:	10070a63          	beqz	a4,1c004dee <S28_MatAdd_16x20x20+0x1e8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004cde:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004ce0:	02000713          	li	a4,32
1c004ce4:	ca89                	beqz	a3,1c004cf6 <S28_MatAdd_16x20x20+0xf0>
1c004ce6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004cea:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004cee:	00e7a223          	sw	a4,4(a5)
1c004cf2:	56e2                	lw	a3,56(sp)
1c004cf4:	faed                	bnez	a3,1c004ce6 <S28_MatAdd_16x20x20+0xe0>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c004cf6:	0ff00793          	li	a5,255
1c004cfa:	00204437          	lui	s0,0x204
1c004cfe:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c004d02:	20040993          	addi	s3,s0,512
1c004d06:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c004d0a:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c004d0e:	1c0107b7          	lui	a5,0x1c010
1c004d12:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c004d16:	08f42023          	sw	a5,128(s0)
1c004d1a:	1088                	addi	a0,sp,96
1c004d1c:	08a42023          	sw	a0,128(s0)
1c004d20:	0d20b0ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004d24:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+25600), 12800, 1, &DmaW_Evt1);
1c004d28:	6799                	lui	a5,0x6
1c004d2a:	00092703          	lw	a4,0(s2)
1c004d2e:	40078793          	addi	a5,a5,1024 # 6400 <__rt_stack_size+0x5c00>
1c004d32:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d34:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004d38:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004d3c:	000237b7          	lui	a5,0x23
1c004d40:	20078793          	addi	a5,a5,512 # 23200 <__L1Cl+0x13200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004d44:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004d48:	c157c7b3          	p.bset	a5,a5,0,21
1c004d4c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004d50:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004d54:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c004d58:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c004d5a:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c004d5c:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c004d60:	47c6                	lw	a5,80(sp)
1c004d62:	c795                	beqz	a5,1c004d8e <S28_MatAdd_16x20x20+0x188>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004d64:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004d66:	02000713          	li	a4,32
1c004d6a:	002047b7          	lui	a5,0x204
1c004d6e:	ca89                	beqz	a3,1c004d80 <S28_MatAdd_16x20x20+0x17a>
1c004d70:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004d74:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004d78:	00e7a223          	sw	a4,4(a5)
1c004d7c:	46e6                	lw	a3,88(sp)
1c004d7e:	faed                	bnez	a3,1c004d70 <S28_MatAdd_16x20x20+0x16a>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c004d80:	40fa                	lw	ra,156(sp)
1c004d82:	446a                	lw	s0,152(sp)
1c004d84:	44da                	lw	s1,148(sp)
1c004d86:	494a                	lw	s2,144(sp)
1c004d88:	49ba                	lw	s3,140(sp)
1c004d8a:	610d                	addi	sp,sp,160
1c004d8c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004d8e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c004d92:	40442403          	lw	s0,1028(s0)
1c004d96:	4686                	lw	a3,64(sp)
1c004d98:	40d45433          	sra	s0,s0,a3
1c004d9c:	fc143433          	p.bclr	s0,s0,30,1
1c004da0:	c41d                	beqz	s0,1c004dce <S28_MatAdd_16x20x20+0x1c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004da2:	10000593          	li	a1,256
1c004da6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004daa:	30061073          	csrw	mstatus,a2
1c004dae:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004db2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004db6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004dba:	30047673          	csrrci	a2,mstatus,8
1c004dbe:	40472783          	lw	a5,1028(a4)
1c004dc2:	4686                	lw	a3,64(sp)
1c004dc4:	40d7d7b3          	sra	a5,a5,a3
1c004dc8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004dcc:	fff9                	bnez	a5,1c004daa <S28_MatAdd_16x20x20+0x1a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c004dce:	4785                	li	a5,1
1c004dd0:	00d796b3          	sll	a3,a5,a3
1c004dd4:	002047b7          	lui	a5,0x204
1c004dd8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004ddc:	30061073          	csrw	mstatus,a2
1c004de0:	40fa                	lw	ra,156(sp)
1c004de2:	446a                	lw	s0,152(sp)
1c004de4:	44da                	lw	s1,148(sp)
1c004de6:	494a                	lw	s2,144(sp)
1c004de8:	49ba                	lw	s3,140(sp)
1c004dea:	610d                	addi	sp,sp,160
1c004dec:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004dee:	30047673          	csrrci	a2,mstatus,8
1c004df2:	4047a783          	lw	a5,1028(a5)
1c004df6:	5682                	lw	a3,32(sp)
1c004df8:	40d7d7b3          	sra	a5,a5,a3
1c004dfc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004e00:	c79d                	beqz	a5,1c004e2e <S28_MatAdd_16x20x20+0x228>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004e02:	10000593          	li	a1,256
1c004e06:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004e0a:	30061073          	csrw	mstatus,a2
1c004e0e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004e12:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004e16:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004e1a:	30047673          	csrrci	a2,mstatus,8
1c004e1e:	40472783          	lw	a5,1028(a4)
1c004e22:	5682                	lw	a3,32(sp)
1c004e24:	40d7d7b3          	sra	a5,a5,a3
1c004e28:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004e2c:	fff9                	bnez	a5,1c004e0a <S28_MatAdd_16x20x20+0x204>
1c004e2e:	4785                	li	a5,1
1c004e30:	00d796b3          	sll	a3,a5,a3
1c004e34:	002047b7          	lui	a5,0x204
1c004e38:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004e3c:	30061073          	csrw	mstatus,a2
1c004e40:	bd5d                	j	1c004cf6 <S28_MatAdd_16x20x20+0xf0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004e42:	30047673          	csrrci	a2,mstatus,8
1c004e46:	4047a783          	lw	a5,1028(a5)
1c004e4a:	4682                	lw	a3,0(sp)
1c004e4c:	40d7d7b3          	sra	a5,a5,a3
1c004e50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004e54:	c79d                	beqz	a5,1c004e82 <S28_MatAdd_16x20x20+0x27c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004e56:	10000513          	li	a0,256
1c004e5a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c004e5e:	30061073          	csrw	mstatus,a2
1c004e62:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004e66:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004e6a:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004e6e:	30047673          	csrrci	a2,mstatus,8
1c004e72:	40472783          	lw	a5,1028(a4)
1c004e76:	4682                	lw	a3,0(sp)
1c004e78:	40d7d7b3          	sra	a5,a5,a3
1c004e7c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c004e80:	fff9                	bnez	a5,1c004e5e <S28_MatAdd_16x20x20+0x258>
1c004e82:	4785                	li	a5,1
1c004e84:	00d796b3          	sll	a3,a5,a3
1c004e88:	002047b7          	lui	a5,0x204
1c004e8c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c004e90:	30061073          	csrw	mstatus,a2
1c004e94:	bd01                	j	1c004ca4 <S28_MatAdd_16x20x20+0x9e>

1c004e96 <S31_Conv2d_16x16x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c004e96:	7169                	addi	sp,sp,-304
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 25600, 25600]][Tile0, 2:[20x10, 20x10], 4]
		Tile0: [0, 12800, 800], Tile1: [0, 12800, 800], Tile2; [0, 12800, 800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004e98:	10000837          	lui	a6,0x10000
{
1c004e9c:	11612823          	sw	s6,272(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004ea0:	01c80b13          	addi	s6,a6,28 # 1000001c <resnet_L1_Memory>
1c004ea4:	000b2883          	lw	a7,0(s6)
	KerArg0->W = (unsigned short int) (20);
1c004ea8:	1c0177b7          	lui	a5,0x1c017
1c004eac:	1cc7af83          	lw	t6,460(a5) # 1c0171cc <__clz_tab+0x5b4>
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c004eb0:	6791                	lui	a5,0x4
1c004eb2:	c0078e93          	addi	t4,a5,-1024 # 3c00 <__rt_stack_size+0x3400>
{
1c004eb6:	c62a                	sw	a0,12(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004eb8:	6321                	lui	t1,0x8
	KerArg0->NormBias = (signed char) (11);
1c004eba:	452d                	li	a0,11
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c004ebc:	c2078793          	addi	a5,a5,-992
1c004ec0:	97c6                	add	a5,a5,a7
	KerArg0->NormBias = (signed char) (11);
1c004ec2:	02a10323          	sb	a0,38(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004ec6:	02030713          	addi	a4,t1,32 # 8020 <__rt_stack_size+0x7820>
	KerArg1->W = (unsigned short int) (20);
1c004eca:	00a06557          	pv.add.sci.h	a0,zero,20
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004ece:	9746                	add	a4,a4,a7
	KerArg0->OutFeatures = (unsigned short int) (16);
1c004ed0:	4e41                	li	t3,16
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
	KerArg1->Norm = (unsigned char) (13);
1c004ed2:	4f35                	li	t5,13
	KerArg1->W = (unsigned short int) (20);
1c004ed4:	c7aa                	sw	a0,204(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c004ed6:	cfbe                	sw	a5,220(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c004ed8:	01d882b3          	add	t0,a7,t4
	KerArg1->InFeatures = (unsigned short int) (16);
1c004edc:	00806557          	pv.add.sci.h	a0,zero,16
	KerArg1->TotalInFeatures = (short int) (16);
	KerArg1->Orientation = (unsigned char) (1);
1c004ee0:	4785                	li	a5,1
{
1c004ee2:	12112623          	sw	ra,300(sp)
1c004ee6:	12812423          	sw	s0,296(sp)
1c004eea:	12912223          	sw	s1,292(sp)
1c004eee:	13212023          	sw	s2,288(sp)
1c004ef2:	11312e23          	sw	s3,284(sp)
1c004ef6:	11412c23          	sw	s4,280(sp)
1c004efa:	11512a23          	sw	s5,276(sp)
1c004efe:	11712623          	sw	s7,268(sp)
1c004f02:	11812423          	sw	s8,264(sp)
1c004f06:	11912223          	sw	s9,260(sp)
1c004f0a:	11a12023          	sw	s10,256(sp)
1c004f0e:	dfee                	sw	s11,252(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Norm = (unsigned char) (13);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c004f10:	137d                	addi	t1,t1,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004f12:	ce3a                	sw	a4,28(sp)
	KerArg0->W = (unsigned short int) (20);
1c004f14:	d07e                	sw	t6,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c004f16:	03c11223          	sh	t3,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c004f1a:	d416                	sw	t0,40(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c004f1c:	cbaa                	sw	a0,212(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c004f1e:	d1ba                	sw	a4,224(sp)
	KerArg1->Norm = (unsigned char) (13);
1c004f20:	0fe10423          	sb	t5,232(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c004f24:	0dc11c23          	sh	t3,216(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c004f28:	0ef105a3          	sb	a5,235(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+32800);
1c004f2c:	d63a                	sw	a4,44(sp)
	KerArg2->W = (unsigned short int) (20);
1c004f2e:	d87e                	sw	t6,48(sp)
	KerArg2->Norm = (unsigned char) (13);
1c004f30:	03e10c23          	sb	t5,56(sp)
	KerArg2->InFeatures = (unsigned short int) (16);
1c004f34:	03c11d23          	sh	t3,58(sp)
	KerArg2->LB = (int) (0);
1c004f38:	de02                	sw	zero,60(sp)
	KerArg2->UB = (int) (32767);
1c004f3a:	c09a                	sw	t1,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f3c:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004f40:	002047b7          	lui	a5,0x204
1c004f44:	4007a303          	lw	t1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004f48:	00072737          	lui	a4,0x72
1c004f4c:	b8070713          	addi	a4,a4,-1152 # 71b80 <__L1Cl+0x61b80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004f50:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004f54:	c1574733          	p.bset	a4,a4,0,21
1c004f58:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004f5c:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004f60:	4732                	lw	a4,12(sp)
1c004f62:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c004f66:	03200737          	lui	a4,0x3200
1c004f6a:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c004f6e:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c004f72:	c49a                	sw	t1,72(sp)
        copy->length = 0;
1c004f74:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c004f76:	30051073          	csrw	mstatus,a0
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 7040, 800, 440, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15360), 32, 0, &DmaR_Evt2);
1c004f7a:	000b2503          	lw	a0,0(s6)
1c004f7e:	9576                	add	a0,a0,t4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004f80:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004f84:	4007a303          	lw	t1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004f88:	00030737          	lui	a4,0x30
1c004f8c:	c0574733          	p.bset	a4,a4,0,5
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004f90:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004f94:	c1574733          	p.bset	a4,a4,0,21
1c004f98:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004f9c:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004fa0:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c004fa4:	d49a                	sw	t1,104(sp)
        copy->length = 0;
1c004fa6:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c004fa8:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c004fac:	5766                	lw	a4,120(sp)
1c004fae:	36070463          	beqz	a4,1c005316 <S31_Conv2d_16x16x3x3_Relu+0x480>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c004fb2:	460a                	lw	a2,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c004fb4:	02000713          	li	a4,32
1c004fb8:	ca09                	beqz	a2,1c004fca <S31_Conv2d_16x16x3x3_Relu+0x134>
1c004fba:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c004fbe:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c004fc2:	00e7a223          	sw	a4,4(a5)
1c004fc6:	460a                	lw	a2,128(sp)
1c004fc8:	fa6d                	bnez	a2,1c004fba <S31_Conv2d_16x16x3x3_Relu+0x124>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15392), 4608, 0, &DmaR_Evt3);
1c004fca:	000b2603          	lw	a2,0(s6)
1c004fce:	6791                	lui	a5,0x4
1c004fd0:	c2078793          	addi	a5,a5,-992 # 3c20 <__rt_stack_size+0x3420>
1c004fd4:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c004fd6:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c004fda:	002047b7          	lui	a5,0x204
1c004fde:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c004fe2:	00031737          	lui	a4,0x31
1c004fe6:	20070713          	addi	a4,a4,512 # 31200 <__L1Cl+0x21200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c004fea:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c004fee:	c1574733          	p.bset	a4,a4,0,21
1c004ff2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c004ff6:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c004ffa:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c004ffe:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c005000:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c005002:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c005006:	476a                	lw	a4,152(sp)
1c005008:	2a070d63          	beqz	a4,1c0052c2 <S31_Conv2d_16x16x3x3_Relu+0x42c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00500c:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00500e:	02000713          	li	a4,32
1c005012:	ca09                	beqz	a2,1c005024 <S31_Conv2d_16x16x3x3_Relu+0x18e>
1c005014:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005018:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00501c:	00e7a223          	sw	a4,4(a5)
1c005020:	560a                	lw	a2,160(sp)
1c005022:	fa6d                	bnez	a2,1c005014 <S31_Conv2d_16x16x3x3_Relu+0x17e>
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c005024:	6789                	lui	a5,0x2
1c005026:	90078413          	addi	s0,a5,-1792 # 1900 <__rt_stack_size+0x1100>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00502a:	00204db7          	lui	s11,0x204
1c00502e:	32068793          	addi	a5,a3,800
1c005032:	1c00da37          	lui	s4,0x1c00d
1c005036:	8bb6                	mv	s7,a3
1c005038:	c43e                	sw	a5,8(sp)
{
1c00503a:	c202                	sw	zero,4(sp)
1c00503c:	4481                	li	s1,0
1c00503e:	4c01                	li	s8,0
1c005040:	01c10a93          	addi	s5,sp,28
1c005044:	706a0a13          	addi	s4,s4,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c005048:	0c810d13          	addi	s10,sp,200
1c00504c:	02c10913          	addi	s2,sp,44
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005050:	200d8c93          	addi	s9,s11,512 # 204200 <__L2+0x184200>
1c005054:	001c4993          	xori	s3,s8,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005058:	0ff00713          	li	a4,255
1c00505c:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005060:	00eca023          	sw	a4,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005064:	00eca623          	sw	a4,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005068:	1c00c737          	lui	a4,0x1c00c
1c00506c:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c005070:	08eda023          	sw	a4,128(s11)
1c005074:	095da023          	sw	s5,128(s11)
1c005078:	8556                	mv	a0,s5
1c00507a:	38d060ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00507e:	01cce703          	p.elw	a4,28(s9)
				if (!(T0Ind_Last)) {
1c005082:	341c2c63          	p.beqimm	s8,1,1c0053da <S31_Conv2d_16x16x3x3_Relu+0x544>
					_N_In = _N_In + (400-(40*(T0Ind==0))); _LN_In = ((1)?440:480); _SN_In = (16*_LN_In); 
1c005086:	6789                	lui	a5,0x2
1c005088:	16848493          	addi	s1,s1,360
1c00508c:	b8078f93          	addi	t6,a5,-1152 # 1b80 <__rt_stack_size+0x1380>
  if (copy->length == 0)
1c005090:	4766                	lw	a4,88(sp)
1c005092:	14070163          	beqz	a4,1c0051d4 <S31_Conv2d_16x16x3x3_Relu+0x33e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005096:	5506                	lw	a0,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005098:	02000713          	li	a4,32
1c00509c:	c909                	beqz	a0,1c0050ae <S31_Conv2d_16x16x3x3_Relu+0x218>
1c00509e:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0050a2:	03cde503          	p.elw	a0,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0050a6:	00eda223          	sw	a4,4(s11)
1c0050aa:	5506                	lw	a0,96(sp)
1c0050ac:	f96d                	bnez	a0,1c00509e <S31_Conv2d_16x16x3x3_Relu+0x208>
1c0050ae:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c0050b2:	160f9a63          	bnez	t6,1c005226 <S31_Conv2d_16x16x3x3_Relu+0x390>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0050b6:	004c1713          	slli	a4,s8,0x4
1c0050ba:	41870733          	sub	a4,a4,s8
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0050be:	4505                	li	a0,1
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0050c0:	0726                	slli	a4,a4,0x9
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0050c2:	e0a51557          	pv.packlo.b	a0,a0,a0
1c0050c6:	d93c1557          	pv.packhi.b	a0,s8,s3
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0050ca:	9eba                	add	t4,t4,a4
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c0050cc:	025067d7          	pv.add.sci.h	a5,zero,11
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0050d0:	0ff00993          	li	s3,255
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0050d4:	c5f6                	sw	t4,200(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c0050d6:	d3aa                	sw	a0,228(sp)
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c0050d8:	c9be                	sw	a5,208(sp)
1c0050da:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0050de:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0050e2:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0050e6:	094da023          	sw	s4,128(s11)
1c0050ea:	09ada023          	sw	s10,128(s11)
1c0050ee:	856a                	mv	a0,s10
1c0050f0:	616080ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0050f4:	01cce503          	p.elw	a0,28(s9)
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c0050f8:	6715                	lui	a4,0x5
1c0050fa:	e2070713          	addi	a4,a4,-480 # 4e20 <__rt_stack_size+0x4620>
1c0050fe:	428c0733          	p.mac	a4,s8,s0
1c005102:	000b2583          	lw	a1,0(s6)
1c005106:	8c3a                	mv	s8,a4
1c005108:	95ba                	add	a1,a1,a4
1c00510a:	da2e                	sw	a1,52(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00510c:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005110:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005114:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005118:	1c00c7b7          	lui	a5,0x1c00c
1c00511c:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c005120:	08fda023          	sw	a5,128(s11)
1c005124:	092da023          	sw	s2,128(s11)
1c005128:	854a                	mv	a0,s2
1c00512a:	517060ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00512e:	01cce703          	p.elw	a4,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c005132:	4712                	lw	a4,4(sp)
1c005134:	12071f63          	bnez	a4,1c005272 <S31_Conv2d_16x16x3x3_Relu+0x3dc>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+20000+6400*((T0Ind_Total)%2)),
1c005138:	000b2703          	lw	a4,0(s6)
1c00513c:	9762                	add	a4,a4,s8
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00513e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005142:	400da503          	lw	a0,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005146:	002e27b7          	lui	a5,0x2e2
1c00514a:	90078793          	addi	a5,a5,-1792 # 2e1900 <__L2+0x261900>
1c00514e:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005152:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005156:	417da023          	sw	s7,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00515a:	032007b7          	lui	a5,0x3200
1c00515e:	19078713          	addi	a4,a5,400 # 3200190 <__L2+0x3180190>
1c005162:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c005166:	d52a                	sw	a0,168(sp)
        copy->length = 0;
1c005168:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c00516a:	30059073          	csrw	mstatus,a1
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c00516e:	4722                	lw	a4,8(sp)
1c005170:	190b8b93          	addi	s7,s7,400
1c005174:	c222                	sw	s0,4(sp)
1c005176:	4c05                	li	s8,1
1c005178:	ed771ee3          	bne	a4,s7,1c005054 <S31_Conv2d_16x16x3x3_Relu+0x1be>
  if (copy->length == 0)
1c00517c:	576a                	lw	a4,184(sp)
1c00517e:	20070463          	beqz	a4,1c005386 <S31_Conv2d_16x16x3x3_Relu+0x4f0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005182:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005184:	02000713          	li	a4,32
1c005188:	002047b7          	lui	a5,0x204
1c00518c:	ca89                	beqz	a3,1c00519e <S31_Conv2d_16x16x3x3_Relu+0x308>
1c00518e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005192:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005196:	00e7a223          	sw	a4,4(a5)
1c00519a:	468e                	lw	a3,192(sp)
1c00519c:	faed                	bnez	a3,1c00518e <S31_Conv2d_16x16x3x3_Relu+0x2f8>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00519e:	12c12083          	lw	ra,300(sp)
1c0051a2:	12812403          	lw	s0,296(sp)
1c0051a6:	12412483          	lw	s1,292(sp)
1c0051aa:	12012903          	lw	s2,288(sp)
1c0051ae:	11c12983          	lw	s3,284(sp)
1c0051b2:	11812a03          	lw	s4,280(sp)
1c0051b6:	11412a83          	lw	s5,276(sp)
1c0051ba:	11012b03          	lw	s6,272(sp)
1c0051be:	10c12b83          	lw	s7,268(sp)
1c0051c2:	10812c03          	lw	s8,264(sp)
1c0051c6:	10412c83          	lw	s9,260(sp)
1c0051ca:	10012d03          	lw	s10,256(sp)
1c0051ce:	5dfe                	lw	s11,252(sp)
1c0051d0:	6155                	addi	sp,sp,304
1c0051d2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0051d4:	30047ef3          	csrrci	t4,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0051d8:	404da703          	lw	a4,1028(s11)
1c0051dc:	4526                	lw	a0,72(sp)
1c0051de:	40a75733          	sra	a4,a4,a0
1c0051e2:	fc173733          	p.bclr	a4,a4,30,1
1c0051e6:	c70d                	beqz	a4,1c005210 <S31_Conv2d_16x16x3x3_Relu+0x37a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0051e8:	10000f13          	li	t5,256
  __builtin_pulp_spr_write(reg, val);
1c0051ec:	300e9073          	csrw	mstatus,t4
1c0051f0:	01eda423          	sw	t5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0051f4:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0051f8:	01eda223          	sw	t5,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0051fc:	30047ef3          	csrrci	t4,mstatus,8
1c005200:	404da703          	lw	a4,1028(s11)
1c005204:	4526                	lw	a0,72(sp)
1c005206:	40a75733          	sra	a4,a4,a0
1c00520a:	fc173733          	p.bclr	a4,a4,30,1
1c00520e:	ff79                	bnez	a4,1c0051ec <S31_Conv2d_16x16x3x3_Relu+0x356>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005210:	4705                	li	a4,1
1c005212:	00a71533          	sll	a0,a4,a0
1c005216:	40ada223          	sw	a0,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c00521a:	300e9073          	csrw	mstatus,t4
1c00521e:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c005222:	e80f8ae3          	beqz	t6,1c0050b6 <S31_Conv2d_16x16x3x3_Relu+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005226:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00522a:	400daf03          	lw	t5,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00522e:	c70fcfb3          	p.bset	t6,t6,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c005232:	c15fcfb3          	p.bset	t6,t6,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005236:	41fda023          	sw	t6,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7680*((D0Ind_Total+1)%2)),
1c00523a:	001c4f93          	xori	t6,s8,1
1c00523e:	004f9713          	slli	a4,t6,0x4
1c005242:	41f70733          	sub	a4,a4,t6
1c005246:	0726                	slli	a4,a4,0x9
1c005248:	9eba                	add	t4,t4,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00524a:	41dda023          	sw	t4,1024(s11)
1c00524e:	47b2                	lw	a5,12(sp)
1c005250:	00978733          	add	a4,a5,s1
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005254:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c005258:	03200737          	lui	a4,0x3200
1c00525c:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c005260:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c005264:	c4fa                	sw	t5,72(sp)
        copy->length = 0;
1c005266:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c005268:	30051073          	csrw	mstatus,a0
1c00526c:	000b2e83          	lw	t4,0(s6)
1c005270:	b599                	j	1c0050b6 <S31_Conv2d_16x16x3x3_Relu+0x220>
  if (copy->length == 0)
1c005272:	576a                	lw	a4,184(sp)
1c005274:	eb7d                	bnez	a4,1c00536a <S31_Conv2d_16x16x3x3_Relu+0x4d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005276:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00527a:	404da703          	lw	a4,1028(s11)
1c00527e:	55aa                	lw	a1,168(sp)
1c005280:	40b75733          	sra	a4,a4,a1
1c005284:	fc173733          	p.bclr	a4,a4,30,1
1c005288:	c70d                	beqz	a4,1c0052b2 <S31_Conv2d_16x16x3x3_Relu+0x41c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00528a:	10000e93          	li	t4,256
  __builtin_pulp_spr_write(reg, val);
1c00528e:	30051073          	csrw	mstatus,a0
1c005292:	01dda423          	sw	t4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005296:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00529a:	01dda223          	sw	t4,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00529e:	30047573          	csrrci	a0,mstatus,8
1c0052a2:	404da703          	lw	a4,1028(s11)
1c0052a6:	55aa                	lw	a1,168(sp)
1c0052a8:	40b75733          	sra	a4,a4,a1
1c0052ac:	fc173733          	p.bclr	a4,a4,30,1
1c0052b0:	ff79                	bnez	a4,1c00528e <S31_Conv2d_16x16x3x3_Relu+0x3f8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0052b2:	4705                	li	a4,1
1c0052b4:	00b715b3          	sll	a1,a4,a1
1c0052b8:	40bda223          	sw	a1,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c0052bc:	30051073          	csrw	mstatus,a0
1c0052c0:	bda5                	j	1c005138 <S31_Conv2d_16x16x3x3_Relu+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0052c2:	300475f3          	csrrci	a1,mstatus,8
1c0052c6:	4047a783          	lw	a5,1028(a5)
1c0052ca:	462a                	lw	a2,136(sp)
1c0052cc:	40c7d7b3          	sra	a5,a5,a2
1c0052d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0052d4:	c79d                	beqz	a5,1c005302 <S31_Conv2d_16x16x3x3_Relu+0x46c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0052d6:	10000513          	li	a0,256
1c0052da:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0052de:	30059073          	csrw	mstatus,a1
1c0052e2:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0052e6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0052ea:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0052ee:	300475f3          	csrrci	a1,mstatus,8
1c0052f2:	40472783          	lw	a5,1028(a4)
1c0052f6:	462a                	lw	a2,136(sp)
1c0052f8:	40c7d7b3          	sra	a5,a5,a2
1c0052fc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005300:	fff9                	bnez	a5,1c0052de <S31_Conv2d_16x16x3x3_Relu+0x448>
1c005302:	4785                	li	a5,1
1c005304:	00c79633          	sll	a2,a5,a2
1c005308:	002047b7          	lui	a5,0x204
1c00530c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005310:	30059073          	csrw	mstatus,a1
1c005314:	bb01                	j	1c005024 <S31_Conv2d_16x16x3x3_Relu+0x18e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005316:	30047573          	csrrci	a0,mstatus,8
1c00531a:	4047a783          	lw	a5,1028(a5)
1c00531e:	5626                	lw	a2,104(sp)
1c005320:	40c7d7b3          	sra	a5,a5,a2
1c005324:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005328:	c79d                	beqz	a5,1c005356 <S31_Conv2d_16x16x3x3_Relu+0x4c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00532a:	10000893          	li	a7,256
1c00532e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005332:	30051073          	csrw	mstatus,a0
1c005336:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00533a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00533e:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005342:	30047573          	csrrci	a0,mstatus,8
1c005346:	40472783          	lw	a5,1028(a4)
1c00534a:	5626                	lw	a2,104(sp)
1c00534c:	40c7d7b3          	sra	a5,a5,a2
1c005350:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005354:	fff9                	bnez	a5,1c005332 <S31_Conv2d_16x16x3x3_Relu+0x49c>
1c005356:	4785                	li	a5,1
1c005358:	00c79633          	sll	a2,a5,a2
1c00535c:	002047b7          	lui	a5,0x204
1c005360:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005364:	30051073          	csrw	mstatus,a0
1c005368:	b18d                	j	1c004fca <S31_Conv2d_16x16x3x3_Relu+0x134>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00536a:	458e                	lw	a1,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00536c:	02000713          	li	a4,32
1c005370:	dc0584e3          	beqz	a1,1c005138 <S31_Conv2d_16x16x3x3_Relu+0x2a2>
1c005374:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005378:	03cde583          	p.elw	a1,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00537c:	00eda223          	sw	a4,4(s11)
1c005380:	458e                	lw	a1,192(sp)
1c005382:	f9ed                	bnez	a1,1c005374 <S31_Conv2d_16x16x3x3_Relu+0x4de>
1c005384:	bb55                	j	1c005138 <S31_Conv2d_16x16x3x3_Relu+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005386:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00538a:	404da783          	lw	a5,1028(s11)
1c00538e:	56aa                	lw	a3,168(sp)
1c005390:	40d7d7b3          	sra	a5,a5,a3
1c005394:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005398:	c79d                	beqz	a5,1c0053c6 <S31_Conv2d_16x16x3x3_Relu+0x530>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00539a:	10000593          	li	a1,256
1c00539e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0053a2:	30061073          	csrw	mstatus,a2
1c0053a6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0053aa:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0053ae:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0053b2:	30047673          	csrrci	a2,mstatus,8
1c0053b6:	40472783          	lw	a5,1028(a4)
1c0053ba:	56aa                	lw	a3,168(sp)
1c0053bc:	40d7d7b3          	sra	a5,a5,a3
1c0053c0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0053c4:	fff9                	bnez	a5,1c0053a2 <S31_Conv2d_16x16x3x3_Relu+0x50c>
1c0053c6:	4785                	li	a5,1
1c0053c8:	00d796b3          	sll	a3,a5,a3
1c0053cc:	002047b7          	lui	a5,0x204
1c0053d0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0053d4:	30061073          	csrw	mstatus,a2
1c0053d8:	b3d9                	j	1c00519e <S31_Conv2d_16x16x3x3_Relu+0x308>
				_SN_In = 0;
1c0053da:	4f81                	li	t6,0
1c0053dc:	b955                	j	1c005090 <S31_Conv2d_16x16x3x3_Relu+0x1fa>

1c0053de <S34_Conv2d_16x16x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0053de:	7169                	addi	sp,sp,-304
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 25600, 25600]][Tile0, 2:[20x10, 20x10], 4]
		Tile0: [0, 12800, 800], Tile1: [0, 12800, 800], Tile2; [0, 12800, 800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0053e0:	10000837          	lui	a6,0x10000
{
1c0053e4:	11612823          	sw	s6,272(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c0053e8:	01c80b13          	addi	s6,a6,28 # 1000001c <resnet_L1_Memory>
1c0053ec:	000b2303          	lw	t1,0(s6)
	KerArg0->W = (unsigned short int) (20);
1c0053f0:	1c0177b7          	lui	a5,0x1c017
1c0053f4:	1cc7af03          	lw	t5,460(a5) # 1c0171cc <__clz_tab+0x5b4>
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (16);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c0053f8:	6791                	lui	a5,0x4
1c0053fa:	c0078e93          	addi	t4,a5,-1024 # 3c00 <__rt_stack_size+0x3400>
{
1c0053fe:	c62a                	sw	a0,12(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c005400:	6e21                	lui	t3,0x8
	KerArg0->NormBias = (signed char) (14);
1c005402:	4539                	li	a0,14
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (16);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c005404:	c2078793          	addi	a5,a5,-992
1c005408:	979a                	add	a5,a5,t1
	KerArg0->NormBias = (signed char) (14);
1c00540a:	02a10323          	sb	a0,38(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c00540e:	020e0893          	addi	a7,t3,32 # 8020 <__rt_stack_size+0x7820>
	KerArg1->W = (unsigned short int) (20);
1c005412:	00a06557          	pv.add.sci.h	a0,zero,20
	KerArg0->OutFeatures = (unsigned short int) (16);
1c005416:	4741                	li	a4,16
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c005418:	989a                	add	a7,a7,t1
	KerArg1->W = (unsigned short int) (20);
1c00541a:	c7aa                	sw	a0,204(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+15392);
1c00541c:	cfbe                	sw	a5,220(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c00541e:	01d30fb3          	add	t6,t1,t4
	KerArg1->InFeatures = (unsigned short int) (16);
1c005422:	00806557          	pv.add.sci.h	a0,zero,16
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->TotalInFeatures = (short int) (16);
	KerArg1->Orientation = (unsigned char) (1);
1c005426:	4785                	li	a5,1
1c005428:	0ef105a3          	sb	a5,235(sp)
{
1c00542c:	12112623          	sw	ra,300(sp)
1c005430:	12812423          	sw	s0,296(sp)
1c005434:	12912223          	sw	s1,292(sp)
1c005438:	13212023          	sw	s2,288(sp)
1c00543c:	11312e23          	sw	s3,284(sp)
1c005440:	11412c23          	sw	s4,280(sp)
1c005444:	11512a23          	sw	s5,276(sp)
1c005448:	11712623          	sw	s7,268(sp)
1c00544c:	11812423          	sw	s8,264(sp)
1c005450:	11912223          	sw	s9,260(sp)
1c005454:	11a12023          	sw	s10,256(sp)
1c005458:	dfee                	sw	s11,252(sp)
	KerArg2->W = (unsigned short int) (20);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (16);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c00545a:	1e7d                	addi	t3,t3,-1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c00545c:	ce46                	sw	a7,28(sp)
	KerArg0->W = (unsigned short int) (20);
1c00545e:	d07a                	sw	t5,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (16);
1c005460:	02e11223          	sh	a4,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+15360);
1c005464:	d47e                	sw	t6,40(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c005466:	cbaa                	sw	a0,212(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+32800);
1c005468:	d1c6                	sw	a7,224(sp)
	KerArg1->Norm = (unsigned char) (16);
1c00546a:	0ee10423          	sb	a4,232(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c00546e:	0ce11c23          	sh	a4,216(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+32800);
1c005472:	d646                	sw	a7,44(sp)
	KerArg2->W = (unsigned short int) (20);
1c005474:	d87a                	sw	t5,48(sp)
	KerArg2->Norm = (unsigned char) (16);
1c005476:	02e10c23          	sb	a4,56(sp)
	KerArg2->InFeatures = (unsigned short int) (16);
1c00547a:	02e11d23          	sh	a4,58(sp)
	KerArg2->LB = (int) (-32768);
1c00547e:	77e1                	lui	a5,0xffff8
1c005480:	de3e                	sw	a5,60(sp)
	KerArg2->UB = (int) (32767);
1c005482:	c0f2                	sw	t3,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005484:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005488:	002047b7          	lui	a5,0x204
1c00548c:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005490:	00072737          	lui	a4,0x72
1c005494:	b8070713          	addi	a4,a4,-1152 # 71b80 <__L1Cl+0x61b80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005498:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00549c:	c1574733          	p.bset	a4,a4,0,21
1c0054a0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0054a4:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0054a8:	4732                	lw	a4,12(sp)
1c0054aa:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0054ae:	03200737          	lui	a4,0x3200
1c0054b2:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c0054b6:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c0054ba:	c4c6                	sw	a7,72(sp)
        copy->length = 0;
1c0054bc:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c0054be:	30051073          	csrw	mstatus,a0
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 7040, 800, 440, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15360), 32, 0, &DmaR_Evt2);
1c0054c2:	000b2503          	lw	a0,0(s6)
1c0054c6:	9576                	add	a0,a0,t4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0054c8:	300478f3          	csrrci	a7,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0054cc:	4007a303          	lw	t1,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0054d0:	00030737          	lui	a4,0x30
1c0054d4:	c0574733          	p.bset	a4,a4,0,5
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0054d8:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0054dc:	c1574733          	p.bset	a4,a4,0,21
1c0054e0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0054e4:	40a7a023          	sw	a0,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0054e8:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c0054ec:	d49a                	sw	t1,104(sp)
        copy->length = 0;
1c0054ee:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c0054f0:	30089073          	csrw	mstatus,a7
  if (copy->length == 0)
1c0054f4:	5766                	lw	a4,120(sp)
1c0054f6:	36070463          	beqz	a4,1c00585e <S34_Conv2d_16x16x3x3+0x480>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0054fa:	460a                	lw	a2,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0054fc:	02000713          	li	a4,32
1c005500:	ca09                	beqz	a2,1c005512 <S34_Conv2d_16x16x3x3+0x134>
1c005502:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005506:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00550a:	00e7a223          	sw	a4,4(a5)
1c00550e:	460a                	lw	a2,128(sp)
1c005510:	fa6d                	bnez	a2,1c005502 <S34_Conv2d_16x16x3x3+0x124>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+15392), 4608, 0, &DmaR_Evt3);
1c005512:	000b2603          	lw	a2,0(s6)
1c005516:	6791                	lui	a5,0x4
1c005518:	c2078793          	addi	a5,a5,-992 # 3c20 <__rt_stack_size+0x3420>
1c00551c:	963e                	add	a2,a2,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00551e:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005522:	002047b7          	lui	a5,0x204
1c005526:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00552a:	00031737          	lui	a4,0x31
1c00552e:	20070713          	addi	a4,a4,512 # 31200 <__L1Cl+0x21200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005532:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005536:	c1574733          	p.bset	a4,a4,0,21
1c00553a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00553e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005542:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c005546:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c005548:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c00554a:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00554e:	476a                	lw	a4,152(sp)
1c005550:	2a070d63          	beqz	a4,1c00580a <S34_Conv2d_16x16x3x3+0x42c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005554:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005556:	02000713          	li	a4,32
1c00555a:	ca09                	beqz	a2,1c00556c <S34_Conv2d_16x16x3x3+0x18e>
1c00555c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005560:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005564:	00e7a223          	sw	a4,4(a5)
1c005568:	560a                	lw	a2,160(sp)
1c00556a:	fa6d                	bnez	a2,1c00555c <S34_Conv2d_16x16x3x3+0x17e>
				/*================================= Update Arg Pipeline =============================*/
				/*============================= End Update Arg Pipeline =============================*/
				D0Ind_Total++;
			} /* End iteration on D0 */
			/*====================== Call Kernel LOC_D0_EPILOG =========================*/
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c00556c:	6789                	lui	a5,0x2
1c00556e:	90078413          	addi	s0,a5,-1792 # 1900 <__rt_stack_size+0x1100>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005572:	00204db7          	lui	s11,0x204
1c005576:	32068793          	addi	a5,a3,800
1c00557a:	1c00da37          	lui	s4,0x1c00d
1c00557e:	8bb6                	mv	s7,a3
1c005580:	c43e                	sw	a5,8(sp)
{
1c005582:	c202                	sw	zero,4(sp)
1c005584:	4481                	li	s1,0
1c005586:	4c01                	li	s8,0
1c005588:	01c10a93          	addi	s5,sp,28
1c00558c:	706a0a13          	addi	s4,s4,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c005590:	0c810d13          	addi	s10,sp,200
1c005594:	02c10913          	addi	s2,sp,44
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005598:	200d8c93          	addi	s9,s11,512 # 204200 <__L2+0x184200>
1c00559c:	001c4993          	xori	s3,s8,1
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0055a0:	0ff00713          	li	a4,255
1c0055a4:	08eda223          	sw	a4,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0055a8:	00eca023          	sw	a4,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0055ac:	00eca623          	sw	a4,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0055b0:	1c00c737          	lui	a4,0x1c00c
1c0055b4:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c0055b8:	08eda023          	sw	a4,128(s11)
1c0055bc:	095da023          	sw	s5,128(s11)
1c0055c0:	8556                	mv	a0,s5
1c0055c2:	644060ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0055c6:	01cce703          	p.elw	a4,28(s9)
				if (!(T0Ind_Last)) {
1c0055ca:	341c2c63          	p.beqimm	s8,1,1c005922 <S34_Conv2d_16x16x3x3+0x544>
					_N_In = _N_In + (400-(40*(T0Ind==0))); _LN_In = ((1)?440:480); _SN_In = (16*_LN_In); 
1c0055ce:	6789                	lui	a5,0x2
1c0055d0:	16848493          	addi	s1,s1,360
1c0055d4:	b8078f93          	addi	t6,a5,-1152 # 1b80 <__rt_stack_size+0x1380>
  if (copy->length == 0)
1c0055d8:	4766                	lw	a4,88(sp)
1c0055da:	14070163          	beqz	a4,1c00571c <S34_Conv2d_16x16x3x3+0x33e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0055de:	5506                	lw	a0,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0055e0:	02000713          	li	a4,32
1c0055e4:	c909                	beqz	a0,1c0055f6 <S34_Conv2d_16x16x3x3+0x218>
1c0055e6:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0055ea:	03cde503          	p.elw	a0,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0055ee:	00eda223          	sw	a4,4(s11)
1c0055f2:	5506                	lw	a0,96(sp)
1c0055f4:	f96d                	bnez	a0,1c0055e6 <S34_Conv2d_16x16x3x3+0x208>
1c0055f6:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c0055fa:	160f9a63          	bnez	t6,1c00576e <S34_Conv2d_16x16x3x3+0x390>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c0055fe:	004c1713          	slli	a4,s8,0x4
1c005602:	41870733          	sub	a4,a4,s8
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c005606:	4505                	li	a0,1
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c005608:	0726                	slli	a4,a4,0x9
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c00560a:	e0a51557          	pv.packlo.b	a0,a0,a0
1c00560e:	d93c1557          	pv.packhi.b	a0,s8,s3
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c005612:	9eba                	add	t4,t4,a4
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c005614:	025067d7          	pv.add.sci.h	a5,zero,11
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005618:	0ff00993          	li	s3,255
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+7680*((D0Ind_Total)%2));
1c00561c:	c5f6                	sw	t4,200(sp)
				KerArg1->Pad = (v4s) ((v4s){1,1,1*(T0Ind==0),1*(T0Ind_Last)});
1c00561e:	d3aa                	sw	a0,228(sp)
				KerArg1->H = (unsigned short int) (12-1*(T0Ind==0)-1*(T0Ind_Last));
1c005620:	c9be                	sw	a5,208(sp)
1c005622:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005626:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00562a:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00562e:	094da023          	sw	s4,128(s11)
1c005632:	09ada023          	sw	s10,128(s11)
1c005636:	856a                	mv	a0,s10
1c005638:	0ce080ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00563c:	01cce503          	p.elw	a0,28(s9)
			KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+20000+6400*((T0Ind_Total)%2));
1c005640:	6715                	lui	a4,0x5
1c005642:	e2070713          	addi	a4,a4,-480 # 4e20 <__rt_stack_size+0x4620>
1c005646:	428c0733          	p.mac	a4,s8,s0
1c00564a:	000b2583          	lw	a1,0(s6)
1c00564e:	8c3a                	mv	s8,a4
1c005650:	95ba                	add	a1,a1,a4
1c005652:	da2e                	sw	a1,52(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005654:	093da223          	sw	s3,132(s11)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005658:	013ca023          	sw	s3,0(s9)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00565c:	013ca623          	sw	s3,12(s9)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005660:	1c00c7b7          	lui	a5,0x1c00c
1c005664:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c005668:	08fda023          	sw	a5,128(s11)
1c00566c:	092da023          	sw	s2,128(s11)
1c005670:	854a                	mv	a0,s2
1c005672:	7ce060ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005676:	01cce703          	p.elw	a4,28(s9)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
			/*================================= Write Tiles =====================================*/
			if (_SP_Out) AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
1c00567a:	4712                	lw	a4,4(sp)
1c00567c:	12071f63          	bnez	a4,1c0057ba <S34_Conv2d_16x16x3x3+0x3dc>
			AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) Out+_C_Out), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+20000+6400*((T0Ind_Total)%2)),
1c005680:	000b2703          	lw	a4,0(s6)
1c005684:	9762                	add	a4,a4,s8
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005686:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00568a:	400da503          	lw	a0,1024(s11)
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00568e:	002e27b7          	lui	a5,0x2e2
1c005692:	90078793          	addi	a5,a5,-1792 # 2e1900 <__L2+0x261900>
1c005696:	40fda023          	sw	a5,1024(s11)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00569a:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00569e:	417da023          	sw	s7,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0056a2:	032007b7          	lui	a5,0x3200
1c0056a6:	19078713          	addi	a4,a5,400 # 3200190 <__L2+0x3180190>
1c0056aa:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c0056ae:	d52a                	sw	a0,168(sp)
        copy->length = 0;
1c0056b0:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c0056b2:	30059073          	csrw	mstatus,a1
			/*================================= Update Arg Pipeline =============================*/
			_SP_Out = _SC_Out;_LP_Out = _LC_Out;
			/*============================= End Update Arg Pipeline =============================*/
			/*================================= Prepare Tiles ===================================*/
			_SC_Out = 0;
			if (!(T0Ind_Last)) {
1c0056b6:	4722                	lw	a4,8(sp)
1c0056b8:	190b8b93          	addi	s7,s7,400
1c0056bc:	c222                	sw	s0,4(sp)
1c0056be:	4c05                	li	s8,1
1c0056c0:	ed771ee3          	bne	a4,s7,1c00559c <S34_Conv2d_16x16x3x3+0x1be>
  if (copy->length == 0)
1c0056c4:	576a                	lw	a4,184(sp)
1c0056c6:	20070463          	beqz	a4,1c0058ce <S34_Conv2d_16x16x3x3+0x4f0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0056ca:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0056cc:	02000713          	li	a4,32
1c0056d0:	002047b7          	lui	a5,0x204
1c0056d4:	ca89                	beqz	a3,1c0056e6 <S34_Conv2d_16x16x3x3+0x308>
1c0056d6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0056da:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0056de:	00e7a223          	sw	a4,4(a5)
1c0056e2:	468e                	lw	a3,192(sp)
1c0056e4:	faed                	bnez	a3,1c0056d6 <S34_Conv2d_16x16x3x3+0x2f8>
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait previous DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0056e6:	12c12083          	lw	ra,300(sp)
1c0056ea:	12812403          	lw	s0,296(sp)
1c0056ee:	12412483          	lw	s1,292(sp)
1c0056f2:	12012903          	lw	s2,288(sp)
1c0056f6:	11c12983          	lw	s3,284(sp)
1c0056fa:	11812a03          	lw	s4,280(sp)
1c0056fe:	11412a83          	lw	s5,276(sp)
1c005702:	11012b03          	lw	s6,272(sp)
1c005706:	10c12b83          	lw	s7,268(sp)
1c00570a:	10812c03          	lw	s8,264(sp)
1c00570e:	10412c83          	lw	s9,260(sp)
1c005712:	10012d03          	lw	s10,256(sp)
1c005716:	5dfe                	lw	s11,252(sp)
1c005718:	6155                	addi	sp,sp,304
1c00571a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00571c:	30047ef3          	csrrci	t4,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c005720:	404da703          	lw	a4,1028(s11)
1c005724:	4526                	lw	a0,72(sp)
1c005726:	40a75733          	sra	a4,a4,a0
1c00572a:	fc173733          	p.bclr	a4,a4,30,1
1c00572e:	c70d                	beqz	a4,1c005758 <S34_Conv2d_16x16x3x3+0x37a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005730:	10000f13          	li	t5,256
  __builtin_pulp_spr_write(reg, val);
1c005734:	300e9073          	csrw	mstatus,t4
1c005738:	01eda423          	sw	t5,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00573c:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005740:	01eda223          	sw	t5,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005744:	30047ef3          	csrrci	t4,mstatus,8
1c005748:	404da703          	lw	a4,1028(s11)
1c00574c:	4526                	lw	a0,72(sp)
1c00574e:	40a75733          	sra	a4,a4,a0
1c005752:	fc173733          	p.bclr	a4,a4,30,1
1c005756:	ff79                	bnez	a4,1c005734 <S34_Conv2d_16x16x3x3+0x356>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005758:	4705                	li	a4,1
1c00575a:	00a71533          	sll	a0,a4,a0
1c00575e:	40ada223          	sw	a0,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c005762:	300e9073          	csrw	mstatus,t4
1c005766:	000b2e83          	lw	t4,0(s6)
				if (_SN_In) {
1c00576a:	e80f8ae3          	beqz	t6,1c0055fe <S34_Conv2d_16x16x3x3+0x220>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00576e:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005772:	400daf03          	lw	t5,1024(s11)
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c005776:	c70fcfb3          	p.bset	t6,t6,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00577a:	c15fcfb3          	p.bset	t6,t6,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00577e:	41fda023          	sw	t6,1024(s11)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+7680*((D0Ind_Total+1)%2)),
1c005782:	001c4f93          	xori	t6,s8,1
1c005786:	004f9713          	slli	a4,t6,0x4
1c00578a:	41f70733          	sub	a4,a4,t6
1c00578e:	0726                	slli	a4,a4,0x9
1c005790:	9eba                	add	t4,t4,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005792:	41dda023          	sw	t4,1024(s11)
1c005796:	47b2                	lw	a5,12(sp)
1c005798:	00978733          	add	a4,a5,s1
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00579c:	40eda023          	sw	a4,1024(s11)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0057a0:	03200737          	lui	a4,0x3200
1c0057a4:	1b870713          	addi	a4,a4,440 # 32001b8 <__L2+0x31801b8>
1c0057a8:	40eda023          	sw	a4,1024(s11)
        if (!merge) copy->id = id;
1c0057ac:	c4fa                	sw	t5,72(sp)
        copy->length = 0;
1c0057ae:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c0057b0:	30051073          	csrw	mstatus,a0
1c0057b4:	000b2e83          	lw	t4,0(s6)
1c0057b8:	b599                	j	1c0055fe <S34_Conv2d_16x16x3x3+0x220>
  if (copy->length == 0)
1c0057ba:	576a                	lw	a4,184(sp)
1c0057bc:	eb7d                	bnez	a4,1c0058b2 <S34_Conv2d_16x16x3x3+0x4d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0057be:	30047573          	csrrci	a0,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0057c2:	404da703          	lw	a4,1028(s11)
1c0057c6:	55aa                	lw	a1,168(sp)
1c0057c8:	40b75733          	sra	a4,a4,a1
1c0057cc:	fc173733          	p.bclr	a4,a4,30,1
1c0057d0:	c70d                	beqz	a4,1c0057fa <S34_Conv2d_16x16x3x3+0x41c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0057d2:	10000e93          	li	t4,256
  __builtin_pulp_spr_write(reg, val);
1c0057d6:	30051073          	csrw	mstatus,a0
1c0057da:	01dda423          	sw	t4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0057de:	03cde703          	p.elw	a4,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0057e2:	01dda223          	sw	t4,4(s11)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0057e6:	30047573          	csrrci	a0,mstatus,8
1c0057ea:	404da703          	lw	a4,1028(s11)
1c0057ee:	55aa                	lw	a1,168(sp)
1c0057f0:	40b75733          	sra	a4,a4,a1
1c0057f4:	fc173733          	p.bclr	a4,a4,30,1
1c0057f8:	ff79                	bnez	a4,1c0057d6 <S34_Conv2d_16x16x3x3+0x3f8>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0057fa:	4705                	li	a4,1
1c0057fc:	00b715b3          	sll	a1,a4,a1
1c005800:	40bda223          	sw	a1,1028(s11)
  __builtin_pulp_spr_write(reg, val);
1c005804:	30051073          	csrw	mstatus,a0
1c005808:	bda5                	j	1c005680 <S34_Conv2d_16x16x3x3+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00580a:	300475f3          	csrrci	a1,mstatus,8
1c00580e:	4047a783          	lw	a5,1028(a5)
1c005812:	462a                	lw	a2,136(sp)
1c005814:	40c7d7b3          	sra	a5,a5,a2
1c005818:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00581c:	c79d                	beqz	a5,1c00584a <S34_Conv2d_16x16x3x3+0x46c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00581e:	10000513          	li	a0,256
1c005822:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005826:	30059073          	csrw	mstatus,a1
1c00582a:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00582e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005832:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005836:	300475f3          	csrrci	a1,mstatus,8
1c00583a:	40472783          	lw	a5,1028(a4)
1c00583e:	462a                	lw	a2,136(sp)
1c005840:	40c7d7b3          	sra	a5,a5,a2
1c005844:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005848:	fff9                	bnez	a5,1c005826 <S34_Conv2d_16x16x3x3+0x448>
1c00584a:	4785                	li	a5,1
1c00584c:	00c79633          	sll	a2,a5,a2
1c005850:	002047b7          	lui	a5,0x204
1c005854:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005858:	30059073          	csrw	mstatus,a1
1c00585c:	bb01                	j	1c00556c <S34_Conv2d_16x16x3x3+0x18e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00585e:	30047573          	csrrci	a0,mstatus,8
1c005862:	4047a783          	lw	a5,1028(a5)
1c005866:	5626                	lw	a2,104(sp)
1c005868:	40c7d7b3          	sra	a5,a5,a2
1c00586c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005870:	c79d                	beqz	a5,1c00589e <S34_Conv2d_16x16x3x3+0x4c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005872:	10000893          	li	a7,256
1c005876:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00587a:	30051073          	csrw	mstatus,a0
1c00587e:	01172423          	sw	a7,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005882:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005886:	01172223          	sw	a7,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00588a:	30047573          	csrrci	a0,mstatus,8
1c00588e:	40472783          	lw	a5,1028(a4)
1c005892:	5626                	lw	a2,104(sp)
1c005894:	40c7d7b3          	sra	a5,a5,a2
1c005898:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00589c:	fff9                	bnez	a5,1c00587a <S34_Conv2d_16x16x3x3+0x49c>
1c00589e:	4785                	li	a5,1
1c0058a0:	00c79633          	sll	a2,a5,a2
1c0058a4:	002047b7          	lui	a5,0x204
1c0058a8:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0058ac:	30051073          	csrw	mstatus,a0
1c0058b0:	b18d                	j	1c005512 <S34_Conv2d_16x16x3x3+0x134>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0058b2:	458e                	lw	a1,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0058b4:	02000713          	li	a4,32
1c0058b8:	dc0584e3          	beqz	a1,1c005680 <S34_Conv2d_16x16x3x3+0x2a2>
1c0058bc:	00eda423          	sw	a4,8(s11)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0058c0:	03cde583          	p.elw	a1,60(s11)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0058c4:	00eda223          	sw	a4,4(s11)
1c0058c8:	458e                	lw	a1,192(sp)
1c0058ca:	f9ed                	bnez	a1,1c0058bc <S34_Conv2d_16x16x3x3+0x4de>
1c0058cc:	bb55                	j	1c005680 <S34_Conv2d_16x16x3x3+0x2a2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058ce:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0058d2:	404da783          	lw	a5,1028(s11)
1c0058d6:	56aa                	lw	a3,168(sp)
1c0058d8:	40d7d7b3          	sra	a5,a5,a3
1c0058dc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0058e0:	c79d                	beqz	a5,1c00590e <S34_Conv2d_16x16x3x3+0x530>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0058e2:	10000593          	li	a1,256
1c0058e6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0058ea:	30061073          	csrw	mstatus,a2
1c0058ee:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0058f2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0058f6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0058fa:	30047673          	csrrci	a2,mstatus,8
1c0058fe:	40472783          	lw	a5,1028(a4)
1c005902:	56aa                	lw	a3,168(sp)
1c005904:	40d7d7b3          	sra	a5,a5,a3
1c005908:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00590c:	fff9                	bnez	a5,1c0058ea <S34_Conv2d_16x16x3x3+0x50c>
1c00590e:	4785                	li	a5,1
1c005910:	00d796b3          	sll	a3,a5,a3
1c005914:	002047b7          	lui	a5,0x204
1c005918:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00591c:	30061073          	csrw	mstatus,a2
1c005920:	b3d9                	j	1c0056e6 <S34_Conv2d_16x16x3x3+0x308>
				_SN_In = 0;
1c005922:	4f81                	li	t6,0
1c005924:	b955                	j	1c0055d8 <S34_Conv2d_16x16x3x3+0x1fa>

1c005926 <S35_MatAdd_16x20x20>:
void S35_MatAdd_16x20x20(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c005926:	7135                	addi	sp,sp,-160
1c005928:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 12800, 12800]][Tile0, 1:[20x20], 2]
		Tile0: [0, 12800, 12800], Tile1: [0, 12800, 12800], Tile2; [0, 12800, 12800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c00592a:	10000937          	lui	s2,0x10000
1c00592e:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c005932:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+25600);
1c005936:	6799                	lui	a5,0x6
1c005938:	40078793          	addi	a5,a5,1024 # 6400 <__rt_stack_size+0x5c00>
1c00593c:	97b6                	add	a5,a5,a3
1c00593e:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (20);
1c005940:	00a067d7          	pv.add.sci.h	a5,zero,20
1c005944:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (20);
	KerArg0->N = (unsigned short int) (16);
1c005946:	47c1                	li	a5,16
1c005948:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c00594c:	77e1                	lui	a5,0xffff8
1c00594e:	dabe                	sw	a5,116(sp)
1c005950:	67a1                	lui	a5,0x8
1c005952:	17fd                	addi	a5,a5,-1
1c005954:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c005956:	670d                	lui	a4,0x3
	KerArg0->UB = (int) (32767);
1c005958:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c00595a:	20070713          	addi	a4,a4,512 # 3200 <__rt_stack_size+0x2a00>
	KerArg0->UB = (int) (32767);
1c00595e:	a0b78793          	addi	a5,a5,-1525 # a0b <__rt_stack_size+0x20b>
{
1c005962:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c005964:	00e68833          	add	a6,a3,a4
	KerArg0->UB = (int) (32767);
1c005968:	06f11e23          	sh	a5,124(sp)
{
1c00596c:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (11);
	KerArg0->In2_Q = (unsigned char) (10);
1c00596e:	47a9                	li	a5,10
{
1c005970:	cf06                	sw	ra,156(sp)
1c005972:	cd22                	sw	s0,152(sp)
1c005974:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c005976:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+12800);
1c005978:	d2c2                	sw	a6,100(sp)
	KerArg0->In2_Q = (unsigned char) (10);
1c00597a:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00597e:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005982:	002047b7          	lui	a5,0x204
1c005986:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00598a:	002b08b7          	lui	a7,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00598e:	01176733          	or	a4,a4,a7
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005992:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005996:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00599a:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c00599e:	c042                	sw	a6,0(sp)
        copy->length = 0;
1c0059a0:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c0059a2:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0059a6:	4742                	lw	a4,16(sp)
1c0059a8:	1a070d63          	beqz	a4,1c005b62 <S35_MatAdd_16x20x20+0x23c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0059ac:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0059ae:	02000713          	li	a4,32
1c0059b2:	ca89                	beqz	a3,1c0059c4 <S35_MatAdd_16x20x20+0x9e>
1c0059b4:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0059b8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0059bc:	00e7a223          	sw	a4,4(a5)
1c0059c0:	46e2                	lw	a3,24(sp)
1c0059c2:	faed                	bnez	a3,1c0059b4 <S35_MatAdd_16x20x20+0x8e>
	KerArg0->Out_Q = (unsigned char) (10);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 12800, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 12800, 0, &DmaR_Evt2);
1c0059c4:	00092683          	lw	a3,0(s2)
1c0059c8:	670d                	lui	a4,0x3
1c0059ca:	20070713          	addi	a4,a4,512 # 3200 <__rt_stack_size+0x2a00>
1c0059ce:	96ba                	add	a3,a3,a4
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0059d0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0059d4:	002047b7          	lui	a5,0x204
1c0059d8:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0059dc:	002b0837          	lui	a6,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0059e0:	01076733          	or	a4,a4,a6
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0059e4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0059e8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0059ec:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0059f0:	d02a                	sw	a0,32(sp)
        copy->length = 0;
1c0059f2:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c0059f4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0059f8:	5742                	lw	a4,48(sp)
1c0059fa:	10070a63          	beqz	a4,1c005b0e <S35_MatAdd_16x20x20+0x1e8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0059fe:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005a00:	02000713          	li	a4,32
1c005a04:	ca89                	beqz	a3,1c005a16 <S35_MatAdd_16x20x20+0xf0>
1c005a06:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005a0a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005a0e:	00e7a223          	sw	a4,4(a5)
1c005a12:	56e2                	lw	a3,56(sp)
1c005a14:	faed                	bnez	a3,1c005a06 <S35_MatAdd_16x20x20+0xe0>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005a16:	0ff00793          	li	a5,255
1c005a1a:	00204437          	lui	s0,0x204
1c005a1e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005a22:	20040993          	addi	s3,s0,512
1c005a26:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005a2a:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005a2e:	1c0107b7          	lui	a5,0x1c010
1c005a32:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c005a36:	08f42023          	sw	a5,128(s0)
1c005a3a:	1088                	addi	a0,sp,96
1c005a3c:	08a42023          	sw	a0,128(s0)
1c005a40:	3b20a0ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005a44:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+25600), 12800, 1, &DmaW_Evt1);
1c005a48:	6799                	lui	a5,0x6
1c005a4a:	00092703          	lw	a4,0(s2)
1c005a4e:	40078793          	addi	a5,a5,1024 # 6400 <__rt_stack_size+0x5c00>
1c005a52:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005a54:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005a58:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005a5c:	000237b7          	lui	a5,0x23
1c005a60:	20078793          	addi	a5,a5,512 # 23200 <__L1Cl+0x13200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005a64:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005a68:	c157c7b3          	p.bset	a5,a5,0,21
1c005a6c:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005a70:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005a74:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c005a78:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c005a7a:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c005a7c:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c005a80:	47c6                	lw	a5,80(sp)
1c005a82:	c795                	beqz	a5,1c005aae <S35_MatAdd_16x20x20+0x188>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005a84:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005a86:	02000713          	li	a4,32
1c005a8a:	002047b7          	lui	a5,0x204
1c005a8e:	ca89                	beqz	a3,1c005aa0 <S35_MatAdd_16x20x20+0x17a>
1c005a90:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005a94:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005a98:	00e7a223          	sw	a4,4(a5)
1c005a9c:	46e6                	lw	a3,88(sp)
1c005a9e:	faed                	bnez	a3,1c005a90 <S35_MatAdd_16x20x20+0x16a>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c005aa0:	40fa                	lw	ra,156(sp)
1c005aa2:	446a                	lw	s0,152(sp)
1c005aa4:	44da                	lw	s1,148(sp)
1c005aa6:	494a                	lw	s2,144(sp)
1c005aa8:	49ba                	lw	s3,140(sp)
1c005aaa:	610d                	addi	sp,sp,160
1c005aac:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005aae:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c005ab2:	40442403          	lw	s0,1028(s0)
1c005ab6:	4686                	lw	a3,64(sp)
1c005ab8:	40d45433          	sra	s0,s0,a3
1c005abc:	fc143433          	p.bclr	s0,s0,30,1
1c005ac0:	c41d                	beqz	s0,1c005aee <S35_MatAdd_16x20x20+0x1c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005ac2:	10000593          	li	a1,256
1c005ac6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005aca:	30061073          	csrw	mstatus,a2
1c005ace:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005ad2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005ad6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ada:	30047673          	csrrci	a2,mstatus,8
1c005ade:	40472783          	lw	a5,1028(a4)
1c005ae2:	4686                	lw	a3,64(sp)
1c005ae4:	40d7d7b3          	sra	a5,a5,a3
1c005ae8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005aec:	fff9                	bnez	a5,1c005aca <S35_MatAdd_16x20x20+0x1a4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005aee:	4785                	li	a5,1
1c005af0:	00d796b3          	sll	a3,a5,a3
1c005af4:	002047b7          	lui	a5,0x204
1c005af8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005afc:	30061073          	csrw	mstatus,a2
1c005b00:	40fa                	lw	ra,156(sp)
1c005b02:	446a                	lw	s0,152(sp)
1c005b04:	44da                	lw	s1,148(sp)
1c005b06:	494a                	lw	s2,144(sp)
1c005b08:	49ba                	lw	s3,140(sp)
1c005b0a:	610d                	addi	sp,sp,160
1c005b0c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b0e:	30047673          	csrrci	a2,mstatus,8
1c005b12:	4047a783          	lw	a5,1028(a5)
1c005b16:	5682                	lw	a3,32(sp)
1c005b18:	40d7d7b3          	sra	a5,a5,a3
1c005b1c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005b20:	c79d                	beqz	a5,1c005b4e <S35_MatAdd_16x20x20+0x228>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005b22:	10000593          	li	a1,256
1c005b26:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005b2a:	30061073          	csrw	mstatus,a2
1c005b2e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005b32:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005b36:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b3a:	30047673          	csrrci	a2,mstatus,8
1c005b3e:	40472783          	lw	a5,1028(a4)
1c005b42:	5682                	lw	a3,32(sp)
1c005b44:	40d7d7b3          	sra	a5,a5,a3
1c005b48:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005b4c:	fff9                	bnez	a5,1c005b2a <S35_MatAdd_16x20x20+0x204>
1c005b4e:	4785                	li	a5,1
1c005b50:	00d796b3          	sll	a3,a5,a3
1c005b54:	002047b7          	lui	a5,0x204
1c005b58:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005b5c:	30061073          	csrw	mstatus,a2
1c005b60:	bd5d                	j	1c005a16 <S35_MatAdd_16x20x20+0xf0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b62:	30047673          	csrrci	a2,mstatus,8
1c005b66:	4047a783          	lw	a5,1028(a5)
1c005b6a:	4682                	lw	a3,0(sp)
1c005b6c:	40d7d7b3          	sra	a5,a5,a3
1c005b70:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005b74:	c79d                	beqz	a5,1c005ba2 <S35_MatAdd_16x20x20+0x27c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005b76:	10000513          	li	a0,256
1c005b7a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005b7e:	30061073          	csrw	mstatus,a2
1c005b82:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005b86:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005b8a:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005b8e:	30047673          	csrrci	a2,mstatus,8
1c005b92:	40472783          	lw	a5,1028(a4)
1c005b96:	4682                	lw	a3,0(sp)
1c005b98:	40d7d7b3          	sra	a5,a5,a3
1c005b9c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005ba0:	fff9                	bnez	a5,1c005b7e <S35_MatAdd_16x20x20+0x258>
1c005ba2:	4785                	li	a5,1
1c005ba4:	00d796b3          	sll	a3,a5,a3
1c005ba8:	002047b7          	lui	a5,0x204
1c005bac:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005bb0:	30061073          	csrw	mstatus,a2
1c005bb4:	bd01                	j	1c0059c4 <S35_MatAdd_16x20x20+0x9e>

1c005bb6 <S38_Conv2d_32x16x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c005bb6:	7111                	addi	sp,sp,-256
1c005bb8:	d7ce                	sw	s3,236(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[20x20], 2][D0, [0 x 12800, 12800]]
		Tile0: [0, 12800, 12800], Tile1: [0, 12800, 12800], Tile2; [0, 12800, 12800]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+28480);
1c005bba:	100009b7          	lui	s3,0x10000
1c005bbe:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
1c005bc2:	0009a883          	lw	a7,0(s3)
	KerArg0->W = (unsigned short int) (10);
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005bc6:	678d                	lui	a5,0x3
	KerArg1->W = (unsigned short int) (20);
	KerArg1->UsedW = (unsigned short int) (20);
	KerArg1->H = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (16);
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+12864);
1c005bc8:	24078713          	addi	a4,a5,576 # 3240 <__rt_stack_size+0x2a40>
1c005bcc:	9746                	add	a4,a4,a7
{
1c005bce:	d5d2                	sw	s4,232(sp)
1c005bd0:	8a36                	mv	s4,a3
	KerArg0->NormBias = (signed char) (11);
1c005bd2:	46ad                	li	a3,11
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+28480);
	KerArg1->Norm = (unsigned char) (14);
	KerArg1->TotalInFeatures = (short int) (16);
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c005bd4:	1c017fb7          	lui	t6,0x1c017
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005bd8:	20078313          	addi	t1,a5,512
	KerArg0->NormBias = (signed char) (11);
1c005bdc:	00d10b23          	sb	a3,22(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+12864);
1c005be0:	c7ba                	sw	a4,204(sp)
	KerArg1->W = (unsigned short int) (20);
1c005be2:	00a066d7          	pv.add.sci.h	a3,zero,20
	KerArg1->TotalInFeatures = (short int) (16);
1c005be6:	4741                	li	a4,16
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+28480);
1c005be8:	679d                	lui	a5,0x7
	KerArg1->InFeatures = (unsigned short int) (16);
1c005bea:	1c0172b7          	lui	t0,0x1c017
	KerArg1->W = (unsigned short int) (20);
1c005bee:	df36                	sw	a3,188(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c005bf0:	0ce11423          	sh	a4,200(sp)
	KerArg1->H = (unsigned short int) (20);
1c005bf4:	46d1                	li	a3,20
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c005bf6:	1dcfa703          	lw	a4,476(t6) # 1c0171dc <__clz_tab+0x5c4>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+28480);
1c005bfa:	f4078793          	addi	a5,a5,-192 # 6f40 <__rt_stack_size+0x6740>
1c005bfe:	97c6                	add	a5,a5,a7
	KerArg1->H = (unsigned short int) (20);
1c005c00:	0cd11023          	sh	a3,192(sp)
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+28480);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+22080);
1c005c04:	6815                	lui	a6,0x5
	KerArg1->InFeatures = (unsigned short int) (16);
1c005c06:	1d82a683          	lw	a3,472(t0) # 1c0171d8 <__clz_tab+0x5c0>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+28480);
1c005c0a:	c63e                	sw	a5,12(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+28480);
1c005c0c:	c9be                	sw	a5,208(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+28480);
1c005c0e:	ce3e                	sw	a5,28(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+22080);
1c005c10:	64080813          	addi	a6,a6,1600 # 5640 <__rt_stack_size+0x4e40>
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c005c14:	67a1                	lui	a5,0x8
	KerArg0->W = (unsigned short int) (10);
1c005c16:	00506f57          	pv.add.sci.h	t5,zero,10
	KerArg0->OutFeatures = (unsigned short int) (32);
1c005c1a:	02000e13          	li	t3,32
	KerArg1->Norm = (unsigned char) (14);
1c005c1e:	4eb9                	li	t4,14
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005c20:	9346                	add	t1,t1,a7
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+22080);
1c005c22:	9846                	add	a6,a6,a7
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c005c24:	cbba                	sw	a4,212(sp)
	KerArg2->UB = (int) (32767);
1c005c26:	17fd                	addi	a5,a5,-1
	KerArg1->Orientation = (unsigned char) (1);
1c005c28:	4705                	li	a4,1
{
1c005c2a:	df86                	sw	ra,252(sp)
1c005c2c:	dda2                	sw	s0,248(sp)
1c005c2e:	dba6                	sw	s1,244(sp)
1c005c30:	d9ca                	sw	s2,240(sp)
	KerArg0->W = (unsigned short int) (10);
1c005c32:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c005c34:	01c11a23          	sh	t3,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005c38:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c005c3a:	dd46                	sw	a7,184(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c005c3c:	c3b6                	sw	a3,196(sp)
	KerArg1->Norm = (unsigned char) (14);
1c005c3e:	0dd10c23          	sb	t4,216(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c005c42:	0ce10da3          	sb	a4,219(sp)
	KerArg2->W = (unsigned short int) (10);
1c005c46:	d07a                	sw	t5,32(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+22080);
1c005c48:	d242                	sw	a6,36(sp)
	KerArg2->Norm = (unsigned char) (14);
1c005c4a:	03d10423          	sb	t4,40(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c005c4e:	03c11523          	sh	t3,42(sp)
	KerArg2->LB = (int) (0);
1c005c52:	d602                	sw	zero,44(sp)
	KerArg2->UB = (int) (32767);
1c005c54:	d83e                	sw	a5,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005c56:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005c5a:	002047b7          	lui	a5,0x204
1c005c5e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005c62:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005c66:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005c6a:	c1574733          	p.bset	a4,a4,0,21
1c005c6e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005c72:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005c76:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c005c7a:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c005c7c:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c005c7e:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c005c82:	4726                	lw	a4,72(sp)
1c005c84:	2a070f63          	beqz	a4,1c005f42 <S38_Conv2d_32x16x3x3_Relu+0x38c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005c88:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005c8a:	02000713          	li	a4,32
1c005c8e:	ca89                	beqz	a3,1c005ca0 <S38_Conv2d_32x16x3x3_Relu+0xea>
1c005c90:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005c94:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005c98:	00e7a223          	sw	a4,4(a5)
1c005c9c:	46c6                	lw	a3,80(sp)
1c005c9e:	faed                	bnez	a3,1c005c90 <S38_Conv2d_32x16x3x3_Relu+0xda>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12864), 9216, 0, &DmaR_Evt2);
1c005ca0:	0009a683          	lw	a3,0(s3)
1c005ca4:	678d                	lui	a5,0x3
1c005ca6:	24078793          	addi	a5,a5,576 # 3240 <__rt_stack_size+0x2a40>
1c005caa:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005cac:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005cb0:	002047b7          	lui	a5,0x204
1c005cb4:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005cb8:	00032737          	lui	a4,0x32
1c005cbc:	40070713          	addi	a4,a4,1024 # 32400 <__L1Cl+0x22400>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005cc0:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005cc4:	c1574733          	p.bset	a4,a4,0,21
1c005cc8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005ccc:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005cd0:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c005cd4:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c005cd6:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c005cd8:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c005cdc:	5726                	lw	a4,104(sp)
1c005cde:	20070863          	beqz	a4,1c005eee <S38_Conv2d_32x16x3x3_Relu+0x338>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005ce2:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005ce4:	02000713          	li	a4,32
1c005ce8:	ca89                	beqz	a3,1c005cfa <S38_Conv2d_32x16x3x3_Relu+0x144>
1c005cea:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005cee:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005cf2:	00e7a223          	sw	a4,4(a5)
1c005cf6:	56c6                	lw	a3,112(sp)
1c005cf8:	faed                	bnez	a3,1c005cea <S38_Conv2d_32x16x3x3_Relu+0x134>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 12800, 0, &DmaR_Evt3);
1c005cfa:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005cfe:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005d02:	002047b7          	lui	a5,0x204
1c005d06:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005d0a:	00033737          	lui	a4,0x33
1c005d0e:	20070713          	addi	a4,a4,512 # 33200 <__L1Cl+0x23200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005d12:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005d16:	c1574733          	p.bset	a4,a4,0,21
1c005d1a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005d1e:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005d22:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c005d26:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c005d28:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c005d2a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c005d2e:	472a                	lw	a4,136(sp)
1c005d30:	16070563          	beqz	a4,1c005e9a <S38_Conv2d_32x16x3x3_Relu+0x2e4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005d34:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005d36:	02000713          	li	a4,32
1c005d3a:	ca89                	beqz	a3,1c005d4c <S38_Conv2d_32x16x3x3_Relu+0x196>
1c005d3c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005d40:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005d44:	00e7a223          	sw	a4,4(a5)
1c005d48:	46ca                	lw	a3,144(sp)
1c005d4a:	faed                	bnez	a3,1c005d3c <S38_Conv2d_32x16x3x3_Relu+0x186>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005d4c:	0ff00913          	li	s2,255
1c005d50:	00204437          	lui	s0,0x204
1c005d54:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005d58:	20040493          	addi	s1,s0,512
1c005d5c:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005d60:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005d64:	1c00c7b7          	lui	a5,0x1c00c
1c005d68:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c005d6c:	08f42023          	sw	a5,128(s0)
1c005d70:	0068                	addi	a0,sp,12
1c005d72:	08a42023          	sw	a0,128(s0)
1c005d76:	691050ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005d7a:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (20);
1c005d7e:	47d1                	li	a5,20
1c005d80:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005d84:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005d88:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005d8c:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005d90:	1c00e7b7          	lui	a5,0x1c00e
1c005d94:	8b078793          	addi	a5,a5,-1872 # 1c00d8b0 <KerParConv3x3Stride2_DP_fp>
1c005d98:	08f42023          	sw	a5,128(s0)
1c005d9c:	1928                	addi	a0,sp,184
1c005d9e:	08a42023          	sw	a0,128(s0)
1c005da2:	30f070ef          	jal	ra,1c00d8b0 <KerParConv3x3Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005da6:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c005daa:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c005dae:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c005db2:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c005db6:	1c00c7b7          	lui	a5,0x1c00c
1c005dba:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c005dbe:	08f42023          	sw	a5,128(s0)
1c005dc2:	0868                	addi	a0,sp,28
1c005dc4:	08a42023          	sw	a0,128(s0)
1c005dc8:	078060ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005dcc:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+22080), 6400, 1, &DmaW_Evt1);
1c005dd0:	6795                	lui	a5,0x5
1c005dd2:	0009a703          	lw	a4,0(s3)
1c005dd6:	64078793          	addi	a5,a5,1600 # 5640 <__rt_stack_size+0x4e40>
1c005dda:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ddc:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c005de0:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c005de4:	000227b7          	lui	a5,0x22
1c005de8:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c005dec:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c005df0:	c157c7b3          	p.bset	a5,a5,0,21
1c005df4:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c005df8:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c005dfc:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c005e00:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c005e02:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c005e04:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c005e08:	57aa                	lw	a5,168(sp)
1c005e0a:	c79d                	beqz	a5,1c005e38 <S38_Conv2d_32x16x3x3_Relu+0x282>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c005e0c:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005e0e:	02000713          	li	a4,32
1c005e12:	002047b7          	lui	a5,0x204
1c005e16:	ca89                	beqz	a3,1c005e28 <S38_Conv2d_32x16x3x3_Relu+0x272>
1c005e18:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005e1c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005e20:	00e7a223          	sw	a4,4(a5)
1c005e24:	56ca                	lw	a3,176(sp)
1c005e26:	faed                	bnez	a3,1c005e18 <S38_Conv2d_32x16x3x3_Relu+0x262>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c005e28:	50fe                	lw	ra,252(sp)
1c005e2a:	546e                	lw	s0,248(sp)
1c005e2c:	54de                	lw	s1,244(sp)
1c005e2e:	594e                	lw	s2,240(sp)
1c005e30:	59be                	lw	s3,236(sp)
1c005e32:	5a2e                	lw	s4,232(sp)
1c005e34:	6111                	addi	sp,sp,256
1c005e36:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e38:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c005e3c:	40442403          	lw	s0,1028(s0)
1c005e40:	46ea                	lw	a3,152(sp)
1c005e42:	40d45433          	sra	s0,s0,a3
1c005e46:	fc143433          	p.bclr	s0,s0,30,1
1c005e4a:	c41d                	beqz	s0,1c005e78 <S38_Conv2d_32x16x3x3_Relu+0x2c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005e4c:	10000593          	li	a1,256
1c005e50:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005e54:	30061073          	csrw	mstatus,a2
1c005e58:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005e5c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005e60:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e64:	30047673          	csrrci	a2,mstatus,8
1c005e68:	40472783          	lw	a5,1028(a4)
1c005e6c:	46ea                	lw	a3,152(sp)
1c005e6e:	40d7d7b3          	sra	a5,a5,a3
1c005e72:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005e76:	fff9                	bnez	a5,1c005e54 <S38_Conv2d_32x16x3x3_Relu+0x29e>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c005e78:	4785                	li	a5,1
1c005e7a:	00d796b3          	sll	a3,a5,a3
1c005e7e:	002047b7          	lui	a5,0x204
1c005e82:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005e86:	30061073          	csrw	mstatus,a2
1c005e8a:	50fe                	lw	ra,252(sp)
1c005e8c:	546e                	lw	s0,248(sp)
1c005e8e:	54de                	lw	s1,244(sp)
1c005e90:	594e                	lw	s2,240(sp)
1c005e92:	59be                	lw	s3,236(sp)
1c005e94:	5a2e                	lw	s4,232(sp)
1c005e96:	6111                	addi	sp,sp,256
1c005e98:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005e9a:	30047673          	csrrci	a2,mstatus,8
1c005e9e:	4047a783          	lw	a5,1028(a5)
1c005ea2:	56e6                	lw	a3,120(sp)
1c005ea4:	40d7d7b3          	sra	a5,a5,a3
1c005ea8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005eac:	c79d                	beqz	a5,1c005eda <S38_Conv2d_32x16x3x3_Relu+0x324>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005eae:	10000593          	li	a1,256
1c005eb2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005eb6:	30061073          	csrw	mstatus,a2
1c005eba:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005ebe:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005ec2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005ec6:	30047673          	csrrci	a2,mstatus,8
1c005eca:	40472783          	lw	a5,1028(a4)
1c005ece:	56e6                	lw	a3,120(sp)
1c005ed0:	40d7d7b3          	sra	a5,a5,a3
1c005ed4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005ed8:	fff9                	bnez	a5,1c005eb6 <S38_Conv2d_32x16x3x3_Relu+0x300>
1c005eda:	4785                	li	a5,1
1c005edc:	00d796b3          	sll	a3,a5,a3
1c005ee0:	002047b7          	lui	a5,0x204
1c005ee4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005ee8:	30061073          	csrw	mstatus,a2
1c005eec:	b585                	j	1c005d4c <S38_Conv2d_32x16x3x3_Relu+0x196>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005eee:	30047673          	csrrci	a2,mstatus,8
1c005ef2:	4047a783          	lw	a5,1028(a5)
1c005ef6:	46e6                	lw	a3,88(sp)
1c005ef8:	40d7d7b3          	sra	a5,a5,a3
1c005efc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005f00:	c79d                	beqz	a5,1c005f2e <S38_Conv2d_32x16x3x3_Relu+0x378>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005f02:	10000593          	li	a1,256
1c005f06:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005f0a:	30061073          	csrw	mstatus,a2
1c005f0e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005f12:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005f16:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f1a:	30047673          	csrrci	a2,mstatus,8
1c005f1e:	40472783          	lw	a5,1028(a4)
1c005f22:	46e6                	lw	a3,88(sp)
1c005f24:	40d7d7b3          	sra	a5,a5,a3
1c005f28:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005f2c:	fff9                	bnez	a5,1c005f0a <S38_Conv2d_32x16x3x3_Relu+0x354>
1c005f2e:	4785                	li	a5,1
1c005f30:	00d796b3          	sll	a3,a5,a3
1c005f34:	002047b7          	lui	a5,0x204
1c005f38:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005f3c:	30061073          	csrw	mstatus,a2
1c005f40:	bb6d                	j	1c005cfa <S38_Conv2d_32x16x3x3_Relu+0x144>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f42:	30047673          	csrrci	a2,mstatus,8
1c005f46:	4047a783          	lw	a5,1028(a5)
1c005f4a:	56e2                	lw	a3,56(sp)
1c005f4c:	40d7d7b3          	sra	a5,a5,a3
1c005f50:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005f54:	c79d                	beqz	a5,1c005f82 <S38_Conv2d_32x16x3x3_Relu+0x3cc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c005f56:	10000813          	li	a6,256
1c005f5a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c005f5e:	30061073          	csrw	mstatus,a2
1c005f62:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c005f66:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c005f6a:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c005f6e:	30047673          	csrrci	a2,mstatus,8
1c005f72:	40472783          	lw	a5,1028(a4)
1c005f76:	56e2                	lw	a3,56(sp)
1c005f78:	40d7d7b3          	sra	a5,a5,a3
1c005f7c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c005f80:	fff9                	bnez	a5,1c005f5e <S38_Conv2d_32x16x3x3_Relu+0x3a8>
1c005f82:	4785                	li	a5,1
1c005f84:	00d796b3          	sll	a3,a5,a3
1c005f88:	002047b7          	lui	a5,0x204
1c005f8c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c005f90:	30061073          	csrw	mstatus,a2
1c005f94:	b331                	j	1c005ca0 <S38_Conv2d_32x16x3x3_Relu+0xea>

1c005f96 <S41_Conv2d_32x16x1x1>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c005f96:	7111                	addi	sp,sp,-256
1c005f98:	d5d2                	sw	s4,232(sp)
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
	KerArg0->NormBias = (signed char) (11);
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
	KerArg1->W = (unsigned short int) (20);
1c005f9a:	1c0172b7          	lui	t0,0x1c017
{
1c005f9e:	8a36                	mv	s4,a3
	KerArg0->NormBias = (signed char) (11);
1c005fa0:	46ad                	li	a3,11
1c005fa2:	00d10b23          	sb	a3,22(sp)
	KerArg1->W = (unsigned short int) (20);
1c005fa6:	1e02a683          	lw	a3,480(t0) # 1c0171e0 <__clz_tab+0x5c8>
{
1c005faa:	d7ce                	sw	s3,236(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c005fac:	100009b7          	lui	s3,0x10000
1c005fb0:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
1c005fb4:	0009a803          	lw	a6,0(s3)
	KerArg1->UsedW = (unsigned short int) (19);
	KerArg1->H = (unsigned short int) (20);
	KerArg1->InFeatures = (unsigned short int) (16);
1c005fb8:	1c017fb7          	lui	t6,0x1c017
	KerArg1->W = (unsigned short int) (20);
1c005fbc:	df36                	sw	a3,188(sp)
	KerArg1->H = (unsigned short int) (20);
1c005fbe:	46d1                	li	a3,20
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005fc0:	678d                	lui	a5,0x3
	KerArg1->H = (unsigned short int) (20);
1c005fc2:	0cd11023          	sh	a3,192(sp)
	KerArg1->InFeatures = (unsigned short int) (16);
1c005fc6:	1d8fa683          	lw	a3,472(t6) # 1c0171d8 <__clz_tab+0x5c0>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005fca:	20078893          	addi	a7,a5,512 # 3200 <__rt_stack_size+0x2a00>
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+12864);
1c005fce:	24078313          	addi	t1,a5,576
	KerArg1->Pad = (v4s) 0;
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+20288);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+13888);
1c005fd2:	64078793          	addi	a5,a5,1600
1c005fd6:	97c2                	add	a5,a5,a6
	KerArg1->InFeatures = (unsigned short int) (16);
1c005fd8:	c3b6                	sw	a3,196(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+13888);
1c005fda:	d23e                	sw	a5,36(sp)
	KerArg1->TotalInFeatures = (short int) (16);
1c005fdc:	46c1                	li	a3,16
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (-32768);
1c005fde:	77e1                	lui	a5,0xffff8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c005fe0:	6715                	lui	a4,0x5
	KerArg1->TotalInFeatures = (short int) (16);
1c005fe2:	0cd11423          	sh	a3,200(sp)
	KerArg2->LB = (int) (-32768);
1c005fe6:	d63e                	sw	a5,44(sp)
	KerArg1->Pad = (v4s) 0;
1c005fe8:	000076d7          	pv.add.sci.b	a3,zero,0
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c005fec:	f4070713          	addi	a4,a4,-192 # 4f40 <__rt_stack_size+0x4740>
	KerArg2->UB = (int) (32767);
1c005ff0:	67a1                	lui	a5,0x8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c005ff2:	9742                	add	a4,a4,a6
	KerArg0->W = (unsigned short int) (10);
1c005ff4:	00506f57          	pv.add.sci.h	t5,zero,10
	KerArg0->OutFeatures = (unsigned short int) (32);
1c005ff8:	02000e13          	li	t3,32
	KerArg1->Norm = (unsigned char) (14);
1c005ffc:	4eb9                	li	t4,14
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c005ffe:	98c2                	add	a7,a7,a6
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+12864);
1c006000:	9342                	add	t1,t1,a6
	KerArg1->Pad = (v4s) 0;
1c006002:	cbb6                	sw	a3,212(sp)
	KerArg2->UB = (int) (32767);
1c006004:	17fd                	addi	a5,a5,-1
	KerArg1->Orientation = (unsigned char) (1);
1c006006:	4685                	li	a3,1
{
1c006008:	df86                	sw	ra,252(sp)
1c00600a:	dda2                	sw	s0,248(sp)
1c00600c:	dba6                	sw	s1,244(sp)
1c00600e:	d9ca                	sw	s2,240(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c006010:	c63a                	sw	a4,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c006012:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006014:	01c11a23          	sh	t3,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+12800);
1c006018:	cc46                	sw	a7,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c00601a:	dd42                	sw	a6,184(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+12864);
1c00601c:	c79a                	sw	t1,204(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+20288);
1c00601e:	c9ba                	sw	a4,208(sp)
	KerArg1->Norm = (unsigned char) (14);
1c006020:	0dd10c23          	sb	t4,216(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c006024:	0cd10da3          	sb	a3,219(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+20288);
1c006028:	ce3a                	sw	a4,28(sp)
	KerArg2->W = (unsigned short int) (10);
1c00602a:	d07a                	sw	t5,32(sp)
	KerArg2->Norm = (unsigned char) (14);
1c00602c:	03d10423          	sb	t4,40(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c006030:	03c11523          	sh	t3,42(sp)
	KerArg2->UB = (int) (32767);
1c006034:	d83e                	sw	a5,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006036:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00603a:	002047b7          	lui	a5,0x204
1c00603e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006042:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006046:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00604a:	c1574733          	p.bset	a4,a4,0,21
1c00604e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006052:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006056:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00605a:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c00605c:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c00605e:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006062:	4726                	lw	a4,72(sp)
1c006064:	2a070d63          	beqz	a4,1c00631e <S41_Conv2d_32x16x1x1+0x388>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006068:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00606a:	02000713          	li	a4,32
1c00606e:	ca89                	beqz	a3,1c006080 <S41_Conv2d_32x16x1x1+0xea>
1c006070:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006074:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006078:	00e7a223          	sw	a4,4(a5)
1c00607c:	46c6                	lw	a3,80(sp)
1c00607e:	faed                	bnez	a3,1c006070 <S41_Conv2d_32x16x1x1+0xda>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12864), 1024, 0, &DmaR_Evt2);
1c006080:	0009a683          	lw	a3,0(s3)
1c006084:	678d                	lui	a5,0x3
1c006086:	24078793          	addi	a5,a5,576 # 3240 <__rt_stack_size+0x2a40>
1c00608a:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00608c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006090:	002047b7          	lui	a5,0x204
1c006094:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006098:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00609c:	40070713          	addi	a4,a4,1024 # b0400 <__L2+0x30400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0060a0:	c1574733          	p.bset	a4,a4,0,21
1c0060a4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0060a8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0060ac:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0060b0:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c0060b2:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c0060b4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0060b8:	5726                	lw	a4,104(sp)
1c0060ba:	20070863          	beqz	a4,1c0062ca <S41_Conv2d_32x16x1x1+0x334>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0060be:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0060c0:	02000713          	li	a4,32
1c0060c4:	ca89                	beqz	a3,1c0060d6 <S41_Conv2d_32x16x1x1+0x140>
1c0060c6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0060ca:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0060ce:	00e7a223          	sw	a4,4(a5)
1c0060d2:	56c6                	lw	a3,112(sp)
1c0060d4:	faed                	bnez	a3,1c0060c6 <S41_Conv2d_32x16x1x1+0x130>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 12800, 0, &DmaR_Evt3);
1c0060d6:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0060da:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0060de:	002047b7          	lui	a5,0x204
1c0060e2:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0060e6:	00033737          	lui	a4,0x33
1c0060ea:	20070713          	addi	a4,a4,512 # 33200 <__L1Cl+0x23200>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0060ee:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0060f2:	c1574733          	p.bset	a4,a4,0,21
1c0060f6:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0060fa:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0060fe:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c006102:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c006104:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c006106:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00610a:	472a                	lw	a4,136(sp)
1c00610c:	16070563          	beqz	a4,1c006276 <S41_Conv2d_32x16x1x1+0x2e0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006110:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006112:	02000713          	li	a4,32
1c006116:	ca89                	beqz	a3,1c006128 <S41_Conv2d_32x16x1x1+0x192>
1c006118:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00611c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006120:	00e7a223          	sw	a4,4(a5)
1c006124:	46ca                	lw	a3,144(sp)
1c006126:	faed                	bnez	a3,1c006118 <S41_Conv2d_32x16x1x1+0x182>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006128:	0ff00913          	li	s2,255
1c00612c:	00204437          	lui	s0,0x204
1c006130:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006134:	20040493          	addi	s1,s0,512
1c006138:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00613c:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006140:	1c00c7b7          	lui	a5,0x1c00c
1c006144:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c006148:	08f42023          	sw	a5,128(s0)
1c00614c:	0068                	addi	a0,sp,12
1c00614e:	08a42023          	sw	a0,128(s0)
1c006152:	2b5050ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006156:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (19);
1c00615a:	47cd                	li	a5,19
1c00615c:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006160:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006164:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006168:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00616c:	1c00d7b7          	lui	a5,0x1c00d
1c006170:	51878793          	addi	a5,a5,1304 # 1c00d518 <KerParConv1x1Stride2_DP_fp>
1c006174:	08f42023          	sw	a5,128(s0)
1c006178:	1928                	addi	a0,sp,184
1c00617a:	08a42023          	sw	a0,128(s0)
1c00617e:	39a070ef          	jal	ra,1c00d518 <KerParConv1x1Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006182:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006186:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00618a:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00618e:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006192:	1c00c7b7          	lui	a5,0x1c00c
1c006196:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c00619a:	08f42023          	sw	a5,128(s0)
1c00619e:	0868                	addi	a0,sp,28
1c0061a0:	08a42023          	sw	a0,128(s0)
1c0061a4:	49d050ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0061a8:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+13888), 6400, 1, &DmaW_Evt1);
1c0061ac:	678d                	lui	a5,0x3
1c0061ae:	0009a703          	lw	a4,0(s3)
1c0061b2:	64078793          	addi	a5,a5,1600 # 3640 <__rt_stack_size+0x2e40>
1c0061b6:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0061b8:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0061bc:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0061c0:	000227b7          	lui	a5,0x22
1c0061c4:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0061c8:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0061cc:	c157c7b3          	p.bset	a5,a5,0,21
1c0061d0:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0061d4:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0061d8:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c0061dc:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c0061de:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c0061e0:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0061e4:	57aa                	lw	a5,168(sp)
1c0061e6:	c79d                	beqz	a5,1c006214 <S41_Conv2d_32x16x1x1+0x27e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0061e8:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0061ea:	02000713          	li	a4,32
1c0061ee:	002047b7          	lui	a5,0x204
1c0061f2:	ca89                	beqz	a3,1c006204 <S41_Conv2d_32x16x1x1+0x26e>
1c0061f4:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0061f8:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0061fc:	00e7a223          	sw	a4,4(a5)
1c006200:	56ca                	lw	a3,176(sp)
1c006202:	faed                	bnez	a3,1c0061f4 <S41_Conv2d_32x16x1x1+0x25e>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c006204:	50fe                	lw	ra,252(sp)
1c006206:	546e                	lw	s0,248(sp)
1c006208:	54de                	lw	s1,244(sp)
1c00620a:	594e                	lw	s2,240(sp)
1c00620c:	59be                	lw	s3,236(sp)
1c00620e:	5a2e                	lw	s4,232(sp)
1c006210:	6111                	addi	sp,sp,256
1c006212:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006214:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c006218:	40442403          	lw	s0,1028(s0)
1c00621c:	46ea                	lw	a3,152(sp)
1c00621e:	40d45433          	sra	s0,s0,a3
1c006222:	fc143433          	p.bclr	s0,s0,30,1
1c006226:	c41d                	beqz	s0,1c006254 <S41_Conv2d_32x16x1x1+0x2be>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006228:	10000593          	li	a1,256
1c00622c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006230:	30061073          	csrw	mstatus,a2
1c006234:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006238:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00623c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006240:	30047673          	csrrci	a2,mstatus,8
1c006244:	40472783          	lw	a5,1028(a4)
1c006248:	46ea                	lw	a3,152(sp)
1c00624a:	40d7d7b3          	sra	a5,a5,a3
1c00624e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006252:	fff9                	bnez	a5,1c006230 <S41_Conv2d_32x16x1x1+0x29a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006254:	4785                	li	a5,1
1c006256:	00d796b3          	sll	a3,a5,a3
1c00625a:	002047b7          	lui	a5,0x204
1c00625e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006262:	30061073          	csrw	mstatus,a2
1c006266:	50fe                	lw	ra,252(sp)
1c006268:	546e                	lw	s0,248(sp)
1c00626a:	54de                	lw	s1,244(sp)
1c00626c:	594e                	lw	s2,240(sp)
1c00626e:	59be                	lw	s3,236(sp)
1c006270:	5a2e                	lw	s4,232(sp)
1c006272:	6111                	addi	sp,sp,256
1c006274:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006276:	30047673          	csrrci	a2,mstatus,8
1c00627a:	4047a783          	lw	a5,1028(a5)
1c00627e:	56e6                	lw	a3,120(sp)
1c006280:	40d7d7b3          	sra	a5,a5,a3
1c006284:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006288:	c79d                	beqz	a5,1c0062b6 <S41_Conv2d_32x16x1x1+0x320>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00628a:	10000593          	li	a1,256
1c00628e:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006292:	30061073          	csrw	mstatus,a2
1c006296:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00629a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00629e:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0062a2:	30047673          	csrrci	a2,mstatus,8
1c0062a6:	40472783          	lw	a5,1028(a4)
1c0062aa:	56e6                	lw	a3,120(sp)
1c0062ac:	40d7d7b3          	sra	a5,a5,a3
1c0062b0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0062b4:	fff9                	bnez	a5,1c006292 <S41_Conv2d_32x16x1x1+0x2fc>
1c0062b6:	4785                	li	a5,1
1c0062b8:	00d796b3          	sll	a3,a5,a3
1c0062bc:	002047b7          	lui	a5,0x204
1c0062c0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0062c4:	30061073          	csrw	mstatus,a2
1c0062c8:	b585                	j	1c006128 <S41_Conv2d_32x16x1x1+0x192>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0062ca:	30047673          	csrrci	a2,mstatus,8
1c0062ce:	4047a783          	lw	a5,1028(a5)
1c0062d2:	46e6                	lw	a3,88(sp)
1c0062d4:	40d7d7b3          	sra	a5,a5,a3
1c0062d8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0062dc:	c79d                	beqz	a5,1c00630a <S41_Conv2d_32x16x1x1+0x374>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0062de:	10000593          	li	a1,256
1c0062e2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0062e6:	30061073          	csrw	mstatus,a2
1c0062ea:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0062ee:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0062f2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0062f6:	30047673          	csrrci	a2,mstatus,8
1c0062fa:	40472783          	lw	a5,1028(a4)
1c0062fe:	46e6                	lw	a3,88(sp)
1c006300:	40d7d7b3          	sra	a5,a5,a3
1c006304:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006308:	fff9                	bnez	a5,1c0062e6 <S41_Conv2d_32x16x1x1+0x350>
1c00630a:	4785                	li	a5,1
1c00630c:	00d796b3          	sll	a3,a5,a3
1c006310:	002047b7          	lui	a5,0x204
1c006314:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006318:	30061073          	csrw	mstatus,a2
1c00631c:	bb6d                	j	1c0060d6 <S41_Conv2d_32x16x1x1+0x140>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00631e:	30047673          	csrrci	a2,mstatus,8
1c006322:	4047a783          	lw	a5,1028(a5)
1c006326:	56e2                	lw	a3,56(sp)
1c006328:	40d7d7b3          	sra	a5,a5,a3
1c00632c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006330:	c79d                	beqz	a5,1c00635e <S41_Conv2d_32x16x1x1+0x3c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006332:	10000813          	li	a6,256
1c006336:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00633a:	30061073          	csrw	mstatus,a2
1c00633e:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006342:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006346:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00634a:	30047673          	csrrci	a2,mstatus,8
1c00634e:	40472783          	lw	a5,1028(a4)
1c006352:	56e2                	lw	a3,56(sp)
1c006354:	40d7d7b3          	sra	a5,a5,a3
1c006358:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00635c:	fff9                	bnez	a5,1c00633a <S41_Conv2d_32x16x1x1+0x3a4>
1c00635e:	4785                	li	a5,1
1c006360:	00d796b3          	sll	a3,a5,a3
1c006364:	002047b7          	lui	a5,0x204
1c006368:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00636c:	30061073          	csrw	mstatus,a2
1c006370:	bb01                	j	1c006080 <S41_Conv2d_32x16x1x1+0xea>

1c006372 <S44_Conv2d_32x32x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c006372:	7111                	addi	sp,sp,-256
1c006374:	d7ce                	sw	s3,236(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x10], 2][D0, [0 x 6400, 6400]]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006376:	100009b7          	lui	s3,0x10000
1c00637a:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
1c00637e:	0009a883          	lw	a7,0(s3)
{
1c006382:	d5d2                	sw	s4,232(sp)
	KerArg0->W = (unsigned short int) (10);
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006384:	6789                	lui	a5,0x2
{
1c006386:	8a36                	mv	s4,a3
	KerArg0->NormBias = (signed char) (13);
1c006388:	46b5                	li	a3,13
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->H = (unsigned short int) (10);
	KerArg1->InFeatures = (unsigned short int) (32);
1c00638a:	1c0172b7          	lui	t0,0x1c017
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c00638e:	90078313          	addi	t1,a5,-1792 # 1900 <__rt_stack_size+0x1100>
	KerArg0->NormBias = (signed char) (13);
1c006392:	00d10b23          	sb	a3,22(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006396:	94078793          	addi	a5,a5,-1728
	KerArg1->H = (unsigned short int) (10);
1c00639a:	46a9                	li	a3,10
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c00639c:	97c6                	add	a5,a5,a7
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c00639e:	6e21                	lui	t3,0x8
	KerArg1->H = (unsigned short int) (10);
1c0063a0:	0cd11023          	sh	a3,192(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c0063a4:	6719                	lui	a4,0x6
	KerArg1->InFeatures = (unsigned short int) (32);
1c0063a6:	1e42a683          	lw	a3,484(t0) # 1c0171e4 <__clz_tab+0x5cc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c0063aa:	a40e0813          	addi	a6,t3,-1472 # 7a40 <__rt_stack_size+0x7240>
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c0063ae:	c7be                	sw	a5,204(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c0063b0:	14070713          	addi	a4,a4,320 # 6140 <__rt_stack_size+0x5940>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0063b4:	020077d7          	pv.add.sci.b	a5,zero,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c0063b8:	9846                	add	a6,a6,a7
	KerArg0->W = (unsigned short int) (10);
1c0063ba:	00506f57          	pv.add.sci.h	t5,zero,10
	KerArg0->OutFeatures = (unsigned short int) (32);
1c0063be:	02000e93          	li	t4,32
	KerArg1->Norm = (unsigned char) (14);
1c0063c2:	4fb9                	li	t6,14
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c0063c4:	9346                	add	t1,t1,a7
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c0063c6:	9746                	add	a4,a4,a7
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c0063c8:	1e7d                	addi	t3,t3,-1
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c0063ca:	cbbe                	sw	a5,212(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0063cc:	4785                	li	a5,1
{
1c0063ce:	df86                	sw	ra,252(sp)
1c0063d0:	dda2                	sw	s0,248(sp)
1c0063d2:	dba6                	sw	s1,244(sp)
1c0063d4:	d9ca                	sw	s2,240(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c0063d6:	c642                	sw	a6,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c0063d8:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c0063da:	01d11a23          	sh	t4,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c0063de:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c0063e0:	dd46                	sw	a7,184(sp)
	KerArg1->W = (unsigned short int) (10);
1c0063e2:	df7a                	sw	t5,188(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c0063e4:	c3b6                	sw	a3,196(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c0063e6:	c9c2                	sw	a6,208(sp)
	KerArg1->Norm = (unsigned char) (14);
1c0063e8:	0df10c23          	sb	t6,216(sp)
	KerArg1->TotalInFeatures = (short int) (32);
1c0063ec:	0dd11423          	sh	t4,200(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0063f0:	0cf10da3          	sb	a5,219(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
1c0063f4:	ce42                	sw	a6,28(sp)
	KerArg2->W = (unsigned short int) (10);
1c0063f6:	d07a                	sw	t5,32(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c0063f8:	d23a                	sw	a4,36(sp)
	KerArg2->Norm = (unsigned char) (14);
1c0063fa:	03f10423          	sb	t6,40(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c0063fe:	03d11523          	sh	t4,42(sp)
	KerArg2->LB = (int) (0);
1c006402:	d602                	sw	zero,44(sp)
	KerArg2->UB = (int) (32767);
1c006404:	d872                	sw	t3,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006406:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00640a:	002047b7          	lui	a5,0x204
1c00640e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006412:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006416:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00641a:	c1574733          	p.bset	a4,a4,0,21
1c00641e:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006422:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006426:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c00642a:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c00642c:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c00642e:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006432:	4726                	lw	a4,72(sp)
1c006434:	2a070f63          	beqz	a4,1c0066f2 <S44_Conv2d_32x32x3x3_Relu+0x380>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006438:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00643a:	02000713          	li	a4,32
1c00643e:	ca89                	beqz	a3,1c006450 <S44_Conv2d_32x32x3x3_Relu+0xde>
1c006440:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006444:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006448:	00e7a223          	sw	a4,4(a5)
1c00644c:	46c6                	lw	a3,80(sp)
1c00644e:	faed                	bnez	a3,1c006440 <S44_Conv2d_32x32x3x3_Relu+0xce>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6464), 18432, 0, &DmaR_Evt2);
1c006450:	0009a683          	lw	a3,0(s3)
1c006454:	6789                	lui	a5,0x2
1c006456:	94078793          	addi	a5,a5,-1728 # 1940 <__rt_stack_size+0x1140>
1c00645a:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00645c:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006460:	002047b7          	lui	a5,0x204
1c006464:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006468:	00035737          	lui	a4,0x35
1c00646c:	80070713          	addi	a4,a4,-2048 # 34800 <__L1Cl+0x24800>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006470:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006474:	c1574733          	p.bset	a4,a4,0,21
1c006478:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00647c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006480:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006484:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c006486:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c006488:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00648c:	5726                	lw	a4,104(sp)
1c00648e:	20070863          	beqz	a4,1c00669e <S44_Conv2d_32x32x3x3_Relu+0x32c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006492:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006494:	02000713          	li	a4,32
1c006498:	ca89                	beqz	a3,1c0064aa <S44_Conv2d_32x32x3x3_Relu+0x138>
1c00649a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00649e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0064a2:	00e7a223          	sw	a4,4(a5)
1c0064a6:	56c6                	lw	a3,112(sp)
1c0064a8:	faed                	bnez	a3,1c00649a <S44_Conv2d_32x32x3x3_Relu+0x128>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt3);
1c0064aa:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0064ae:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0064b2:	002047b7          	lui	a5,0x204
1c0064b6:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0064ba:	00032737          	lui	a4,0x32
1c0064be:	90070713          	addi	a4,a4,-1792 # 31900 <__L1Cl+0x21900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0064c2:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0064c6:	c1574733          	p.bset	a4,a4,0,21
1c0064ca:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0064ce:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0064d2:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0064d6:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c0064d8:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c0064da:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0064de:	472a                	lw	a4,136(sp)
1c0064e0:	16070563          	beqz	a4,1c00664a <S44_Conv2d_32x32x3x3_Relu+0x2d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0064e4:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0064e6:	02000713          	li	a4,32
1c0064ea:	ca89                	beqz	a3,1c0064fc <S44_Conv2d_32x32x3x3_Relu+0x18a>
1c0064ec:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0064f0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0064f4:	00e7a223          	sw	a4,4(a5)
1c0064f8:	46ca                	lw	a3,144(sp)
1c0064fa:	faed                	bnez	a3,1c0064ec <S44_Conv2d_32x32x3x3_Relu+0x17a>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0064fc:	0ff00913          	li	s2,255
1c006500:	00204437          	lui	s0,0x204
1c006504:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006508:	20040493          	addi	s1,s0,512
1c00650c:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006510:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006514:	1c00c7b7          	lui	a5,0x1c00c
1c006518:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c00651c:	08f42023          	sw	a5,128(s0)
1c006520:	0068                	addi	a0,sp,12
1c006522:	08a42023          	sw	a0,128(s0)
1c006526:	6e0050ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00652a:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (10);
1c00652e:	47a9                	li	a5,10
1c006530:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006534:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006538:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00653c:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006540:	1c00d7b7          	lui	a5,0x1c00d
1c006544:	70678793          	addi	a5,a5,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c006548:	08f42023          	sw	a5,128(s0)
1c00654c:	1928                	addi	a0,sp,184
1c00654e:	08a42023          	sw	a0,128(s0)
1c006552:	1b4070ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006556:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00655a:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00655e:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006562:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006566:	1c00c7b7          	lui	a5,0x1c00c
1c00656a:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c00656e:	08f42023          	sw	a5,128(s0)
1c006572:	0868                	addi	a0,sp,28
1c006574:	08a42023          	sw	a0,128(s0)
1c006578:	0c9050ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00657c:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+24896), 6400, 1, &DmaW_Evt1);
1c006580:	6799                	lui	a5,0x6
1c006582:	0009a703          	lw	a4,0(s3)
1c006586:	14078793          	addi	a5,a5,320 # 6140 <__rt_stack_size+0x5940>
1c00658a:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00658c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006590:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006594:	000227b7          	lui	a5,0x22
1c006598:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00659c:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0065a0:	c157c7b3          	p.bset	a5,a5,0,21
1c0065a4:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0065a8:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0065ac:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c0065b0:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c0065b2:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c0065b4:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0065b8:	57aa                	lw	a5,168(sp)
1c0065ba:	c79d                	beqz	a5,1c0065e8 <S44_Conv2d_32x32x3x3_Relu+0x276>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0065bc:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0065be:	02000713          	li	a4,32
1c0065c2:	002047b7          	lui	a5,0x204
1c0065c6:	ca89                	beqz	a3,1c0065d8 <S44_Conv2d_32x32x3x3_Relu+0x266>
1c0065c8:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0065cc:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0065d0:	00e7a223          	sw	a4,4(a5)
1c0065d4:	56ca                	lw	a3,176(sp)
1c0065d6:	faed                	bnez	a3,1c0065c8 <S44_Conv2d_32x32x3x3_Relu+0x256>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0065d8:	50fe                	lw	ra,252(sp)
1c0065da:	546e                	lw	s0,248(sp)
1c0065dc:	54de                	lw	s1,244(sp)
1c0065de:	594e                	lw	s2,240(sp)
1c0065e0:	59be                	lw	s3,236(sp)
1c0065e2:	5a2e                	lw	s4,232(sp)
1c0065e4:	6111                	addi	sp,sp,256
1c0065e6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0065e8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0065ec:	40442403          	lw	s0,1028(s0)
1c0065f0:	46ea                	lw	a3,152(sp)
1c0065f2:	40d45433          	sra	s0,s0,a3
1c0065f6:	fc143433          	p.bclr	s0,s0,30,1
1c0065fa:	c41d                	beqz	s0,1c006628 <S44_Conv2d_32x32x3x3_Relu+0x2b6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0065fc:	10000593          	li	a1,256
1c006600:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006604:	30061073          	csrw	mstatus,a2
1c006608:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00660c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006610:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006614:	30047673          	csrrci	a2,mstatus,8
1c006618:	40472783          	lw	a5,1028(a4)
1c00661c:	46ea                	lw	a3,152(sp)
1c00661e:	40d7d7b3          	sra	a5,a5,a3
1c006622:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006626:	fff9                	bnez	a5,1c006604 <S44_Conv2d_32x32x3x3_Relu+0x292>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006628:	4785                	li	a5,1
1c00662a:	00d796b3          	sll	a3,a5,a3
1c00662e:	002047b7          	lui	a5,0x204
1c006632:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006636:	30061073          	csrw	mstatus,a2
1c00663a:	50fe                	lw	ra,252(sp)
1c00663c:	546e                	lw	s0,248(sp)
1c00663e:	54de                	lw	s1,244(sp)
1c006640:	594e                	lw	s2,240(sp)
1c006642:	59be                	lw	s3,236(sp)
1c006644:	5a2e                	lw	s4,232(sp)
1c006646:	6111                	addi	sp,sp,256
1c006648:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00664a:	30047673          	csrrci	a2,mstatus,8
1c00664e:	4047a783          	lw	a5,1028(a5)
1c006652:	56e6                	lw	a3,120(sp)
1c006654:	40d7d7b3          	sra	a5,a5,a3
1c006658:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00665c:	c79d                	beqz	a5,1c00668a <S44_Conv2d_32x32x3x3_Relu+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00665e:	10000593          	li	a1,256
1c006662:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006666:	30061073          	csrw	mstatus,a2
1c00666a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00666e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006672:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006676:	30047673          	csrrci	a2,mstatus,8
1c00667a:	40472783          	lw	a5,1028(a4)
1c00667e:	56e6                	lw	a3,120(sp)
1c006680:	40d7d7b3          	sra	a5,a5,a3
1c006684:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006688:	fff9                	bnez	a5,1c006666 <S44_Conv2d_32x32x3x3_Relu+0x2f4>
1c00668a:	4785                	li	a5,1
1c00668c:	00d796b3          	sll	a3,a5,a3
1c006690:	002047b7          	lui	a5,0x204
1c006694:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006698:	30061073          	csrw	mstatus,a2
1c00669c:	b585                	j	1c0064fc <S44_Conv2d_32x32x3x3_Relu+0x18a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00669e:	30047673          	csrrci	a2,mstatus,8
1c0066a2:	4047a783          	lw	a5,1028(a5)
1c0066a6:	46e6                	lw	a3,88(sp)
1c0066a8:	40d7d7b3          	sra	a5,a5,a3
1c0066ac:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0066b0:	c79d                	beqz	a5,1c0066de <S44_Conv2d_32x32x3x3_Relu+0x36c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0066b2:	10000593          	li	a1,256
1c0066b6:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0066ba:	30061073          	csrw	mstatus,a2
1c0066be:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0066c2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0066c6:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0066ca:	30047673          	csrrci	a2,mstatus,8
1c0066ce:	40472783          	lw	a5,1028(a4)
1c0066d2:	46e6                	lw	a3,88(sp)
1c0066d4:	40d7d7b3          	sra	a5,a5,a3
1c0066d8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0066dc:	fff9                	bnez	a5,1c0066ba <S44_Conv2d_32x32x3x3_Relu+0x348>
1c0066de:	4785                	li	a5,1
1c0066e0:	00d796b3          	sll	a3,a5,a3
1c0066e4:	002047b7          	lui	a5,0x204
1c0066e8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0066ec:	30061073          	csrw	mstatus,a2
1c0066f0:	bb6d                	j	1c0064aa <S44_Conv2d_32x32x3x3_Relu+0x138>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0066f2:	30047673          	csrrci	a2,mstatus,8
1c0066f6:	4047a783          	lw	a5,1028(a5)
1c0066fa:	56e2                	lw	a3,56(sp)
1c0066fc:	40d7d7b3          	sra	a5,a5,a3
1c006700:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006704:	c79d                	beqz	a5,1c006732 <S44_Conv2d_32x32x3x3_Relu+0x3c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006706:	10000813          	li	a6,256
1c00670a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00670e:	30061073          	csrw	mstatus,a2
1c006712:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006716:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00671a:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00671e:	30047673          	csrrci	a2,mstatus,8
1c006722:	40472783          	lw	a5,1028(a4)
1c006726:	56e2                	lw	a3,56(sp)
1c006728:	40d7d7b3          	sra	a5,a5,a3
1c00672c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006730:	fff9                	bnez	a5,1c00670e <S44_Conv2d_32x32x3x3_Relu+0x39c>
1c006732:	4785                	li	a5,1
1c006734:	00d796b3          	sll	a3,a5,a3
1c006738:	002047b7          	lui	a5,0x204
1c00673c:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006740:	30061073          	csrw	mstatus,a2
1c006744:	b331                	j	1c006450 <S44_Conv2d_32x32x3x3_Relu+0xde>

1c006746 <S45_MatAdd_32x10x10>:
void S45_MatAdd_32x10x10(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c006746:	7135                	addi	sp,sp,-160
1c006748:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 6400, 6400]][Tile0, 1:[10x10], 2]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c00674a:	10000937          	lui	s2,0x10000
1c00674e:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c006752:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+12800);
1c006756:	678d                	lui	a5,0x3
1c006758:	20078793          	addi	a5,a5,512 # 3200 <__rt_stack_size+0x2a00>
1c00675c:	97b6                	add	a5,a5,a3
1c00675e:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (10);
1c006760:	005067d7          	pv.add.sci.h	a5,zero,10
1c006764:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (10);
	KerArg0->N = (unsigned short int) (32);
1c006766:	02000793          	li	a5,32
1c00676a:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c00676e:	77e1                	lui	a5,0xffff8
1c006770:	dabe                	sw	a5,116(sp)
1c006772:	67a1                	lui	a5,0x8
1c006774:	17fd                	addi	a5,a5,-1
1c006776:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c006778:	6809                	lui	a6,0x2
	KerArg0->UB = (int) (32767);
1c00677a:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c00677c:	90080813          	addi	a6,a6,-1792 # 1900 <__rt_stack_size+0x1100>
	KerArg0->UB = (int) (32767);
1c006780:	b0c78793          	addi	a5,a5,-1268 # b0c <__rt_stack_size+0x30c>
{
1c006784:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c006786:	01068733          	add	a4,a3,a6
	KerArg0->UB = (int) (32767);
1c00678a:	06f11e23          	sh	a5,124(sp)
{
1c00678e:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (12);
	KerArg0->In2_Q = (unsigned char) (11);
1c006790:	47ad                	li	a5,11
{
1c006792:	cf06                	sw	ra,156(sp)
1c006794:	cd22                	sw	s0,152(sp)
1c006796:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c006798:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c00679a:	d2ba                	sw	a4,100(sp)
	KerArg0->In2_Q = (unsigned char) (11);
1c00679c:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0067a0:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0067a4:	002047b7          	lui	a5,0x204
1c0067a8:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0067ac:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0067b0:	de082733          	p.insert	a4,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0067b4:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0067b8:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0067bc:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0067c0:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0067c4:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0067c8:	c046                	sw	a7,0(sp)
        copy->length = 0;
1c0067ca:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c0067cc:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0067d0:	4742                	lw	a4,16(sp)
1c0067d2:	1c070163          	beqz	a4,1c006994 <S45_MatAdd_32x10x10+0x24e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0067d6:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0067d8:	02000713          	li	a4,32
1c0067dc:	ca89                	beqz	a3,1c0067ee <S45_MatAdd_32x10x10+0xa8>
1c0067de:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0067e2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0067e6:	00e7a223          	sw	a4,4(a5)
1c0067ea:	46e2                	lw	a3,24(sp)
1c0067ec:	faed                	bnez	a3,1c0067de <S45_MatAdd_32x10x10+0x98>
	KerArg0->Out_Q = (unsigned char) (11);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 6400, 0, &DmaR_Evt2);
1c0067ee:	00092603          	lw	a2,0(s2)
1c0067f2:	6689                	lui	a3,0x2
1c0067f4:	90068693          	addi	a3,a3,-1792 # 1900 <__rt_stack_size+0x1100>
1c0067f8:	9636                	add	a2,a2,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0067fa:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0067fe:	002047b7          	lui	a5,0x204
1c006802:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c006806:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00680a:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00680e:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c006812:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006816:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00681a:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00681e:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006822:	d042                	sw	a6,32(sp)
        copy->length = 0;
1c006824:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c006826:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00682a:	5742                	lw	a4,48(sp)
1c00682c:	10070a63          	beqz	a4,1c006940 <S45_MatAdd_32x10x10+0x1fa>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006830:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006832:	02000713          	li	a4,32
1c006836:	ca89                	beqz	a3,1c006848 <S45_MatAdd_32x10x10+0x102>
1c006838:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00683c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006840:	00e7a223          	sw	a4,4(a5)
1c006844:	56e2                	lw	a3,56(sp)
1c006846:	faed                	bnez	a3,1c006838 <S45_MatAdd_32x10x10+0xf2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006848:	0ff00793          	li	a5,255
1c00684c:	00204437          	lui	s0,0x204
1c006850:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006854:	20040993          	addi	s3,s0,512
1c006858:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00685c:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006860:	1c0107b7          	lui	a5,0x1c010
1c006864:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c006868:	08f42023          	sw	a5,128(s0)
1c00686c:	1088                	addi	a0,sp,96
1c00686e:	08a42023          	sw	a0,128(s0)
1c006872:	580090ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006876:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 6400, 1, &DmaW_Evt1);
1c00687a:	678d                	lui	a5,0x3
1c00687c:	00092703          	lw	a4,0(s2)
1c006880:	20078793          	addi	a5,a5,512 # 3200 <__rt_stack_size+0x2a00>
1c006884:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006886:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00688a:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00688e:	000227b7          	lui	a5,0x22
1c006892:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006896:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00689a:	c157c7b3          	p.bset	a5,a5,0,21
1c00689e:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0068a2:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0068a6:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c0068aa:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c0068ac:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c0068ae:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0068b2:	47c6                	lw	a5,80(sp)
1c0068b4:	c795                	beqz	a5,1c0068e0 <S45_MatAdd_32x10x10+0x19a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0068b6:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0068b8:	02000713          	li	a4,32
1c0068bc:	002047b7          	lui	a5,0x204
1c0068c0:	ca89                	beqz	a3,1c0068d2 <S45_MatAdd_32x10x10+0x18c>
1c0068c2:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0068c6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0068ca:	00e7a223          	sw	a4,4(a5)
1c0068ce:	46e6                	lw	a3,88(sp)
1c0068d0:	faed                	bnez	a3,1c0068c2 <S45_MatAdd_32x10x10+0x17c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0068d2:	40fa                	lw	ra,156(sp)
1c0068d4:	446a                	lw	s0,152(sp)
1c0068d6:	44da                	lw	s1,148(sp)
1c0068d8:	494a                	lw	s2,144(sp)
1c0068da:	49ba                	lw	s3,140(sp)
1c0068dc:	610d                	addi	sp,sp,160
1c0068de:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0068e0:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0068e4:	40442403          	lw	s0,1028(s0)
1c0068e8:	4686                	lw	a3,64(sp)
1c0068ea:	40d45433          	sra	s0,s0,a3
1c0068ee:	fc143433          	p.bclr	s0,s0,30,1
1c0068f2:	c41d                	beqz	s0,1c006920 <S45_MatAdd_32x10x10+0x1da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0068f4:	10000593          	li	a1,256
1c0068f8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0068fc:	30061073          	csrw	mstatus,a2
1c006900:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006904:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006908:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00690c:	30047673          	csrrci	a2,mstatus,8
1c006910:	40472783          	lw	a5,1028(a4)
1c006914:	4686                	lw	a3,64(sp)
1c006916:	40d7d7b3          	sra	a5,a5,a3
1c00691a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00691e:	fff9                	bnez	a5,1c0068fc <S45_MatAdd_32x10x10+0x1b6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006920:	4785                	li	a5,1
1c006922:	00d796b3          	sll	a3,a5,a3
1c006926:	002047b7          	lui	a5,0x204
1c00692a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00692e:	30061073          	csrw	mstatus,a2
1c006932:	40fa                	lw	ra,156(sp)
1c006934:	446a                	lw	s0,152(sp)
1c006936:	44da                	lw	s1,148(sp)
1c006938:	494a                	lw	s2,144(sp)
1c00693a:	49ba                	lw	s3,140(sp)
1c00693c:	610d                	addi	sp,sp,160
1c00693e:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006940:	30047673          	csrrci	a2,mstatus,8
1c006944:	4047a783          	lw	a5,1028(a5)
1c006948:	5682                	lw	a3,32(sp)
1c00694a:	40d7d7b3          	sra	a5,a5,a3
1c00694e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006952:	c79d                	beqz	a5,1c006980 <S45_MatAdd_32x10x10+0x23a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006954:	10000593          	li	a1,256
1c006958:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00695c:	30061073          	csrw	mstatus,a2
1c006960:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006964:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006968:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00696c:	30047673          	csrrci	a2,mstatus,8
1c006970:	40472783          	lw	a5,1028(a4)
1c006974:	5682                	lw	a3,32(sp)
1c006976:	40d7d7b3          	sra	a5,a5,a3
1c00697a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00697e:	fff9                	bnez	a5,1c00695c <S45_MatAdd_32x10x10+0x216>
1c006980:	4785                	li	a5,1
1c006982:	00d796b3          	sll	a3,a5,a3
1c006986:	002047b7          	lui	a5,0x204
1c00698a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00698e:	30061073          	csrw	mstatus,a2
1c006992:	bd5d                	j	1c006848 <S45_MatAdd_32x10x10+0x102>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006994:	30047673          	csrrci	a2,mstatus,8
1c006998:	4047a783          	lw	a5,1028(a5)
1c00699c:	4682                	lw	a3,0(sp)
1c00699e:	40d7d7b3          	sra	a5,a5,a3
1c0069a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0069a6:	c79d                	beqz	a5,1c0069d4 <S45_MatAdd_32x10x10+0x28e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0069a8:	10000513          	li	a0,256
1c0069ac:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0069b0:	30061073          	csrw	mstatus,a2
1c0069b4:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0069b8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0069bc:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0069c0:	30047673          	csrrci	a2,mstatus,8
1c0069c4:	40472783          	lw	a5,1028(a4)
1c0069c8:	4682                	lw	a3,0(sp)
1c0069ca:	40d7d7b3          	sra	a5,a5,a3
1c0069ce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0069d2:	fff9                	bnez	a5,1c0069b0 <S45_MatAdd_32x10x10+0x26a>
1c0069d4:	4785                	li	a5,1
1c0069d6:	00d796b3          	sll	a3,a5,a3
1c0069da:	002047b7          	lui	a5,0x204
1c0069de:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0069e2:	30061073          	csrw	mstatus,a2
1c0069e6:	b521                	j	1c0067ee <S45_MatAdd_32x10x10+0xa8>

1c0069e8 <S48_Conv2d_32x32x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c0069e8:	7111                	addi	sp,sp,-256
1c0069ea:	d7ce                	sw	s3,236(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x10], 2][D0, [0 x 6400, 6400]]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c0069ec:	100009b7          	lui	s3,0x10000
1c0069f0:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
1c0069f4:	0009a883          	lw	a7,0(s3)
{
1c0069f8:	d5d2                	sw	s4,232(sp)
	KerArg0->W = (unsigned short int) (10);
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c0069fa:	6789                	lui	a5,0x2
{
1c0069fc:	8a36                	mv	s4,a3
	KerArg0->NormBias = (signed char) (12);
1c0069fe:	46b1                	li	a3,12
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->H = (unsigned short int) (10);
	KerArg1->InFeatures = (unsigned short int) (32);
1c006a00:	1c0172b7          	lui	t0,0x1c017
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006a04:	90078313          	addi	t1,a5,-1792 # 1900 <__rt_stack_size+0x1100>
	KerArg0->NormBias = (signed char) (12);
1c006a08:	00d10b23          	sb	a3,22(sp)
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006a0c:	94078793          	addi	a5,a5,-1728
	KerArg1->H = (unsigned short int) (10);
1c006a10:	46a9                	li	a3,10
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006a12:	97c6                	add	a5,a5,a7
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a14:	6e21                	lui	t3,0x8
	KerArg1->H = (unsigned short int) (10);
1c006a16:	0cd11023          	sh	a3,192(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006a1a:	6719                	lui	a4,0x6
	KerArg1->InFeatures = (unsigned short int) (32);
1c006a1c:	1e42a683          	lw	a3,484(t0) # 1c0171e4 <__clz_tab+0x5cc>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a20:	a40e0813          	addi	a6,t3,-1472 # 7a40 <__rt_stack_size+0x7240>
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006a24:	c7be                	sw	a5,204(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006a26:	14070713          	addi	a4,a4,320 # 6140 <__rt_stack_size+0x5940>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c006a2a:	020077d7          	pv.add.sci.b	a5,zero,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a2e:	9846                	add	a6,a6,a7
	KerArg0->W = (unsigned short int) (10);
1c006a30:	00506f57          	pv.add.sci.h	t5,zero,10
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006a34:	02000e93          	li	t4,32
	KerArg1->Norm = (unsigned char) (14);
1c006a38:	4fb9                	li	t6,14
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006a3a:	9346                	add	t1,t1,a7
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006a3c:	9746                	add	a4,a4,a7
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c006a3e:	1e7d                	addi	t3,t3,-1
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c006a40:	cbbe                	sw	a5,212(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c006a42:	4785                	li	a5,1
{
1c006a44:	df86                	sw	ra,252(sp)
1c006a46:	dda2                	sw	s0,248(sp)
1c006a48:	dba6                	sw	s1,244(sp)
1c006a4a:	d9ca                	sw	s2,240(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a4c:	c642                	sw	a6,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c006a4e:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006a50:	01d11a23          	sh	t4,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006a54:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c006a56:	dd46                	sw	a7,184(sp)
	KerArg1->W = (unsigned short int) (10);
1c006a58:	df7a                	sw	t5,188(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c006a5a:	c3b6                	sw	a3,196(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a5c:	c9c2                	sw	a6,208(sp)
	KerArg1->Norm = (unsigned char) (14);
1c006a5e:	0df10c23          	sb	t6,216(sp)
	KerArg1->TotalInFeatures = (short int) (32);
1c006a62:	0dd11423          	sh	t4,200(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c006a66:	0cf10da3          	sb	a5,219(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
1c006a6a:	ce42                	sw	a6,28(sp)
	KerArg2->W = (unsigned short int) (10);
1c006a6c:	d07a                	sw	t5,32(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006a6e:	d23a                	sw	a4,36(sp)
	KerArg2->Norm = (unsigned char) (14);
1c006a70:	03f10423          	sb	t6,40(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c006a74:	03d11523          	sh	t4,42(sp)
	KerArg2->LB = (int) (0);
1c006a78:	d602                	sw	zero,44(sp)
	KerArg2->UB = (int) (32767);
1c006a7a:	d872                	sw	t3,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006a7c:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006a80:	002047b7          	lui	a5,0x204
1c006a84:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006a88:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006a8c:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006a90:	c1574733          	p.bset	a4,a4,0,21
1c006a94:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006a98:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006a9c:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c006aa0:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c006aa2:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c006aa4:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006aa8:	4726                	lw	a4,72(sp)
1c006aaa:	2a070f63          	beqz	a4,1c006d68 <S48_Conv2d_32x32x3x3_Relu+0x380>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006aae:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006ab0:	02000713          	li	a4,32
1c006ab4:	ca89                	beqz	a3,1c006ac6 <S48_Conv2d_32x32x3x3_Relu+0xde>
1c006ab6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006aba:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006abe:	00e7a223          	sw	a4,4(a5)
1c006ac2:	46c6                	lw	a3,80(sp)
1c006ac4:	faed                	bnez	a3,1c006ab6 <S48_Conv2d_32x32x3x3_Relu+0xce>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6464), 18432, 0, &DmaR_Evt2);
1c006ac6:	0009a683          	lw	a3,0(s3)
1c006aca:	6789                	lui	a5,0x2
1c006acc:	94078793          	addi	a5,a5,-1728 # 1940 <__rt_stack_size+0x1140>
1c006ad0:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ad2:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006ad6:	002047b7          	lui	a5,0x204
1c006ada:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006ade:	00035737          	lui	a4,0x35
1c006ae2:	80070713          	addi	a4,a4,-2048 # 34800 <__L1Cl+0x24800>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006ae6:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006aea:	c1574733          	p.bset	a4,a4,0,21
1c006aee:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006af2:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006af6:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006afa:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c006afc:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c006afe:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c006b02:	5726                	lw	a4,104(sp)
1c006b04:	20070863          	beqz	a4,1c006d14 <S48_Conv2d_32x32x3x3_Relu+0x32c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006b08:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006b0a:	02000713          	li	a4,32
1c006b0e:	ca89                	beqz	a3,1c006b20 <S48_Conv2d_32x32x3x3_Relu+0x138>
1c006b10:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006b14:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006b18:	00e7a223          	sw	a4,4(a5)
1c006b1c:	56c6                	lw	a3,112(sp)
1c006b1e:	faed                	bnez	a3,1c006b10 <S48_Conv2d_32x32x3x3_Relu+0x128>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt3);
1c006b20:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006b24:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006b28:	002047b7          	lui	a5,0x204
1c006b2c:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006b30:	00032737          	lui	a4,0x32
1c006b34:	90070713          	addi	a4,a4,-1792 # 31900 <__L1Cl+0x21900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006b38:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006b3c:	c1574733          	p.bset	a4,a4,0,21
1c006b40:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006b44:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006b48:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c006b4c:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c006b4e:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c006b50:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006b54:	472a                	lw	a4,136(sp)
1c006b56:	16070563          	beqz	a4,1c006cc0 <S48_Conv2d_32x32x3x3_Relu+0x2d8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006b5a:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006b5c:	02000713          	li	a4,32
1c006b60:	ca89                	beqz	a3,1c006b72 <S48_Conv2d_32x32x3x3_Relu+0x18a>
1c006b62:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006b66:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006b6a:	00e7a223          	sw	a4,4(a5)
1c006b6e:	46ca                	lw	a3,144(sp)
1c006b70:	faed                	bnez	a3,1c006b62 <S48_Conv2d_32x32x3x3_Relu+0x17a>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006b72:	0ff00913          	li	s2,255
1c006b76:	00204437          	lui	s0,0x204
1c006b7a:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006b7e:	20040493          	addi	s1,s0,512
1c006b82:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006b86:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006b8a:	1c00c7b7          	lui	a5,0x1c00c
1c006b8e:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c006b92:	08f42023          	sw	a5,128(s0)
1c006b96:	0068                	addi	a0,sp,12
1c006b98:	08a42023          	sw	a0,128(s0)
1c006b9c:	06a050ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006ba0:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (10);
1c006ba4:	47a9                	li	a5,10
1c006ba6:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006baa:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006bae:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006bb2:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006bb6:	1c00d7b7          	lui	a5,0x1c00d
1c006bba:	70678793          	addi	a5,a5,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c006bbe:	08f42023          	sw	a5,128(s0)
1c006bc2:	1928                	addi	a0,sp,184
1c006bc4:	08a42023          	sw	a0,128(s0)
1c006bc8:	33f060ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006bcc:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006bd0:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006bd4:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006bd8:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006bdc:	1c00c7b7          	lui	a5,0x1c00c
1c006be0:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c006be4:	08f42023          	sw	a5,128(s0)
1c006be8:	0868                	addi	a0,sp,28
1c006bea:	08a42023          	sw	a0,128(s0)
1c006bee:	252050ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006bf2:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+24896), 6400, 1, &DmaW_Evt1);
1c006bf6:	6799                	lui	a5,0x6
1c006bf8:	0009a703          	lw	a4,0(s3)
1c006bfc:	14078793          	addi	a5,a5,320 # 6140 <__rt_stack_size+0x5940>
1c006c00:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c02:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006c06:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006c0a:	000227b7          	lui	a5,0x22
1c006c0e:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006c12:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006c16:	c157c7b3          	p.bset	a5,a5,0,21
1c006c1a:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006c1e:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006c22:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c006c26:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c006c28:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c006c2a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006c2e:	57aa                	lw	a5,168(sp)
1c006c30:	c79d                	beqz	a5,1c006c5e <S48_Conv2d_32x32x3x3_Relu+0x276>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006c32:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006c34:	02000713          	li	a4,32
1c006c38:	002047b7          	lui	a5,0x204
1c006c3c:	ca89                	beqz	a3,1c006c4e <S48_Conv2d_32x32x3x3_Relu+0x266>
1c006c3e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006c42:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006c46:	00e7a223          	sw	a4,4(a5)
1c006c4a:	56ca                	lw	a3,176(sp)
1c006c4c:	faed                	bnez	a3,1c006c3e <S48_Conv2d_32x32x3x3_Relu+0x256>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c006c4e:	50fe                	lw	ra,252(sp)
1c006c50:	546e                	lw	s0,248(sp)
1c006c52:	54de                	lw	s1,244(sp)
1c006c54:	594e                	lw	s2,240(sp)
1c006c56:	59be                	lw	s3,236(sp)
1c006c58:	5a2e                	lw	s4,232(sp)
1c006c5a:	6111                	addi	sp,sp,256
1c006c5c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c5e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c006c62:	40442403          	lw	s0,1028(s0)
1c006c66:	46ea                	lw	a3,152(sp)
1c006c68:	40d45433          	sra	s0,s0,a3
1c006c6c:	fc143433          	p.bclr	s0,s0,30,1
1c006c70:	c41d                	beqz	s0,1c006c9e <S48_Conv2d_32x32x3x3_Relu+0x2b6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006c72:	10000593          	li	a1,256
1c006c76:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006c7a:	30061073          	csrw	mstatus,a2
1c006c7e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006c82:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006c86:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006c8a:	30047673          	csrrci	a2,mstatus,8
1c006c8e:	40472783          	lw	a5,1028(a4)
1c006c92:	46ea                	lw	a3,152(sp)
1c006c94:	40d7d7b3          	sra	a5,a5,a3
1c006c98:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006c9c:	fff9                	bnez	a5,1c006c7a <S48_Conv2d_32x32x3x3_Relu+0x292>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c006c9e:	4785                	li	a5,1
1c006ca0:	00d796b3          	sll	a3,a5,a3
1c006ca4:	002047b7          	lui	a5,0x204
1c006ca8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006cac:	30061073          	csrw	mstatus,a2
1c006cb0:	50fe                	lw	ra,252(sp)
1c006cb2:	546e                	lw	s0,248(sp)
1c006cb4:	54de                	lw	s1,244(sp)
1c006cb6:	594e                	lw	s2,240(sp)
1c006cb8:	59be                	lw	s3,236(sp)
1c006cba:	5a2e                	lw	s4,232(sp)
1c006cbc:	6111                	addi	sp,sp,256
1c006cbe:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006cc0:	30047673          	csrrci	a2,mstatus,8
1c006cc4:	4047a783          	lw	a5,1028(a5)
1c006cc8:	56e6                	lw	a3,120(sp)
1c006cca:	40d7d7b3          	sra	a5,a5,a3
1c006cce:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006cd2:	c79d                	beqz	a5,1c006d00 <S48_Conv2d_32x32x3x3_Relu+0x318>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006cd4:	10000593          	li	a1,256
1c006cd8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006cdc:	30061073          	csrw	mstatus,a2
1c006ce0:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006ce4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006ce8:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006cec:	30047673          	csrrci	a2,mstatus,8
1c006cf0:	40472783          	lw	a5,1028(a4)
1c006cf4:	56e6                	lw	a3,120(sp)
1c006cf6:	40d7d7b3          	sra	a5,a5,a3
1c006cfa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006cfe:	fff9                	bnez	a5,1c006cdc <S48_Conv2d_32x32x3x3_Relu+0x2f4>
1c006d00:	4785                	li	a5,1
1c006d02:	00d796b3          	sll	a3,a5,a3
1c006d06:	002047b7          	lui	a5,0x204
1c006d0a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006d0e:	30061073          	csrw	mstatus,a2
1c006d12:	b585                	j	1c006b72 <S48_Conv2d_32x32x3x3_Relu+0x18a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d14:	30047673          	csrrci	a2,mstatus,8
1c006d18:	4047a783          	lw	a5,1028(a5)
1c006d1c:	46e6                	lw	a3,88(sp)
1c006d1e:	40d7d7b3          	sra	a5,a5,a3
1c006d22:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006d26:	c79d                	beqz	a5,1c006d54 <S48_Conv2d_32x32x3x3_Relu+0x36c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006d28:	10000593          	li	a1,256
1c006d2c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006d30:	30061073          	csrw	mstatus,a2
1c006d34:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006d38:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006d3c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d40:	30047673          	csrrci	a2,mstatus,8
1c006d44:	40472783          	lw	a5,1028(a4)
1c006d48:	46e6                	lw	a3,88(sp)
1c006d4a:	40d7d7b3          	sra	a5,a5,a3
1c006d4e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006d52:	fff9                	bnez	a5,1c006d30 <S48_Conv2d_32x32x3x3_Relu+0x348>
1c006d54:	4785                	li	a5,1
1c006d56:	00d796b3          	sll	a3,a5,a3
1c006d5a:	002047b7          	lui	a5,0x204
1c006d5e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006d62:	30061073          	csrw	mstatus,a2
1c006d66:	bb6d                	j	1c006b20 <S48_Conv2d_32x32x3x3_Relu+0x138>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d68:	30047673          	csrrci	a2,mstatus,8
1c006d6c:	4047a783          	lw	a5,1028(a5)
1c006d70:	56e2                	lw	a3,56(sp)
1c006d72:	40d7d7b3          	sra	a5,a5,a3
1c006d76:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006d7a:	c79d                	beqz	a5,1c006da8 <S48_Conv2d_32x32x3x3_Relu+0x3c0>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006d7c:	10000813          	li	a6,256
1c006d80:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c006d84:	30061073          	csrw	mstatus,a2
1c006d88:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006d8c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006d90:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006d94:	30047673          	csrrci	a2,mstatus,8
1c006d98:	40472783          	lw	a5,1028(a4)
1c006d9c:	56e2                	lw	a3,56(sp)
1c006d9e:	40d7d7b3          	sra	a5,a5,a3
1c006da2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c006da6:	fff9                	bnez	a5,1c006d84 <S48_Conv2d_32x32x3x3_Relu+0x39c>
1c006da8:	4785                	li	a5,1
1c006daa:	00d796b3          	sll	a3,a5,a3
1c006dae:	002047b7          	lui	a5,0x204
1c006db2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c006db6:	30061073          	csrw	mstatus,a2
1c006dba:	b331                	j	1c006ac6 <S48_Conv2d_32x32x3x3_Relu+0xde>

1c006dbc <S51_Conv2d_32x32x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c006dbc:	7111                	addi	sp,sp,-256
1c006dbe:	d7ce                	sw	s3,236(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x10], 2][D0, [0 x 6400, 6400]]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006dc0:	100009b7          	lui	s3,0x10000
1c006dc4:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
1c006dc8:	0009a883          	lw	a7,0(s3)
	KerArg0->W = (unsigned short int) (10);
	KerArg0->H = (unsigned short int) (10);
	KerArg0->OutFeatures = (unsigned short int) (32);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006dcc:	6789                	lui	a5,0x2
{
1c006dce:	d5d2                	sw	s4,232(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006dd0:	90078313          	addi	t1,a5,-1792 # 1900 <__rt_stack_size+0x1100>
{
1c006dd4:	8a36                	mv	s4,a3
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->H = (unsigned short int) (10);
	KerArg1->InFeatures = (unsigned short int) (32);
	KerArg1->OutFeatures = (unsigned short int) (32);
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006dd6:	94078793          	addi	a5,a5,-1728
	KerArg0->NormBias = (signed char) (14);
1c006dda:	46b9                	li	a3,14
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006ddc:	97c6                	add	a5,a5,a7
	KerArg1->InFeatures = (unsigned short int) (32);
1c006dde:	1c0172b7          	lui	t0,0x1c017
	KerArg0->NormBias = (signed char) (14);
1c006de2:	00d10b23          	sb	a3,22(sp)
	KerArg1->H = (unsigned short int) (10);
1c006de6:	46a9                	li	a3,10
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006de8:	6e21                	lui	t3,0x8
	KerArg1->H = (unsigned short int) (10);
1c006dea:	0cd11023          	sh	a3,192(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6464);
1c006dee:	c7be                	sw	a5,204(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c006df0:	1e42a683          	lw	a3,484(t0) # 1c0171e4 <__clz_tab+0x5cc>
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31296);
	KerArg1->Norm = (unsigned char) (16);
	KerArg1->TotalInFeatures = (short int) (32);
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c006df4:	020077d7          	pv.add.sci.b	a5,zero,1
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
	KerArg2->W = (unsigned short int) (10);
	KerArg2->H = (unsigned short int) (10);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006df8:	6719                	lui	a4,0x6
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006dfa:	a40e0813          	addi	a6,t3,-1472 # 7a40 <__rt_stack_size+0x7240>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c006dfe:	cbbe                	sw	a5,212(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006e00:	14070713          	addi	a4,a4,320 # 6140 <__rt_stack_size+0x5940>
	KerArg1->Orientation = (unsigned char) (1);
1c006e04:	4785                	li	a5,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006e06:	9846                	add	a6,a6,a7
	KerArg0->W = (unsigned short int) (10);
1c006e08:	00506f57          	pv.add.sci.h	t5,zero,10
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006e0c:	02000e93          	li	t4,32
	KerArg1->Norm = (unsigned char) (16);
1c006e10:	4fc1                	li	t6,16
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006e12:	9346                	add	t1,t1,a7
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006e14:	9746                	add	a4,a4,a7
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (32);
	KerArg2->LB = (int) (-32768);
	KerArg2->UB = (int) (32767);
1c006e16:	1e7d                	addi	t3,t3,-1
	KerArg1->Orientation = (unsigned char) (1);
1c006e18:	0cf10da3          	sb	a5,219(sp)
	KerArg2->LB = (int) (-32768);
1c006e1c:	77e1                	lui	a5,0xffff8
{
1c006e1e:	df86                	sw	ra,252(sp)
1c006e20:	dda2                	sw	s0,248(sp)
1c006e22:	dba6                	sw	s1,244(sp)
1c006e24:	d9ca                	sw	s2,240(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006e26:	c642                	sw	a6,12(sp)
	KerArg0->W = (unsigned short int) (10);
1c006e28:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (32);
1c006e2a:	01d11a23          	sh	t4,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c006e2e:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c006e30:	dd46                	sw	a7,184(sp)
	KerArg1->W = (unsigned short int) (10);
1c006e32:	df7a                	sw	t5,188(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c006e34:	c3b6                	sw	a3,196(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+31296);
1c006e36:	c9c2                	sw	a6,208(sp)
	KerArg1->Norm = (unsigned char) (16);
1c006e38:	0df10c23          	sb	t6,216(sp)
	KerArg1->TotalInFeatures = (short int) (32);
1c006e3c:	0dd11423          	sh	t4,200(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+31296);
1c006e40:	ce42                	sw	a6,28(sp)
	KerArg2->W = (unsigned short int) (10);
1c006e42:	d07a                	sw	t5,32(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+24896);
1c006e44:	d23a                	sw	a4,36(sp)
	KerArg2->Norm = (unsigned char) (16);
1c006e46:	03f10423          	sb	t6,40(sp)
	KerArg2->InFeatures = (unsigned short int) (32);
1c006e4a:	03d11523          	sh	t4,42(sp)
	KerArg2->LB = (int) (-32768);
1c006e4e:	d63e                	sw	a5,44(sp)
	KerArg2->UB = (int) (32767);
1c006e50:	d872                	sw	t3,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006e52:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006e56:	002047b7          	lui	a5,0x204
1c006e5a:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006e5e:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006e62:	04070713          	addi	a4,a4,64 # b0040 <__L2+0x30040>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006e66:	c1574733          	p.bset	a4,a4,0,21
1c006e6a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006e6e:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006e72:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c006e76:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c006e78:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c006e7a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006e7e:	4726                	lw	a4,72(sp)
1c006e80:	2a070f63          	beqz	a4,1c00713e <S51_Conv2d_32x32x3x3+0x382>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006e84:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006e86:	02000713          	li	a4,32
1c006e8a:	ca89                	beqz	a3,1c006e9c <S51_Conv2d_32x32x3x3+0xe0>
1c006e8c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006e90:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006e94:	00e7a223          	sw	a4,4(a5)
1c006e98:	46c6                	lw	a3,80(sp)
1c006e9a:	faed                	bnez	a3,1c006e8c <S51_Conv2d_32x32x3x3+0xd0>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 64, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6464), 18432, 0, &DmaR_Evt2);
1c006e9c:	0009a683          	lw	a3,0(s3)
1c006ea0:	6789                	lui	a5,0x2
1c006ea2:	94078793          	addi	a5,a5,-1728 # 1940 <__rt_stack_size+0x1140>
1c006ea6:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006ea8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006eac:	002047b7          	lui	a5,0x204
1c006eb0:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006eb4:	00035737          	lui	a4,0x35
1c006eb8:	80070713          	addi	a4,a4,-2048 # 34800 <__L1Cl+0x24800>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006ebc:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006ec0:	c1574733          	p.bset	a4,a4,0,21
1c006ec4:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006ec8:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006ecc:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c006ed0:	ccc2                	sw	a6,88(sp)
        copy->length = 0;
1c006ed2:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c006ed4:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c006ed8:	5726                	lw	a4,104(sp)
1c006eda:	20070863          	beqz	a4,1c0070ea <S51_Conv2d_32x32x3x3+0x32e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006ede:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006ee0:	02000713          	li	a4,32
1c006ee4:	ca89                	beqz	a3,1c006ef6 <S51_Conv2d_32x32x3x3+0x13a>
1c006ee6:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006eea:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006eee:	00e7a223          	sw	a4,4(a5)
1c006ef2:	56c6                	lw	a3,112(sp)
1c006ef4:	faed                	bnez	a3,1c006ee6 <S51_Conv2d_32x32x3x3+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt3);
1c006ef6:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006efa:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006efe:	002047b7          	lui	a5,0x204
1c006f02:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006f06:	00032737          	lui	a4,0x32
1c006f0a:	90070713          	addi	a4,a4,-1792 # 31900 <__L1Cl+0x21900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006f0e:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006f12:	c1574733          	p.bset	a4,a4,0,21
1c006f16:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006f1a:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006f1e:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c006f22:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c006f24:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c006f26:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c006f2a:	472a                	lw	a4,136(sp)
1c006f2c:	16070563          	beqz	a4,1c007096 <S51_Conv2d_32x32x3x3+0x2da>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c006f30:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c006f32:	02000713          	li	a4,32
1c006f36:	ca89                	beqz	a3,1c006f48 <S51_Conv2d_32x32x3x3+0x18c>
1c006f38:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006f3c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c006f40:	00e7a223          	sw	a4,4(a5)
1c006f44:	46ca                	lw	a3,144(sp)
1c006f46:	faed                	bnez	a3,1c006f38 <S51_Conv2d_32x32x3x3+0x17c>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006f48:	0ff00913          	li	s2,255
1c006f4c:	00204437          	lui	s0,0x204
1c006f50:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006f54:	20040493          	addi	s1,s0,512
1c006f58:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006f5c:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006f60:	1c00c7b7          	lui	a5,0x1c00c
1c006f64:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c006f68:	08f42023          	sw	a5,128(s0)
1c006f6c:	0068                	addi	a0,sp,12
1c006f6e:	08a42023          	sw	a0,128(s0)
1c006f72:	495040ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006f76:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (10);
1c006f7a:	47a9                	li	a5,10
1c006f7c:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006f80:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006f84:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006f88:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006f8c:	1c00d7b7          	lui	a5,0x1c00d
1c006f90:	70678793          	addi	a5,a5,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c006f94:	08f42023          	sw	a5,128(s0)
1c006f98:	1928                	addi	a0,sp,184
1c006f9a:	08a42023          	sw	a0,128(s0)
1c006f9e:	768060ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006fa2:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c006fa6:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c006faa:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c006fae:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c006fb2:	1c00c7b7          	lui	a5,0x1c00c
1c006fb6:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c006fba:	08f42023          	sw	a5,128(s0)
1c006fbe:	0868                	addi	a0,sp,28
1c006fc0:	08a42023          	sw	a0,128(s0)
1c006fc4:	67d040ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c006fc8:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+24896), 6400, 1, &DmaW_Evt1);
1c006fcc:	6799                	lui	a5,0x6
1c006fce:	0009a703          	lw	a4,0(s3)
1c006fd2:	14078793          	addi	a5,a5,320 # 6140 <__rt_stack_size+0x5940>
1c006fd6:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c006fd8:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c006fdc:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c006fe0:	000227b7          	lui	a5,0x22
1c006fe4:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c006fe8:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c006fec:	c157c7b3          	p.bset	a5,a5,0,21
1c006ff0:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c006ff4:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c006ff8:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c006ffc:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c006ffe:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c007000:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007004:	57aa                	lw	a5,168(sp)
1c007006:	c79d                	beqz	a5,1c007034 <S51_Conv2d_32x32x3x3+0x278>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007008:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00700a:	02000713          	li	a4,32
1c00700e:	002047b7          	lui	a5,0x204
1c007012:	ca89                	beqz	a3,1c007024 <S51_Conv2d_32x32x3x3+0x268>
1c007014:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007018:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00701c:	00e7a223          	sw	a4,4(a5)
1c007020:	56ca                	lw	a3,176(sp)
1c007022:	faed                	bnez	a3,1c007014 <S51_Conv2d_32x32x3x3+0x258>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c007024:	50fe                	lw	ra,252(sp)
1c007026:	546e                	lw	s0,248(sp)
1c007028:	54de                	lw	s1,244(sp)
1c00702a:	594e                	lw	s2,240(sp)
1c00702c:	59be                	lw	s3,236(sp)
1c00702e:	5a2e                	lw	s4,232(sp)
1c007030:	6111                	addi	sp,sp,256
1c007032:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007034:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007038:	40442403          	lw	s0,1028(s0)
1c00703c:	46ea                	lw	a3,152(sp)
1c00703e:	40d45433          	sra	s0,s0,a3
1c007042:	fc143433          	p.bclr	s0,s0,30,1
1c007046:	c41d                	beqz	s0,1c007074 <S51_Conv2d_32x32x3x3+0x2b8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007048:	10000593          	li	a1,256
1c00704c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007050:	30061073          	csrw	mstatus,a2
1c007054:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007058:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00705c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007060:	30047673          	csrrci	a2,mstatus,8
1c007064:	40472783          	lw	a5,1028(a4)
1c007068:	46ea                	lw	a3,152(sp)
1c00706a:	40d7d7b3          	sra	a5,a5,a3
1c00706e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007072:	fff9                	bnez	a5,1c007050 <S51_Conv2d_32x32x3x3+0x294>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c007074:	4785                	li	a5,1
1c007076:	00d796b3          	sll	a3,a5,a3
1c00707a:	002047b7          	lui	a5,0x204
1c00707e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007082:	30061073          	csrw	mstatus,a2
1c007086:	50fe                	lw	ra,252(sp)
1c007088:	546e                	lw	s0,248(sp)
1c00708a:	54de                	lw	s1,244(sp)
1c00708c:	594e                	lw	s2,240(sp)
1c00708e:	59be                	lw	s3,236(sp)
1c007090:	5a2e                	lw	s4,232(sp)
1c007092:	6111                	addi	sp,sp,256
1c007094:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007096:	30047673          	csrrci	a2,mstatus,8
1c00709a:	4047a783          	lw	a5,1028(a5)
1c00709e:	56e6                	lw	a3,120(sp)
1c0070a0:	40d7d7b3          	sra	a5,a5,a3
1c0070a4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0070a8:	c79d                	beqz	a5,1c0070d6 <S51_Conv2d_32x32x3x3+0x31a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0070aa:	10000593          	li	a1,256
1c0070ae:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0070b2:	30061073          	csrw	mstatus,a2
1c0070b6:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0070ba:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0070be:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070c2:	30047673          	csrrci	a2,mstatus,8
1c0070c6:	40472783          	lw	a5,1028(a4)
1c0070ca:	56e6                	lw	a3,120(sp)
1c0070cc:	40d7d7b3          	sra	a5,a5,a3
1c0070d0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0070d4:	fff9                	bnez	a5,1c0070b2 <S51_Conv2d_32x32x3x3+0x2f6>
1c0070d6:	4785                	li	a5,1
1c0070d8:	00d796b3          	sll	a3,a5,a3
1c0070dc:	002047b7          	lui	a5,0x204
1c0070e0:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0070e4:	30061073          	csrw	mstatus,a2
1c0070e8:	b585                	j	1c006f48 <S51_Conv2d_32x32x3x3+0x18c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0070ea:	30047673          	csrrci	a2,mstatus,8
1c0070ee:	4047a783          	lw	a5,1028(a5)
1c0070f2:	46e6                	lw	a3,88(sp)
1c0070f4:	40d7d7b3          	sra	a5,a5,a3
1c0070f8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0070fc:	c79d                	beqz	a5,1c00712a <S51_Conv2d_32x32x3x3+0x36e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0070fe:	10000593          	li	a1,256
1c007102:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007106:	30061073          	csrw	mstatus,a2
1c00710a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00710e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007112:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007116:	30047673          	csrrci	a2,mstatus,8
1c00711a:	40472783          	lw	a5,1028(a4)
1c00711e:	46e6                	lw	a3,88(sp)
1c007120:	40d7d7b3          	sra	a5,a5,a3
1c007124:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007128:	fff9                	bnez	a5,1c007106 <S51_Conv2d_32x32x3x3+0x34a>
1c00712a:	4785                	li	a5,1
1c00712c:	00d796b3          	sll	a3,a5,a3
1c007130:	002047b7          	lui	a5,0x204
1c007134:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007138:	30061073          	csrw	mstatus,a2
1c00713c:	bb6d                	j	1c006ef6 <S51_Conv2d_32x32x3x3+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00713e:	30047673          	csrrci	a2,mstatus,8
1c007142:	4047a783          	lw	a5,1028(a5)
1c007146:	56e2                	lw	a3,56(sp)
1c007148:	40d7d7b3          	sra	a5,a5,a3
1c00714c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007150:	c79d                	beqz	a5,1c00717e <S51_Conv2d_32x32x3x3+0x3c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007152:	10000813          	li	a6,256
1c007156:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00715a:	30061073          	csrw	mstatus,a2
1c00715e:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007162:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007166:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00716a:	30047673          	csrrci	a2,mstatus,8
1c00716e:	40472783          	lw	a5,1028(a4)
1c007172:	56e2                	lw	a3,56(sp)
1c007174:	40d7d7b3          	sra	a5,a5,a3
1c007178:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00717c:	fff9                	bnez	a5,1c00715a <S51_Conv2d_32x32x3x3+0x39e>
1c00717e:	4785                	li	a5,1
1c007180:	00d796b3          	sll	a3,a5,a3
1c007184:	002047b7          	lui	a5,0x204
1c007188:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00718c:	30061073          	csrw	mstatus,a2
1c007190:	b331                	j	1c006e9c <S51_Conv2d_32x32x3x3+0xe0>

1c007192 <S52_MatAdd_32x10x10>:
void S52_MatAdd_32x10x10(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c007192:	7135                	addi	sp,sp,-160
1c007194:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 6400, 6400]][Tile0, 1:[10x10], 2]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c007196:	10000937          	lui	s2,0x10000
1c00719a:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c00719e:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+12800);
1c0071a2:	678d                	lui	a5,0x3
1c0071a4:	20078793          	addi	a5,a5,512 # 3200 <__rt_stack_size+0x2a00>
1c0071a8:	97b6                	add	a5,a5,a3
1c0071aa:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (10);
1c0071ac:	005067d7          	pv.add.sci.h	a5,zero,10
1c0071b0:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (10);
	KerArg0->N = (unsigned short int) (32);
1c0071b2:	02000793          	li	a5,32
1c0071b6:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c0071ba:	77e1                	lui	a5,0xffff8
1c0071bc:	dabe                	sw	a5,116(sp)
1c0071be:	67a1                	lui	a5,0x8
1c0071c0:	17fd                	addi	a5,a5,-1
1c0071c2:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c0071c4:	6809                	lui	a6,0x2
	KerArg0->UB = (int) (32767);
1c0071c6:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c0071c8:	90080813          	addi	a6,a6,-1792 # 1900 <__rt_stack_size+0x1100>
	KerArg0->UB = (int) (32767);
1c0071cc:	b0b78793          	addi	a5,a5,-1269 # b0b <__rt_stack_size+0x30b>
{
1c0071d0:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c0071d2:	01068733          	add	a4,a3,a6
	KerArg0->UB = (int) (32767);
1c0071d6:	06f11e23          	sh	a5,124(sp)
{
1c0071da:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (11);
	KerArg0->In2_Q = (unsigned char) (11);
1c0071dc:	47a9                	li	a5,10
{
1c0071de:	cf06                	sw	ra,156(sp)
1c0071e0:	cd22                	sw	s0,152(sp)
1c0071e2:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c0071e4:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+6400);
1c0071e6:	d2ba                	sw	a4,100(sp)
	KerArg0->In2_Q = (unsigned char) (11);
1c0071e8:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0071ec:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0071f0:	002047b7          	lui	a5,0x204
1c0071f4:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0071f8:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0071fc:	de082733          	p.insert	a4,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007200:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c007204:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007208:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00720c:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007210:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c007214:	c046                	sw	a7,0(sp)
        copy->length = 0;
1c007216:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c007218:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c00721c:	4742                	lw	a4,16(sp)
1c00721e:	1c070163          	beqz	a4,1c0073e0 <S52_MatAdd_32x10x10+0x24e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007222:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007224:	02000713          	li	a4,32
1c007228:	ca89                	beqz	a3,1c00723a <S52_MatAdd_32x10x10+0xa8>
1c00722a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00722e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007232:	00e7a223          	sw	a4,4(a5)
1c007236:	46e2                	lw	a3,24(sp)
1c007238:	faed                	bnez	a3,1c00722a <S52_MatAdd_32x10x10+0x98>
	KerArg0->Out_Q = (unsigned char) (10);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 6400, 0, &DmaR_Evt2);
1c00723a:	00092603          	lw	a2,0(s2)
1c00723e:	6689                	lui	a3,0x2
1c007240:	90068693          	addi	a3,a3,-1792 # 1900 <__rt_stack_size+0x1100>
1c007244:	9636                	add	a2,a2,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007246:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00724a:	002047b7          	lui	a5,0x204
1c00724e:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c007252:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007256:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00725a:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00725e:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007262:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007266:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00726a:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c00726e:	d042                	sw	a6,32(sp)
        copy->length = 0;
1c007270:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c007272:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c007276:	5742                	lw	a4,48(sp)
1c007278:	10070a63          	beqz	a4,1c00738c <S52_MatAdd_32x10x10+0x1fa>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00727c:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00727e:	02000713          	li	a4,32
1c007282:	ca89                	beqz	a3,1c007294 <S52_MatAdd_32x10x10+0x102>
1c007284:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007288:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00728c:	00e7a223          	sw	a4,4(a5)
1c007290:	56e2                	lw	a3,56(sp)
1c007292:	faed                	bnez	a3,1c007284 <S52_MatAdd_32x10x10+0xf2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007294:	0ff00793          	li	a5,255
1c007298:	00204437          	lui	s0,0x204
1c00729c:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0072a0:	20040993          	addi	s3,s0,512
1c0072a4:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0072a8:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0072ac:	1c0107b7          	lui	a5,0x1c010
1c0072b0:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c0072b4:	08f42023          	sw	a5,128(s0)
1c0072b8:	1088                	addi	a0,sp,96
1c0072ba:	08a42023          	sw	a0,128(s0)
1c0072be:	335080ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0072c2:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+12800), 6400, 1, &DmaW_Evt1);
1c0072c6:	678d                	lui	a5,0x3
1c0072c8:	00092703          	lw	a4,0(s2)
1c0072cc:	20078793          	addi	a5,a5,512 # 3200 <__rt_stack_size+0x2a00>
1c0072d0:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0072d2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0072d6:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0072da:	000227b7          	lui	a5,0x22
1c0072de:	90078793          	addi	a5,a5,-1792 # 21900 <__L1Cl+0x11900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0072e2:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0072e6:	c157c7b3          	p.bset	a5,a5,0,21
1c0072ea:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0072ee:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0072f2:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c0072f6:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c0072f8:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c0072fa:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0072fe:	47c6                	lw	a5,80(sp)
1c007300:	c795                	beqz	a5,1c00732c <S52_MatAdd_32x10x10+0x19a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007302:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007304:	02000713          	li	a4,32
1c007308:	002047b7          	lui	a5,0x204
1c00730c:	ca89                	beqz	a3,1c00731e <S52_MatAdd_32x10x10+0x18c>
1c00730e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007312:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007316:	00e7a223          	sw	a4,4(a5)
1c00731a:	46e6                	lw	a3,88(sp)
1c00731c:	faed                	bnez	a3,1c00730e <S52_MatAdd_32x10x10+0x17c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00731e:	40fa                	lw	ra,156(sp)
1c007320:	446a                	lw	s0,152(sp)
1c007322:	44da                	lw	s1,148(sp)
1c007324:	494a                	lw	s2,144(sp)
1c007326:	49ba                	lw	s3,140(sp)
1c007328:	610d                	addi	sp,sp,160
1c00732a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00732c:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007330:	40442403          	lw	s0,1028(s0)
1c007334:	4686                	lw	a3,64(sp)
1c007336:	40d45433          	sra	s0,s0,a3
1c00733a:	fc143433          	p.bclr	s0,s0,30,1
1c00733e:	c41d                	beqz	s0,1c00736c <S52_MatAdd_32x10x10+0x1da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007340:	10000593          	li	a1,256
1c007344:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007348:	30061073          	csrw	mstatus,a2
1c00734c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007350:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007354:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007358:	30047673          	csrrci	a2,mstatus,8
1c00735c:	40472783          	lw	a5,1028(a4)
1c007360:	4686                	lw	a3,64(sp)
1c007362:	40d7d7b3          	sra	a5,a5,a3
1c007366:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00736a:	fff9                	bnez	a5,1c007348 <S52_MatAdd_32x10x10+0x1b6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00736c:	4785                	li	a5,1
1c00736e:	00d796b3          	sll	a3,a5,a3
1c007372:	002047b7          	lui	a5,0x204
1c007376:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00737a:	30061073          	csrw	mstatus,a2
1c00737e:	40fa                	lw	ra,156(sp)
1c007380:	446a                	lw	s0,152(sp)
1c007382:	44da                	lw	s1,148(sp)
1c007384:	494a                	lw	s2,144(sp)
1c007386:	49ba                	lw	s3,140(sp)
1c007388:	610d                	addi	sp,sp,160
1c00738a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00738c:	30047673          	csrrci	a2,mstatus,8
1c007390:	4047a783          	lw	a5,1028(a5)
1c007394:	5682                	lw	a3,32(sp)
1c007396:	40d7d7b3          	sra	a5,a5,a3
1c00739a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00739e:	c79d                	beqz	a5,1c0073cc <S52_MatAdd_32x10x10+0x23a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0073a0:	10000593          	li	a1,256
1c0073a4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0073a8:	30061073          	csrw	mstatus,a2
1c0073ac:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0073b0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0073b4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0073b8:	30047673          	csrrci	a2,mstatus,8
1c0073bc:	40472783          	lw	a5,1028(a4)
1c0073c0:	5682                	lw	a3,32(sp)
1c0073c2:	40d7d7b3          	sra	a5,a5,a3
1c0073c6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0073ca:	fff9                	bnez	a5,1c0073a8 <S52_MatAdd_32x10x10+0x216>
1c0073cc:	4785                	li	a5,1
1c0073ce:	00d796b3          	sll	a3,a5,a3
1c0073d2:	002047b7          	lui	a5,0x204
1c0073d6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0073da:	30061073          	csrw	mstatus,a2
1c0073de:	bd5d                	j	1c007294 <S52_MatAdd_32x10x10+0x102>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0073e0:	30047673          	csrrci	a2,mstatus,8
1c0073e4:	4047a783          	lw	a5,1028(a5)
1c0073e8:	4682                	lw	a3,0(sp)
1c0073ea:	40d7d7b3          	sra	a5,a5,a3
1c0073ee:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0073f2:	c79d                	beqz	a5,1c007420 <S52_MatAdd_32x10x10+0x28e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0073f4:	10000513          	li	a0,256
1c0073f8:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0073fc:	30061073          	csrw	mstatus,a2
1c007400:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007404:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007408:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00740c:	30047673          	csrrci	a2,mstatus,8
1c007410:	40472783          	lw	a5,1028(a4)
1c007414:	4682                	lw	a3,0(sp)
1c007416:	40d7d7b3          	sra	a5,a5,a3
1c00741a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00741e:	fff9                	bnez	a5,1c0073fc <S52_MatAdd_32x10x10+0x26a>
1c007420:	4785                	li	a5,1
1c007422:	00d796b3          	sll	a3,a5,a3
1c007426:	002047b7          	lui	a5,0x204
1c00742a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00742e:	30061073          	csrw	mstatus,a2
1c007432:	b521                	j	1c00723a <S52_MatAdd_32x10x10+0xa8>

1c007434 <S55_Conv2d_64x32x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c007434:	7169                	addi	sp,sp,-304
1c007436:	11912223          	sw	s9,260(sp)
1c00743a:	c636                	sw	a3,12(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x11, 1:10x11, 10x10], 2][D0, [2 x 2400, 1600]]
		Tile0: [0, 2400, 200], Tile1: [2400, 2400, 200], Tile2; [4800, 1600, 200]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c00743c:	10000cb7          	lui	s9,0x10000
	KerArg0->W = (unsigned short int) (5);
	KerArg0->H = (unsigned short int) (5);
	KerArg0->OutFeatures = (unsigned short int) (64);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4800);
	KerArg0->NormBias = (signed char) (11);
1c007440:	46ad                	li	a3,11
1c007442:	02d10323          	sb	a3,38(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c007446:	01cc8c93          	addi	s9,s9,28 # 1000001c <resnet_L1_Memory>
	KerArg1->W = (unsigned short int) (10);
	KerArg1->UsedW = (unsigned short int) (10);
	KerArg1->OutFeatures = (unsigned short int) (64);
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+35776);
	KerArg1->Norm = (unsigned char) (13);
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c00744a:	1c017f37          	lui	t5,0x1c017
	KerArg1->W = (unsigned short int) (10);
1c00744e:	005066d7          	pv.add.sci.h	a3,zero,10
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c007452:	000ca703          	lw	a4,0(s9)
	KerArg1->W = (unsigned short int) (10);
1c007456:	c7b6                	sw	a3,204(sp)
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c007458:	1dcf2683          	lw	a3,476(t5) # 1c0171dc <__clz_tab+0x5c4>
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+35776);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (5);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+32576);
1c00745c:	6821                	lui	a6,0x8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c00745e:	67a5                	lui	a5,0x9
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4800);
1c007460:	6305                	lui	t1,0x1
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+32576);
1c007462:	f4080f93          	addi	t6,a6,-192 # 7f40 <__rt_stack_size+0x7740>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c007466:	bc078793          	addi	a5,a5,-1088 # 8bc0 <__rt_stack_size+0x83c0>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4800);
1c00746a:	2c030313          	addi	t1,t1,704 # 12c0 <__rt_stack_size+0xac0>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c00746e:	97ba                	add	a5,a5,a4
	KerArg0->OutFeatures = (unsigned short int) (64);
1c007470:	04000893          	li	a7,64
	KerArg0->W = (unsigned short int) (5);
1c007474:	02206ed7          	pv.add.sci.h	t4,zero,5
	KerArg1->Norm = (unsigned char) (13);
1c007478:	4e35                	li	t3,13
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4800);
1c00747a:	933a                	add	t1,t1,a4
	KerArg1->Pad = (v4s) ((v4s){0,1,0,1});
1c00747c:	d3b6                	sw	a3,228(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+32576);
1c00747e:	977e                	add	a4,a4,t6
	KerArg1->Orientation = (unsigned char) (1);
1c007480:	4685                	li	a3,1
{
1c007482:	12112623          	sw	ra,300(sp)
1c007486:	12812423          	sw	s0,296(sp)
1c00748a:	12912223          	sw	s1,292(sp)
1c00748e:	13212023          	sw	s2,288(sp)
1c007492:	11312e23          	sw	s3,284(sp)
1c007496:	11412c23          	sw	s4,280(sp)
1c00749a:	11512a23          	sw	s5,276(sp)
1c00749e:	11612823          	sw	s6,272(sp)
1c0074a2:	11712623          	sw	s7,268(sp)
1c0074a6:	11812423          	sw	s8,264(sp)
1c0074aa:	11a12023          	sw	s10,256(sp)
1c0074ae:	dfee                	sw	s11,252(sp)
	KerArg2->Norm = (unsigned char) (13);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c0074b0:	187d                	addi	a6,a6,-1
{
1c0074b2:	c22a                	sw	a0,4(sp)
1c0074b4:	c42e                	sw	a1,8(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c0074b6:	ce3e                	sw	a5,28(sp)
	KerArg0->W = (unsigned short int) (5);
1c0074b8:	d076                	sw	t4,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0074ba:	03111223          	sh	a7,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4800);
1c0074be:	d41a                	sw	t1,40(sp)
	KerArg1->OutFeatures = (unsigned short int) (64);
1c0074c0:	0d111b23          	sh	a7,214(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+35776);
1c0074c4:	d1be                	sw	a5,224(sp)
	KerArg1->Norm = (unsigned char) (13);
1c0074c6:	0fc10423          	sb	t3,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0074ca:	0ed105a3          	sb	a3,235(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+35776);
1c0074ce:	d63e                	sw	a5,44(sp)
	KerArg2->W = (unsigned short int) (5);
1c0074d0:	d876                	sw	t4,48(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+32576);
1c0074d2:	da3a                	sw	a4,52(sp)
	KerArg2->Norm = (unsigned char) (13);
1c0074d4:	03c10c23          	sb	t3,56(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c0074d8:	03111d23          	sh	a7,58(sp)
	KerArg2->LB = (int) (0);
1c0074dc:	de02                	sw	zero,60(sp)
	KerArg2->UB = (int) (32767);
1c0074de:	c0c2                	sw	a6,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0074e0:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0074e4:	002047b7          	lui	a5,0x204
1c0074e8:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0074ec:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0074f0:	08070713          	addi	a4,a4,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0074f4:	c1574733          	p.bset	a4,a4,0,21
1c0074f8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0074fc:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007500:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c007504:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c007506:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c007508:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00750c:	4766                	lw	a4,88(sp)
1c00750e:	42070163          	beqz	a4,1c007930 <S55_Conv2d_64x32x3x3_Relu+0x4fc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007512:	5686                	lw	a3,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007514:	02000713          	li	a4,32
1c007518:	ca89                	beqz	a3,1c00752a <S55_Conv2d_64x32x3x3_Relu+0xf6>
1c00751a:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00751e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007522:	00e7a223          	sw	a4,4(a5)
1c007526:	5686                	lw	a3,96(sp)
1c007528:	faed                	bnez	a3,1c00751a <S55_Conv2d_64x32x3x3_Relu+0xe6>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4800), 128, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4928+0), 13824, 0, &DmaR_Evt2);
1c00752a:	000ca703          	lw	a4,0(s9)
1c00752e:	6485                	lui	s1,0x1
1c007530:	34048793          	addi	a5,s1,832 # 1340 <__rt_stack_size+0xb40>
1c007534:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007536:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00753a:	002047b7          	lui	a5,0x204
1c00753e:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007542:	690d                	lui	s2,0x3
1c007544:	60090913          	addi	s2,s2,1536 # 3600 <__rt_stack_size+0x2e00>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007548:	002b06b7          	lui	a3,0x2b0
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00754c:	00d966b3          	or	a3,s2,a3
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007550:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007554:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007558:	4722                	lw	a4,8(sp)
1c00755a:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c00755e:	d4ae                	sw	a1,104(sp)
        copy->length = 0;
1c007560:	dc82                	sw	zero,120(sp)
  __builtin_pulp_spr_write(reg, val);
1c007562:	30061073          	csrw	mstatus,a2
	_N_Filter=0;
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 2400, 200, 200, 0, &DmaR_Evt3);
1c007566:	000ca583          	lw	a1,0(s9)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00756a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00756e:	4007a603          	lw	a2,1024(a5)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007572:	96048493          	addi	s1,s1,-1696
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c007576:	00070737          	lui	a4,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00757a:	de04a733          	p.insert	a4,s1,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00757e:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c007582:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007586:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00758a:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00758e:	4712                	lw	a4,4(sp)
1c007590:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c007594:	00c80737          	lui	a4,0xc80
1c007598:	0c870713          	addi	a4,a4,200 # c800c8 <__L2+0xc000c8>
1c00759c:	40e7a023          	sw	a4,1024(a5)
        if (!merge) copy->id = id;
1c0075a0:	c532                	sw	a2,136(sp)
        copy->length = 0;
1c0075a2:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c0075a4:	30069073          	csrw	mstatus,a3
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0075a8:	0ff00713          	li	a4,255
1c0075ac:	08e7a223          	sw	a4,132(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0075b0:	20078413          	addi	s0,a5,512
1c0075b4:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0075b8:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0075bc:	1c00c737          	lui	a4,0x1c00c
1c0075c0:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c0075c4:	08e7a023          	sw	a4,128(a5)
1c0075c8:	0868                	addi	a0,sp,28
1c0075ca:	08a7a023          	sw	a0,128(a5)
1c0075ce:	638040ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0075d2:	01c46783          	p.elw	a5,28(s0)
1c0075d6:	1c00e9b7          	lui	s3,0x1c00e
	_N_In=0;
1c0075da:	4b01                	li	s6,0
	_N_Filter=0;
1c0075dc:	4a81                	li	s5,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0075de:	4c01                	li	s8,0
1c0075e0:	8b098993          	addi	s3,s3,-1872 # 1c00d8b0 <KerParConv3x3Stride2_DP_fp>
1c0075e4:	0c810d13          	addi	s10,sp,200
				int D0Ind_Last = (D0Ind==2), D0Ind_NextLast = ((D0Ind+1)==2);
				/*================================= Prepare Tiles ===================================*/
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((13824)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:13824)):(((D0Ind_NextLast)?9216:13824)))); 
1c0075e8:	8bca                	mv	s7,s2
1c0075ea:	6405                	lui	s0,0x1
1c0075ec:	8da6                	mv	s11,s1
				if (!(D0Ind_Last)) {
1c0075ee:	3a2c2163          	p.beqimm	s8,2,1c007990 <S55_Conv2d_64x32x3x3_Relu+0x55c>
					_N_Filter = _N_Filter + ((13824)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:13824)):(((D0Ind_NextLast)?9216:13824)))); 
1c0075f2:	9ade                	add	s5,s5,s7
1c0075f4:	9b6e                	add	s6,s6,s11
1c0075f6:	381c2763          	p.beqimm	s8,1,1c007984 <S55_Conv2d_64x32x3x3_Relu+0x550>
1c0075fa:	8a26                	mv	s4,s1
1c0075fc:	864a                	mv	a2,s2
  if (copy->length == 0)
1c0075fe:	57e6                	lw	a5,120(sp)
1c007600:	14078c63          	beqz	a5,1c007758 <S55_Conv2d_64x32x3x3_Relu+0x324>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007604:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007606:	02000713          	li	a4,32
1c00760a:	002047b7          	lui	a5,0x204
1c00760e:	ca89                	beqz	a3,1c007620 <S55_Conv2d_64x32x3x3_Relu+0x1ec>
1c007610:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007614:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007618:	00e7a223          	sw	a4,4(a5)
1c00761c:	468a                	lw	a3,128(sp)
1c00761e:	faed                	bnez	a3,1c007610 <S55_Conv2d_64x32x3x3_Relu+0x1dc>
					_N_In = _N_In + (-4800); _LN_In = (200); _SN_In = (12*_LN_In); 
				}
				/*============================= End Prepare Tiles ===================================*/
				/*================================= Read Tiles ======================================*/
				AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
				if (_SN_Filter) {
1c007620:	18061963          	bnez	a2,1c0077b2 <S55_Conv2d_64x32x3x3_Relu+0x37e>
  if (copy->length == 0)
1c007624:	47ea                	lw	a5,152(sp)
1c007626:	c3c1                	beqz	a5,1c0076a6 <S55_Conv2d_64x32x3x3_Relu+0x272>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007628:	568a                	lw	a3,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00762a:	02000713          	li	a4,32
1c00762e:	002047b7          	lui	a5,0x204
1c007632:	ca89                	beqz	a3,1c007644 <S55_Conv2d_64x32x3x3_Relu+0x210>
1c007634:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007638:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00763c:	00e7a223          	sw	a4,4(a5)
1c007640:	568a                	lw	a3,160(sp)
1c007642:	faed                	bnez	a3,1c007634 <S55_Conv2d_64x32x3x3_Relu+0x200>
1c007644:	000ca703          	lw	a4,0(s9)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4928+13824*((D0Ind_Total+1)%2)),
							_SN_Filter, 0, &DmaR_Evt2);
				}
				AT_L2_WAIT(0, &DmaR_Evt3); /* Wait previous DMA read In */
				if (_SN_In) {
1c007648:	0a0a1e63          	bnez	s4,1c007704 <S55_Conv2d_64x32x3x3_Relu+0x2d0>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+2400*((D0Ind_Total+1)%2)),
							_SN_In, 200, _LN_In, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+2400*((D0Ind_Total)%2));
1c00764c:	fc1c36b3          	p.bclr	a3,s8,30,1
1c007650:	87ba                	mv	a5,a4
1c007652:	43b687b3          	p.mac	a5,a3,s11
				KerArg1->H = (unsigned short int) (11-0*(1)-1*(1));
1c007656:	00506657          	pv.add.sci.h	a2,zero,10
1c00765a:	c9b2                	sw	a2,208(sp)
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+2400*((D0Ind_Total)%2));
1c00765c:	c5be                	sw	a5,200(sp)
				KerArg1->UsedH = (unsigned short int) (11-0*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:12);
1c00765e:	162c2c63          	p.beqimm	s8,2,1c0077d6 <S55_Conv2d_64x32x3x3_Relu+0x3a2>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+4928+13824*((D0Ind_Total)%2));
1c007662:	34040793          	addi	a5,s0,832 # 1340 <__rt_stack_size+0xb40>
1c007666:	437687b3          	p.mac	a5,a3,s7
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:12);
1c00766a:	45b1                	li	a1,12
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00766c:	0ff00613          	li	a2,255
1c007670:	002046b7          	lui	a3,0x204
1c007674:	0cb11a23          	sh	a1,212(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:12);
1c007678:	0cb11c23          	sh	a1,216(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+4928+13824*((D0Ind_Total)%2));
1c00767c:	97ba                	add	a5,a5,a4
1c00767e:	cfbe                	sw	a5,220(sp)
1c007680:	08c6a223          	sw	a2,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007684:	20068a13          	addi	s4,a3,512
1c007688:	00ca2023          	sw	a2,0(s4)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00768c:	00ca2623          	sw	a2,12(s4)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007690:	0936a023          	sw	s3,128(a3)
1c007694:	09a6a023          	sw	s10,128(a3)
1c007698:	856a                	mv	a0,s10
1c00769a:	216060ef          	jal	ra,1c00d8b0 <KerParConv3x3Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00769e:	01ca6703          	p.elw	a4,28(s4)
			for (D0Ind=0; D0Ind<3; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0076a2:	0c05                	addi	s8,s8,1
1c0076a4:	b7a9                	j	1c0075ee <S55_Conv2d_64x32x3x3_Relu+0x1ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0076a6:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0076aa:	002047b7          	lui	a5,0x204
1c0076ae:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c0076b2:	46aa                	lw	a3,136(sp)
1c0076b4:	40d7d7b3          	sra	a5,a5,a3
1c0076b8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0076bc:	c79d                	beqz	a5,1c0076ea <S55_Conv2d_64x32x3x3_Relu+0x2b6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0076be:	10000593          	li	a1,256
1c0076c2:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0076c6:	30061073          	csrw	mstatus,a2
1c0076ca:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0076ce:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0076d2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0076d6:	30047673          	csrrci	a2,mstatus,8
1c0076da:	40472783          	lw	a5,1028(a4)
1c0076de:	46aa                	lw	a3,136(sp)
1c0076e0:	40d7d7b3          	sra	a5,a5,a3
1c0076e4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0076e8:	fff9                	bnez	a5,1c0076c6 <S55_Conv2d_64x32x3x3_Relu+0x292>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0076ea:	4785                	li	a5,1
1c0076ec:	00d796b3          	sll	a3,a5,a3
1c0076f0:	002047b7          	lui	a5,0x204
1c0076f4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0076f8:	30061073          	csrw	mstatus,a2
1c0076fc:	000ca703          	lw	a4,0(s9)
				if (_SN_In) {
1c007700:	f40a06e3          	beqz	s4,1c00764c <S55_Conv2d_64x32x3x3_Relu+0x218>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007704:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007708:	002046b7          	lui	a3,0x204
1c00770c:	4006a583          	lw	a1,1024(a3) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, is2D,        1, PLP_DMA_2D_BIT);
1c007710:	000707b7          	lui	a5,0x70
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007714:	de0a27b3          	p.insert	a5,s4,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c007718:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00771c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007720:	40f6a023          	sw	a5,1024(a3)
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+2400*((D0Ind_Total+1)%2)),
1c007724:	001c0793          	addi	a5,s8,1
1c007728:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00772c:	43b78733          	p.mac	a4,a5,s11
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007730:	40e6a023          	sw	a4,1024(a3)
1c007734:	4712                	lw	a4,4(sp)
1c007736:	016707b3          	add	a5,a4,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00773a:	40f6a023          	sw	a5,1024(a3)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00773e:	00c807b7          	lui	a5,0xc80
1c007742:	0c878793          	addi	a5,a5,200 # c800c8 <__L2+0xc000c8>
1c007746:	40f6a023          	sw	a5,1024(a3)
        if (!merge) copy->id = id;
1c00774a:	c52e                	sw	a1,136(sp)
        copy->length = 0;
1c00774c:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c00774e:	30061073          	csrw	mstatus,a2
1c007752:	000ca703          	lw	a4,0(s9)
1c007756:	bddd                	j	1c00764c <S55_Conv2d_64x32x3x3_Relu+0x218>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007758:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00775c:	002047b7          	lui	a5,0x204
1c007760:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c007764:	56a6                	lw	a3,104(sp)
1c007766:	40d7d7b3          	sra	a5,a5,a3
1c00776a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00776e:	c79d                	beqz	a5,1c00779c <S55_Conv2d_64x32x3x3_Relu+0x368>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007770:	10000513          	li	a0,256
1c007774:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007778:	30059073          	csrw	mstatus,a1
1c00777c:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007780:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007784:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007788:	300475f3          	csrrci	a1,mstatus,8
1c00778c:	40472783          	lw	a5,1028(a4)
1c007790:	56a6                	lw	a3,104(sp)
1c007792:	40d7d7b3          	sra	a5,a5,a3
1c007796:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00779a:	fff9                	bnez	a5,1c007778 <S55_Conv2d_64x32x3x3_Relu+0x344>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00779c:	4785                	li	a5,1
1c00779e:	00d796b3          	sll	a3,a5,a3
1c0077a2:	002047b7          	lui	a5,0x204
1c0077a6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0077aa:	30059073          	csrw	mstatus,a1
				if (_SN_Filter) {
1c0077ae:	e6060be3          	beqz	a2,1c007624 <S55_Conv2d_64x32x3x3_Relu+0x1f0>
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4928+13824*((D0Ind_Total+1)%2)),
1c0077b2:	001c0793          	addi	a5,s8,1
1c0077b6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0077ba:	34040593          	addi	a1,s0,832
1c0077be:	437785b3          	p.mac	a1,a5,s7
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c0077c2:	4722                	lw	a4,8(sp)
1c0077c4:	000ca783          	lw	a5,0(s9)
1c0077c8:	10b4                	addi	a3,sp,104
1c0077ca:	01570533          	add	a0,a4,s5
1c0077ce:	95be                	add	a1,a1,a5
1c0077d0:	cbff90ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
1c0077d4:	bd81                	j	1c007624 <S55_Conv2d_64x32x3x3_Relu+0x1f0>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+4928+13824*((D0Ind_Total)%2));
1c0077d6:	34040793          	addi	a5,s0,832
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:12);
1c0077da:	46a1                	li	a3,8
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+4928+13824*((D0Ind_Total)%2));
1c0077dc:	97ba                	add	a5,a5,a4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0077de:	0ff00a13          	li	s4,255
1c0077e2:	002044b7          	lui	s1,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:12);
1c0077e6:	0cd11a23          	sh	a3,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+4928+13824*((D0Ind_Total)%2));
1c0077ea:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:12);
1c0077ec:	0cd11c23          	sh	a3,216(sp)
1c0077f0:	0944a223          	sw	s4,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0077f4:	20048913          	addi	s2,s1,512
1c0077f8:	01492023          	sw	s4,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0077fc:	01492623          	sw	s4,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007800:	0934a023          	sw	s3,128(s1)
1c007804:	09a4a023          	sw	s10,128(s1)
1c007808:	856a                	mv	a0,s10
1c00780a:	0a6060ef          	jal	ra,1c00d8b0 <KerParConv3x3Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00780e:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007812:	0944a223          	sw	s4,132(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007816:	01492023          	sw	s4,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00781a:	01492623          	sw	s4,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00781e:	1c00c7b7          	lui	a5,0x1c00c
1c007822:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c007826:	08f4a023          	sw	a5,128(s1)
1c00782a:	1068                	addi	a0,sp,44
1c00782c:	08a4a023          	sw	a0,128(s1)
1c007830:	610040ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007834:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+32576), 3200, 1, &DmaW_Evt1);
1c007838:	67a1                	lui	a5,0x8
1c00783a:	000ca703          	lw	a4,0(s9)
1c00783e:	f4078793          	addi	a5,a5,-192 # 7f40 <__rt_stack_size+0x7740>
1c007842:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007844:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007848:	4004a603          	lw	a2,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00784c:	c8040413          	addi	s0,s0,-896
1c007850:	000207b7          	lui	a5,0x20
1c007854:	de0427b3          	p.insert	a5,s0,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007858:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00785c:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007860:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007864:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007868:	4732                	lw	a4,12(sp)
1c00786a:	40e4a023          	sw	a4,1024(s1)
        if (!merge) copy->id = id;
1c00786e:	d532                	sw	a2,168(sp)
        copy->length = 0;
1c007870:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c007872:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007876:	57ea                	lw	a5,184(sp)
1c007878:	e7c9                	bnez	a5,1c007902 <S55_Conv2d_64x32x3x3_Relu+0x4ce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00787a:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00787e:	4044a783          	lw	a5,1028(s1)
1c007882:	56aa                	lw	a3,168(sp)
1c007884:	40d7d7b3          	sra	a5,a5,a3
1c007888:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00788c:	c79d                	beqz	a5,1c0078ba <S55_Conv2d_64x32x3x3_Relu+0x486>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00788e:	10000593          	li	a1,256
1c007892:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007896:	30061073          	csrw	mstatus,a2
1c00789a:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00789e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0078a2:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0078a6:	30047673          	csrrci	a2,mstatus,8
1c0078aa:	40472783          	lw	a5,1028(a4)
1c0078ae:	56aa                	lw	a3,168(sp)
1c0078b0:	40d7d7b3          	sra	a5,a5,a3
1c0078b4:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0078b8:	fff9                	bnez	a5,1c007896 <S55_Conv2d_64x32x3x3_Relu+0x462>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0078ba:	4785                	li	a5,1
1c0078bc:	00d796b3          	sll	a3,a5,a3
1c0078c0:	002047b7          	lui	a5,0x204
1c0078c4:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0078c8:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0078cc:	12c12083          	lw	ra,300(sp)
1c0078d0:	12812403          	lw	s0,296(sp)
1c0078d4:	12412483          	lw	s1,292(sp)
1c0078d8:	12012903          	lw	s2,288(sp)
1c0078dc:	11c12983          	lw	s3,284(sp)
1c0078e0:	11812a03          	lw	s4,280(sp)
1c0078e4:	11412a83          	lw	s5,276(sp)
1c0078e8:	11012b03          	lw	s6,272(sp)
1c0078ec:	10c12b83          	lw	s7,268(sp)
1c0078f0:	10812c03          	lw	s8,264(sp)
1c0078f4:	10412c83          	lw	s9,260(sp)
1c0078f8:	10012d03          	lw	s10,256(sp)
1c0078fc:	5dfe                	lw	s11,252(sp)
1c0078fe:	6155                	addi	sp,sp,304
1c007900:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007902:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007904:	02000713          	li	a4,32
1c007908:	002047b7          	lui	a5,0x204
1c00790c:	d2e1                	beqz	a3,1c0078cc <S55_Conv2d_64x32x3x3_Relu+0x498>
1c00790e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007912:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007916:	00e7a223          	sw	a4,4(a5)
1c00791a:	468e                	lw	a3,192(sp)
1c00791c:	dac5                	beqz	a3,1c0078cc <S55_Conv2d_64x32x3x3_Relu+0x498>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00791e:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007922:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007926:	00e7a223          	sw	a4,4(a5)
1c00792a:	468e                	lw	a3,192(sp)
1c00792c:	f2ed                	bnez	a3,1c00790e <S55_Conv2d_64x32x3x3_Relu+0x4da>
1c00792e:	bf79                	j	1c0078cc <S55_Conv2d_64x32x3x3_Relu+0x498>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007930:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007934:	4047a783          	lw	a5,1028(a5)
1c007938:	46a6                	lw	a3,72(sp)
1c00793a:	40d7d7b3          	sra	a5,a5,a3
1c00793e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007942:	c79d                	beqz	a5,1c007970 <S55_Conv2d_64x32x3x3_Relu+0x53c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007944:	10000593          	li	a1,256
1c007948:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00794c:	30061073          	csrw	mstatus,a2
1c007950:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007954:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007958:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00795c:	30047673          	csrrci	a2,mstatus,8
1c007960:	40472783          	lw	a5,1028(a4)
1c007964:	46a6                	lw	a3,72(sp)
1c007966:	40d7d7b3          	sra	a5,a5,a3
1c00796a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00796e:	fff9                	bnez	a5,1c00794c <S55_Conv2d_64x32x3x3_Relu+0x518>
1c007970:	4785                	li	a5,1
1c007972:	00d796b3          	sll	a3,a5,a3
1c007976:	002047b7          	lui	a5,0x204
1c00797a:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00797e:	30061073          	csrw	mstatus,a2
1c007982:	b665                	j	1c00752a <S55_Conv2d_64x32x3x3_Relu+0xf6>
					_N_Filter = _N_Filter + ((13824)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:13824)):(((D0Ind_NextLast)?9216:13824)))); 
1c007984:	6609                	lui	a2,0x2
1c007986:	64000a13          	li	s4,1600
1c00798a:	40060613          	addi	a2,a2,1024 # 2400 <__rt_stack_size+0x1c00>
1c00798e:	b985                	j	1c0075fe <S55_Conv2d_64x32x3x3_Relu+0x1ca>
				_SN_Filter = 0;
1c007990:	4601                	li	a2,0
				_SN_In = 0;
1c007992:	4a01                	li	s4,0
1c007994:	b1ad                	j	1c0075fe <S55_Conv2d_64x32x3x3_Relu+0x1ca>

1c007996 <S58_Conv2d_64x32x1x1>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c007996:	7111                	addi	sp,sp,-256
1c007998:	d7ce                	sw	s3,236(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[10x9], 2][D0, [0 x 6400, 6400]]
		Tile0: [0, 6400, 6400], Tile1: [0, 6400, 6400], Tile2; [0, 6400, 6400]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c00799a:	100009b7          	lui	s3,0x10000
{
1c00799e:	d5d2                	sw	s4,232(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c0079a0:	01c98993          	addi	s3,s3,28 # 1000001c <resnet_L1_Memory>
	KerArg0->H = (unsigned short int) (5);
	KerArg0->OutFeatures = (unsigned short int) (64);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
	KerArg0->NormBias = (signed char) (11);
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
	KerArg1->W = (unsigned short int) (10);
1c0079a4:	1c0172b7          	lui	t0,0x1c017
{
1c0079a8:	8a36                	mv	s4,a3
	KerArg0->NormBias = (signed char) (11);
1c0079aa:	46ad                	li	a3,11
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c0079ac:	0009a883          	lw	a7,0(s3)
	KerArg0->NormBias = (signed char) (11);
1c0079b0:	00d10b23          	sb	a3,22(sp)
	KerArg1->W = (unsigned short int) (10);
1c0079b4:	1fc2a683          	lw	a3,508(t0) # 1c0171fc <__clz_tab+0x5e4>
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c0079b8:	678d                	lui	a5,0x3
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c0079ba:	6709                	lui	a4,0x2
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c0079bc:	60078813          	addi	a6,a5,1536 # 3600 <__rt_stack_size+0x2e00>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c0079c0:	90070313          	addi	t1,a4,-1792 # 1900 <__rt_stack_size+0x1100>
	KerArg1->Pad = (v4s) 0;
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+13824);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (5);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+10624);
1c0079c4:	98078793          	addi	a5,a5,-1664
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6528);
1c0079c8:	98070713          	addi	a4,a4,-1664
1c0079cc:	9746                	add	a4,a4,a7
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+10624);
1c0079ce:	97c6                	add	a5,a5,a7
	KerArg1->InFeatures = (unsigned short int) (32);
1c0079d0:	1c017fb7          	lui	t6,0x1c017
	KerArg1->W = (unsigned short int) (10);
1c0079d4:	df36                	sw	a3,188(sp)
	KerArg1->H = (unsigned short int) (10);
1c0079d6:	46a9                	li	a3,10
1c0079d8:	0cd11023          	sh	a3,192(sp)
	KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+6528);
1c0079dc:	c7ba                	sw	a4,204(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c0079de:	200fa683          	lw	a3,512(t6) # 1c017200 <__clz_tab+0x5e8>
	KerArg1->TotalInFeatures = (short int) (32);
1c0079e2:	02000713          	li	a4,32
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+10624);
1c0079e6:	d23e                	sw	a5,36(sp)
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (-32768);
1c0079e8:	77e1                	lui	a5,0xffff8
	KerArg1->TotalInFeatures = (short int) (32);
1c0079ea:	0ce11423          	sh	a4,200(sp)
	KerArg2->LB = (int) (-32768);
1c0079ee:	d63e                	sw	a5,44(sp)
	KerArg1->Pad = (v4s) 0;
1c0079f0:	00007757          	pv.add.sci.b	a4,zero,0
	KerArg2->UB = (int) (32767);
1c0079f4:	67a1                	lui	a5,0x8
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c0079f6:	9846                	add	a6,a6,a7
	KerArg0->W = (unsigned short int) (5);
1c0079f8:	02206f57          	pv.add.sci.h	t5,zero,5
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0079fc:	04000e13          	li	t3,64
	KerArg1->Norm = (unsigned char) (14);
1c007a00:	4eb9                	li	t4,14
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c007a02:	9346                	add	t1,t1,a7
	KerArg1->Pad = (v4s) 0;
1c007a04:	cbba                	sw	a4,212(sp)
	KerArg2->UB = (int) (32767);
1c007a06:	17fd                	addi	a5,a5,-1
	KerArg1->Orientation = (unsigned char) (1);
1c007a08:	4705                	li	a4,1
{
1c007a0a:	df86                	sw	ra,252(sp)
1c007a0c:	dda2                	sw	s0,248(sp)
1c007a0e:	dba6                	sw	s1,244(sp)
1c007a10:	d9ca                	sw	s2,240(sp)
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c007a12:	c642                	sw	a6,12(sp)
	KerArg0->W = (unsigned short int) (5);
1c007a14:	c87a                	sw	t5,16(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c007a16:	01c11a23          	sh	t3,20(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+6400);
1c007a1a:	cc1a                	sw	t1,24(sp)
	KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c007a1c:	dd46                	sw	a7,184(sp)
	KerArg1->InFeatures = (unsigned short int) (32);
1c007a1e:	c3b6                	sw	a3,196(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+13824);
1c007a20:	c9c2                	sw	a6,208(sp)
	KerArg1->Norm = (unsigned char) (14);
1c007a22:	0dd10c23          	sb	t4,216(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c007a26:	0ce10da3          	sb	a4,219(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+13824);
1c007a2a:	ce42                	sw	a6,28(sp)
	KerArg2->W = (unsigned short int) (5);
1c007a2c:	d07a                	sw	t5,32(sp)
	KerArg2->Norm = (unsigned char) (14);
1c007a2e:	03d10423          	sb	t4,40(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c007a32:	03c11523          	sh	t3,42(sp)
	KerArg2->UB = (int) (32767);
1c007a36:	d83e                	sw	a5,48(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007a38:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007a3c:	002047b7          	lui	a5,0x204
1c007a40:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007a44:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007a48:	08070713          	addi	a4,a4,128 # b0080 <__L2+0x30080>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007a4c:	c1574733          	p.bset	a4,a4,0,21
1c007a50:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007a54:	4067a023          	sw	t1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007a58:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c007a5c:	dc42                	sw	a6,56(sp)
        copy->length = 0;
1c007a5e:	c482                	sw	zero,72(sp)
  __builtin_pulp_spr_write(reg, val);
1c007a60:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007a64:	4726                	lw	a4,72(sp)
1c007a66:	2a070963          	beqz	a4,1c007d18 <S58_Conv2d_64x32x1x1+0x382>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007a6a:	46c6                	lw	a3,80(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007a6c:	02000713          	li	a4,32
1c007a70:	ca89                	beqz	a3,1c007a82 <S58_Conv2d_64x32x1x1+0xec>
1c007a72:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007a76:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007a7a:	00e7a223          	sw	a4,4(a5)
1c007a7e:	46c6                	lw	a3,80(sp)
1c007a80:	faed                	bnez	a3,1c007a72 <S58_Conv2d_64x32x1x1+0xdc>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 128, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6528), 4096, 0, &DmaR_Evt2);
1c007a82:	0009a703          	lw	a4,0(s3)
1c007a86:	6789                	lui	a5,0x2
1c007a88:	98078793          	addi	a5,a5,-1664 # 1980 <__rt_stack_size+0x1180>
1c007a8c:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007a8e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007a92:	002047b7          	lui	a5,0x204
1c007a96:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007a9a:	002b1837          	lui	a6,0x2b1
1c007a9e:	4107a023          	sw	a6,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007aa2:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007aa6:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c007aaa:	ccb2                	sw	a2,88(sp)
        copy->length = 0;
1c007aac:	d482                	sw	zero,104(sp)
  __builtin_pulp_spr_write(reg, val);
1c007aae:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007ab2:	5726                	lw	a4,104(sp)
1c007ab4:	20070863          	beqz	a4,1c007cc4 <S58_Conv2d_64x32x1x1+0x32e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007ab8:	56c6                	lw	a3,112(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007aba:	02000713          	li	a4,32
1c007abe:	ca89                	beqz	a3,1c007ad0 <S58_Conv2d_64x32x1x1+0x13a>
1c007ac0:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ac4:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007ac8:	00e7a223          	sw	a4,4(a5)
1c007acc:	56c6                	lw	a3,112(sp)
1c007ace:	faed                	bnez	a3,1c007ac0 <S58_Conv2d_64x32x1x1+0x12a>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 6400, 0, &DmaR_Evt3);
1c007ad0:	0009a583          	lw	a1,0(s3)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007ad4:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007ad8:	002047b7          	lui	a5,0x204
1c007adc:	4007a603          	lw	a2,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007ae0:	00032737          	lui	a4,0x32
1c007ae4:	90070713          	addi	a4,a4,-1792 # 31900 <__L1Cl+0x21900>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007ae8:	c1374733          	p.bset	a4,a4,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007aec:	c1574733          	p.bset	a4,a4,0,21
1c007af0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007af4:	40b7a023          	sw	a1,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007af8:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c007afc:	dcb2                	sw	a2,120(sp)
        copy->length = 0;
1c007afe:	c502                	sw	zero,136(sp)
  __builtin_pulp_spr_write(reg, val);
1c007b00:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007b04:	472a                	lw	a4,136(sp)
1c007b06:	16070563          	beqz	a4,1c007c70 <S58_Conv2d_64x32x1x1+0x2da>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007b0a:	46ca                	lw	a3,144(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007b0c:	02000713          	li	a4,32
1c007b10:	ca89                	beqz	a3,1c007b22 <S58_Conv2d_64x32x1x1+0x18c>
1c007b12:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007b16:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007b1a:	00e7a223          	sw	a4,4(a5)
1c007b1e:	46ca                	lw	a3,144(sp)
1c007b20:	faed                	bnez	a3,1c007b12 <S58_Conv2d_64x32x1x1+0x17c>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007b22:	0ff00913          	li	s2,255
1c007b26:	00204437          	lui	s0,0x204
1c007b2a:	09242223          	sw	s2,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007b2e:	20040493          	addi	s1,s0,512
1c007b32:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007b36:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007b3a:	1c00c7b7          	lui	a5,0x1c00c
1c007b3e:	c0678793          	addi	a5,a5,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c007b42:	08f42023          	sw	a5,128(s0)
1c007b46:	0068                	addi	a0,sp,12
1c007b48:	08a42023          	sw	a0,128(s0)
1c007b4c:	0ba040ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007b50:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			{ /* Single iteration on D0 */
				int D0Ind_Last = 1;
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->UsedH = (unsigned short int) (9);
1c007b54:	47a5                	li	a5,9
1c007b56:	0cf11123          	sh	a5,194(sp)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007b5a:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007b5e:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007b62:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007b66:	1c00d7b7          	lui	a5,0x1c00d
1c007b6a:	51878793          	addi	a5,a5,1304 # 1c00d518 <KerParConv1x1Stride2_DP_fp>
1c007b6e:	08f42023          	sw	a5,128(s0)
1c007b72:	1928                	addi	a0,sp,184
1c007b74:	08a42023          	sw	a0,128(s0)
1c007b78:	1a1050ef          	jal	ra,1c00d518 <KerParConv1x1Stride2_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007b7c:	01c4e783          	p.elw	a5,28(s1)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007b80:	09242223          	sw	s2,132(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007b84:	0124a023          	sw	s2,0(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007b88:	0124a623          	sw	s2,12(s1)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007b8c:	1c00c7b7          	lui	a5,0x1c00c
1c007b90:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c007b94:	08f42023          	sw	a5,128(s0)
1c007b98:	0868                	addi	a0,sp,28
1c007b9a:	08a42023          	sw	a0,128(s0)
1c007b9e:	2a2040ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ba2:	01c4e783          	p.elw	a5,28(s1)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+10624), 3200, 1, &DmaW_Evt1);
1c007ba6:	678d                	lui	a5,0x3
1c007ba8:	0009a703          	lw	a4,0(s3)
1c007bac:	98078793          	addi	a5,a5,-1664 # 2980 <__rt_stack_size+0x2180>
1c007bb0:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007bb2:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007bb6:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c007bba:	000217b7          	lui	a5,0x21
1c007bbe:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c007bc2:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007bc6:	c157c7b3          	p.bset	a5,a5,0,21
1c007bca:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007bce:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007bd2:	41442023          	sw	s4,1024(s0)
        if (!merge) copy->id = id;
1c007bd6:	cd32                	sw	a2,152(sp)
        copy->length = 0;
1c007bd8:	d502                	sw	zero,168(sp)
  __builtin_pulp_spr_write(reg, val);
1c007bda:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c007bde:	57aa                	lw	a5,168(sp)
1c007be0:	c79d                	beqz	a5,1c007c0e <S58_Conv2d_64x32x1x1+0x278>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007be2:	56ca                	lw	a3,176(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007be4:	02000713          	li	a4,32
1c007be8:	002047b7          	lui	a5,0x204
1c007bec:	ca89                	beqz	a3,1c007bfe <S58_Conv2d_64x32x1x1+0x268>
1c007bee:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007bf2:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007bf6:	00e7a223          	sw	a4,4(a5)
1c007bfa:	56ca                	lw	a3,176(sp)
1c007bfc:	faed                	bnez	a3,1c007bee <S58_Conv2d_64x32x1x1+0x258>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c007bfe:	50fe                	lw	ra,252(sp)
1c007c00:	546e                	lw	s0,248(sp)
1c007c02:	54de                	lw	s1,244(sp)
1c007c04:	594e                	lw	s2,240(sp)
1c007c06:	59be                	lw	s3,236(sp)
1c007c08:	5a2e                	lw	s4,232(sp)
1c007c0a:	6111                	addi	sp,sp,256
1c007c0c:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c0e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007c12:	40442403          	lw	s0,1028(s0)
1c007c16:	46ea                	lw	a3,152(sp)
1c007c18:	40d45433          	sra	s0,s0,a3
1c007c1c:	fc143433          	p.bclr	s0,s0,30,1
1c007c20:	c41d                	beqz	s0,1c007c4e <S58_Conv2d_64x32x1x1+0x2b8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007c22:	10000593          	li	a1,256
1c007c26:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007c2a:	30061073          	csrw	mstatus,a2
1c007c2e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007c32:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007c36:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c3a:	30047673          	csrrci	a2,mstatus,8
1c007c3e:	40472783          	lw	a5,1028(a4)
1c007c42:	46ea                	lw	a3,152(sp)
1c007c44:	40d7d7b3          	sra	a5,a5,a3
1c007c48:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007c4c:	fff9                	bnez	a5,1c007c2a <S58_Conv2d_64x32x1x1+0x294>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c007c4e:	4785                	li	a5,1
1c007c50:	00d796b3          	sll	a3,a5,a3
1c007c54:	002047b7          	lui	a5,0x204
1c007c58:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007c5c:	30061073          	csrw	mstatus,a2
1c007c60:	50fe                	lw	ra,252(sp)
1c007c62:	546e                	lw	s0,248(sp)
1c007c64:	54de                	lw	s1,244(sp)
1c007c66:	594e                	lw	s2,240(sp)
1c007c68:	59be                	lw	s3,236(sp)
1c007c6a:	5a2e                	lw	s4,232(sp)
1c007c6c:	6111                	addi	sp,sp,256
1c007c6e:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c70:	30047673          	csrrci	a2,mstatus,8
1c007c74:	4047a783          	lw	a5,1028(a5)
1c007c78:	56e6                	lw	a3,120(sp)
1c007c7a:	40d7d7b3          	sra	a5,a5,a3
1c007c7e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007c82:	c79d                	beqz	a5,1c007cb0 <S58_Conv2d_64x32x1x1+0x31a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007c84:	10000593          	li	a1,256
1c007c88:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007c8c:	30061073          	csrw	mstatus,a2
1c007c90:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007c94:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007c98:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007c9c:	30047673          	csrrci	a2,mstatus,8
1c007ca0:	40472783          	lw	a5,1028(a4)
1c007ca4:	56e6                	lw	a3,120(sp)
1c007ca6:	40d7d7b3          	sra	a5,a5,a3
1c007caa:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007cae:	fff9                	bnez	a5,1c007c8c <S58_Conv2d_64x32x1x1+0x2f6>
1c007cb0:	4785                	li	a5,1
1c007cb2:	00d796b3          	sll	a3,a5,a3
1c007cb6:	002047b7          	lui	a5,0x204
1c007cba:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007cbe:	30061073          	csrw	mstatus,a2
1c007cc2:	b585                	j	1c007b22 <S58_Conv2d_64x32x1x1+0x18c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007cc4:	30047673          	csrrci	a2,mstatus,8
1c007cc8:	4047a783          	lw	a5,1028(a5)
1c007ccc:	46e6                	lw	a3,88(sp)
1c007cce:	40d7d7b3          	sra	a5,a5,a3
1c007cd2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007cd6:	c79d                	beqz	a5,1c007d04 <S58_Conv2d_64x32x1x1+0x36e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007cd8:	10000593          	li	a1,256
1c007cdc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007ce0:	30061073          	csrw	mstatus,a2
1c007ce4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007ce8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007cec:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007cf0:	30047673          	csrrci	a2,mstatus,8
1c007cf4:	40472783          	lw	a5,1028(a4)
1c007cf8:	46e6                	lw	a3,88(sp)
1c007cfa:	40d7d7b3          	sra	a5,a5,a3
1c007cfe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007d02:	fff9                	bnez	a5,1c007ce0 <S58_Conv2d_64x32x1x1+0x34a>
1c007d04:	4785                	li	a5,1
1c007d06:	00d796b3          	sll	a3,a5,a3
1c007d0a:	002047b7          	lui	a5,0x204
1c007d0e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007d12:	30061073          	csrw	mstatus,a2
1c007d16:	bb6d                	j	1c007ad0 <S58_Conv2d_64x32x1x1+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007d18:	30047673          	csrrci	a2,mstatus,8
1c007d1c:	4047a783          	lw	a5,1028(a5)
1c007d20:	56e2                	lw	a3,56(sp)
1c007d22:	40d7d7b3          	sra	a5,a5,a3
1c007d26:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007d2a:	c79d                	beqz	a5,1c007d58 <S58_Conv2d_64x32x1x1+0x3c2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007d2c:	10000813          	li	a6,256
1c007d30:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007d34:	30061073          	csrw	mstatus,a2
1c007d38:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007d3c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007d40:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007d44:	30047673          	csrrci	a2,mstatus,8
1c007d48:	40472783          	lw	a5,1028(a4)
1c007d4c:	56e2                	lw	a3,56(sp)
1c007d4e:	40d7d7b3          	sra	a5,a5,a3
1c007d52:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007d56:	fff9                	bnez	a5,1c007d34 <S58_Conv2d_64x32x1x1+0x39e>
1c007d58:	4785                	li	a5,1
1c007d5a:	00d796b3          	sll	a3,a5,a3
1c007d5e:	002047b7          	lui	a5,0x204
1c007d62:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007d66:	30061073          	csrw	mstatus,a2
1c007d6a:	bb21                	j	1c007a82 <S58_Conv2d_64x32x1x1+0xec>

1c007d6c <S61_Conv2d_64x64x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c007d6c:	7169                	addi	sp,sp,-304
1c007d6e:	11812423          	sw	s8,264(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 6400, 6400]][Tile0, 1:[5x5], 4]
		Tile0: [0, 6400, 100], Tile1: [0, 6400, 100], Tile2; [0, 6400, 100]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c007d72:	10000c37          	lui	s8,0x10000
1c007d76:	01cc0c13          	addi	s8,s8,28 # 1000001c <resnet_L1_Memory>
1c007d7a:	000c2703          	lw	a4,0(s8)
{
1c007d7e:	c636                	sw	a3,12(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (5);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c007d80:	6821                	lui	a6,0x8
	KerArg0->NormBias = (signed char) (14);
1c007d82:	46b9                	li	a3,14
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c007d84:	67a5                	lui	a5,0x9
	KerArg0->NormBias = (signed char) (14);
1c007d86:	02d10323          	sb	a3,38(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c007d8a:	3f880313          	addi	t1,a6,1016 # 83f8 <__rt_stack_size+0x7bf8>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c007d8e:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c007d92:	07878793          	addi	a5,a5,120 # 9078 <__rt_stack_size+0x8878>
1c007d96:	97ba                	add	a5,a5,a4
	KerArg0->W = (unsigned short int) (5);
1c007d98:	02206e57          	pv.add.sci.h	t3,zero,5
	KerArg0->OutFeatures = (unsigned short int) (64);
1c007d9c:	04000893          	li	a7,64
	KerArg1->Norm = (unsigned char) (15);
1c007da0:	4ebd                	li	t4,15
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c007da2:	d3b6                	sw	a3,228(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c007da4:	57870f13          	addi	t5,a4,1400
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c007da8:	933a                	add	t1,t1,a4
	KerArg2->Norm = (unsigned char) (15);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c007daa:	187d                	addi	a6,a6,-1
	KerArg1->Orientation = (unsigned char) (1);
1c007dac:	4685                	li	a3,1
{
1c007dae:	11312e23          	sw	s3,284(sp)
1c007db2:	11412c23          	sw	s4,280(sp)
1c007db6:	12112623          	sw	ra,300(sp)
1c007dba:	12812423          	sw	s0,296(sp)
1c007dbe:	12912223          	sw	s1,292(sp)
1c007dc2:	13212023          	sw	s2,288(sp)
1c007dc6:	11512a23          	sw	s5,276(sp)
1c007dca:	11612823          	sw	s6,272(sp)
1c007dce:	11712623          	sw	s7,268(sp)
1c007dd2:	11912223          	sw	s9,260(sp)
1c007dd6:	11a12023          	sw	s10,256(sp)
1c007dda:	dfee                	sw	s11,252(sp)
1c007ddc:	8a2a                	mv	s4,a0
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c007dde:	ce3e                	sw	a5,28(sp)
	KerArg0->W = (unsigned short int) (5);
1c007de0:	d072                	sw	t3,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c007de2:	03111223          	sh	a7,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c007de6:	d47a                	sw	t5,40(sp)
	KerArg1->W = (unsigned short int) (5);
1c007de8:	c7f2                	sw	t3,204(sp)
	KerArg1->OutFeatures = (unsigned short int) (64);
1c007dea:	0d111b23          	sh	a7,214(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c007dee:	d1be                	sw	a5,224(sp)
	KerArg1->Norm = (unsigned char) (15);
1c007df0:	0fd10423          	sb	t4,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c007df4:	0ed105a3          	sb	a3,235(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
1c007df8:	d63e                	sw	a5,44(sp)
	KerArg2->W = (unsigned short int) (5);
1c007dfa:	d872                	sw	t3,48(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c007dfc:	da1a                	sw	t1,52(sp)
	KerArg2->Norm = (unsigned char) (15);
1c007dfe:	03d10c23          	sb	t4,56(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c007e02:	03111d23          	sh	a7,58(sp)
	KerArg2->UB = (int) (32767);
1c007e06:	c0c2                	sw	a6,64(sp)
{
1c007e08:	89ae                	mv	s3,a1
1c007e0a:	8532                	mv	a0,a2
	KerArg2->LB = (int) (0);
1c007e0c:	de02                	sw	zero,60(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007e0e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007e12:	00204437          	lui	s0,0x204
1c007e16:	40042603          	lw	a2,1024(s0) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c007e1a:	002f07b7          	lui	a5,0x2f0
1c007e1e:	2bc78793          	addi	a5,a5,700 # 2f02bc <__L2+0x2702bc>
1c007e22:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c007e26:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c007e2a:	41442023          	sw	s4,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c007e2e:	003207b7          	lui	a5,0x320
1c007e32:	03278793          	addi	a5,a5,50 # 320032 <__L2+0x2a0032>
1c007e36:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c007e3a:	c4b2                	sw	a2,72(sp)
        copy->length = 0;
1c007e3c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c007e3e:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 700, 50, 50, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1400), 128, 0, &DmaR_Evt2);
1c007e42:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c007e46:	10b4                	addi	a3,sp,104
1c007e48:	08000613          	li	a2,128
1c007e4c:	57858593          	addi	a1,a1,1400
1c007e50:	e3ef90ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c007e54:	57e6                	lw	a5,120(sp)
1c007e56:	3e078463          	beqz	a5,1c00823e <S61_Conv2d_64x64x3x3_Relu+0x4d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007e5a:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007e5c:	02000713          	li	a4,32
1c007e60:	002047b7          	lui	a5,0x204
1c007e64:	ca89                	beqz	a3,1c007e76 <S61_Conv2d_64x64x3x3_Relu+0x10a>
1c007e66:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007e6a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007e6e:	00e7a223          	sw	a4,4(a5)
1c007e72:	468a                	lw	a3,128(sp)
1c007e74:	faed                	bnez	a3,1c007e66 <S61_Conv2d_64x64x3x3_Relu+0xfa>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+0), 16128, 0, &DmaR_Evt3);
1c007e76:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c007e7a:	6c91                	lui	s9,0x4
1c007e7c:	0134                	addi	a3,sp,136
1c007e7e:	f00c8613          	addi	a2,s9,-256 # 3f00 <__rt_stack_size+0x3700>
1c007e82:	5f858593          	addi	a1,a1,1528
1c007e86:	854e                	mv	a0,s3
1c007e88:	e06f90ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007e8c:	0ff00713          	li	a4,255
1c007e90:	002047b7          	lui	a5,0x204
1c007e94:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007e98:	20078413          	addi	s0,a5,512
1c007e9c:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007ea0:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007ea4:	1c00c737          	lui	a4,0x1c00c
1c007ea8:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c007eac:	08e7a023          	sw	a4,128(a5)
1c007eb0:	0868                	addi	a0,sp,28
1c007eb2:	08a7a023          	sw	a0,128(a5)
1c007eb6:	551030ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007eba:	01c46783          	p.elw	a5,28(s0)
1c007ebe:	1c00d437          	lui	s0,0x1c00d
1c007ec2:	00320937          	lui	s2,0x320
	_N_Filter=0;
1c007ec6:	4b01                	li	s6,0
	_N_In=0;
1c007ec8:	4d81                	li	s11,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c007eca:	4b81                	li	s7,0
1c007ecc:	70640413          	addi	s0,s0,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c007ed0:	0c810d13          	addi	s10,sp,200
				} else if (!(1)) {
					_N_In = _N_In + (-2800); _LN_In = (50); _SN_In = (14*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c007ed4:	f00c8c93          	addi	s9,s9,-256
1c007ed8:	03290913          	addi	s2,s2,50 # 320032 <__L2+0x2a0032>
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c007edc:	022064d7          	pv.add.sci.h	s1,zero,5
				if (!(D0Ind_Last)) {
1c007ee0:	3c4ba263          	p.beqimm	s7,4,1c0082a4 <S61_Conv2d_64x64x3x3_Relu+0x538>
					_N_In = _N_In + (700); _LN_In = (50); _SN_In = (((D0Ind_NextLast)?8:14)*_LN_In); 
1c007ee4:	2bcd8d93          	addi	s11,s11,700
1c007ee8:	3a3ba563          	p.beqimm	s7,3,1c008292 <S61_Conv2d_64x64x3x3_Relu+0x526>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c007eec:	9b66                	add	s6,s6,s9
1c007eee:	2bc00893          	li	a7,700
1c007ef2:	8566                	mv	a0,s9
  if (copy->length == 0)
1c007ef4:	47e6                	lw	a5,88(sp)
1c007ef6:	14078a63          	beqz	a5,1c00804a <S61_Conv2d_64x64x3x3_Relu+0x2de>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007efa:	5606                	lw	a2,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007efc:	02000713          	li	a4,32
1c007f00:	002047b7          	lui	a5,0x204
1c007f04:	ca09                	beqz	a2,1c007f16 <S61_Conv2d_64x64x3x3_Relu+0x1aa>
1c007f06:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007f0a:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007f0e:	00e7a223          	sw	a4,4(a5)
1c007f12:	5606                	lw	a2,96(sp)
1c007f14:	fa6d                	bnez	a2,1c007f06 <S61_Conv2d_64x64x3x3_Relu+0x19a>
				if (_SN_In) {
1c007f16:	18089763          	bnez	a7,1c0080a4 <S61_Conv2d_64x64x3x3_Relu+0x338>
  if (copy->length == 0)
1c007f1a:	47ea                	lw	a5,152(sp)
1c007f1c:	c3c9                	beqz	a5,1c007f9e <S61_Conv2d_64x64x3x3_Relu+0x232>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c007f1e:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007f20:	02000713          	li	a4,32
1c007f24:	002047b7          	lui	a5,0x204
1c007f28:	ca09                	beqz	a2,1c007f3a <S61_Conv2d_64x64x3x3_Relu+0x1ce>
1c007f2a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007f2e:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007f32:	00e7a223          	sw	a4,4(a5)
1c007f36:	560a                	lw	a2,160(sp)
1c007f38:	fa6d                	bnez	a2,1c007f2a <S61_Conv2d_64x64x3x3_Relu+0x1be>
1c007f3a:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c007f3e:	ed55                	bnez	a0,1c007ffa <S61_Conv2d_64x64x3x3_Relu+0x28e>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c007f40:	fc1bb633          	p.bclr	a2,s7,30,1
1c007f44:	2bc00793          	li	a5,700
1c007f48:	86ba                	mv	a3,a4
1c007f4a:	42f606b3          	p.mac	a3,a2,a5
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c007f4e:	c9a6                	sw	s1,208(sp)
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c007f50:	c5b6                	sw	a3,200(sp)
				KerArg1->UsedH = (unsigned short int) (7-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c007f52:	184bac63          	p.beqimm	s7,4,1c0080ea <S61_Conv2d_64x64x3x3_Relu+0x37e>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c007f56:	00661793          	slli	a5,a2,0x6
1c007f5a:	8f91                	sub	a5,a5,a2
1c007f5c:	07a2                	slli	a5,a5,0x8
1c007f5e:	5f878793          	addi	a5,a5,1528
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c007f62:	45b9                	li	a1,14
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c007f64:	97ba                	add	a5,a5,a4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c007f66:	0ff00613          	li	a2,255
1c007f6a:	00204737          	lui	a4,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c007f6e:	0cb11a23          	sh	a1,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c007f72:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c007f74:	0cb11c23          	sh	a1,216(sp)
1c007f78:	08c72223          	sw	a2,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c007f7c:	20070a93          	addi	s5,a4,512
1c007f80:	00caa023          	sw	a2,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c007f84:	00caa623          	sw	a2,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c007f88:	08872023          	sw	s0,128(a4)
1c007f8c:	09a72023          	sw	s10,128(a4)
1c007f90:	856a                	mv	a0,s10
1c007f92:	774050ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007f96:	01cae703          	p.elw	a4,28(s5)
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c007f9a:	0b85                	addi	s7,s7,1
1c007f9c:	b791                	j	1c007ee0 <S61_Conv2d_64x64x3x3_Relu+0x174>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007f9e:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c007fa2:	002047b7          	lui	a5,0x204
1c007fa6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c007faa:	462a                	lw	a2,136(sp)
1c007fac:	40c7d7b3          	sra	a5,a5,a2
1c007fb0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007fb4:	c79d                	beqz	a5,1c007fe2 <S61_Conv2d_64x64x3x3_Relu+0x276>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c007fb6:	10000813          	li	a6,256
1c007fba:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c007fbe:	30059073          	csrw	mstatus,a1
1c007fc2:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c007fc6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c007fca:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007fce:	300475f3          	csrrci	a1,mstatus,8
1c007fd2:	40472783          	lw	a5,1028(a4)
1c007fd6:	462a                	lw	a2,136(sp)
1c007fd8:	40c7d7b3          	sra	a5,a5,a2
1c007fdc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c007fe0:	fff9                	bnez	a5,1c007fbe <S61_Conv2d_64x64x3x3_Relu+0x252>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c007fe2:	4785                	li	a5,1
1c007fe4:	00c79633          	sll	a2,a5,a2
1c007fe8:	002047b7          	lui	a5,0x204
1c007fec:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c007ff0:	30059073          	csrw	mstatus,a1
1c007ff4:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c007ff8:	d521                	beqz	a0,1c007f40 <S61_Conv2d_64x64x3x3_Relu+0x1d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c007ffa:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c007ffe:	00204637          	lui	a2,0x204
1c008002:	40062883          	lw	a7,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c008006:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00800a:	de0527b3          	p.insert	a5,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c00800e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c008012:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008016:	40f62023          	sw	a5,1024(a2)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+16128*((D0Ind_Total+1)%2)),
1c00801a:	001b8793          	addi	a5,s7,1
1c00801e:	fc17b5b3          	p.bclr	a1,a5,30,1
1c008022:	00659793          	slli	a5,a1,0x6
1c008026:	8f8d                	sub	a5,a5,a1
1c008028:	07a2                	slli	a5,a5,0x8
1c00802a:	5f878793          	addi	a5,a5,1528 # 305f8 <__L1Cl+0x205f8>
1c00802e:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008030:	40f62023          	sw	a5,1024(a2)
1c008034:	016987b3          	add	a5,s3,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008038:	40f62023          	sw	a5,1024(a2)
        if (!merge) copy->id = id;
1c00803c:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c00803e:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c008040:	30081073          	csrw	mstatus,a6
1c008044:	000c2703          	lw	a4,0(s8)
1c008048:	bde5                	j	1c007f40 <S61_Conv2d_64x64x3x3_Relu+0x1d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00804a:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00804e:	002047b7          	lui	a5,0x204
1c008052:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c008056:	4626                	lw	a2,72(sp)
1c008058:	40c7d7b3          	sra	a5,a5,a2
1c00805c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008060:	c79d                	beqz	a5,1c00808e <S61_Conv2d_64x64x3x3_Relu+0x322>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008062:	10000813          	li	a6,256
1c008066:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00806a:	30059073          	csrw	mstatus,a1
1c00806e:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008072:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008076:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00807a:	300475f3          	csrrci	a1,mstatus,8
1c00807e:	40472783          	lw	a5,1028(a4)
1c008082:	4626                	lw	a2,72(sp)
1c008084:	40c7d7b3          	sra	a5,a5,a2
1c008088:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00808c:	fff9                	bnez	a5,1c00806a <S61_Conv2d_64x64x3x3_Relu+0x2fe>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00808e:	4785                	li	a5,1
1c008090:	00c79633          	sll	a2,a5,a2
1c008094:	002047b7          	lui	a5,0x204
1c008098:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00809c:	30059073          	csrw	mstatus,a1
				if (_SN_In) {
1c0080a0:	e6088de3          	beqz	a7,1c007f1a <S61_Conv2d_64x64x3x3_Relu+0x1ae>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+700*((D0Ind_Total+1)%2)),
1c0080a4:	000c2703          	lw	a4,0(s8)
1c0080a8:	001b8793          	addi	a5,s7,1
1c0080ac:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0080b0:	2bc00613          	li	a2,700
1c0080b4:	42c78733          	p.mac	a4,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0080b8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0080bc:	002047b7          	lui	a5,0x204
1c0080c0:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0080c4:	c708c8b3          	p.bset	a7,a7,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0080c8:	c158c8b3          	p.bset	a7,a7,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0080cc:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0080d0:	40e7a023          	sw	a4,1024(a5)
1c0080d4:	01ba0733          	add	a4,s4,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0080d8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0080dc:	4127a023          	sw	s2,1024(a5)
        if (!merge) copy->id = id;
1c0080e0:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c0080e2:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c0080e4:	30061073          	csrw	mstatus,a2
1c0080e8:	bd0d                	j	1c007f1a <S61_Conv2d_64x64x3x3_Relu+0x1ae>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c0080ea:	46a1                	li	a3,8
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c0080ec:	5f870793          	addi	a5,a4,1528
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0080f0:	0ff00993          	li	s3,255
1c0080f4:	002044b7          	lui	s1,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c0080f8:	0cd11a23          	sh	a3,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c0080fc:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c0080fe:	0cd11c23          	sh	a3,216(sp)
1c008102:	0934a223          	sw	s3,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008106:	20048913          	addi	s2,s1,512
1c00810a:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00810e:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008112:	0884a023          	sw	s0,128(s1)
1c008116:	09a4a023          	sw	s10,128(s1)
1c00811a:	856a                	mv	a0,s10
1c00811c:	5ea050ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008120:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008124:	0934a223          	sw	s3,132(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008128:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00812c:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008130:	1c00c7b7          	lui	a5,0x1c00c
1c008134:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c008138:	08f4a023          	sw	a5,128(s1)
1c00813c:	1068                	addi	a0,sp,44
1c00813e:	08a4a023          	sw	a0,128(s1)
1c008142:	4ff030ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008146:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+33784), 3200, 1, &DmaW_Evt1);
1c00814a:	67a1                	lui	a5,0x8
1c00814c:	000c2703          	lw	a4,0(s8)
1c008150:	3f878793          	addi	a5,a5,1016 # 83f8 <__rt_stack_size+0x7bf8>
1c008154:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008156:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00815a:	4004a603          	lw	a2,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00815e:	000217b7          	lui	a5,0x21
1c008162:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008166:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00816a:	c157c7b3          	p.bset	a5,a5,0,21
1c00816e:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008172:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008176:	47b2                	lw	a5,12(sp)
1c008178:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c00817c:	d532                	sw	a2,168(sp)
        copy->length = 0;
1c00817e:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c008180:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008184:	57ea                	lw	a5,184(sp)
1c008186:	e7c9                	bnez	a5,1c008210 <S61_Conv2d_64x64x3x3_Relu+0x4a4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008188:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00818c:	4044a783          	lw	a5,1028(s1)
1c008190:	56aa                	lw	a3,168(sp)
1c008192:	40d7d7b3          	sra	a5,a5,a3
1c008196:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00819a:	c79d                	beqz	a5,1c0081c8 <S61_Conv2d_64x64x3x3_Relu+0x45c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00819c:	10000593          	li	a1,256
1c0081a0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0081a4:	30061073          	csrw	mstatus,a2
1c0081a8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0081ac:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0081b0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0081b4:	30047673          	csrrci	a2,mstatus,8
1c0081b8:	40472783          	lw	a5,1028(a4)
1c0081bc:	56aa                	lw	a3,168(sp)
1c0081be:	40d7d7b3          	sra	a5,a5,a3
1c0081c2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0081c6:	fff9                	bnez	a5,1c0081a4 <S61_Conv2d_64x64x3x3_Relu+0x438>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0081c8:	4785                	li	a5,1
1c0081ca:	00d796b3          	sll	a3,a5,a3
1c0081ce:	002047b7          	lui	a5,0x204
1c0081d2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0081d6:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0081da:	12c12083          	lw	ra,300(sp)
1c0081de:	12812403          	lw	s0,296(sp)
1c0081e2:	12412483          	lw	s1,292(sp)
1c0081e6:	12012903          	lw	s2,288(sp)
1c0081ea:	11c12983          	lw	s3,284(sp)
1c0081ee:	11812a03          	lw	s4,280(sp)
1c0081f2:	11412a83          	lw	s5,276(sp)
1c0081f6:	11012b03          	lw	s6,272(sp)
1c0081fa:	10c12b83          	lw	s7,268(sp)
1c0081fe:	10812c03          	lw	s8,264(sp)
1c008202:	10412c83          	lw	s9,260(sp)
1c008206:	10012d03          	lw	s10,256(sp)
1c00820a:	5dfe                	lw	s11,252(sp)
1c00820c:	6155                	addi	sp,sp,304
1c00820e:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008210:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008212:	02000713          	li	a4,32
1c008216:	002047b7          	lui	a5,0x204
1c00821a:	d2e1                	beqz	a3,1c0081da <S61_Conv2d_64x64x3x3_Relu+0x46e>
1c00821c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008220:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008224:	00e7a223          	sw	a4,4(a5)
1c008228:	468e                	lw	a3,192(sp)
1c00822a:	dac5                	beqz	a3,1c0081da <S61_Conv2d_64x64x3x3_Relu+0x46e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00822c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008230:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008234:	00e7a223          	sw	a4,4(a5)
1c008238:	468e                	lw	a3,192(sp)
1c00823a:	f2ed                	bnez	a3,1c00821c <S61_Conv2d_64x64x3x3_Relu+0x4b0>
1c00823c:	bf79                	j	1c0081da <S61_Conv2d_64x64x3x3_Relu+0x46e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00823e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008242:	40442783          	lw	a5,1028(s0)
1c008246:	56a6                	lw	a3,104(sp)
1c008248:	40d7d7b3          	sra	a5,a5,a3
1c00824c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008250:	c79d                	beqz	a5,1c00827e <S61_Conv2d_64x64x3x3_Relu+0x512>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008252:	10000593          	li	a1,256
1c008256:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00825a:	30061073          	csrw	mstatus,a2
1c00825e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008262:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008266:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00826a:	30047673          	csrrci	a2,mstatus,8
1c00826e:	40472783          	lw	a5,1028(a4)
1c008272:	56a6                	lw	a3,104(sp)
1c008274:	40d7d7b3          	sra	a5,a5,a3
1c008278:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00827c:	fff9                	bnez	a5,1c00825a <S61_Conv2d_64x64x3x3_Relu+0x4ee>
1c00827e:	4785                	li	a5,1
1c008280:	00d796b3          	sll	a3,a5,a3
1c008284:	002047b7          	lui	a5,0x204
1c008288:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00828c:	30061073          	csrw	mstatus,a2
1c008290:	b6dd                	j	1c007e76 <S61_Conv2d_64x64x3x3_Relu+0x10a>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c008292:	1c0176b7          	lui	a3,0x1c017
1c008296:	20468693          	addi	a3,a3,516 # 1c017204 <__clz_tab+0x5ec>
1c00829a:	9b66                	add	s6,s6,s9
1c00829c:	19000893          	li	a7,400
1c0082a0:	4288                	lw	a0,0(a3)
1c0082a2:	b989                	j	1c007ef4 <S61_Conv2d_64x64x3x3_Relu+0x188>
				_SN_In = 0;
1c0082a4:	4881                	li	a7,0
				_SN_Filter = 0;
1c0082a6:	4501                	li	a0,0
1c0082a8:	b1b1                	j	1c007ef4 <S61_Conv2d_64x64x3x3_Relu+0x188>

1c0082aa <S62_MatAdd_64x5x5>:
void S62_MatAdd_64x5x5(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c0082aa:	7135                	addi	sp,sp,-160
1c0082ac:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 3200, 3200]][Tile0, 1:[5x5], 2]
		Tile0: [0, 3200, 3200], Tile1: [0, 3200, 3200], Tile2; [0, 3200, 3200]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c0082ae:	10000937          	lui	s2,0x10000
1c0082b2:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c0082b6:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+6400);
1c0082ba:	6789                	lui	a5,0x2
1c0082bc:	90078793          	addi	a5,a5,-1792 # 1900 <__rt_stack_size+0x1100>
1c0082c0:	97b6                	add	a5,a5,a3
1c0082c2:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (5);
1c0082c4:	022067d7          	pv.add.sci.h	a5,zero,5
1c0082c8:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (5);
	KerArg0->N = (unsigned short int) (64);
1c0082ca:	04000793          	li	a5,64
1c0082ce:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c0082d2:	77e1                	lui	a5,0xffff8
1c0082d4:	dabe                	sw	a5,116(sp)
1c0082d6:	67a1                	lui	a5,0x8
1c0082d8:	17fd                	addi	a5,a5,-1
1c0082da:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c0082dc:	6805                	lui	a6,0x1
	KerArg0->UB = (int) (32767);
1c0082de:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c0082e0:	c8080813          	addi	a6,a6,-896 # c80 <__rt_stack_size+0x480>
	KerArg0->UB = (int) (32767);
1c0082e4:	b0c78793          	addi	a5,a5,-1268 # b0c <__rt_stack_size+0x30c>
{
1c0082e8:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c0082ea:	01068733          	add	a4,a3,a6
	KerArg0->UB = (int) (32767);
1c0082ee:	06f11e23          	sh	a5,124(sp)
{
1c0082f2:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (12);
	KerArg0->In2_Q = (unsigned char) (11);
1c0082f4:	47ad                	li	a5,11
{
1c0082f6:	cf06                	sw	ra,156(sp)
1c0082f8:	cd22                	sw	s0,152(sp)
1c0082fa:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c0082fc:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c0082fe:	d2ba                	sw	a4,100(sp)
	KerArg0->In2_Q = (unsigned char) (11);
1c008300:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008304:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008308:	002047b7          	lui	a5,0x204
1c00830c:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c008310:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008314:	de082733          	p.insert	a4,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008318:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00831c:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008320:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008324:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008328:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c00832c:	c046                	sw	a7,0(sp)
        copy->length = 0;
1c00832e:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c008330:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c008334:	4742                	lw	a4,16(sp)
1c008336:	1c070163          	beqz	a4,1c0084f8 <S62_MatAdd_64x5x5+0x24e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00833a:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00833c:	02000713          	li	a4,32
1c008340:	ca89                	beqz	a3,1c008352 <S62_MatAdd_64x5x5+0xa8>
1c008342:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008346:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00834a:	00e7a223          	sw	a4,4(a5)
1c00834e:	46e2                	lw	a3,24(sp)
1c008350:	faed                	bnez	a3,1c008342 <S62_MatAdd_64x5x5+0x98>
	KerArg0->Out_Q = (unsigned char) (11);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 3200, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+3200), 3200, 0, &DmaR_Evt2);
1c008352:	00092603          	lw	a2,0(s2)
1c008356:	6685                	lui	a3,0x1
1c008358:	c8068693          	addi	a3,a3,-896 # c80 <__rt_stack_size+0x480>
1c00835c:	9636                	add	a2,a2,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00835e:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008362:	002047b7          	lui	a5,0x204
1c008366:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00836a:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00836e:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008372:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c008376:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00837a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00837e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008382:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c008386:	d042                	sw	a6,32(sp)
        copy->length = 0;
1c008388:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c00838a:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00838e:	5742                	lw	a4,48(sp)
1c008390:	10070a63          	beqz	a4,1c0084a4 <S62_MatAdd_64x5x5+0x1fa>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008394:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008396:	02000713          	li	a4,32
1c00839a:	ca89                	beqz	a3,1c0083ac <S62_MatAdd_64x5x5+0x102>
1c00839c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0083a0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0083a4:	00e7a223          	sw	a4,4(a5)
1c0083a8:	56e2                	lw	a3,56(sp)
1c0083aa:	faed                	bnez	a3,1c00839c <S62_MatAdd_64x5x5+0xf2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0083ac:	0ff00793          	li	a5,255
1c0083b0:	00204437          	lui	s0,0x204
1c0083b4:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0083b8:	20040993          	addi	s3,s0,512
1c0083bc:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0083c0:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0083c4:	1c0107b7          	lui	a5,0x1c010
1c0083c8:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c0083cc:	08f42023          	sw	a5,128(s0)
1c0083d0:	1088                	addi	a0,sp,96
1c0083d2:	08a42023          	sw	a0,128(s0)
1c0083d6:	21d070ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0083da:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 3200, 1, &DmaW_Evt1);
1c0083de:	6789                	lui	a5,0x2
1c0083e0:	00092703          	lw	a4,0(s2)
1c0083e4:	90078793          	addi	a5,a5,-1792 # 1900 <__rt_stack_size+0x1100>
1c0083e8:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0083ea:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0083ee:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0083f2:	000217b7          	lui	a5,0x21
1c0083f6:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0083fa:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0083fe:	c157c7b3          	p.bset	a5,a5,0,21
1c008402:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008406:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00840a:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c00840e:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c008410:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c008412:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008416:	47c6                	lw	a5,80(sp)
1c008418:	c795                	beqz	a5,1c008444 <S62_MatAdd_64x5x5+0x19a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00841a:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00841c:	02000713          	li	a4,32
1c008420:	002047b7          	lui	a5,0x204
1c008424:	ca89                	beqz	a3,1c008436 <S62_MatAdd_64x5x5+0x18c>
1c008426:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00842a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00842e:	00e7a223          	sw	a4,4(a5)
1c008432:	46e6                	lw	a3,88(sp)
1c008434:	faed                	bnez	a3,1c008426 <S62_MatAdd_64x5x5+0x17c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c008436:	40fa                	lw	ra,156(sp)
1c008438:	446a                	lw	s0,152(sp)
1c00843a:	44da                	lw	s1,148(sp)
1c00843c:	494a                	lw	s2,144(sp)
1c00843e:	49ba                	lw	s3,140(sp)
1c008440:	610d                	addi	sp,sp,160
1c008442:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008444:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008448:	40442403          	lw	s0,1028(s0)
1c00844c:	4686                	lw	a3,64(sp)
1c00844e:	40d45433          	sra	s0,s0,a3
1c008452:	fc143433          	p.bclr	s0,s0,30,1
1c008456:	c41d                	beqz	s0,1c008484 <S62_MatAdd_64x5x5+0x1da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008458:	10000593          	li	a1,256
1c00845c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008460:	30061073          	csrw	mstatus,a2
1c008464:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008468:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00846c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008470:	30047673          	csrrci	a2,mstatus,8
1c008474:	40472783          	lw	a5,1028(a4)
1c008478:	4686                	lw	a3,64(sp)
1c00847a:	40d7d7b3          	sra	a5,a5,a3
1c00847e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008482:	fff9                	bnez	a5,1c008460 <S62_MatAdd_64x5x5+0x1b6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008484:	4785                	li	a5,1
1c008486:	00d796b3          	sll	a3,a5,a3
1c00848a:	002047b7          	lui	a5,0x204
1c00848e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008492:	30061073          	csrw	mstatus,a2
1c008496:	40fa                	lw	ra,156(sp)
1c008498:	446a                	lw	s0,152(sp)
1c00849a:	44da                	lw	s1,148(sp)
1c00849c:	494a                	lw	s2,144(sp)
1c00849e:	49ba                	lw	s3,140(sp)
1c0084a0:	610d                	addi	sp,sp,160
1c0084a2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0084a4:	30047673          	csrrci	a2,mstatus,8
1c0084a8:	4047a783          	lw	a5,1028(a5)
1c0084ac:	5682                	lw	a3,32(sp)
1c0084ae:	40d7d7b3          	sra	a5,a5,a3
1c0084b2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0084b6:	c79d                	beqz	a5,1c0084e4 <S62_MatAdd_64x5x5+0x23a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0084b8:	10000593          	li	a1,256
1c0084bc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0084c0:	30061073          	csrw	mstatus,a2
1c0084c4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0084c8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0084cc:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0084d0:	30047673          	csrrci	a2,mstatus,8
1c0084d4:	40472783          	lw	a5,1028(a4)
1c0084d8:	5682                	lw	a3,32(sp)
1c0084da:	40d7d7b3          	sra	a5,a5,a3
1c0084de:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0084e2:	fff9                	bnez	a5,1c0084c0 <S62_MatAdd_64x5x5+0x216>
1c0084e4:	4785                	li	a5,1
1c0084e6:	00d796b3          	sll	a3,a5,a3
1c0084ea:	002047b7          	lui	a5,0x204
1c0084ee:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0084f2:	30061073          	csrw	mstatus,a2
1c0084f6:	bd5d                	j	1c0083ac <S62_MatAdd_64x5x5+0x102>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0084f8:	30047673          	csrrci	a2,mstatus,8
1c0084fc:	4047a783          	lw	a5,1028(a5)
1c008500:	4682                	lw	a3,0(sp)
1c008502:	40d7d7b3          	sra	a5,a5,a3
1c008506:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00850a:	c79d                	beqz	a5,1c008538 <S62_MatAdd_64x5x5+0x28e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00850c:	10000513          	li	a0,256
1c008510:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008514:	30061073          	csrw	mstatus,a2
1c008518:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00851c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008520:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008524:	30047673          	csrrci	a2,mstatus,8
1c008528:	40472783          	lw	a5,1028(a4)
1c00852c:	4682                	lw	a3,0(sp)
1c00852e:	40d7d7b3          	sra	a5,a5,a3
1c008532:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008536:	fff9                	bnez	a5,1c008514 <S62_MatAdd_64x5x5+0x26a>
1c008538:	4785                	li	a5,1
1c00853a:	00d796b3          	sll	a3,a5,a3
1c00853e:	002047b7          	lui	a5,0x204
1c008542:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008546:	30061073          	csrw	mstatus,a2
1c00854a:	b521                	j	1c008352 <S62_MatAdd_64x5x5+0xa8>

1c00854c <S65_Conv2d_64x64x3x3_Relu>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00854c:	7169                	addi	sp,sp,-304
1c00854e:	11812423          	sw	s8,264(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 6400, 6400]][Tile0, 1:[5x5], 4]
		Tile0: [0, 6400, 100], Tile1: [0, 6400, 100], Tile2; [0, 6400, 100]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008552:	10000c37          	lui	s8,0x10000
1c008556:	01cc0c13          	addi	s8,s8,28 # 1000001c <resnet_L1_Memory>
1c00855a:	000c2703          	lw	a4,0(s8)
{
1c00855e:	c636                	sw	a3,12(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (5);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008560:	6821                	lui	a6,0x8
	KerArg0->NormBias = (signed char) (11);
1c008562:	46ad                	li	a3,11
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008564:	67a5                	lui	a5,0x9
	KerArg0->NormBias = (signed char) (11);
1c008566:	02d10323          	sb	a3,38(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c00856a:	3f880313          	addi	t1,a6,1016 # 83f8 <__rt_stack_size+0x7bf8>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c00856e:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008572:	07878793          	addi	a5,a5,120 # 9078 <__rt_stack_size+0x8878>
1c008576:	97ba                	add	a5,a5,a4
	KerArg0->W = (unsigned short int) (5);
1c008578:	02206e57          	pv.add.sci.h	t3,zero,5
	KerArg0->OutFeatures = (unsigned short int) (64);
1c00857c:	04000893          	li	a7,64
	KerArg1->Norm = (unsigned char) (14);
1c008580:	4eb9                	li	t4,14
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c008582:	d3b6                	sw	a3,228(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c008584:	57870f13          	addi	t5,a4,1400
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008588:	933a                	add	t1,t1,a4
	KerArg2->Norm = (unsigned char) (14);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (0);
	KerArg2->UB = (int) (32767);
1c00858a:	187d                	addi	a6,a6,-1
	KerArg1->Orientation = (unsigned char) (1);
1c00858c:	4685                	li	a3,1
{
1c00858e:	11312e23          	sw	s3,284(sp)
1c008592:	11412c23          	sw	s4,280(sp)
1c008596:	12112623          	sw	ra,300(sp)
1c00859a:	12812423          	sw	s0,296(sp)
1c00859e:	12912223          	sw	s1,292(sp)
1c0085a2:	13212023          	sw	s2,288(sp)
1c0085a6:	11512a23          	sw	s5,276(sp)
1c0085aa:	11612823          	sw	s6,272(sp)
1c0085ae:	11712623          	sw	s7,268(sp)
1c0085b2:	11912223          	sw	s9,260(sp)
1c0085b6:	11a12023          	sw	s10,256(sp)
1c0085ba:	dfee                	sw	s11,252(sp)
1c0085bc:	8a2a                	mv	s4,a0
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c0085be:	ce3e                	sw	a5,28(sp)
	KerArg0->W = (unsigned short int) (5);
1c0085c0:	d072                	sw	t3,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0085c2:	03111223          	sh	a7,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c0085c6:	d47a                	sw	t5,40(sp)
	KerArg1->W = (unsigned short int) (5);
1c0085c8:	c7f2                	sw	t3,204(sp)
	KerArg1->OutFeatures = (unsigned short int) (64);
1c0085ca:	0d111b23          	sh	a7,214(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c0085ce:	d1be                	sw	a5,224(sp)
	KerArg1->Norm = (unsigned char) (14);
1c0085d0:	0fd10423          	sb	t4,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c0085d4:	0ed105a3          	sb	a3,235(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
1c0085d8:	d63e                	sw	a5,44(sp)
	KerArg2->W = (unsigned short int) (5);
1c0085da:	d872                	sw	t3,48(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c0085dc:	da1a                	sw	t1,52(sp)
	KerArg2->Norm = (unsigned char) (14);
1c0085de:	03d10c23          	sb	t4,56(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c0085e2:	03111d23          	sh	a7,58(sp)
	KerArg2->UB = (int) (32767);
1c0085e6:	c0c2                	sw	a6,64(sp)
{
1c0085e8:	89ae                	mv	s3,a1
1c0085ea:	8532                	mv	a0,a2
	KerArg2->LB = (int) (0);
1c0085ec:	de02                	sw	zero,60(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0085ee:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0085f2:	00204437          	lui	s0,0x204
1c0085f6:	40042603          	lw	a2,1024(s0) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0085fa:	002f07b7          	lui	a5,0x2f0
1c0085fe:	2bc78793          	addi	a5,a5,700 # 2f02bc <__L2+0x2702bc>
1c008602:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008606:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00860a:	41442023          	sw	s4,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c00860e:	003207b7          	lui	a5,0x320
1c008612:	03278793          	addi	a5,a5,50 # 320032 <__L2+0x2a0032>
1c008616:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c00861a:	c4b2                	sw	a2,72(sp)
        copy->length = 0;
1c00861c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c00861e:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 700, 50, 50, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1400), 128, 0, &DmaR_Evt2);
1c008622:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c008626:	10b4                	addi	a3,sp,104
1c008628:	08000613          	li	a2,128
1c00862c:	57858593          	addi	a1,a1,1400
1c008630:	e5ff80ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c008634:	57e6                	lw	a5,120(sp)
1c008636:	3e078463          	beqz	a5,1c008a1e <S65_Conv2d_64x64x3x3_Relu+0x4d2>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00863a:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00863c:	02000713          	li	a4,32
1c008640:	002047b7          	lui	a5,0x204
1c008644:	ca89                	beqz	a3,1c008656 <S65_Conv2d_64x64x3x3_Relu+0x10a>
1c008646:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00864a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00864e:	00e7a223          	sw	a4,4(a5)
1c008652:	468a                	lw	a3,128(sp)
1c008654:	faed                	bnez	a3,1c008646 <S65_Conv2d_64x64x3x3_Relu+0xfa>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+0), 16128, 0, &DmaR_Evt3);
1c008656:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c00865a:	6c91                	lui	s9,0x4
1c00865c:	0134                	addi	a3,sp,136
1c00865e:	f00c8613          	addi	a2,s9,-256 # 3f00 <__rt_stack_size+0x3700>
1c008662:	5f858593          	addi	a1,a1,1528
1c008666:	854e                	mv	a0,s3
1c008668:	e27f80ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c00866c:	0ff00713          	li	a4,255
1c008670:	002047b7          	lui	a5,0x204
1c008674:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008678:	20078413          	addi	s0,a5,512
1c00867c:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008680:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008684:	1c00c737          	lui	a4,0x1c00c
1c008688:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c00868c:	08e7a023          	sw	a4,128(a5)
1c008690:	0868                	addi	a0,sp,28
1c008692:	08a7a023          	sw	a0,128(a5)
1c008696:	570030ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00869a:	01c46783          	p.elw	a5,28(s0)
1c00869e:	1c00d437          	lui	s0,0x1c00d
1c0086a2:	00320937          	lui	s2,0x320
	_N_Filter=0;
1c0086a6:	4b01                	li	s6,0
	_N_In=0;
1c0086a8:	4d81                	li	s11,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c0086aa:	4b81                	li	s7,0
1c0086ac:	70640413          	addi	s0,s0,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c0086b0:	0c810d13          	addi	s10,sp,200
				} else if (!(1)) {
					_N_In = _N_In + (-2800); _LN_In = (50); _SN_In = (14*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c0086b4:	f00c8c93          	addi	s9,s9,-256
1c0086b8:	03290913          	addi	s2,s2,50 # 320032 <__L2+0x2a0032>
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c0086bc:	022064d7          	pv.add.sci.h	s1,zero,5
				if (!(D0Ind_Last)) {
1c0086c0:	3c4ba263          	p.beqimm	s7,4,1c008a84 <S65_Conv2d_64x64x3x3_Relu+0x538>
					_N_In = _N_In + (700); _LN_In = (50); _SN_In = (((D0Ind_NextLast)?8:14)*_LN_In); 
1c0086c4:	2bcd8d93          	addi	s11,s11,700
1c0086c8:	3a3ba563          	p.beqimm	s7,3,1c008a72 <S65_Conv2d_64x64x3x3_Relu+0x526>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c0086cc:	9b66                	add	s6,s6,s9
1c0086ce:	2bc00893          	li	a7,700
1c0086d2:	8566                	mv	a0,s9
  if (copy->length == 0)
1c0086d4:	47e6                	lw	a5,88(sp)
1c0086d6:	14078a63          	beqz	a5,1c00882a <S65_Conv2d_64x64x3x3_Relu+0x2de>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0086da:	5606                	lw	a2,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0086dc:	02000713          	li	a4,32
1c0086e0:	002047b7          	lui	a5,0x204
1c0086e4:	ca09                	beqz	a2,1c0086f6 <S65_Conv2d_64x64x3x3_Relu+0x1aa>
1c0086e6:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0086ea:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0086ee:	00e7a223          	sw	a4,4(a5)
1c0086f2:	5606                	lw	a2,96(sp)
1c0086f4:	fa6d                	bnez	a2,1c0086e6 <S65_Conv2d_64x64x3x3_Relu+0x19a>
				if (_SN_In) {
1c0086f6:	18089763          	bnez	a7,1c008884 <S65_Conv2d_64x64x3x3_Relu+0x338>
  if (copy->length == 0)
1c0086fa:	47ea                	lw	a5,152(sp)
1c0086fc:	c3c9                	beqz	a5,1c00877e <S65_Conv2d_64x64x3x3_Relu+0x232>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0086fe:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008700:	02000713          	li	a4,32
1c008704:	002047b7          	lui	a5,0x204
1c008708:	ca09                	beqz	a2,1c00871a <S65_Conv2d_64x64x3x3_Relu+0x1ce>
1c00870a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00870e:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008712:	00e7a223          	sw	a4,4(a5)
1c008716:	560a                	lw	a2,160(sp)
1c008718:	fa6d                	bnez	a2,1c00870a <S65_Conv2d_64x64x3x3_Relu+0x1be>
1c00871a:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c00871e:	ed55                	bnez	a0,1c0087da <S65_Conv2d_64x64x3x3_Relu+0x28e>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c008720:	fc1bb633          	p.bclr	a2,s7,30,1
1c008724:	2bc00793          	li	a5,700
1c008728:	86ba                	mv	a3,a4
1c00872a:	42f606b3          	p.mac	a3,a2,a5
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c00872e:	c9a6                	sw	s1,208(sp)
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c008730:	c5b6                	sw	a3,200(sp)
				KerArg1->UsedH = (unsigned short int) (7-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008732:	184bac63          	p.beqimm	s7,4,1c0088ca <S65_Conv2d_64x64x3x3_Relu+0x37e>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008736:	00661793          	slli	a5,a2,0x6
1c00873a:	8f91                	sub	a5,a5,a2
1c00873c:	07a2                	slli	a5,a5,0x8
1c00873e:	5f878793          	addi	a5,a5,1528
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008742:	45b9                	li	a1,14
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008744:	97ba                	add	a5,a5,a4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008746:	0ff00613          	li	a2,255
1c00874a:	00204737          	lui	a4,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c00874e:	0cb11a23          	sh	a1,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008752:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c008754:	0cb11c23          	sh	a1,216(sp)
1c008758:	08c72223          	sw	a2,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c00875c:	20070a93          	addi	s5,a4,512
1c008760:	00caa023          	sw	a2,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008764:	00caa623          	sw	a2,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008768:	08872023          	sw	s0,128(a4)
1c00876c:	09a72023          	sw	s10,128(a4)
1c008770:	856a                	mv	a0,s10
1c008772:	795040ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008776:	01cae703          	p.elw	a4,28(s5)
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c00877a:	0b85                	addi	s7,s7,1
1c00877c:	b791                	j	1c0086c0 <S65_Conv2d_64x64x3x3_Relu+0x174>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00877e:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008782:	002047b7          	lui	a5,0x204
1c008786:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c00878a:	462a                	lw	a2,136(sp)
1c00878c:	40c7d7b3          	sra	a5,a5,a2
1c008790:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008794:	c79d                	beqz	a5,1c0087c2 <S65_Conv2d_64x64x3x3_Relu+0x276>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008796:	10000813          	li	a6,256
1c00879a:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00879e:	30059073          	csrw	mstatus,a1
1c0087a2:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0087a6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0087aa:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0087ae:	300475f3          	csrrci	a1,mstatus,8
1c0087b2:	40472783          	lw	a5,1028(a4)
1c0087b6:	462a                	lw	a2,136(sp)
1c0087b8:	40c7d7b3          	sra	a5,a5,a2
1c0087bc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0087c0:	fff9                	bnez	a5,1c00879e <S65_Conv2d_64x64x3x3_Relu+0x252>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0087c2:	4785                	li	a5,1
1c0087c4:	00c79633          	sll	a2,a5,a2
1c0087c8:	002047b7          	lui	a5,0x204
1c0087cc:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0087d0:	30059073          	csrw	mstatus,a1
1c0087d4:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c0087d8:	d521                	beqz	a0,1c008720 <S65_Conv2d_64x64x3x3_Relu+0x1d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0087da:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0087de:	00204637          	lui	a2,0x204
1c0087e2:	40062883          	lw	a7,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0087e6:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0087ea:	de0527b3          	p.insert	a5,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0087ee:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0087f2:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0087f6:	40f62023          	sw	a5,1024(a2)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+16128*((D0Ind_Total+1)%2)),
1c0087fa:	001b8793          	addi	a5,s7,1
1c0087fe:	fc17b5b3          	p.bclr	a1,a5,30,1
1c008802:	00659793          	slli	a5,a1,0x6
1c008806:	8f8d                	sub	a5,a5,a1
1c008808:	07a2                	slli	a5,a5,0x8
1c00880a:	5f878793          	addi	a5,a5,1528 # 305f8 <__L1Cl+0x205f8>
1c00880e:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008810:	40f62023          	sw	a5,1024(a2)
1c008814:	016987b3          	add	a5,s3,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008818:	40f62023          	sw	a5,1024(a2)
        if (!merge) copy->id = id;
1c00881c:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c00881e:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c008820:	30081073          	csrw	mstatus,a6
1c008824:	000c2703          	lw	a4,0(s8)
1c008828:	bde5                	j	1c008720 <S65_Conv2d_64x64x3x3_Relu+0x1d4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00882a:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00882e:	002047b7          	lui	a5,0x204
1c008832:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c008836:	4626                	lw	a2,72(sp)
1c008838:	40c7d7b3          	sra	a5,a5,a2
1c00883c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008840:	c79d                	beqz	a5,1c00886e <S65_Conv2d_64x64x3x3_Relu+0x322>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008842:	10000813          	li	a6,256
1c008846:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c00884a:	30059073          	csrw	mstatus,a1
1c00884e:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008852:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008856:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00885a:	300475f3          	csrrci	a1,mstatus,8
1c00885e:	40472783          	lw	a5,1028(a4)
1c008862:	4626                	lw	a2,72(sp)
1c008864:	40c7d7b3          	sra	a5,a5,a2
1c008868:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00886c:	fff9                	bnez	a5,1c00884a <S65_Conv2d_64x64x3x3_Relu+0x2fe>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c00886e:	4785                	li	a5,1
1c008870:	00c79633          	sll	a2,a5,a2
1c008874:	002047b7          	lui	a5,0x204
1c008878:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00887c:	30059073          	csrw	mstatus,a1
				if (_SN_In) {
1c008880:	e6088de3          	beqz	a7,1c0086fa <S65_Conv2d_64x64x3x3_Relu+0x1ae>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+700*((D0Ind_Total+1)%2)),
1c008884:	000c2703          	lw	a4,0(s8)
1c008888:	001b8793          	addi	a5,s7,1
1c00888c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008890:	2bc00613          	li	a2,700
1c008894:	42c78733          	p.mac	a4,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008898:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00889c:	002047b7          	lui	a5,0x204
1c0088a0:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c0088a4:	c708c8b3          	p.bset	a7,a7,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0088a8:	c158c8b3          	p.bset	a7,a7,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0088ac:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0088b0:	40e7a023          	sw	a4,1024(a5)
1c0088b4:	01ba0733          	add	a4,s4,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0088b8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c0088bc:	4127a023          	sw	s2,1024(a5)
        if (!merge) copy->id = id;
1c0088c0:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c0088c2:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c0088c4:	30061073          	csrw	mstatus,a2
1c0088c8:	bd0d                	j	1c0086fa <S65_Conv2d_64x64x3x3_Relu+0x1ae>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c0088ca:	46a1                	li	a3,8
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c0088cc:	5f870793          	addi	a5,a4,1528
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0088d0:	0ff00993          	li	s3,255
1c0088d4:	002044b7          	lui	s1,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c0088d8:	0cd11a23          	sh	a3,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c0088dc:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c0088de:	0cd11c23          	sh	a3,216(sp)
1c0088e2:	0934a223          	sw	s3,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0088e6:	20048913          	addi	s2,s1,512
1c0088ea:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0088ee:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0088f2:	0884a023          	sw	s0,128(s1)
1c0088f6:	09a4a023          	sw	s10,128(s1)
1c0088fa:	856a                	mv	a0,s10
1c0088fc:	60b040ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008900:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008904:	0934a223          	sw	s3,132(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008908:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00890c:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008910:	1c00c7b7          	lui	a5,0x1c00c
1c008914:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c008918:	08f4a023          	sw	a5,128(s1)
1c00891c:	1068                	addi	a0,sp,44
1c00891e:	08a4a023          	sw	a0,128(s1)
1c008922:	51e030ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008926:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+33784), 3200, 1, &DmaW_Evt1);
1c00892a:	67a1                	lui	a5,0x8
1c00892c:	000c2703          	lw	a4,0(s8)
1c008930:	3f878793          	addi	a5,a5,1016 # 83f8 <__rt_stack_size+0x7bf8>
1c008934:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008936:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00893a:	4004a603          	lw	a2,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00893e:	000217b7          	lui	a5,0x21
1c008942:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008946:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00894a:	c157c7b3          	p.bset	a5,a5,0,21
1c00894e:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008952:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008956:	47b2                	lw	a5,12(sp)
1c008958:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c00895c:	d532                	sw	a2,168(sp)
        copy->length = 0;
1c00895e:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c008960:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008964:	57ea                	lw	a5,184(sp)
1c008966:	e7c9                	bnez	a5,1c0089f0 <S65_Conv2d_64x64x3x3_Relu+0x4a4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008968:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c00896c:	4044a783          	lw	a5,1028(s1)
1c008970:	56aa                	lw	a3,168(sp)
1c008972:	40d7d7b3          	sra	a5,a5,a3
1c008976:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00897a:	c79d                	beqz	a5,1c0089a8 <S65_Conv2d_64x64x3x3_Relu+0x45c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00897c:	10000593          	li	a1,256
1c008980:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008984:	30061073          	csrw	mstatus,a2
1c008988:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00898c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008990:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008994:	30047673          	csrrci	a2,mstatus,8
1c008998:	40472783          	lw	a5,1028(a4)
1c00899c:	56aa                	lw	a3,168(sp)
1c00899e:	40d7d7b3          	sra	a5,a5,a3
1c0089a2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0089a6:	fff9                	bnez	a5,1c008984 <S65_Conv2d_64x64x3x3_Relu+0x438>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0089a8:	4785                	li	a5,1
1c0089aa:	00d796b3          	sll	a3,a5,a3
1c0089ae:	002047b7          	lui	a5,0x204
1c0089b2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0089b6:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c0089ba:	12c12083          	lw	ra,300(sp)
1c0089be:	12812403          	lw	s0,296(sp)
1c0089c2:	12412483          	lw	s1,292(sp)
1c0089c6:	12012903          	lw	s2,288(sp)
1c0089ca:	11c12983          	lw	s3,284(sp)
1c0089ce:	11812a03          	lw	s4,280(sp)
1c0089d2:	11412a83          	lw	s5,276(sp)
1c0089d6:	11012b03          	lw	s6,272(sp)
1c0089da:	10c12b83          	lw	s7,268(sp)
1c0089de:	10812c03          	lw	s8,264(sp)
1c0089e2:	10412c83          	lw	s9,260(sp)
1c0089e6:	10012d03          	lw	s10,256(sp)
1c0089ea:	5dfe                	lw	s11,252(sp)
1c0089ec:	6155                	addi	sp,sp,304
1c0089ee:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0089f0:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0089f2:	02000713          	li	a4,32
1c0089f6:	002047b7          	lui	a5,0x204
1c0089fa:	d2e1                	beqz	a3,1c0089ba <S65_Conv2d_64x64x3x3_Relu+0x46e>
1c0089fc:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008a00:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008a04:	00e7a223          	sw	a4,4(a5)
1c008a08:	468e                	lw	a3,192(sp)
1c008a0a:	dac5                	beqz	a3,1c0089ba <S65_Conv2d_64x64x3x3_Relu+0x46e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008a0c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008a10:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008a14:	00e7a223          	sw	a4,4(a5)
1c008a18:	468e                	lw	a3,192(sp)
1c008a1a:	f2ed                	bnez	a3,1c0089fc <S65_Conv2d_64x64x3x3_Relu+0x4b0>
1c008a1c:	bf79                	j	1c0089ba <S65_Conv2d_64x64x3x3_Relu+0x46e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a1e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008a22:	40442783          	lw	a5,1028(s0)
1c008a26:	56a6                	lw	a3,104(sp)
1c008a28:	40d7d7b3          	sra	a5,a5,a3
1c008a2c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008a30:	c79d                	beqz	a5,1c008a5e <S65_Conv2d_64x64x3x3_Relu+0x512>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008a32:	10000593          	li	a1,256
1c008a36:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008a3a:	30061073          	csrw	mstatus,a2
1c008a3e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008a42:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008a46:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008a4a:	30047673          	csrrci	a2,mstatus,8
1c008a4e:	40472783          	lw	a5,1028(a4)
1c008a52:	56a6                	lw	a3,104(sp)
1c008a54:	40d7d7b3          	sra	a5,a5,a3
1c008a58:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008a5c:	fff9                	bnez	a5,1c008a3a <S65_Conv2d_64x64x3x3_Relu+0x4ee>
1c008a5e:	4785                	li	a5,1
1c008a60:	00d796b3          	sll	a3,a5,a3
1c008a64:	002047b7          	lui	a5,0x204
1c008a68:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008a6c:	30061073          	csrw	mstatus,a2
1c008a70:	b6dd                	j	1c008656 <S65_Conv2d_64x64x3x3_Relu+0x10a>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c008a72:	1c0176b7          	lui	a3,0x1c017
1c008a76:	20468693          	addi	a3,a3,516 # 1c017204 <__clz_tab+0x5ec>
1c008a7a:	9b66                	add	s6,s6,s9
1c008a7c:	19000893          	li	a7,400
1c008a80:	4288                	lw	a0,0(a3)
1c008a82:	b989                	j	1c0086d4 <S65_Conv2d_64x64x3x3_Relu+0x188>
				_SN_In = 0;
1c008a84:	4881                	li	a7,0
				_SN_Filter = 0;
1c008a86:	4501                	li	a0,0
1c008a88:	b1b1                	j	1c0086d4 <S65_Conv2d_64x64x3x3_Relu+0x188>

1c008a8a <S68_Conv2d_64x64x3x3>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c008a8a:	7169                	addi	sp,sp,-304
1c008a8c:	11812423          	sw	s8,264(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D1, [0 x 6400, 6400]][Tile0, 1:[5x5], 4]
		Tile0: [0, 6400, 100], Tile1: [0, 6400, 100], Tile2; [0, 6400, 100]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008a90:	10000c37          	lui	s8,0x10000
1c008a94:	01cc0c13          	addi	s8,s8,28 # 1000001c <resnet_L1_Memory>
1c008a98:	000c2703          	lw	a4,0(s8)
1c008a9c:	67a5                	lui	a5,0x9
{
1c008a9e:	c636                	sw	a3,12(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
	KerArg1->Orientation = (unsigned char) (1);
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
	KerArg2->W = (unsigned short int) (5);
	KerArg2->H = (unsigned short int) (5);
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008aa0:	6821                	lui	a6,0x8
	KerArg0->NormBias = (signed char) (14);
1c008aa2:	46b9                	li	a3,14
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008aa4:	07878793          	addi	a5,a5,120 # 9078 <__rt_stack_size+0x8878>
1c008aa8:	97ba                	add	a5,a5,a4
	KerArg0->NormBias = (signed char) (14);
1c008aaa:	02d10323          	sb	a3,38(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008aae:	3f880313          	addi	t1,a6,1016 # 83f8 <__rt_stack_size+0x7bf8>
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c008ab2:	020076d7          	pv.add.sci.b	a3,zero,1
	KerArg0->W = (unsigned short int) (5);
1c008ab6:	02206e57          	pv.add.sci.h	t3,zero,5
	KerArg0->OutFeatures = (unsigned short int) (64);
1c008aba:	04000893          	li	a7,64
	KerArg1->Norm = (unsigned char) (16);
1c008abe:	4ec1                	li	t4,16
	KerArg0->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008ac0:	ce3e                	sw	a5,28(sp)
	KerArg1->Out = (int * __restrict__) (resnet_L1_Memory+36984);
1c008ac2:	d1be                	sw	a5,224(sp)
	KerArg1->Pad = (v4s) ((v4s){1,1,1,1});
1c008ac4:	d3b6                	sw	a3,228(sp)
	KerArg2->In = (int * __restrict__) (resnet_L1_Memory+36984);
1c008ac6:	d63e                	sw	a5,44(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c008ac8:	57870f13          	addi	t5,a4,1400
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008acc:	933a                	add	t1,t1,a4
	KerArg1->Orientation = (unsigned char) (1);
1c008ace:	4685                	li	a3,1
	KerArg2->Norm = (unsigned char) (16);
	KerArg2->InFeatures = (unsigned short int) (64);
	KerArg2->LB = (int) (-32768);
1c008ad0:	77e1                	lui	a5,0xffff8
{
1c008ad2:	11312e23          	sw	s3,284(sp)
1c008ad6:	11412c23          	sw	s4,280(sp)
1c008ada:	12112623          	sw	ra,300(sp)
1c008ade:	12812423          	sw	s0,296(sp)
1c008ae2:	12912223          	sw	s1,292(sp)
1c008ae6:	13212023          	sw	s2,288(sp)
1c008aea:	11512a23          	sw	s5,276(sp)
1c008aee:	11612823          	sw	s6,272(sp)
1c008af2:	11712623          	sw	s7,268(sp)
1c008af6:	11912223          	sw	s9,260(sp)
1c008afa:	11a12023          	sw	s10,256(sp)
1c008afe:	dfee                	sw	s11,252(sp)
	KerArg2->UB = (int) (32767);
1c008b00:	187d                	addi	a6,a6,-1
{
1c008b02:	8a2a                	mv	s4,a0
	KerArg0->W = (unsigned short int) (5);
1c008b04:	d072                	sw	t3,32(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c008b06:	03111223          	sh	a7,36(sp)
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+1400);
1c008b0a:	d47a                	sw	t5,40(sp)
	KerArg1->W = (unsigned short int) (5);
1c008b0c:	c7f2                	sw	t3,204(sp)
	KerArg1->OutFeatures = (unsigned short int) (64);
1c008b0e:	0d111b23          	sh	a7,214(sp)
	KerArg1->Norm = (unsigned char) (16);
1c008b12:	0fd10423          	sb	t4,232(sp)
	KerArg1->Orientation = (unsigned char) (1);
1c008b16:	0ed105a3          	sb	a3,235(sp)
	KerArg2->W = (unsigned short int) (5);
1c008b1a:	d872                	sw	t3,48(sp)
	KerArg2->Out = (short int * __restrict__) (resnet_L1_Memory+33784);
1c008b1c:	da1a                	sw	t1,52(sp)
	KerArg2->Norm = (unsigned char) (16);
1c008b1e:	03d10c23          	sb	t4,56(sp)
	KerArg2->InFeatures = (unsigned short int) (64);
1c008b22:	03111d23          	sh	a7,58(sp)
	KerArg2->LB = (int) (-32768);
1c008b26:	de3e                	sw	a5,60(sp)
{
1c008b28:	89ae                	mv	s3,a1
1c008b2a:	8532                	mv	a0,a2
	KerArg2->UB = (int) (32767);
1c008b2c:	c0c2                	sw	a6,64(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008b2e:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008b32:	00204437          	lui	s0,0x204
1c008b36:	40042603          	lw	a2,1024(s0) # 204400 <__L2+0x184400>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008b3a:	002f07b7          	lui	a5,0x2f0
1c008b3e:	2bc78793          	addi	a5,a5,700 # 2f02bc <__L2+0x2702bc>
1c008b42:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008b46:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008b4a:	41442023          	sw	s4,1024(s0)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c008b4e:	003207b7          	lui	a5,0x320
1c008b52:	03278793          	addi	a5,a5,50 # 320032 <__L2+0x2a0032>
1c008b56:	40f42023          	sw	a5,1024(s0)
        if (!merge) copy->id = id;
1c008b5a:	c4b2                	sw	a2,72(sp)
        copy->length = 0;
1c008b5c:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c008b5e:	30069073          	csrw	mstatus,a3
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+0), 700, 50, 50, 0, &DmaR_Evt1);
	_N_In=0;
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1400), 128, 0, &DmaR_Evt2);
1c008b62:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c008b66:	10b4                	addi	a3,sp,104
1c008b68:	08000613          	li	a2,128
1c008b6c:	57858593          	addi	a1,a1,1400
1c008b70:	91ff80ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  if (copy->length == 0)
1c008b74:	57e6                	lw	a5,120(sp)
1c008b76:	3e078463          	beqz	a5,1c008f5e <S68_Conv2d_64x64x3x3+0x4d4>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008b7a:	468a                	lw	a3,128(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008b7c:	02000713          	li	a4,32
1c008b80:	002047b7          	lui	a5,0x204
1c008b84:	ca89                	beqz	a3,1c008b96 <S68_Conv2d_64x64x3x3+0x10c>
1c008b86:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008b8a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008b8e:	00e7a223          	sw	a4,4(a5)
1c008b92:	468a                	lw	a3,128(sp)
1c008b94:	faed                	bnez	a3,1c008b86 <S68_Conv2d_64x64x3x3+0xfc>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Bias */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+0), 16128, 0, &DmaR_Evt3);
1c008b96:	000c2583          	lw	a1,0(s8)
  __cl_dma_memcpy(ext, loc, size, dir, 0, (pi_cl_dma_cmd_t *)cmd);
1c008b9a:	6c91                	lui	s9,0x4
1c008b9c:	0134                	addi	a3,sp,136
1c008b9e:	f00c8613          	addi	a2,s9,-256 # 3f00 <__rt_stack_size+0x3700>
1c008ba2:	5f858593          	addi	a1,a1,1528
1c008ba6:	854e                	mv	a0,s3
1c008ba8:	8e7f80ef          	jal	ra,1c00148e <__cl_dma_memcpy.constprop.12>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008bac:	0ff00713          	li	a4,255
1c008bb0:	002047b7          	lui	a5,0x204
1c008bb4:	08e7a223          	sw	a4,132(a5) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008bb8:	20078413          	addi	s0,a5,512
1c008bbc:	00e42023          	sw	a4,0(s0)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008bc0:	00e42623          	sw	a4,12(s0)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008bc4:	1c00c737          	lui	a4,0x1c00c
1c008bc8:	c0670713          	addi	a4,a4,-1018 # 1c00bc06 <KerParSetBias_DP_fp>
1c008bcc:	08e7a023          	sw	a4,128(a5)
1c008bd0:	0868                	addi	a0,sp,28
1c008bd2:	08a7a023          	sw	a0,128(a5)
1c008bd6:	030030ef          	jal	ra,1c00bc06 <KerParSetBias_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008bda:	01c46783          	p.elw	a5,28(s0)
1c008bde:	1c00d437          	lui	s0,0x1c00d
1c008be2:	00320937          	lui	s2,0x320
	_N_Filter=0;
1c008be6:	4b01                	li	s6,0
	_N_In=0;
1c008be8:	4d81                	li	s11,0
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1, T0Ind_NextLast = 1;
			/*====================== Call Kernel LOC_D0_PROLOG =========================*/
			AT_FORK(gap_ncore(), (void *) KerParSetBias_DP_fp, (void *) KerArg0);
			__CALL(KerParSetBias_DP_fp, KerArg0);
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c008bea:	4b81                	li	s7,0
1c008bec:	70640413          	addi	s0,s0,1798 # 1c00d706 <KerParConv3x3Stride1_DP_fp>
1c008bf0:	0c810d13          	addi	s10,sp,200
				} else if (!(1)) {
					_N_In = _N_In + (-2800); _LN_In = (50); _SN_In = (14*_LN_In); 
				}
				_SN_Filter = 0;
				if (!(D0Ind_Last)) {
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c008bf4:	f00c8c93          	addi	s9,s9,-256
1c008bf8:	03290913          	addi	s2,s2,50 # 320032 <__L2+0x2a0032>
							_SN_Filter, 0, &DmaR_Evt3);
				}
				/*============================= End Read Tiles ======================================*/
				/*====================== Call Kernel LOC_D0 =========================*/
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c008bfc:	022064d7          	pv.add.sci.h	s1,zero,5
				if (!(D0Ind_Last)) {
1c008c00:	3c4ba263          	p.beqimm	s7,4,1c008fc4 <S68_Conv2d_64x64x3x3+0x53a>
					_N_In = _N_In + (700); _LN_In = (50); _SN_In = (((D0Ind_NextLast)?8:14)*_LN_In); 
1c008c04:	2bcd8d93          	addi	s11,s11,700
1c008c08:	3a3ba563          	p.beqimm	s7,3,1c008fb2 <S68_Conv2d_64x64x3x3+0x528>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c008c0c:	9b66                	add	s6,s6,s9
1c008c0e:	2bc00893          	li	a7,700
1c008c12:	8566                	mv	a0,s9
  if (copy->length == 0)
1c008c14:	47e6                	lw	a5,88(sp)
1c008c16:	14078a63          	beqz	a5,1c008d6a <S68_Conv2d_64x64x3x3+0x2e0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008c1a:	5606                	lw	a2,96(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008c1c:	02000713          	li	a4,32
1c008c20:	002047b7          	lui	a5,0x204
1c008c24:	ca09                	beqz	a2,1c008c36 <S68_Conv2d_64x64x3x3+0x1ac>
1c008c26:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008c2a:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008c2e:	00e7a223          	sw	a4,4(a5)
1c008c32:	5606                	lw	a2,96(sp)
1c008c34:	fa6d                	bnez	a2,1c008c26 <S68_Conv2d_64x64x3x3+0x19c>
				if (_SN_In) {
1c008c36:	18089763          	bnez	a7,1c008dc4 <S68_Conv2d_64x64x3x3+0x33a>
  if (copy->length == 0)
1c008c3a:	47ea                	lw	a5,152(sp)
1c008c3c:	c3c9                	beqz	a5,1c008cbe <S68_Conv2d_64x64x3x3+0x234>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008c3e:	560a                	lw	a2,160(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008c40:	02000713          	li	a4,32
1c008c44:	002047b7          	lui	a5,0x204
1c008c48:	ca09                	beqz	a2,1c008c5a <S68_Conv2d_64x64x3x3+0x1d0>
1c008c4a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008c4e:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008c52:	00e7a223          	sw	a4,4(a5)
1c008c56:	560a                	lw	a2,160(sp)
1c008c58:	fa6d                	bnez	a2,1c008c4a <S68_Conv2d_64x64x3x3+0x1c0>
1c008c5a:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c008c5e:	ed55                	bnez	a0,1c008d1a <S68_Conv2d_64x64x3x3+0x290>
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c008c60:	fc1bb633          	p.bclr	a2,s7,30,1
1c008c64:	2bc00793          	li	a5,700
1c008c68:	86ba                	mv	a3,a4
1c008c6a:	42f606b3          	p.mac	a3,a2,a5
				KerArg1->H = (unsigned short int) (7-1*(1)-1*(1));
1c008c6e:	c9a6                	sw	s1,208(sp)
				KerArg1->In = (short int * __restrict__) (resnet_L1_Memory+0+700*((D0Ind_Total)%2));
1c008c70:	c5b6                	sw	a3,200(sp)
				KerArg1->UsedH = (unsigned short int) (7-1*(1)-1*(1));
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008c72:	184bac63          	p.beqimm	s7,4,1c008e0a <S68_Conv2d_64x64x3x3+0x380>
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008c76:	00661793          	slli	a5,a2,0x6
1c008c7a:	8f91                	sub	a5,a5,a2
1c008c7c:	07a2                	slli	a5,a5,0x8
1c008c7e:	5f878793          	addi	a5,a5,1528
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008c82:	45b9                	li	a1,14
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008c84:	97ba                	add	a5,a5,a4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008c86:	0ff00613          	li	a2,255
1c008c8a:	00204737          	lui	a4,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008c8e:	0cb11a23          	sh	a1,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008c92:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c008c94:	0cb11c23          	sh	a1,216(sp)
1c008c98:	08c72223          	sw	a2,132(a4) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008c9c:	20070a93          	addi	s5,a4,512
1c008ca0:	00caa023          	sw	a2,0(s5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008ca4:	00caa623          	sw	a2,12(s5)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008ca8:	08872023          	sw	s0,128(a4)
1c008cac:	09a72023          	sw	s10,128(a4)
1c008cb0:	856a                	mv	a0,s10
1c008cb2:	255040ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008cb6:	01cae703          	p.elw	a4,28(s5)
			for (D0Ind=0; D0Ind<5; D0Ind++, D0Ind_Total++) { /* Iteration on D0 */
1c008cba:	0b85                	addi	s7,s7,1
1c008cbc:	b791                	j	1c008c00 <S68_Conv2d_64x64x3x3+0x176>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008cbe:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008cc2:	002047b7          	lui	a5,0x204
1c008cc6:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c008cca:	462a                	lw	a2,136(sp)
1c008ccc:	40c7d7b3          	sra	a5,a5,a2
1c008cd0:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008cd4:	c79d                	beqz	a5,1c008d02 <S68_Conv2d_64x64x3x3+0x278>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008cd6:	10000813          	li	a6,256
1c008cda:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008cde:	30059073          	csrw	mstatus,a1
1c008ce2:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008ce6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008cea:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008cee:	300475f3          	csrrci	a1,mstatus,8
1c008cf2:	40472783          	lw	a5,1028(a4)
1c008cf6:	462a                	lw	a2,136(sp)
1c008cf8:	40c7d7b3          	sra	a5,a5,a2
1c008cfc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008d00:	fff9                	bnez	a5,1c008cde <S68_Conv2d_64x64x3x3+0x254>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008d02:	4785                	li	a5,1
1c008d04:	00c79633          	sll	a2,a5,a2
1c008d08:	002047b7          	lui	a5,0x204
1c008d0c:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008d10:	30059073          	csrw	mstatus,a1
1c008d14:	000c2703          	lw	a4,0(s8)
				if (_SN_Filter) {
1c008d18:	d521                	beqz	a0,1c008c60 <S68_Conv2d_64x64x3x3+0x1d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d1a:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008d1e:	00204637          	lui	a2,0x204
1c008d22:	40062883          	lw	a7,1024(a2) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c008d26:	000307b7          	lui	a5,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008d2a:	de0527b3          	p.insert	a5,a0,15,0
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c008d2e:	c137c7b3          	p.bset	a5,a5,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c008d32:	c157c7b3          	p.bset	a5,a5,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008d36:	40f62023          	sw	a5,1024(a2)
					AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+_N_Filter), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+1528+16128*((D0Ind_Total+1)%2)),
1c008d3a:	001b8793          	addi	a5,s7,1
1c008d3e:	fc17b5b3          	p.bclr	a1,a5,30,1
1c008d42:	00659793          	slli	a5,a1,0x6
1c008d46:	8f8d                	sub	a5,a5,a1
1c008d48:	07a2                	slli	a5,a5,0x8
1c008d4a:	5f878793          	addi	a5,a5,1528 # 305f8 <__L1Cl+0x205f8>
1c008d4e:	97ba                	add	a5,a5,a4
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008d50:	40f62023          	sw	a5,1024(a2)
1c008d54:	016987b3          	add	a5,s3,s6
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008d58:	40f62023          	sw	a5,1024(a2)
        if (!merge) copy->id = id;
1c008d5c:	c546                	sw	a7,136(sp)
        copy->length = 0;
1c008d5e:	cd02                	sw	zero,152(sp)
  __builtin_pulp_spr_write(reg, val);
1c008d60:	30081073          	csrw	mstatus,a6
1c008d64:	000c2703          	lw	a4,0(s8)
1c008d68:	bde5                	j	1c008c60 <S68_Conv2d_64x64x3x3+0x1d6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d6a:	300475f3          	csrrci	a1,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008d6e:	002047b7          	lui	a5,0x204
1c008d72:	4047a783          	lw	a5,1028(a5) # 204404 <__L2+0x184404>
1c008d76:	4626                	lw	a2,72(sp)
1c008d78:	40c7d7b3          	sra	a5,a5,a2
1c008d7c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008d80:	c79d                	beqz	a5,1c008dae <S68_Conv2d_64x64x3x3+0x324>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008d82:	10000813          	li	a6,256
1c008d86:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008d8a:	30059073          	csrw	mstatus,a1
1c008d8e:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008d92:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008d96:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008d9a:	300475f3          	csrrci	a1,mstatus,8
1c008d9e:	40472783          	lw	a5,1028(a4)
1c008da2:	4626                	lw	a2,72(sp)
1c008da4:	40c7d7b3          	sra	a5,a5,a2
1c008da8:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008dac:	fff9                	bnez	a5,1c008d8a <S68_Conv2d_64x64x3x3+0x300>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008dae:	4785                	li	a5,1
1c008db0:	00c79633          	sll	a2,a5,a2
1c008db4:	002047b7          	lui	a5,0x204
1c008db8:	40c7a223          	sw	a2,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008dbc:	30059073          	csrw	mstatus,a1
				if (_SN_In) {
1c008dc0:	e6088de3          	beqz	a7,1c008c3a <S68_Conv2d_64x64x3x3+0x1b0>
					AT_L2_COPY2D(0, ((AT_L2_EXT_ADDR_TYPE) In+_N_In), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0+700*((D0Ind_Total+1)%2)),
1c008dc4:	000c2703          	lw	a4,0(s8)
1c008dc8:	001b8793          	addi	a5,s7,1
1c008dcc:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008dd0:	2bc00613          	li	a2,700
1c008dd4:	42c78733          	p.mac	a4,a5,a2
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008dd8:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008ddc:	002047b7          	lui	a5,0x204
1c008de0:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, trigIrq,     1, PLP_DMA_ILE_BIT);
1c008de4:	c708c8b3          	p.bset	a7,a7,3,16
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c008de8:	c158c8b3          	p.bset	a7,a7,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008dec:	4117a023          	sw	a7,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008df0:	40e7a023          	sw	a4,1024(a5)
1c008df4:	01ba0733          	add	a4,s4,s11
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008df8:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(plp_dma_getStrides(stride, length), PLP_DMA_QUEUE_OFFSET);
1c008dfc:	4127a023          	sw	s2,1024(a5)
        if (!merge) copy->id = id;
1c008e00:	c4ae                	sw	a1,72(sp)
        copy->length = 0;
1c008e02:	cc82                	sw	zero,88(sp)
  __builtin_pulp_spr_write(reg, val);
1c008e04:	30061073          	csrw	mstatus,a2
1c008e08:	bd0d                	j	1c008c3a <S68_Conv2d_64x64x3x3+0x1b0>
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008e0a:	46a1                	li	a3,8
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008e0c:	5f870793          	addi	a5,a4,1528
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008e10:	0ff00993          	li	s3,255
1c008e14:	002044b7          	lui	s1,0x204
				KerArg1->InFeatures = (unsigned short int) (D0Ind_Last?8:14);
1c008e18:	0cd11a23          	sh	a3,212(sp)
				KerArg1->Filter = (short int * __restrict__) (resnet_L1_Memory+1528+16128*((D0Ind_Total)%2));
1c008e1c:	cfbe                	sw	a5,220(sp)
				KerArg1->TotalInFeatures = (short int) (D0Ind_Last?8:14);
1c008e1e:	0cd11c23          	sh	a3,216(sp)
1c008e22:	0934a223          	sw	s3,132(s1) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008e26:	20048913          	addi	s2,s1,512
1c008e2a:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008e2e:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008e32:	0884a023          	sw	s0,128(s1)
1c008e36:	09a4a023          	sw	s10,128(s1)
1c008e3a:	856a                	mv	a0,s10
1c008e3c:	0cb040ef          	jal	ra,1c00d706 <KerParConv3x3Stride1_DP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008e40:	01c96783          	p.elw	a5,28(s2)
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c008e44:	0934a223          	sw	s3,132(s1)
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c008e48:	01392023          	sw	s3,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c008e4c:	01392623          	sw	s3,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c008e50:	1c00c7b7          	lui	a5,0x1c00c
1c008e54:	e4078793          	addi	a5,a5,-448 # 1c00be40 <KerDP_fp>
1c008e58:	08f4a023          	sw	a5,128(s1)
1c008e5c:	1068                	addi	a0,sp,44
1c008e5e:	08a4a023          	sw	a0,128(s1)
1c008e62:	7df020ef          	jal	ra,1c00be40 <KerDP_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008e66:	01c96783          	p.elw	a5,28(s2)
			AT_FORK(gap_ncore(), (void *) KerDP_fp, (void *) KerArg2);
			__CALL(KerDP_fp, KerArg2);
		} /* End iteration on Tile0 */
	} /* End iteration on D1 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+33784), 3200, 1, &DmaW_Evt1);
1c008e6a:	67a1                	lui	a5,0x8
1c008e6c:	000c2703          	lw	a4,0(s8)
1c008e70:	3f878793          	addi	a5,a5,1016 # 83f8 <__rt_stack_size+0x7bf8>
1c008e74:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008e76:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c008e7a:	4004a603          	lw	a2,1024(s1)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c008e7e:	000217b7          	lui	a5,0x21
1c008e82:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c008e86:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c008e8a:	c157c7b3          	p.bset	a5,a5,0,21
1c008e8e:	40f4a023          	sw	a5,1024(s1)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c008e92:	40e4a023          	sw	a4,1024(s1)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c008e96:	47b2                	lw	a5,12(sp)
1c008e98:	40f4a023          	sw	a5,1024(s1)
        if (!merge) copy->id = id;
1c008e9c:	d532                	sw	a2,168(sp)
        copy->length = 0;
1c008e9e:	dd02                	sw	zero,184(sp)
  __builtin_pulp_spr_write(reg, val);
1c008ea0:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c008ea4:	57ea                	lw	a5,184(sp)
1c008ea6:	e7c9                	bnez	a5,1c008f30 <S68_Conv2d_64x64x3x3+0x4a6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008ea8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008eac:	4044a783          	lw	a5,1028(s1)
1c008eb0:	56aa                	lw	a3,168(sp)
1c008eb2:	40d7d7b3          	sra	a5,a5,a3
1c008eb6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008eba:	c79d                	beqz	a5,1c008ee8 <S68_Conv2d_64x64x3x3+0x45e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008ebc:	10000593          	li	a1,256
1c008ec0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008ec4:	30061073          	csrw	mstatus,a2
1c008ec8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008ecc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008ed0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008ed4:	30047673          	csrrci	a2,mstatus,8
1c008ed8:	40472783          	lw	a5,1028(a4)
1c008edc:	56aa                	lw	a3,168(sp)
1c008ede:	40d7d7b3          	sra	a5,a5,a3
1c008ee2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008ee6:	fff9                	bnez	a5,1c008ec4 <S68_Conv2d_64x64x3x3+0x43a>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c008ee8:	4785                	li	a5,1
1c008eea:	00d796b3          	sll	a3,a5,a3
1c008eee:	002047b7          	lui	a5,0x204
1c008ef2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008ef6:	30061073          	csrw	mstatus,a2
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c008efa:	12c12083          	lw	ra,300(sp)
1c008efe:	12812403          	lw	s0,296(sp)
1c008f02:	12412483          	lw	s1,292(sp)
1c008f06:	12012903          	lw	s2,288(sp)
1c008f0a:	11c12983          	lw	s3,284(sp)
1c008f0e:	11812a03          	lw	s4,280(sp)
1c008f12:	11412a83          	lw	s5,276(sp)
1c008f16:	11012b03          	lw	s6,272(sp)
1c008f1a:	10c12b83          	lw	s7,268(sp)
1c008f1e:	10812c03          	lw	s8,264(sp)
1c008f22:	10412c83          	lw	s9,260(sp)
1c008f26:	10012d03          	lw	s10,256(sp)
1c008f2a:	5dfe                	lw	s11,252(sp)
1c008f2c:	6155                	addi	sp,sp,304
1c008f2e:	8082                	ret
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c008f30:	468e                	lw	a3,192(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008f32:	02000713          	li	a4,32
1c008f36:	002047b7          	lui	a5,0x204
1c008f3a:	d2e1                	beqz	a3,1c008efa <S68_Conv2d_64x64x3x3+0x470>
1c008f3c:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008f40:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008f44:	00e7a223          	sw	a4,4(a5)
1c008f48:	468e                	lw	a3,192(sp)
1c008f4a:	dac5                	beqz	a3,1c008efa <S68_Conv2d_64x64x3x3+0x470>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008f4c:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008f50:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008f54:	00e7a223          	sw	a4,4(a5)
1c008f58:	468e                	lw	a3,192(sp)
1c008f5a:	f2ed                	bnez	a3,1c008f3c <S68_Conv2d_64x64x3x3+0x4b2>
1c008f5c:	bf79                	j	1c008efa <S68_Conv2d_64x64x3x3+0x470>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008f5e:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c008f62:	40442783          	lw	a5,1028(s0)
1c008f66:	56a6                	lw	a3,104(sp)
1c008f68:	40d7d7b3          	sra	a5,a5,a3
1c008f6c:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008f70:	c79d                	beqz	a5,1c008f9e <S68_Conv2d_64x64x3x3+0x514>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c008f72:	10000593          	li	a1,256
1c008f76:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c008f7a:	30061073          	csrw	mstatus,a2
1c008f7e:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c008f82:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c008f86:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c008f8a:	30047673          	csrrci	a2,mstatus,8
1c008f8e:	40472783          	lw	a5,1028(a4)
1c008f92:	56a6                	lw	a3,104(sp)
1c008f94:	40d7d7b3          	sra	a5,a5,a3
1c008f98:	fc17b7b3          	p.bclr	a5,a5,30,1
1c008f9c:	fff9                	bnez	a5,1c008f7a <S68_Conv2d_64x64x3x3+0x4f0>
1c008f9e:	4785                	li	a5,1
1c008fa0:	00d796b3          	sll	a3,a5,a3
1c008fa4:	002047b7          	lui	a5,0x204
1c008fa8:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c008fac:	30061073          	csrw	mstatus,a2
1c008fb0:	b6dd                	j	1c008b96 <S68_Conv2d_64x64x3x3+0x10c>
					_N_Filter = _N_Filter + ((16128)); _SN_Filter = (((1)?(((D0Ind_NextLast)?9216:16128)):(((D0Ind_NextLast)?9216:16128)))); 
1c008fb2:	1c0176b7          	lui	a3,0x1c017
1c008fb6:	20468693          	addi	a3,a3,516 # 1c017204 <__clz_tab+0x5ec>
1c008fba:	9b66                	add	s6,s6,s9
1c008fbc:	19000893          	li	a7,400
1c008fc0:	4288                	lw	a0,0(a3)
1c008fc2:	b989                	j	1c008c14 <S68_Conv2d_64x64x3x3+0x18a>
				_SN_In = 0;
1c008fc4:	4881                	li	a7,0
				_SN_Filter = 0;
1c008fc6:	4501                	li	a0,0
1c008fc8:	b1b1                	j	1c008c14 <S68_Conv2d_64x64x3x3+0x18a>

1c008fca <S69_MatAdd_64x5x5>:
void S69_MatAdd_64x5x5(
		short int * __restrict__ In1,
		short int * __restrict__ In2,
		short int * __restrict__ Out)

{
1c008fca:	7135                	addi	sp,sp,-160
1c008fcc:	c94a                	sw	s2,144(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 3200, 3200]][Tile0, 1:[5x5], 2]
		Tile0: [0, 3200, 3200], Tile1: [0, 3200, 3200], Tile2; [0, 3200, 3200]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c008fce:	10000937          	lui	s2,0x10000
1c008fd2:	01c90913          	addi	s2,s2,28 # 1000001c <resnet_L1_Memory>
1c008fd6:	00092683          	lw	a3,0(s2)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+6400);
1c008fda:	6789                	lui	a5,0x2
1c008fdc:	90078793          	addi	a5,a5,-1792 # 1900 <__rt_stack_size+0x1100>
1c008fe0:	97b6                	add	a5,a5,a3
1c008fe2:	d4be                	sw	a5,104(sp)
	KerArg0->W = (unsigned short int) (5);
1c008fe4:	022067d7          	pv.add.sci.h	a5,zero,5
1c008fe8:	d6be                	sw	a5,108(sp)
	KerArg0->H = (unsigned short int) (5);
	KerArg0->N = (unsigned short int) (64);
1c008fea:	04000793          	li	a5,64
1c008fee:	06f11823          	sh	a5,112(sp)
	KerArg0->LB = (int) (-32768);
1c008ff2:	77e1                	lui	a5,0xffff8
1c008ff4:	dabe                	sw	a5,116(sp)
1c008ff6:	67a1                	lui	a5,0x8
1c008ff8:	17fd                	addi	a5,a5,-1
1c008ffa:	dcbe                	sw	a5,120(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c008ffc:	6805                	lui	a6,0x1
	KerArg0->UB = (int) (32767);
1c008ffe:	6785                	lui	a5,0x1
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c009000:	c8080813          	addi	a6,a6,-896 # c80 <__rt_stack_size+0x480>
	KerArg0->UB = (int) (32767);
1c009004:	b0b78793          	addi	a5,a5,-1269 # b0b <__rt_stack_size+0x30b>
{
1c009008:	cb26                	sw	s1,148(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c00900a:	01068733          	add	a4,a3,a6
	KerArg0->UB = (int) (32767);
1c00900e:	06f11e23          	sh	a5,124(sp)
{
1c009012:	84b2                	mv	s1,a2
	KerArg0->In1_Q = (unsigned char) (11);
	KerArg0->In2_Q = (unsigned char) (11);
1c009014:	47a9                	li	a5,10
{
1c009016:	cf06                	sw	ra,156(sp)
1c009018:	cd22                	sw	s0,152(sp)
1c00901a:	c74e                	sw	s3,140(sp)
	KerArg0->In1 = (short int *__restrict__) (resnet_L1_Memory+0);
1c00901c:	d0b6                	sw	a3,96(sp)
	KerArg0->In2 = (short int *__restrict__) (resnet_L1_Memory+3200);
1c00901e:	d2ba                	sw	a4,100(sp)
	KerArg0->In2_Q = (unsigned char) (11);
1c009020:	06f10f23          	sb	a5,126(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009024:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009028:	002047b7          	lui	a5,0x204
1c00902c:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c009030:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009034:	de082733          	p.insert	a4,a6,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009038:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c00903c:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009040:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009044:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009048:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c00904c:	c046                	sw	a7,0(sp)
        copy->length = 0;
1c00904e:	c802                	sw	zero,16(sp)
  __builtin_pulp_spr_write(reg, val);
1c009050:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c009054:	4742                	lw	a4,16(sp)
1c009056:	1c070163          	beqz	a4,1c009218 <S69_MatAdd_64x5x5+0x24e>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00905a:	46e2                	lw	a3,24(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00905c:	02000713          	li	a4,32
1c009060:	ca89                	beqz	a3,1c009072 <S69_MatAdd_64x5x5+0xa8>
1c009062:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009066:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00906a:	00e7a223          	sw	a4,4(a5)
1c00906e:	46e2                	lw	a3,24(sp)
1c009070:	faed                	bnez	a3,1c009062 <S69_MatAdd_64x5x5+0x98>
	KerArg0->Out_Q = (unsigned char) (10);
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In1+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 3200, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In1 */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In2+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+3200), 3200, 0, &DmaR_Evt2);
1c009072:	00092603          	lw	a2,0(s2)
1c009076:	6685                	lui	a3,0x1
1c009078:	c8068693          	addi	a3,a3,-896 # c80 <__rt_stack_size+0x480>
1c00907c:	9636                	add	a2,a2,a3
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00907e:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009082:	002047b7          	lui	a5,0x204
1c009086:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c00908a:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00908e:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009092:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c009096:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00909a:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00909e:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0090a2:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c0090a6:	d042                	sw	a6,32(sp)
        copy->length = 0;
1c0090a8:	d802                	sw	zero,48(sp)
  __builtin_pulp_spr_write(reg, val);
1c0090aa:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c0090ae:	5742                	lw	a4,48(sp)
1c0090b0:	10070a63          	beqz	a4,1c0091c4 <S69_MatAdd_64x5x5+0x1fa>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0090b4:	56e2                	lw	a3,56(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0090b6:	02000713          	li	a4,32
1c0090ba:	ca89                	beqz	a3,1c0090cc <S69_MatAdd_64x5x5+0x102>
1c0090bc:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0090c0:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0090c4:	00e7a223          	sw	a4,4(a5)
1c0090c8:	56e2                	lw	a3,56(sp)
1c0090ca:	faed                	bnez	a3,1c0090bc <S69_MatAdd_64x5x5+0xf2>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0090cc:	0ff00793          	li	a5,255
1c0090d0:	00204437          	lui	s0,0x204
1c0090d4:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0090d8:	20040993          	addi	s3,s0,512
1c0090dc:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0090e0:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0090e4:	1c0107b7          	lui	a5,0x1c010
1c0090e8:	df278793          	addi	a5,a5,-526 # 1c00fdf2 <KerParMatAddDynAdjust_fp>
1c0090ec:	08f42023          	sw	a5,128(s0)
1c0090f0:	1088                	addi	a0,sp,96
1c0090f2:	08a42023          	sw	a0,128(s0)
1c0090f6:	4fd060ef          	jal	ra,1c00fdf2 <KerParMatAddDynAdjust_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0090fa:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParMatAddDynAdjust_fp, (void *) KerArg0);
			__CALL(KerParMatAddDynAdjust_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+6400), 3200, 1, &DmaW_Evt1);
1c0090fe:	6789                	lui	a5,0x2
1c009100:	00092703          	lw	a4,0(s2)
1c009104:	90078793          	addi	a5,a5,-1792 # 1900 <__rt_stack_size+0x1100>
1c009108:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00910a:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00910e:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009112:	000217b7          	lui	a5,0x21
1c009116:	c8078793          	addi	a5,a5,-896 # 20c80 <__L1Cl+0x10c80>
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00911a:	c137c7b3          	p.bset	a5,a5,0,19
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c00911e:	c157c7b3          	p.bset	a5,a5,0,21
1c009122:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009126:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00912a:	40942023          	sw	s1,1024(s0)
        if (!merge) copy->id = id;
1c00912e:	c0b2                	sw	a2,64(sp)
        copy->length = 0;
1c009130:	c882                	sw	zero,80(sp)
  __builtin_pulp_spr_write(reg, val);
1c009132:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c009136:	47c6                	lw	a5,80(sp)
1c009138:	c795                	beqz	a5,1c009164 <S69_MatAdd_64x5x5+0x19a>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00913a:	46e6                	lw	a3,88(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00913c:	02000713          	li	a4,32
1c009140:	002047b7          	lui	a5,0x204
1c009144:	ca89                	beqz	a3,1c009156 <S69_MatAdd_64x5x5+0x18c>
1c009146:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00914a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00914e:	00e7a223          	sw	a4,4(a5)
1c009152:	46e6                	lw	a3,88(sp)
1c009154:	faed                	bnez	a3,1c009146 <S69_MatAdd_64x5x5+0x17c>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c009156:	40fa                	lw	ra,156(sp)
1c009158:	446a                	lw	s0,152(sp)
1c00915a:	44da                	lw	s1,148(sp)
1c00915c:	494a                	lw	s2,144(sp)
1c00915e:	49ba                	lw	s3,140(sp)
1c009160:	610d                	addi	sp,sp,160
1c009162:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009164:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009168:	40442403          	lw	s0,1028(s0)
1c00916c:	4686                	lw	a3,64(sp)
1c00916e:	40d45433          	sra	s0,s0,a3
1c009172:	fc143433          	p.bclr	s0,s0,30,1
1c009176:	c41d                	beqz	s0,1c0091a4 <S69_MatAdd_64x5x5+0x1da>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009178:	10000593          	li	a1,256
1c00917c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009180:	30061073          	csrw	mstatus,a2
1c009184:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009188:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00918c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009190:	30047673          	csrrci	a2,mstatus,8
1c009194:	40472783          	lw	a5,1028(a4)
1c009198:	4686                	lw	a3,64(sp)
1c00919a:	40d7d7b3          	sra	a5,a5,a3
1c00919e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0091a2:	fff9                	bnez	a5,1c009180 <S69_MatAdd_64x5x5+0x1b6>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0091a4:	4785                	li	a5,1
1c0091a6:	00d796b3          	sll	a3,a5,a3
1c0091aa:	002047b7          	lui	a5,0x204
1c0091ae:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0091b2:	30061073          	csrw	mstatus,a2
1c0091b6:	40fa                	lw	ra,156(sp)
1c0091b8:	446a                	lw	s0,152(sp)
1c0091ba:	44da                	lw	s1,148(sp)
1c0091bc:	494a                	lw	s2,144(sp)
1c0091be:	49ba                	lw	s3,140(sp)
1c0091c0:	610d                	addi	sp,sp,160
1c0091c2:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0091c4:	30047673          	csrrci	a2,mstatus,8
1c0091c8:	4047a783          	lw	a5,1028(a5)
1c0091cc:	5682                	lw	a3,32(sp)
1c0091ce:	40d7d7b3          	sra	a5,a5,a3
1c0091d2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0091d6:	c79d                	beqz	a5,1c009204 <S69_MatAdd_64x5x5+0x23a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0091d8:	10000593          	li	a1,256
1c0091dc:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0091e0:	30061073          	csrw	mstatus,a2
1c0091e4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0091e8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0091ec:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0091f0:	30047673          	csrrci	a2,mstatus,8
1c0091f4:	40472783          	lw	a5,1028(a4)
1c0091f8:	5682                	lw	a3,32(sp)
1c0091fa:	40d7d7b3          	sra	a5,a5,a3
1c0091fe:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009202:	fff9                	bnez	a5,1c0091e0 <S69_MatAdd_64x5x5+0x216>
1c009204:	4785                	li	a5,1
1c009206:	00d796b3          	sll	a3,a5,a3
1c00920a:	002047b7          	lui	a5,0x204
1c00920e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009212:	30061073          	csrw	mstatus,a2
1c009216:	bd5d                	j	1c0090cc <S69_MatAdd_64x5x5+0x102>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009218:	30047673          	csrrci	a2,mstatus,8
1c00921c:	4047a783          	lw	a5,1028(a5)
1c009220:	4682                	lw	a3,0(sp)
1c009222:	40d7d7b3          	sra	a5,a5,a3
1c009226:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00922a:	c79d                	beqz	a5,1c009258 <S69_MatAdd_64x5x5+0x28e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00922c:	10000513          	li	a0,256
1c009230:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009234:	30061073          	csrw	mstatus,a2
1c009238:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00923c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009240:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009244:	30047673          	csrrci	a2,mstatus,8
1c009248:	40472783          	lw	a5,1028(a4)
1c00924c:	4682                	lw	a3,0(sp)
1c00924e:	40d7d7b3          	sra	a5,a5,a3
1c009252:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009256:	fff9                	bnez	a5,1c009234 <S69_MatAdd_64x5x5+0x26a>
1c009258:	4785                	li	a5,1
1c00925a:	00d796b3          	sll	a3,a5,a3
1c00925e:	002047b7          	lui	a5,0x204
1c009262:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009266:	30061073          	csrw	mstatus,a2
1c00926a:	b521                	j	1c009072 <S69_MatAdd_64x5x5+0xa8>

1c00926c <S70_AveragePool_2x2>:
void S70_AveragePool_2x2(
		short int * __restrict__ In,
		short int * __restrict__ Out)

{
1c00926c:	7175                	addi	sp,sp,-144
1c00926e:	c326                	sw	s1,132(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 512, 512]][Tile0, 1:[2x2], 2]
		Tile0: [0, 512, 512], Tile1: [0, 512, 512], Tile2; [0, 512, 512]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c009270:	100004b7          	lui	s1,0x10000
1c009274:	01c48493          	addi	s1,s1,28 # 1000001c <resnet_L1_Memory>
1c009278:	4090                	lw	a2,0(s1)
	KerArg0->W = (unsigned short int) (5);
	KerArg0->UsedW = (unsigned short int) (4);
	KerArg0->H = (unsigned short int) (5);
	KerArg0->OutFeatures = (unsigned short int) (64);
	KerArg0->Out = (short int * __restrict__) (resnet_L1_Memory+3200);
1c00927a:	6685                	lui	a3,0x1
1c00927c:	c8068693          	addi	a3,a3,-896 # c80 <__rt_stack_size+0x480>
1c009280:	00d607b3          	add	a5,a2,a3
	KerArg0->W = (unsigned short int) (5);
1c009284:	1c017737          	lui	a4,0x1c017
1c009288:	20872703          	lw	a4,520(a4) # 1c017208 <__clz_tab+0x5f0>
	KerArg0->Out = (short int * __restrict__) (resnet_L1_Memory+3200);
1c00928c:	ccbe                	sw	a5,88(sp)
	KerArg0->Pad = (v4s) 0;
1c00928e:	000077d7          	pv.add.sci.b	a5,zero,0
1c009292:	cebe                	sw	a5,92(sp)
	KerArg0->Orientation = (unsigned char) (1);
1c009294:	20100793          	li	a5,513
1c009298:	06f11123          	sh	a5,98(sp)
	KerArg0->Oper = (unsigned char) (2);
	KerArg0->LB = (int) (-32768);
1c00929c:	77e1                	lui	a5,0xffff8
	KerArg0->W = (unsigned short int) (5);
1c00929e:	c6ba                	sw	a4,76(sp)
	KerArg0->LB = (int) (-32768);
1c0092a0:	d4be                	sw	a5,104(sp)
	KerArg0->H = (unsigned short int) (5);
1c0092a2:	4715                	li	a4,5
	KerArg0->UB = (int) (32767);
1c0092a4:	67a1                	lui	a5,0x8
{
1c0092a6:	c14a                	sw	s2,128(sp)
	KerArg0->H = (unsigned short int) (5);
1c0092a8:	04e11823          	sh	a4,80(sp)
	KerArg0->UB = (int) (32767);
1c0092ac:	17fd                	addi	a5,a5,-1
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0092ae:	04000713          	li	a4,64
{
1c0092b2:	892e                	mv	s2,a1
1c0092b4:	c706                	sw	ra,140(sp)
1c0092b6:	c522                	sw	s0,136(sp)
1c0092b8:	dece                	sw	s3,124(sp)
	KerArg0->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c0092ba:	c4b2                	sw	a2,72(sp)
	KerArg0->OutFeatures = (unsigned short int) (64);
1c0092bc:	04e11a23          	sh	a4,84(sp)
	KerArg0->UB = (int) (32767);
1c0092c0:	d6be                	sw	a5,108(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0092c2:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0092c6:	002047b7          	lui	a5,0x204
1c0092ca:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, PLP_DMA_INC, 1, PLP_DMA_INCR_BIT);
1c0092ce:	00030737          	lui	a4,0x30
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0092d2:	de06a733          	p.insert	a4,a3,15,0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0092d6:	c1374733          	p.bset	a4,a4,0,19
  res = __builtin_bitinsert(res, broadcast,   1, PLP_DMA_BLE_BIT);
1c0092da:	c1574733          	p.bset	a4,a4,0,21
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0092de:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0092e2:	40c7a023          	sw	a2,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0092e6:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0092ea:	c442                	sw	a6,8(sp)
        copy->length = 0;
1c0092ec:	cc02                	sw	zero,24(sp)
  __builtin_pulp_spr_write(reg, val);
1c0092ee:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c0092f2:	4762                	lw	a4,24(sp)
1c0092f4:	10070a63          	beqz	a4,1c009408 <S70_AveragePool_2x2+0x19c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0092f8:	5682                	lw	a3,32(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0092fa:	02000713          	li	a4,32
1c0092fe:	ca89                	beqz	a3,1c009310 <S70_AveragePool_2x2+0xa4>
1c009300:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009304:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009308:	00e7a223          	sw	a4,4(a5)
1c00930c:	5682                	lw	a3,32(sp)
1c00930e:	faed                	bnez	a3,1c009300 <S70_AveragePool_2x2+0x94>
	{ /* Single iteration on D0 */
		int D0Ind_Last = 1;
		{ /* Single iteration on Tile0 */
			int T0Ind_Last = 1;
			/*====================== Call Kernel LOC_LOOP =========================*/
			KerArg0->UsedH = (unsigned short int) (4);
1c009310:	4711                	li	a4,4
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009312:	0ff00793          	li	a5,255
1c009316:	00204437          	lui	s0,0x204
1c00931a:	04e11923          	sh	a4,82(sp)
1c00931e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c009322:	20040993          	addi	s3,s0,512
1c009326:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c00932a:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00932e:	1c0107b7          	lui	a5,0x1c010
1c009332:	85a78793          	addi	a5,a5,-1958 # 1c00f85a <KerParPool2x2Stride2_fp>
1c009336:	08f42023          	sw	a5,128(s0)
1c00933a:	00a8                	addi	a0,sp,72
1c00933c:	08a42023          	sw	a0,128(s0)
1c009340:	51a060ef          	jal	ra,1c00f85a <KerParPool2x2Stride2_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009344:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParPool2x2Stride2_fp, (void *) KerArg0);
			__CALL(KerParPool2x2Stride2_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+3200), 512, 1, &DmaW_Evt1);
1c009348:	6785                	lui	a5,0x1
1c00934a:	4098                	lw	a4,0(s1)
1c00934c:	c8078793          	addi	a5,a5,-896 # c80 <__rt_stack_size+0x480>
1c009350:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009352:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009356:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00935a:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00935e:	20078793          	addi	a5,a5,512 # a0200 <__L2+0x20200>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009362:	c157c7b3          	p.bset	a5,a5,0,21
1c009366:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00936a:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00936e:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c009372:	d432                	sw	a2,40(sp)
        copy->length = 0;
1c009374:	dc02                	sw	zero,56(sp)
  __builtin_pulp_spr_write(reg, val);
1c009376:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00937a:	57e2                	lw	a5,56(sp)
1c00937c:	c795                	beqz	a5,1c0093a8 <S70_AveragePool_2x2+0x13c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00937e:	4686                	lw	a3,64(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009380:	02000713          	li	a4,32
1c009384:	002047b7          	lui	a5,0x204
1c009388:	ca89                	beqz	a3,1c00939a <S70_AveragePool_2x2+0x12e>
1c00938a:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00938e:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009392:	00e7a223          	sw	a4,4(a5)
1c009396:	4686                	lw	a3,64(sp)
1c009398:	faed                	bnez	a3,1c00938a <S70_AveragePool_2x2+0x11e>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00939a:	40ba                	lw	ra,140(sp)
1c00939c:	442a                	lw	s0,136(sp)
1c00939e:	449a                	lw	s1,132(sp)
1c0093a0:	490a                	lw	s2,128(sp)
1c0093a2:	59f6                	lw	s3,124(sp)
1c0093a4:	6149                	addi	sp,sp,144
1c0093a6:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0093a8:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c0093ac:	40442403          	lw	s0,1028(s0)
1c0093b0:	56a2                	lw	a3,40(sp)
1c0093b2:	40d45433          	sra	s0,s0,a3
1c0093b6:	fc143433          	p.bclr	s0,s0,30,1
1c0093ba:	c41d                	beqz	s0,1c0093e8 <S70_AveragePool_2x2+0x17c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0093bc:	10000593          	li	a1,256
1c0093c0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0093c4:	30061073          	csrw	mstatus,a2
1c0093c8:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0093cc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0093d0:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0093d4:	30047673          	csrrci	a2,mstatus,8
1c0093d8:	40472783          	lw	a5,1028(a4)
1c0093dc:	56a2                	lw	a3,40(sp)
1c0093de:	40d7d7b3          	sra	a5,a5,a3
1c0093e2:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0093e6:	fff9                	bnez	a5,1c0093c4 <S70_AveragePool_2x2+0x158>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0093e8:	4785                	li	a5,1
1c0093ea:	00d796b3          	sll	a3,a5,a3
1c0093ee:	002047b7          	lui	a5,0x204
1c0093f2:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0093f6:	30061073          	csrw	mstatus,a2
1c0093fa:	40ba                	lw	ra,140(sp)
1c0093fc:	442a                	lw	s0,136(sp)
1c0093fe:	449a                	lw	s1,132(sp)
1c009400:	490a                	lw	s2,128(sp)
1c009402:	59f6                	lw	s3,124(sp)
1c009404:	6149                	addi	sp,sp,144
1c009406:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009408:	30047673          	csrrci	a2,mstatus,8
1c00940c:	4047a783          	lw	a5,1028(a5)
1c009410:	46a2                	lw	a3,8(sp)
1c009412:	40d7d7b3          	sra	a5,a5,a3
1c009416:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00941a:	c79d                	beqz	a5,1c009448 <S70_AveragePool_2x2+0x1dc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00941c:	10000513          	li	a0,256
1c009420:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009424:	30061073          	csrw	mstatus,a2
1c009428:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00942c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009430:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009434:	30047673          	csrrci	a2,mstatus,8
1c009438:	40472783          	lw	a5,1028(a4)
1c00943c:	46a2                	lw	a3,8(sp)
1c00943e:	40d7d7b3          	sra	a5,a5,a3
1c009442:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009446:	fff9                	bnez	a5,1c009424 <S70_AveragePool_2x2+0x1b8>
1c009448:	4785                	li	a5,1
1c00944a:	00d796b3          	sll	a3,a5,a3
1c00944e:	002047b7          	lui	a5,0x204
1c009452:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009456:	30061073          	csrw	mstatus,a2
1c00945a:	bd5d                	j	1c009310 <S70_AveragePool_2x2+0xa4>

1c00945c <S73_Linear_7x64x2x2>:
		short int * __restrict__ In,
		short int * __restrict__ Filter,
		short int * __restrict__ Bias,
		short int * __restrict__ Out)

{
1c00945c:	7155                	addi	sp,sp,-208
1c00945e:	c3a6                	sw	s1,196(sp)
		KerArgItSpace (User Kernel Iter Order):
			[D0, [0 x 14, 14]]
		Tile0: [0, 14, 14], Tile1: [0, 14, 14], Tile2; [0, 14, 14]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c009460:	100004b7          	lui	s1,0x10000
1c009464:	01c48493          	addi	s1,s1,28 # 1000001c <resnet_L1_Memory>
1c009468:	4098                	lw	a4,0(s1)
	KerArg0->InSize = (unsigned short int) (256);
	KerArg0->TotalInSize = (unsigned short int) (256);
	KerArg0->OutSize = (unsigned short int) (7);
	KerArg0->Filter = (short int * __restrict__) (resnet_L1_Memory+512);
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4096);
1c00946a:	6785                	lui	a5,0x1
	KerArg0->Out = (short int * __restrict__) (resnet_L1_Memory+4112);
1c00946c:	01078813          	addi	a6,a5,16 # 1010 <__rt_stack_size+0x810>
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4096);
1c009470:	97ba                	add	a5,a5,a4
	KerArg0->InSize = (unsigned short int) (256);
1c009472:	1c017337          	lui	t1,0x1c017
	KerArg0->Bias = (short int * __restrict__) (resnet_L1_Memory+4096);
1c009476:	cf3e                	sw	a5,156(sp)
	KerArg0->Norm = (unsigned char) (15);
1c009478:	6785                	lui	a5,0x1
{
1c00947a:	c1ca                	sw	s2,192(sp)
	KerArg0->Norm = (unsigned char) (15);
1c00947c:	a0f78793          	addi	a5,a5,-1521 # a0f <__rt_stack_size+0x20f>
{
1c009480:	8936                	mv	s2,a3
	KerArg0->InSize = (unsigned short int) (256);
1c009482:	1dc32683          	lw	a3,476(t1) # 1c0171dc <__clz_tab+0x5c4>
	KerArg0->Norm = (unsigned char) (15);
1c009486:	0af11223          	sh	a5,164(sp)
	KerArg0->NormBias = (signed char) (10);
	KerArg0->LB = (int) (-32768);
1c00948a:	77e1                	lui	a5,0xffff8
1c00948c:	d53e                	sw	a5,168(sp)
	KerArg0->UB = (int) (32767);
1c00948e:	67a1                	lui	a5,0x8
	KerArg0->Filter = (short int * __restrict__) (resnet_L1_Memory+512);
1c009490:	20070893          	addi	a7,a4,512
	KerArg0->Out = (short int * __restrict__) (resnet_L1_Memory+4112);
1c009494:	983a                	add	a6,a6,a4
	KerArg0->InSize = (unsigned short int) (256);
1c009496:	c936                	sw	a3,144(sp)
	KerArg0->UB = (int) (32767);
1c009498:	17fd                	addi	a5,a5,-1
	KerArg0->OutSize = (unsigned short int) (7);
1c00949a:	469d                	li	a3,7
{
1c00949c:	c786                	sw	ra,204(sp)
1c00949e:	c5a2                	sw	s0,200(sp)
1c0094a0:	df4e                	sw	s3,188(sp)
	KerArg0->In = (short int * __restrict__) (resnet_L1_Memory+0);
1c0094a2:	c73a                	sw	a4,140(sp)
	KerArg0->OutSize = (unsigned short int) (7);
1c0094a4:	08d11a23          	sh	a3,148(sp)
	KerArg0->Filter = (short int * __restrict__) (resnet_L1_Memory+512);
1c0094a8:	cd46                	sw	a7,152(sp)
	KerArg0->Out = (short int * __restrict__) (resnet_L1_Memory+4112);
1c0094aa:	d142                	sw	a6,160(sp)
	KerArg0->UB = (int) (32767);
1c0094ac:	d73e                	sw	a5,172(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0094ae:	30047873          	csrrci	a6,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0094b2:	002047b7          	lui	a5,0x204
1c0094b6:	4007a883          	lw	a7,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0094ba:	000b06b7          	lui	a3,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0094be:	20068693          	addi	a3,a3,512 # b0200 <__L2+0x30200>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0094c2:	c156c6b3          	p.bset	a3,a3,0,21
1c0094c6:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0094ca:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0094ce:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0094d2:	c646                	sw	a7,12(sp)
        copy->length = 0;
1c0094d4:	ce02                	sw	zero,28(sp)
  __builtin_pulp_spr_write(reg, val);
1c0094d6:	30081073          	csrw	mstatus,a6
  if (copy->length == 0)
1c0094da:	4772                	lw	a4,28(sp)
1c0094dc:	24070863          	beqz	a4,1c00972c <S73_Linear_7x64x2x2+0x2d0>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0094e0:	5692                	lw	a3,36(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0094e2:	02000713          	li	a4,32
1c0094e6:	ca89                	beqz	a3,1c0094f8 <S73_Linear_7x64x2x2+0x9c>
1c0094e8:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0094ec:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0094f0:	00e7a223          	sw	a4,4(a5)
1c0094f4:	5692                	lw	a3,36(sp)
1c0094f6:	faed                	bnez	a3,1c0094e8 <S73_Linear_7x64x2x2+0x8c>
	/*================================= Read Tiles Prolog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) In+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+0), 512, 0, &DmaR_Evt1);
	AT_L2_WAIT(0, &DmaR_Evt1); /* Wait previous DMA read In */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Filter+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+512), 3584, 0, &DmaR_Evt2);
1c0094f8:	4094                	lw	a3,0(s1)
1c0094fa:	20068693          	addi	a3,a3,512
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0094fe:	30047573          	csrrci	a0,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009502:	002047b7          	lui	a5,0x204
1c009506:	4007a803          	lw	a6,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00950a:	000b1737          	lui	a4,0xb1
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00950e:	e0070713          	addi	a4,a4,-512 # b0e00 <__L2+0x30e00>
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009512:	c1574733          	p.bset	a4,a4,0,21
1c009516:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00951a:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00951e:	40b7a023          	sw	a1,1024(a5)
        if (!merge) copy->id = id;
1c009522:	d642                	sw	a6,44(sp)
        copy->length = 0;
1c009524:	de02                	sw	zero,60(sp)
  __builtin_pulp_spr_write(reg, val);
1c009526:	30051073          	csrw	mstatus,a0
  if (copy->length == 0)
1c00952a:	5772                	lw	a4,60(sp)
1c00952c:	1a070663          	beqz	a4,1c0096d8 <S73_Linear_7x64x2x2+0x27c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009530:	4696                	lw	a3,68(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009532:	02000713          	li	a4,32
1c009536:	ca89                	beqz	a3,1c009548 <S73_Linear_7x64x2x2+0xec>
1c009538:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00953c:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009540:	00e7a223          	sw	a4,4(a5)
1c009544:	4696                	lw	a3,68(sp)
1c009546:	faed                	bnez	a3,1c009538 <S73_Linear_7x64x2x2+0xdc>
	AT_L2_WAIT(0, &DmaR_Evt2); /* Wait previous DMA read Filter */
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Bias+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4096), 14, 0, &DmaR_Evt3);
1c009548:	4094                	lw	a3,0(s1)
1c00954a:	6785                	lui	a5,0x1
1c00954c:	96be                	add	a3,a3,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00954e:	300475f3          	csrrci	a1,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c009552:	002047b7          	lui	a5,0x204
1c009556:	4007a503          	lw	a0,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c00955a:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c00955e:	0739                	addi	a4,a4,14
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009560:	c1574733          	p.bset	a4,a4,0,21
1c009564:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c009568:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c00956c:	40c7a023          	sw	a2,1024(a5)
        if (!merge) copy->id = id;
1c009570:	c6aa                	sw	a0,76(sp)
        copy->length = 0;
1c009572:	ce82                	sw	zero,92(sp)
  __builtin_pulp_spr_write(reg, val);
1c009574:	30059073          	csrw	mstatus,a1
  if (copy->length == 0)
1c009578:	4776                	lw	a4,92(sp)
1c00957a:	10070563          	beqz	a4,1c009684 <S73_Linear_7x64x2x2+0x228>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c00957e:	5696                	lw	a3,100(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009580:	02000713          	li	a4,32
1c009584:	ca89                	beqz	a3,1c009596 <S73_Linear_7x64x2x2+0x13a>
1c009586:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00958a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00958e:	00e7a223          	sw	a4,4(a5)
1c009592:	5696                	lw	a3,100(sp)
1c009594:	faed                	bnez	a3,1c009586 <S73_Linear_7x64x2x2+0x12a>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c009596:	0ff00793          	li	a5,255
1c00959a:	00204437          	lui	s0,0x204
1c00959e:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0095a2:	20040993          	addi	s3,s0,512
1c0095a6:	00f9a023          	sw	a5,0(s3)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c0095aa:	00f9a623          	sw	a5,12(s3)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c0095ae:	1c00c7b7          	lui	a5,0x1c00c
1c0095b2:	cba78793          	addi	a5,a5,-838 # 1c00bcba <KerParLinearLayerReLU_fp>
1c0095b6:	08f42023          	sw	a5,128(s0)
1c0095ba:	0168                	addi	a0,sp,140
1c0095bc:	08a42023          	sw	a0,128(s0)
1c0095c0:	6fa020ef          	jal	ra,1c00bcba <KerParLinearLayerReLU_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0095c4:	01c9e783          	p.elw	a5,28(s3)
			AT_FORK(gap_ncore(), (void *) KerParLinearLayerReLU_fp, (void *) KerArg0);
			__CALL(KerParLinearLayerReLU_fp, KerArg0);
		} /* End iteration on Tile0 */
	} /* End iteration on D0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+4112), 14, 1, &DmaW_Evt1);
1c0095c8:	6785                	lui	a5,0x1
1c0095ca:	4098                	lw	a4,0(s1)
1c0095cc:	07c1                	addi	a5,a5,16
1c0095ce:	973e                	add	a4,a4,a5
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0095d0:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0095d4:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0095d8:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0095dc:	07b9                	addi	a5,a5,14
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0095de:	c157c7b3          	p.bset	a5,a5,0,21
1c0095e2:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0095e6:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0095ea:	41242023          	sw	s2,1024(s0)
        if (!merge) copy->id = id;
1c0095ee:	d6b2                	sw	a2,108(sp)
        copy->length = 0;
1c0095f0:	de82                	sw	zero,124(sp)
  __builtin_pulp_spr_write(reg, val);
1c0095f2:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c0095f6:	57f6                	lw	a5,124(sp)
1c0095f8:	c795                	beqz	a5,1c009624 <S73_Linear_7x64x2x2+0x1c8>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0095fa:	469a                	lw	a3,132(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0095fc:	02000713          	li	a4,32
1c009600:	002047b7          	lui	a5,0x204
1c009604:	ca89                	beqz	a3,1c009616 <S73_Linear_7x64x2x2+0x1ba>
1c009606:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00960a:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00960e:	00e7a223          	sw	a4,4(a5)
1c009612:	469a                	lw	a3,132(sp)
1c009614:	faed                	bnez	a3,1c009606 <S73_Linear_7x64x2x2+0x1aa>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c009616:	40be                	lw	ra,204(sp)
1c009618:	442e                	lw	s0,200(sp)
1c00961a:	449e                	lw	s1,196(sp)
1c00961c:	490e                	lw	s2,192(sp)
1c00961e:	59fa                	lw	s3,188(sp)
1c009620:	6169                	addi	sp,sp,208
1c009622:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009624:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009628:	40442403          	lw	s0,1028(s0)
1c00962c:	56b6                	lw	a3,108(sp)
1c00962e:	40d45433          	sra	s0,s0,a3
1c009632:	fc143433          	p.bclr	s0,s0,30,1
1c009636:	c41d                	beqz	s0,1c009664 <S73_Linear_7x64x2x2+0x208>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009638:	10000593          	li	a1,256
1c00963c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009640:	30061073          	csrw	mstatus,a2
1c009644:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009648:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00964c:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009650:	30047673          	csrrci	a2,mstatus,8
1c009654:	40472783          	lw	a5,1028(a4)
1c009658:	56b6                	lw	a3,108(sp)
1c00965a:	40d7d7b3          	sra	a5,a5,a3
1c00965e:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009662:	fff9                	bnez	a5,1c009640 <S73_Linear_7x64x2x2+0x1e4>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c009664:	4785                	li	a5,1
1c009666:	00d796b3          	sll	a3,a5,a3
1c00966a:	002047b7          	lui	a5,0x204
1c00966e:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009672:	30061073          	csrw	mstatus,a2
1c009676:	40be                	lw	ra,204(sp)
1c009678:	442e                	lw	s0,200(sp)
1c00967a:	449e                	lw	s1,196(sp)
1c00967c:	490e                	lw	s2,192(sp)
1c00967e:	59fa                	lw	s3,188(sp)
1c009680:	6169                	addi	sp,sp,208
1c009682:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009684:	30047673          	csrrci	a2,mstatus,8
1c009688:	4047a783          	lw	a5,1028(a5)
1c00968c:	46b6                	lw	a3,76(sp)
1c00968e:	40d7d7b3          	sra	a5,a5,a3
1c009692:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009696:	c79d                	beqz	a5,1c0096c4 <S73_Linear_7x64x2x2+0x268>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009698:	10000593          	li	a1,256
1c00969c:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0096a0:	30061073          	csrw	mstatus,a2
1c0096a4:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0096a8:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0096ac:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0096b0:	30047673          	csrrci	a2,mstatus,8
1c0096b4:	40472783          	lw	a5,1028(a4)
1c0096b8:	46b6                	lw	a3,76(sp)
1c0096ba:	40d7d7b3          	sra	a5,a5,a3
1c0096be:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0096c2:	fff9                	bnez	a5,1c0096a0 <S73_Linear_7x64x2x2+0x244>
1c0096c4:	4785                	li	a5,1
1c0096c6:	00d796b3          	sll	a3,a5,a3
1c0096ca:	002047b7          	lui	a5,0x204
1c0096ce:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0096d2:	30061073          	csrw	mstatus,a2
1c0096d6:	b5c1                	j	1c009596 <S73_Linear_7x64x2x2+0x13a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0096d8:	300475f3          	csrrci	a1,mstatus,8
1c0096dc:	4047a783          	lw	a5,1028(a5)
1c0096e0:	56b2                	lw	a3,44(sp)
1c0096e2:	40d7d7b3          	sra	a5,a5,a3
1c0096e6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0096ea:	c79d                	beqz	a5,1c009718 <S73_Linear_7x64x2x2+0x2bc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0096ec:	10000513          	li	a0,256
1c0096f0:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0096f4:	30059073          	csrw	mstatus,a1
1c0096f8:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0096fc:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009700:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009704:	300475f3          	csrrci	a1,mstatus,8
1c009708:	40472783          	lw	a5,1028(a4)
1c00970c:	56b2                	lw	a3,44(sp)
1c00970e:	40d7d7b3          	sra	a5,a5,a3
1c009712:	fc17b7b3          	p.bclr	a5,a5,30,1
1c009716:	fff9                	bnez	a5,1c0096f4 <S73_Linear_7x64x2x2+0x298>
1c009718:	4785                	li	a5,1
1c00971a:	00d796b3          	sll	a3,a5,a3
1c00971e:	002047b7          	lui	a5,0x204
1c009722:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c009726:	30059073          	csrw	mstatus,a1
1c00972a:	bd39                	j	1c009548 <S73_Linear_7x64x2x2+0xec>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00972c:	30047573          	csrrci	a0,mstatus,8
1c009730:	4047a783          	lw	a5,1028(a5)
1c009734:	46b2                	lw	a3,12(sp)
1c009736:	40d7d7b3          	sra	a5,a5,a3
1c00973a:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00973e:	c79d                	beqz	a5,1c00976c <S73_Linear_7x64x2x2+0x310>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009740:	10000813          	li	a6,256
1c009744:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009748:	30051073          	csrw	mstatus,a0
1c00974c:	01072423          	sw	a6,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009750:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009754:	01072223          	sw	a6,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009758:	30047573          	csrrci	a0,mstatus,8
1c00975c:	40472783          	lw	a5,1028(a4)
1c009760:	46b2                	lw	a3,12(sp)
1c009762:	40d7d7b3          	sra	a5,a5,a3
1c009766:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00976a:	fff9                	bnez	a5,1c009748 <S73_Linear_7x64x2x2+0x2ec>
1c00976c:	4785                	li	a5,1
1c00976e:	00d796b3          	sll	a3,a5,a3
1c009772:	002047b7          	lui	a5,0x204
1c009776:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00977a:	30051073          	csrw	mstatus,a0
1c00977e:	bbad                	j	1c0094f8 <S73_Linear_7x64x2x2+0x9c>

1c009780 <S74_SoftMax>:
void S74_SoftMax(
		short int * __restrict__ In,
		short int * __restrict__ Out)

{
1c009780:	7159                	addi	sp,sp,-112
1c009782:	d2a6                	sw	s1,100(sp)
		KerArgItSpace (User Kernel Iter Order):
			[Tile0, 1:[1x7], 2]
		Tile0: [0, 14, 14], Tile1: [0, 14, 14], Tile2; [0, 14, 14]
	======================== End Ker Arg Iter Spaces =========================================*/
	/*=========================== Call Kernel, Invariant assignment =====================*/
	KerArg0->In = (short int *__restrict__) (resnet_L1_Memory+0);
1c009784:	100004b7          	lui	s1,0x10000
1c009788:	01c48493          	addi	s1,s1,28 # 1000001c <resnet_L1_Memory>
1c00978c:	4094                	lw	a3,0(s1)
	KerArg0->N = (unsigned short int) (7);
1c00978e:	1c017737          	lui	a4,0x1c017
1c009792:	20c72703          	lw	a4,524(a4) # 1c01720c <__clz_tab+0x5f4>
{
1c009796:	cece                	sw	s3,92(sp)
	KerArg0->Norm = (unsigned short int) (10);
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+16);
1c009798:	01068793          	addi	a5,a3,16
{
1c00979c:	89ae                	mv	s3,a1
1c00979e:	d686                	sw	ra,108(sp)
1c0097a0:	d4a2                	sw	s0,104(sp)
1c0097a2:	d0ca                	sw	s2,96(sp)
	KerArg0->In = (short int *__restrict__) (resnet_L1_Memory+0);
1c0097a4:	c236                	sw	a3,4(sp)
	KerArg0->N = (unsigned short int) (7);
1c0097a6:	c43a                	sw	a4,8(sp)
	KerArg0->Out = (short int *__restrict__) (resnet_L1_Memory+16);
1c0097a8:	c63e                	sw	a5,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0097aa:	30047673          	csrrci	a2,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c0097ae:	002047b7          	lui	a5,0x204
1c0097b2:	4007a583          	lw	a1,1024(a5) # 204400 <__L2+0x184400>
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c0097b6:	000b0737          	lui	a4,0xb0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c0097ba:	0739                	addi	a4,a4,14
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c0097bc:	c1574733          	p.bset	a4,a4,0,21
1c0097c0:	40e7a023          	sw	a4,1024(a5)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c0097c4:	40d7a023          	sw	a3,1024(a5)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c0097c8:	40a7a023          	sw	a0,1024(a5)
        if (!merge) copy->id = id;
1c0097cc:	c82e                	sw	a1,16(sp)
        copy->length = 0;
1c0097ce:	d002                	sw	zero,32(sp)
  __builtin_pulp_spr_write(reg, val);
1c0097d0:	30061073          	csrw	mstatus,a2
  if (copy->length == 0)
1c0097d4:	5702                	lw	a4,32(sp)
1c0097d6:	10070363          	beqz	a4,1c0098dc <S74_SoftMax+0x15c>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c0097da:	56a2                	lw	a3,40(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0097dc:	02000713          	li	a4,32
1c0097e0:	ca89                	beqz	a3,1c0097f2 <S74_SoftMax+0x72>
1c0097e2:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0097e6:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0097ea:	00e7a223          	sw	a4,4(a5)
1c0097ee:	56a2                	lw	a3,40(sp)
1c0097f0:	faed                	bnez	a3,1c0097e2 <S74_SoftMax+0x62>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c0097f2:	0ff00793          	li	a5,255
1c0097f6:	00204437          	lui	s0,0x204
1c0097fa:	08f42223          	sw	a5,132(s0) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c0097fe:	20040913          	addi	s2,s0,512
1c009802:	00f92023          	sw	a5,0(s2)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c009806:	00f92623          	sw	a5,12(s2)
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c00980a:	1c0107b7          	lui	a5,0x1c010
1c00980e:	09c78793          	addi	a5,a5,156 # 1c01009c <KerParSoftMax_fp>
1c009812:	08f42023          	sw	a5,128(s0)
1c009816:	0048                	addi	a0,sp,4
1c009818:	08a42023          	sw	a0,128(s0)
1c00981c:	081060ef          	jal	ra,1c01009c <KerParSoftMax_fp>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009820:	01c96783          	p.elw	a5,28(s2)
		/*====================== Call Kernel LOC_LOOP =========================*/
		AT_FORK(gap_ncore(), (void *) KerParSoftMax_fp, (void *) KerArg0);
		__CALL(KerParSoftMax_fp, KerArg0);
	} /* End iteration on Tile0 */
	/*================================ Write Tiles Epilog ===============================*/
	AT_L2_COPY(0, ((AT_L2_EXT_ADDR_TYPE) Out+0), ((AT_L2_INT_ADDR_TYPE) resnet_L1_Memory+16), 14, 1, &DmaW_Evt1);
1c009824:	4098                	lw	a4,0(s1)
1c009826:	0741                	addi	a4,a4,16
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009828:	300476f3          	csrrci	a3,mstatus,8
  return DMA_READ(PLP_DMA_QUEUE_OFFSET);
1c00982c:	40042603          	lw	a2,1024(s0)
  res = __builtin_bitinsert(res, size,        PLP_DMA_SIZE_WIDTH, PLP_DMA_SIZE_BIT);
1c009830:	000a07b7          	lui	a5,0xa0
  res = __builtin_bitinsert(res, trigEvt,     1, PLP_DMA_ELE_BIT);
1c009834:	07b9                	addi	a5,a5,14
  DMA_WRITE(cmd, PLP_DMA_QUEUE_OFFSET);
1c009836:	c157c7b3          	p.bset	a5,a5,0,21
1c00983a:	40f42023          	sw	a5,1024(s0)
  DMA_WRITE(locAddr, PLP_DMA_QUEUE_OFFSET);
1c00983e:	40e42023          	sw	a4,1024(s0)
  DMA_WRITE(extAddr, PLP_DMA_QUEUE_OFFSET);
1c009842:	41342023          	sw	s3,1024(s0)
        if (!merge) copy->id = id;
1c009846:	d832                	sw	a2,48(sp)
        copy->length = 0;
1c009848:	c082                	sw	zero,64(sp)
  __builtin_pulp_spr_write(reg, val);
1c00984a:	30069073          	csrw	mstatus,a3
  if (copy->length == 0)
1c00984e:	4786                	lw	a5,64(sp)
1c009850:	c795                	beqz	a5,1c00987c <S74_SoftMax+0xfc>
    while(*(volatile uint32_t *)&copy->ext_addr != 0)
1c009852:	46a6                	lw	a3,72(sp)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009854:	02000713          	li	a4,32
1c009858:	002047b7          	lui	a5,0x204
1c00985c:	ca89                	beqz	a3,1c00986e <S74_SoftMax+0xee>
1c00985e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009862:	03c7e683          	p.elw	a3,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009866:	00e7a223          	sw	a4,4(a5)
1c00986a:	46a6                	lw	a3,72(sp)
1c00986c:	faed                	bnez	a3,1c00985e <S74_SoftMax+0xde>
	AT_L2_WAIT(0, &DmaW_Evt1); /* Wait DMA write Out */
	/*============================ End Write Tiles Epilog ===============================*/
}
1c00986e:	50b6                	lw	ra,108(sp)
1c009870:	5426                	lw	s0,104(sp)
1c009872:	5496                	lw	s1,100(sp)
1c009874:	5906                	lw	s2,96(sp)
1c009876:	49f6                	lw	s3,92(sp)
1c009878:	6165                	addi	sp,sp,112
1c00987a:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00987c:	30047673          	csrrci	a2,mstatus,8
    while(DMA_READ(PLP_DMA_STATUS_OFFSET) & (1 << copy->id)) {
1c009880:	40442403          	lw	s0,1028(s0)
1c009884:	56c2                	lw	a3,48(sp)
1c009886:	40d45433          	sra	s0,s0,a3
1c00988a:	fc143433          	p.bclr	s0,s0,30,1
1c00988e:	c41d                	beqz	s0,1c0098bc <S74_SoftMax+0x13c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c009890:	10000593          	li	a1,256
1c009894:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c009898:	30061073          	csrw	mstatus,a2
1c00989c:	00b72423          	sw	a1,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c0098a0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c0098a4:	00b72223          	sw	a1,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0098a8:	30047673          	csrrci	a2,mstatus,8
1c0098ac:	40472783          	lw	a5,1028(a4)
1c0098b0:	56c2                	lw	a3,48(sp)
1c0098b2:	40d7d7b3          	sra	a5,a5,a3
1c0098b6:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0098ba:	fff9                	bnez	a5,1c009898 <S74_SoftMax+0x118>
  DMA_WRITE(1<<counter, PLP_DMA_STATUS_OFFSET);
1c0098bc:	4785                	li	a5,1
1c0098be:	00d796b3          	sll	a3,a5,a3
1c0098c2:	002047b7          	lui	a5,0x204
1c0098c6:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c0098ca:	30061073          	csrw	mstatus,a2
1c0098ce:	50b6                	lw	ra,108(sp)
1c0098d0:	5426                	lw	s0,104(sp)
1c0098d2:	5496                	lw	s1,100(sp)
1c0098d4:	5906                	lw	s2,96(sp)
1c0098d6:	49f6                	lw	s3,92(sp)
1c0098d8:	6165                	addi	sp,sp,112
1c0098da:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0098dc:	30047673          	csrrci	a2,mstatus,8
1c0098e0:	4047a783          	lw	a5,1028(a5)
1c0098e4:	46c2                	lw	a3,16(sp)
1c0098e6:	40d7d7b3          	sra	a5,a5,a3
1c0098ea:	fc17b7b3          	p.bclr	a5,a5,30,1
1c0098ee:	c79d                	beqz	a5,1c00991c <S74_SoftMax+0x19c>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c0098f0:	10000513          	li	a0,256
1c0098f4:	00204737          	lui	a4,0x204
  __builtin_pulp_spr_write(reg, val);
1c0098f8:	30061073          	csrw	mstatus,a2
1c0098fc:	00a72423          	sw	a0,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c009900:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c009904:	00a72223          	sw	a0,4(a4)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009908:	30047673          	csrrci	a2,mstatus,8
1c00990c:	40472783          	lw	a5,1028(a4)
1c009910:	46c2                	lw	a3,16(sp)
1c009912:	40d7d7b3          	sra	a5,a5,a3
1c009916:	fc17b7b3          	p.bclr	a5,a5,30,1
1c00991a:	fff9                	bnez	a5,1c0098f8 <S74_SoftMax+0x178>
1c00991c:	4785                	li	a5,1
1c00991e:	00d796b3          	sll	a3,a5,a3
1c009922:	002047b7          	lui	a5,0x204
1c009926:	40d7a223          	sw	a3,1028(a5) # 204404 <__L2+0x184404>
  __builtin_pulp_spr_write(reg, val);
1c00992a:	30061073          	csrw	mstatus,a2
1c00992e:	b5d1                	j	1c0097f2 <S74_SoftMax+0x72>

1c009930 <resnetCNN_Construct>:
int resnetCNN_Construct()

{
1c009930:	710d                	addi	sp,sp,-352
	AT_HYPERFLASH_FS_FC_EVENT UchanHF1;
	AT_HYPERRAM_FC_EVENT UchanHR2;
	AT_HYPERFLASH_FS_CONF_T HyperFlashConf;
	int Error;
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c009932:	0068                	addi	a0,sp,12
{
1c009934:	14112e23          	sw	ra,348(sp)
1c009938:	14812c23          	sw	s0,344(sp)
1c00993c:	14912a23          	sw	s1,340(sp)
1c009940:	15212823          	sw	s2,336(sp)
1c009944:	15312623          	sw	s3,332(sp)
1c009948:	15412423          	sw	s4,328(sp)
1c00994c:	15512223          	sw	s5,324(sp)
1c009950:	15612023          	sw	s6,320(sp)
1c009954:	13712e23          	sw	s7,316(sp)
1c009958:	13812c23          	sw	s8,312(sp)
1c00995c:	13912a23          	sw	s9,308(sp)
1c009960:	13a12823          	sw	s10,304(sp)
1c009964:	13b12623          	sw	s11,300(sp)

static inline void __at_hyperflash_fs_open(AT_HYPERFLASH_FS_T *file, int is_write, struct pi_fs_conf *conf, const char *filename, int *err)
{
  struct pi_hyperflash_conf hyperflash_conf;
  pi_hyperflash_conf_init(&hyperflash_conf);
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c009968:	1c0184b7          	lui	s1,0x1c018
	AT_HYPERFLASH_FS_CONF_INIT(&HyperFlashConf, AT_MEM_L3_HFLASH, 0);
1c00996c:	2c5060ef          	jal	ra,1c010430 <pi_fs_conf_init>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c009970:	1108                	addi	a0,sp,160
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c009972:	81848913          	addi	s2,s1,-2024 # 1c017818 <_bss_start>
  pi_hyperflash_conf_init(&hyperflash_conf);
1c009976:	5b9070ef          	jal	ra,1c01172e <pi_hyperflash_conf_init>
  pi_open_from_conf(&file->hyperflash, &hyperflash_conf);
1c00997a:	00c90413          	addi	s0,s2,12
1c00997e:	8522                	mv	a0,s0
1c009980:	110c                	addi	a1,sp,160
1c009982:	13a090ef          	jal	ra,1c012abc <pi_open_from_conf>
  if (pi_flash_open(&file->hyperflash))
1c009986:	8522                	mv	a0,s0
1c009988:	269060ef          	jal	ra,1c0103f0 <pi_flash_open>
1c00998c:	e115                	bnez	a0,1c0099b0 <resnetCNN_Construct+0x80>

#ifdef __FLASH_FS_SEMIHOST__
  conf->type = PI_FS_HOST;
#endif

  pi_open_from_conf(&file->fs, conf);
1c00998e:	81848513          	addi	a0,s1,-2024
1c009992:	006c                	addi	a1,sp,12
  conf->flash = &file->hyperflash;
1c009994:	c822                	sw	s0,16(sp)
    conf->type = PI_FS_READ_ONLY;
1c009996:	c602                	sw	zero,12(sp)
  pi_open_from_conf(&file->fs, conf);
1c009998:	124090ef          	jal	ra,1c012abc <pi_open_from_conf>
  if (pi_fs_mount(&file->fs))
1c00999c:	81848513          	addi	a0,s1,-2024
1c0099a0:	2a3060ef          	jal	ra,1c010442 <pi_fs_mount>
1c0099a4:	c521                	beqz	a0,1c0099ec <resnetCNN_Construct+0xbc>


static inline void pi_flash_close(struct pi_device *device)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->close(device);
1c0099a6:	00c92783          	lw	a5,12(s2)
1c0099aa:	8522                	mv	a0,s0
1c0099ac:	43dc                	lw	a5,4(a5)
1c0099ae:	9782                	jalr	a5
	AT_HYPERFLASH_FS_OPEN(&HyperFlash, &HyperFlashConf, "resnet_L3_Flash_Const.dat", &Error);
	if (Error) return 1;
1c0099b0:	4b85                	li	s7,1
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	/* Moving Full_connection7kerneltranspos, size 3584 from HyperFlash at 340480 to (size 3584) L2 at 0..3583 */
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 340480), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), 3584, 0, &UchanHF1);
	AT_HYPERFLASH_FS_FC_WAIT(&HyperFlash, &UchanHF1);
	return 0;
}
1c0099b2:	15c12083          	lw	ra,348(sp)
1c0099b6:	15812403          	lw	s0,344(sp)
1c0099ba:	855e                	mv	a0,s7
1c0099bc:	15412483          	lw	s1,340(sp)
1c0099c0:	15012903          	lw	s2,336(sp)
1c0099c4:	14c12983          	lw	s3,332(sp)
1c0099c8:	14812a03          	lw	s4,328(sp)
1c0099cc:	14412a83          	lw	s5,324(sp)
1c0099d0:	14012b03          	lw	s6,320(sp)
1c0099d4:	13c12b83          	lw	s7,316(sp)
1c0099d8:	13812c03          	lw	s8,312(sp)
1c0099dc:	13412c83          	lw	s9,308(sp)
1c0099e0:	13012d03          	lw	s10,304(sp)
1c0099e4:	12c12d83          	lw	s11,300(sp)
1c0099e8:	6135                	addi	sp,sp,352
1c0099ea:	8082                	ret
  {
    pi_flash_close(&file->hyperflash);
    *err = -1;
    return;
  }
  file->file = pi_fs_open(&file->fs, filename, is_write ? PI_FS_FLAGS_WRITE : 0);
1c0099ec:	1c0175b7          	lui	a1,0x1c017
1c0099f0:	4601                	li	a2,0
1c0099f2:	22058593          	addi	a1,a1,544 # 1c017220 <__clz_tab+0x608>
1c0099f6:	81848513          	addi	a0,s1,-2024
1c0099fa:	27d060ef          	jal	ra,1c010476 <pi_fs_open>
1c0099fe:	00a92c23          	sw	a0,24(s2)
  if (file->file == NULL)
1c009a02:	e119                	bnez	a0,1c009a08 <resnetCNN_Construct+0xd8>
1c009a04:	5a40106f          	j	1c00afa8 <resnetCNN_Construct+0x1678>
    pi_task_wait_on(&task);
}

static inline int pi_ram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
1c009a08:	1c0184b7          	lui	s1,0x1c018
    return api->alloc(device, addr, size);
1c009a0c:	b544a783          	lw	a5,-1196(s1) # 1c017b54 <HyperRam>
1c009a10:	00050437          	lui	s0,0x50
1c009a14:	18e40613          	addi	a2,s0,398 # 5018e <__L1Cl+0x4018e>
1c009a18:	4b9c                	lw	a5,16(a5)
1c009a1a:	110c                	addi	a1,sp,160
1c009a1c:	b5448513          	addi	a0,s1,-1196
1c009a20:	9782                	jalr	a5
1c009a22:	8b2a                	mv	s6,a0
	resnet_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 328078);
1c009a24:	c519                	beqz	a0,1c009a32 <resnetCNN_Construct+0x102>
1c009a26:	1c0187b7          	lui	a5,0x1c018
1c009a2a:	b607a823          	sw	zero,-1168(a5) # 1c017b70 <resnet_L3_Memory>
	if (resnet_L3_Memory == 0) return 2;
1c009a2e:	4b89                	li	s7,2
1c009a30:	b749                	j	1c0099b2 <resnetCNN_Construct+0x82>
	resnet_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 328078);
1c009a32:	578a                	lw	a5,160(sp)
1c009a34:	c399                	beqz	a5,1c009a3a <resnetCNN_Construct+0x10a>
1c009a36:	5600106f          	j	1c00af96 <resnetCNN_Construct+0x1666>
1c009a3a:	b544a783          	lw	a5,-1196(s1)
1c009a3e:	18e40613          	addi	a2,s0,398
1c009a42:	110c                	addi	a1,sp,160
1c009a44:	4b9c                	lw	a5,16(a5)
1c009a46:	b5448513          	addi	a0,s1,-1196
1c009a4a:	9782                	jalr	a5
1c009a4c:	fd69                	bnez	a0,1c009a26 <resnetCNN_Construct+0xf6>
1c009a4e:	578a                	lw	a5,160(sp)
1c009a50:	1c018a37          	lui	s4,0x1c018
	if (resnet_L3_Memory == 0) return 2;
1c009a54:	4b89                	li	s7,2
	resnet_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 328078);
1c009a56:	b6fa2823          	sw	a5,-1168(s4) # 1c017b70 <resnet_L3_Memory>
	if (resnet_L3_Memory == 0) return 2;
1c009a5a:	dfa1                	beqz	a5,1c0099b2 <resnetCNN_Construct+0x82>
	resnet_L2_Memory = (AT_L2_POINTER) AT_L2_ALLOC(0, 200000);
1c009a5c:	00031537          	lui	a0,0x31
1c009a60:	d4050513          	addi	a0,a0,-704 # 30d40 <__L1Cl+0x20d40>
1c009a64:	1c017437          	lui	s0,0x1c017
1c009a68:	181090ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c009a6c:	71c40413          	addi	s0,s0,1820 # 1c01771c <resnet_L2_Memory>
1c009a70:	c008                	sw	a0,0(s0)
	if (resnet_L2_Memory == 0) return 3;
1c009a72:	4b8d                	li	s7,3
1c009a74:	dd1d                	beqz	a0,1c0099b2 <resnetCNN_Construct+0x82>
	resnet_L1_Memory = (AT_L1_POINTER) AT_L1_ALLOC(0, 48672);
1c009a76:	65b1                	lui	a1,0xc
1c009a78:	e2058593          	addi	a1,a1,-480 # be20 <__rt_stack_size+0xb620>
1c009a7c:	4501                	li	a0,0
1c009a7e:	159090ef          	jal	ra,1c0133d6 <pi_cl_l1_malloc>
1c009a82:	100007b7          	lui	a5,0x10000
1c009a86:	00a7ae23          	sw	a0,28(a5) # 1000001c <resnet_L1_Memory>
	if (resnet_L1_Memory == 0) return 4;
1c009a8a:	e119                	bnez	a0,1c009a90 <resnetCNN_Construct+0x160>
1c009a8c:	5160106f          	j	1c00afa2 <resnetCNN_Construct+0x1672>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354208+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009a90:	00056db7          	lui	s11,0x56
		int Size = 16, Base = 0;
1c009a94:	4bc1                	li	s7,16
1c009a96:	1c0189b7          	lui	s3,0x1c018
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354208+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009a9a:	7a0d8d93          	addi	s11,s11,1952 # 567a0 <__L1Cl+0x467a0>
  task->id = PI_TASK_NONE_ID;
1c009a9e:	4c85                	li	s9,1
1c009aa0:	ae89a583          	lw	a1,-1304(s3) # 1c017ae8 <resnet_L3_Flash>
			int Chunk = Min(Size, 1024);
1c009aa4:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354208+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009aa8:	4010                	lw	a2,0(s0)
1c009aaa:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009aae:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354208+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009ab2:	95ee                	add	a1,a1,s11
1c009ab4:	101c                	addi	a5,sp,32
1c009ab6:	4705                	li	a4,1
1c009ab8:	86e2                	mv	a3,s8
1c009aba:	95da                	add	a1,a1,s6
1c009abc:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009abe:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009ac0:	c4e6                	sw	s9,72(sp)

void __rt_event_sched_init();

static inline void __rt_task_init(pi_task_t *task)
{
  task->done = 0;
1c009ac2:	02010a23          	sb	zero,52(sp)
1c009ac6:	21d060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>

#endif

static inline void pi_task_wait_on(struct pi_task *task)
{
  while(!task->done)
1c009aca:	03410783          	lb	a5,52(sp)
1c009ace:	ef89                	bnez	a5,1c009ae8 <resnetCNN_Construct+0x1b8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009ad0:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009ad4:	4585                	li	a1,1
1c009ad6:	01c00513          	li	a0,28
1c009ada:	662090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009ade:	300d1073          	csrw	mstatus,s10
1c009ae2:	03410783          	lb	a5,52(sp)
1c009ae6:	d7ed                	beqz	a5,1c009ad0 <resnetCNN_Construct+0x1a0>
    api->copy_async(device, pi_ram_addr, data, size, ext2loc, task);
1c009ae8:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009aec:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009af0:	0a010a23          	sb	zero,180(sp)
1c009af4:	0087a803          	lw	a6,8(a5)
1c009af8:	000507b7          	lui	a5,0x50
1c009afc:	16078793          	addi	a5,a5,352 # 50160 <__L1Cl+0x40160>
1c009b00:	4010                	lw	a2,0(s0)
1c009b02:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009b04:	dd66                	sw	s9,184(sp)
1c009b06:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009b08:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009b0a:	c5e6                	sw	s9,200(sp)
1c009b0c:	4701                	li	a4,0
1c009b0e:	86e2                	mv	a3,s8
1c009b10:	95da                	add	a1,a1,s6
1c009b12:	b5448513          	addi	a0,s1,-1196
1c009b16:	9802                	jalr	a6
1c009b18:	0b410783          	lb	a5,180(sp)
1c009b1c:	ef89                	bnez	a5,1c009b36 <resnetCNN_Construct+0x206>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b1e:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009b22:	4585                	li	a1,1
1c009b24:	01c00513          	li	a0,28
1c009b28:	614090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009b2c:	300d1073          	csrw	mstatus,s10
1c009b30:	0b410783          	lb	a5,180(sp)
1c009b34:	d7ed                	beqz	a5,1c009b1e <resnetCNN_Construct+0x1ee>
			Size -= Chunk;
1c009b36:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c009b3a:	9b62                	add	s6,s6,s8
		while (Size) {
1c009b3c:	f60b92e3          	bnez	s7,1c009aa0 <resnetCNN_Construct+0x170>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 349824+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009b40:	00055db7          	lui	s11,0x55
		int Size = 1152, Base = 0;
1c009b44:	48000b13          	li	s6,1152
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 349824+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009b48:	680d8d93          	addi	s11,s11,1664 # 55680 <__L1Cl+0x45680>
  task->id = PI_TASK_NONE_ID;
1c009b4c:	4c85                	li	s9,1
1c009b4e:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009b52:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 349824+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009b56:	4010                	lw	a2,0(s0)
1c009b58:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009b5c:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 349824+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009b60:	95ee                	add	a1,a1,s11
1c009b62:	101c                	addi	a5,sp,32
1c009b64:	4705                	li	a4,1
1c009b66:	86e2                	mv	a3,s8
1c009b68:	95de                	add	a1,a1,s7
1c009b6a:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009b6c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009b6e:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009b70:	02010a23          	sb	zero,52(sp)
1c009b74:	16f060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009b78:	03410783          	lb	a5,52(sp)
1c009b7c:	ef89                	bnez	a5,1c009b96 <resnetCNN_Construct+0x266>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009b7e:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009b82:	4585                	li	a1,1
1c009b84:	01c00513          	li	a0,28
1c009b88:	5b4090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009b8c:	300d1073          	csrw	mstatus,s10
1c009b90:	03410783          	lb	a5,52(sp)
1c009b94:	d7ed                	beqz	a5,1c009b7e <resnetCNN_Construct+0x24e>
1c009b96:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 324480+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009b9a:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009b9e:	0a010a23          	sb	zero,180(sp)
1c009ba2:	0087a803          	lw	a6,8(a5)
1c009ba6:	0004f7b7          	lui	a5,0x4f
1c009baa:	38078793          	addi	a5,a5,896 # 4f380 <__L1Cl+0x3f380>
1c009bae:	4010                	lw	a2,0(s0)
1c009bb0:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009bb2:	dd66                	sw	s9,184(sp)
1c009bb4:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009bb6:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009bb8:	c5e6                	sw	s9,200(sp)
1c009bba:	4701                	li	a4,0
1c009bbc:	86e2                	mv	a3,s8
1c009bbe:	95de                	add	a1,a1,s7
1c009bc0:	b5448513          	addi	a0,s1,-1196
1c009bc4:	9802                	jalr	a6
1c009bc6:	0b410783          	lb	a5,180(sp)
1c009bca:	ef89                	bnez	a5,1c009be4 <resnetCNN_Construct+0x2b4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009bcc:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009bd0:	4585                	li	a1,1
1c009bd2:	01c00513          	li	a0,28
1c009bd6:	566090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009bda:	300d1073          	csrw	mstatus,s10
1c009bde:	0b410783          	lb	a5,180(sp)
1c009be2:	d7ed                	beqz	a5,1c009bcc <resnetCNN_Construct+0x29c>
			Size -= Chunk;
1c009be4:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c009be8:	9be2                	add	s7,s7,s8
		while (Size) {
1c009bea:	f60b12e3          	bnez	s6,1c009b4e <resnetCNN_Construct+0x21e>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354224+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009bee:	00056db7          	lui	s11,0x56
		int Size = 16, Base = 0;
1c009bf2:	4bc1                	li	s7,16
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354224+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009bf4:	7b0d8d93          	addi	s11,s11,1968 # 567b0 <__L1Cl+0x467b0>
  task->id = PI_TASK_NONE_ID;
1c009bf8:	4c85                	li	s9,1
1c009bfa:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009bfe:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354224+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009c02:	4010                	lw	a2,0(s0)
1c009c04:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009c08:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354224+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009c0c:	95ee                	add	a1,a1,s11
1c009c0e:	101c                	addi	a5,sp,32
1c009c10:	4705                	li	a4,1
1c009c12:	86e2                	mv	a3,s8
1c009c14:	95da                	add	a1,a1,s6
1c009c16:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009c18:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009c1a:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009c1c:	02010a23          	sb	zero,52(sp)
1c009c20:	0c3060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009c24:	03410783          	lb	a5,52(sp)
1c009c28:	ef89                	bnez	a5,1c009c42 <resnetCNN_Construct+0x312>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009c2a:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009c2e:	4585                	li	a1,1
1c009c30:	01c00513          	li	a0,28
1c009c34:	508090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009c38:	300d1073          	csrw	mstatus,s10
1c009c3c:	03410783          	lb	a5,52(sp)
1c009c40:	d7ed                	beqz	a5,1c009c2a <resnetCNN_Construct+0x2fa>
1c009c42:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328048+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009c46:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009c4a:	0a010a23          	sb	zero,180(sp)
1c009c4e:	0087a803          	lw	a6,8(a5)
1c009c52:	000507b7          	lui	a5,0x50
1c009c56:	17078793          	addi	a5,a5,368 # 50170 <__L1Cl+0x40170>
1c009c5a:	4010                	lw	a2,0(s0)
1c009c5c:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009c5e:	dd66                	sw	s9,184(sp)
1c009c60:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009c62:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009c64:	c5e6                	sw	s9,200(sp)
1c009c66:	4701                	li	a4,0
1c009c68:	86e2                	mv	a3,s8
1c009c6a:	95da                	add	a1,a1,s6
1c009c6c:	b5448513          	addi	a0,s1,-1196
1c009c70:	9802                	jalr	a6
1c009c72:	0b410783          	lb	a5,180(sp)
1c009c76:	ef89                	bnez	a5,1c009c90 <resnetCNN_Construct+0x360>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009c78:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009c7c:	4585                	li	a1,1
1c009c7e:	01c00513          	li	a0,28
1c009c82:	4ba090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009c86:	300d1073          	csrw	mstatus,s10
1c009c8a:	0b410783          	lb	a5,180(sp)
1c009c8e:	d7ed                	beqz	a5,1c009c78 <resnetCNN_Construct+0x348>
			Size -= Chunk;
1c009c90:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c009c94:	9b62                	add	s6,s6,s8
		while (Size) {
1c009c96:	f60b92e3          	bnez	s7,1c009bfa <resnetCNN_Construct+0x2ca>
		int Size = 2304, Base = 0;
1c009c9a:	6b05                	lui	s6,0x1
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 321024+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009c9c:	0004ed37          	lui	s10,0x4e
		int Size = 2304, Base = 0;
1c009ca0:	900b0b13          	addi	s6,s6,-1792 # 900 <__rt_stack_size+0x100>
  task->id = PI_TASK_NONE_ID;
1c009ca4:	4c85                	li	s9,1
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 321024+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009ca6:	600d0d13          	addi	s10,s10,1536 # 4e600 <__L1Cl+0x3e600>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 344064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009caa:	ae89a583          	lw	a1,-1304(s3)
1c009cae:	000547b7          	lui	a5,0x54
1c009cb2:	4010                	lw	a2,0(s0)
1c009cb4:	95be                	add	a1,a1,a5
1c009cb6:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009cba:	40000793          	li	a5,1024
1c009cbe:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 344064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009cc2:	4705                	li	a4,1
1c009cc4:	101c                	addi	a5,sp,32
1c009cc6:	86e2                	mv	a3,s8
1c009cc8:	95de                	add	a1,a1,s7
1c009cca:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009ccc:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009cce:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009cd0:	02010a23          	sb	zero,52(sp)
1c009cd4:	00f060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009cd8:	03410783          	lb	a5,52(sp)
1c009cdc:	ef89                	bnez	a5,1c009cf6 <resnetCNN_Construct+0x3c6>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009cde:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009ce2:	4585                	li	a1,1
1c009ce4:	01c00513          	li	a0,28
1c009ce8:	454090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009cec:	300d9073          	csrw	mstatus,s11
1c009cf0:	03410783          	lb	a5,52(sp)
1c009cf4:	d7ed                	beqz	a5,1c009cde <resnetCNN_Construct+0x3ae>
1c009cf6:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 321024+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009cfa:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009cfe:	0a010a23          	sb	zero,180(sp)
1c009d02:	0087a803          	lw	a6,8(a5) # 54008 <__L1Cl+0x44008>
1c009d06:	4010                	lw	a2,0(s0)
1c009d08:	95ea                	add	a1,a1,s10
1c009d0a:	111c                	addi	a5,sp,160
  task->id = PI_TASK_NONE_ID;
1c009d0c:	dd66                	sw	s9,184(sp)
  task->arg[0] = (uint32_t)0;
1c009d0e:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009d10:	c5e6                	sw	s9,200(sp)
1c009d12:	4701                	li	a4,0
1c009d14:	86e2                	mv	a3,s8
1c009d16:	95de                	add	a1,a1,s7
1c009d18:	b5448513          	addi	a0,s1,-1196
1c009d1c:	9802                	jalr	a6
1c009d1e:	0b410783          	lb	a5,180(sp)
1c009d22:	ef89                	bnez	a5,1c009d3c <resnetCNN_Construct+0x40c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009d24:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009d28:	4585                	li	a1,1
1c009d2a:	01c00513          	li	a0,28
1c009d2e:	40e090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009d32:	300d9073          	csrw	mstatus,s11
1c009d36:	0b410783          	lb	a5,180(sp)
1c009d3a:	d7ed                	beqz	a5,1c009d24 <resnetCNN_Construct+0x3f4>
			Size -= Chunk;
1c009d3c:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c009d40:	9be2                	add	s7,s7,s8
		while (Size) {
1c009d42:	f60b14e3          	bnez	s6,1c009caa <resnetCNN_Construct+0x37a>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354000+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009d46:	00056db7          	lui	s11,0x56
		int Size = 32, Base = 0;
1c009d4a:	02000b93          	li	s7,32
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354000+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009d4e:	6d0d8d93          	addi	s11,s11,1744 # 566d0 <__L1Cl+0x466d0>
  task->id = PI_TASK_NONE_ID;
1c009d52:	4c85                	li	s9,1
1c009d54:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009d58:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354000+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009d5c:	4010                	lw	a2,0(s0)
1c009d5e:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009d62:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354000+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009d66:	95ee                	add	a1,a1,s11
1c009d68:	101c                	addi	a5,sp,32
1c009d6a:	4705                	li	a4,1
1c009d6c:	86e2                	mv	a3,s8
1c009d6e:	95da                	add	a1,a1,s6
1c009d70:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009d72:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009d74:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009d76:	02010a23          	sb	zero,52(sp)
1c009d7a:	768060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009d7e:	03410783          	lb	a5,52(sp)
1c009d82:	ef89                	bnez	a5,1c009d9c <resnetCNN_Construct+0x46c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009d84:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009d88:	4585                	li	a1,1
1c009d8a:	01c00513          	li	a0,28
1c009d8e:	3ae090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009d92:	300d1073          	csrw	mstatus,s10
1c009d96:	03410783          	lb	a5,52(sp)
1c009d9a:	d7ed                	beqz	a5,1c009d84 <resnetCNN_Construct+0x454>
1c009d9c:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327872+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009da0:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009da4:	0a010a23          	sb	zero,180(sp)
1c009da8:	0087a803          	lw	a6,8(a5)
1c009dac:	000507b7          	lui	a5,0x50
1c009db0:	0c078793          	addi	a5,a5,192 # 500c0 <__L1Cl+0x400c0>
1c009db4:	4010                	lw	a2,0(s0)
1c009db6:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009db8:	dd66                	sw	s9,184(sp)
1c009dba:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009dbc:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009dbe:	c5e6                	sw	s9,200(sp)
1c009dc0:	4701                	li	a4,0
1c009dc2:	86e2                	mv	a3,s8
1c009dc4:	95da                	add	a1,a1,s6
1c009dc6:	b5448513          	addi	a0,s1,-1196
1c009dca:	9802                	jalr	a6
1c009dcc:	0b410783          	lb	a5,180(sp)
1c009dd0:	ef89                	bnez	a5,1c009dea <resnetCNN_Construct+0x4ba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009dd2:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009dd6:	4585                	li	a1,1
1c009dd8:	01c00513          	li	a0,28
1c009ddc:	360090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009de0:	300d1073          	csrw	mstatus,s10
1c009de4:	0b410783          	lb	a5,180(sp)
1c009de8:	d7ed                	beqz	a5,1c009dd2 <resnetCNN_Construct+0x4a2>
			Size -= Chunk;
1c009dea:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c009dee:	9b62                	add	s6,s6,s8
		while (Size) {
1c009df0:	f60b92e3          	bnez	s7,1c009d54 <resnetCNN_Construct+0x424>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354032+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009df4:	00056db7          	lui	s11,0x56
		int Size = 32, Base = 0;
1c009df8:	02000b13          	li	s6,32
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354032+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009dfc:	6f0d8d93          	addi	s11,s11,1776 # 566f0 <__L1Cl+0x466f0>
  task->id = PI_TASK_NONE_ID;
1c009e00:	4c85                	li	s9,1
1c009e02:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009e06:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354032+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009e0a:	4010                	lw	a2,0(s0)
1c009e0c:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009e10:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354032+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009e14:	95ee                	add	a1,a1,s11
1c009e16:	101c                	addi	a5,sp,32
1c009e18:	4705                	li	a4,1
1c009e1a:	86e2                	mv	a3,s8
1c009e1c:	95de                	add	a1,a1,s7
1c009e1e:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009e20:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009e22:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009e24:	02010a23          	sb	zero,52(sp)
1c009e28:	6ba060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009e2c:	03410783          	lb	a5,52(sp)
1c009e30:	ef89                	bnez	a5,1c009e4a <resnetCNN_Construct+0x51a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009e32:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009e36:	4585                	li	a1,1
1c009e38:	01c00513          	li	a0,28
1c009e3c:	300090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009e40:	300d1073          	csrw	mstatus,s10
1c009e44:	03410783          	lb	a5,52(sp)
1c009e48:	d7ed                	beqz	a5,1c009e32 <resnetCNN_Construct+0x502>
1c009e4a:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327904+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009e4e:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009e52:	0a010a23          	sb	zero,180(sp)
1c009e56:	0087a803          	lw	a6,8(a5)
1c009e5a:	000507b7          	lui	a5,0x50
1c009e5e:	0e078793          	addi	a5,a5,224 # 500e0 <__L1Cl+0x400e0>
1c009e62:	4010                	lw	a2,0(s0)
1c009e64:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009e66:	dd66                	sw	s9,184(sp)
1c009e68:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009e6a:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009e6c:	c5e6                	sw	s9,200(sp)
1c009e6e:	4701                	li	a4,0
1c009e70:	86e2                	mv	a3,s8
1c009e72:	95de                	add	a1,a1,s7
1c009e74:	b5448513          	addi	a0,s1,-1196
1c009e78:	9802                	jalr	a6
1c009e7a:	0b410783          	lb	a5,180(sp)
1c009e7e:	ef89                	bnez	a5,1c009e98 <resnetCNN_Construct+0x568>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009e80:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009e84:	4585                	li	a1,1
1c009e86:	01c00513          	li	a0,28
1c009e8a:	2b2090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009e8e:	300d1073          	csrw	mstatus,s10
1c009e92:	0b410783          	lb	a5,180(sp)
1c009e96:	d7ed                	beqz	a5,1c009e80 <resnetCNN_Construct+0x550>
			Size -= Chunk;
1c009e98:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c009e9c:	9be2                	add	s7,s7,s8
		while (Size) {
1c009e9e:	f60b12e3          	bnez	s6,1c009e02 <resnetCNN_Construct+0x4d2>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009ea2:	00056db7          	lui	s11,0x56
		int Size = 32, Base = 0;
1c009ea6:	02000b93          	li	s7,32
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009eaa:	710d8d93          	addi	s11,s11,1808 # 56710 <__L1Cl+0x46710>
  task->id = PI_TASK_NONE_ID;
1c009eae:	4c85                	li	s9,1
1c009eb0:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009eb4:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009eb8:	4010                	lw	a2,0(s0)
1c009eba:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009ebe:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354064+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009ec2:	95ee                	add	a1,a1,s11
1c009ec4:	101c                	addi	a5,sp,32
1c009ec6:	4705                	li	a4,1
1c009ec8:	86e2                	mv	a3,s8
1c009eca:	95da                	add	a1,a1,s6
1c009ecc:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009ece:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009ed0:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009ed2:	02010a23          	sb	zero,52(sp)
1c009ed6:	60c060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009eda:	03410783          	lb	a5,52(sp)
1c009ede:	ef89                	bnez	a5,1c009ef8 <resnetCNN_Construct+0x5c8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009ee0:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009ee4:	4585                	li	a1,1
1c009ee6:	01c00513          	li	a0,28
1c009eea:	252090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009eee:	300d1073          	csrw	mstatus,s10
1c009ef2:	03410783          	lb	a5,52(sp)
1c009ef6:	d7ed                	beqz	a5,1c009ee0 <resnetCNN_Construct+0x5b0>
1c009ef8:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327936+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009efc:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009f00:	0a010a23          	sb	zero,180(sp)
1c009f04:	0087a803          	lw	a6,8(a5)
1c009f08:	000507b7          	lui	a5,0x50
1c009f0c:	10078793          	addi	a5,a5,256 # 50100 <__L1Cl+0x40100>
1c009f10:	4010                	lw	a2,0(s0)
1c009f12:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009f14:	dd66                	sw	s9,184(sp)
1c009f16:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009f18:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009f1a:	c5e6                	sw	s9,200(sp)
1c009f1c:	4701                	li	a4,0
1c009f1e:	86e2                	mv	a3,s8
1c009f20:	95da                	add	a1,a1,s6
1c009f22:	b5448513          	addi	a0,s1,-1196
1c009f26:	9802                	jalr	a6
1c009f28:	0b410783          	lb	a5,180(sp)
1c009f2c:	ef89                	bnez	a5,1c009f46 <resnetCNN_Construct+0x616>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f2e:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009f32:	4585                	li	a1,1
1c009f34:	01c00513          	li	a0,28
1c009f38:	204090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009f3c:	300d1073          	csrw	mstatus,s10
1c009f40:	0b410783          	lb	a5,180(sp)
1c009f44:	d7ed                	beqz	a5,1c009f2e <resnetCNN_Construct+0x5fe>
			Size -= Chunk;
1c009f46:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c009f4a:	9b62                	add	s6,s6,s8
		while (Size) {
1c009f4c:	f60b92e3          	bnez	s7,1c009eb0 <resnetCNN_Construct+0x580>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354096+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009f50:	00056db7          	lui	s11,0x56
		int Size = 32, Base = 0;
1c009f54:	02000b13          	li	s6,32
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354096+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009f58:	730d8d93          	addi	s11,s11,1840 # 56730 <__L1Cl+0x46730>
  task->id = PI_TASK_NONE_ID;
1c009f5c:	4c85                	li	s9,1
1c009f5e:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c009f62:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354096+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009f66:	4010                	lw	a2,0(s0)
1c009f68:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c009f6c:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354096+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009f70:	95ee                	add	a1,a1,s11
1c009f72:	101c                	addi	a5,sp,32
1c009f74:	4705                	li	a4,1
1c009f76:	86e2                	mv	a3,s8
1c009f78:	95de                	add	a1,a1,s7
1c009f7a:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c009f7c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c009f7e:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c009f80:	02010a23          	sb	zero,52(sp)
1c009f84:	55e060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c009f88:	03410783          	lb	a5,52(sp)
1c009f8c:	ef89                	bnez	a5,1c009fa6 <resnetCNN_Construct+0x676>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009f8e:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009f92:	4585                	li	a1,1
1c009f94:	01c00513          	li	a0,28
1c009f98:	1a4090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009f9c:	300d1073          	csrw	mstatus,s10
1c009fa0:	03410783          	lb	a5,52(sp)
1c009fa4:	d7ed                	beqz	a5,1c009f8e <resnetCNN_Construct+0x65e>
1c009fa6:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327968+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c009faa:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c009fae:	0a010a23          	sb	zero,180(sp)
1c009fb2:	0087a803          	lw	a6,8(a5)
1c009fb6:	000507b7          	lui	a5,0x50
1c009fba:	12078793          	addi	a5,a5,288 # 50120 <__L1Cl+0x40120>
1c009fbe:	4010                	lw	a2,0(s0)
1c009fc0:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c009fc2:	dd66                	sw	s9,184(sp)
1c009fc4:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c009fc6:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c009fc8:	c5e6                	sw	s9,200(sp)
1c009fca:	4701                	li	a4,0
1c009fcc:	86e2                	mv	a3,s8
1c009fce:	95de                	add	a1,a1,s7
1c009fd0:	b5448513          	addi	a0,s1,-1196
1c009fd4:	9802                	jalr	a6
1c009fd6:	0b410783          	lb	a5,180(sp)
1c009fda:	ef89                	bnez	a5,1c009ff4 <resnetCNN_Construct+0x6c4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c009fdc:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c009fe0:	4585                	li	a1,1
1c009fe2:	01c00513          	li	a0,28
1c009fe6:	156090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c009fea:	300d1073          	csrw	mstatus,s10
1c009fee:	0b410783          	lb	a5,180(sp)
1c009ff2:	d7ed                	beqz	a5,1c009fdc <resnetCNN_Construct+0x6ac>
			Size -= Chunk;
1c009ff4:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c009ff8:	9be2                	add	s7,s7,s8
		while (Size) {
1c009ffa:	f60b12e3          	bnez	s6,1c009f5e <resnetCNN_Construct+0x62e>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354128+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c009ffe:	00056db7          	lui	s11,0x56
		int Size = 32, Base = 0;
1c00a002:	02000b93          	li	s7,32
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354128+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a006:	750d8d93          	addi	s11,s11,1872 # 56750 <__L1Cl+0x46750>
  task->id = PI_TASK_NONE_ID;
1c00a00a:	4c85                	li	s9,1
1c00a00c:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a010:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354128+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a014:	4010                	lw	a2,0(s0)
1c00a016:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a01a:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354128+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a01e:	95ee                	add	a1,a1,s11
1c00a020:	101c                	addi	a5,sp,32
1c00a022:	4705                	li	a4,1
1c00a024:	86e2                	mv	a3,s8
1c00a026:	95da                	add	a1,a1,s6
1c00a028:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a02a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a02c:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a02e:	02010a23          	sb	zero,52(sp)
1c00a032:	4b0060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a036:	03410783          	lb	a5,52(sp)
1c00a03a:	ef89                	bnez	a5,1c00a054 <resnetCNN_Construct+0x724>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a03c:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a040:	4585                	li	a1,1
1c00a042:	01c00513          	li	a0,28
1c00a046:	0f6090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a04a:	300d1073          	csrw	mstatus,s10
1c00a04e:	03410783          	lb	a5,52(sp)
1c00a052:	d7ed                	beqz	a5,1c00a03c <resnetCNN_Construct+0x70c>
1c00a054:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328000+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a058:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a05c:	0a010a23          	sb	zero,180(sp)
1c00a060:	0087a803          	lw	a6,8(a5)
1c00a064:	000507b7          	lui	a5,0x50
1c00a068:	14078793          	addi	a5,a5,320 # 50140 <__L1Cl+0x40140>
1c00a06c:	4010                	lw	a2,0(s0)
1c00a06e:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a070:	dd66                	sw	s9,184(sp)
1c00a072:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a074:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a076:	c5e6                	sw	s9,200(sp)
1c00a078:	4701                	li	a4,0
1c00a07a:	86e2                	mv	a3,s8
1c00a07c:	95da                	add	a1,a1,s6
1c00a07e:	b5448513          	addi	a0,s1,-1196
1c00a082:	9802                	jalr	a6
1c00a084:	0b410783          	lb	a5,180(sp)
1c00a088:	ef89                	bnez	a5,1c00a0a2 <resnetCNN_Construct+0x772>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a08a:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a08e:	4585                	li	a1,1
1c00a090:	01c00513          	li	a0,28
1c00a094:	0a8090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a098:	300d1073          	csrw	mstatus,s10
1c00a09c:	0b410783          	lb	a5,180(sp)
1c00a0a0:	d7ed                	beqz	a5,1c00a08a <resnetCNN_Construct+0x75a>
			Size -= Chunk;
1c00a0a2:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a0a6:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a0a8:	f60b92e3          	bnez	s7,1c00a00c <resnetCNN_Construct+0x6dc>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353680+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a0ac:	00056db7          	lui	s11,0x56
		int Size = 64, Base = 0;
1c00a0b0:	04000b13          	li	s6,64
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353680+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a0b4:	590d8d93          	addi	s11,s11,1424 # 56590 <__L1Cl+0x46590>
  task->id = PI_TASK_NONE_ID;
1c00a0b8:	4c85                	li	s9,1
1c00a0ba:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a0be:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353680+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a0c2:	4010                	lw	a2,0(s0)
1c00a0c4:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a0c8:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353680+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a0cc:	95ee                	add	a1,a1,s11
1c00a0ce:	101c                	addi	a5,sp,32
1c00a0d0:	4705                	li	a4,1
1c00a0d2:	86e2                	mv	a3,s8
1c00a0d4:	95de                	add	a1,a1,s7
1c00a0d6:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a0d8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a0da:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a0dc:	02010a23          	sb	zero,52(sp)
1c00a0e0:	402060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a0e4:	03410783          	lb	a5,52(sp)
1c00a0e8:	ef89                	bnez	a5,1c00a102 <resnetCNN_Construct+0x7d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a0ea:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a0ee:	4585                	li	a1,1
1c00a0f0:	01c00513          	li	a0,28
1c00a0f4:	048090ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a0f8:	300d1073          	csrw	mstatus,s10
1c00a0fc:	03410783          	lb	a5,52(sp)
1c00a100:	d7ed                	beqz	a5,1c00a0ea <resnetCNN_Construct+0x7ba>
1c00a102:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327552+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a106:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a10a:	0a010a23          	sb	zero,180(sp)
1c00a10e:	0087a803          	lw	a6,8(a5)
1c00a112:	000507b7          	lui	a5,0x50
1c00a116:	f8078793          	addi	a5,a5,-128 # 4ff80 <__L1Cl+0x3ff80>
1c00a11a:	4010                	lw	a2,0(s0)
1c00a11c:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a11e:	dd66                	sw	s9,184(sp)
1c00a120:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a122:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a124:	c5e6                	sw	s9,200(sp)
1c00a126:	4701                	li	a4,0
1c00a128:	86e2                	mv	a3,s8
1c00a12a:	95de                	add	a1,a1,s7
1c00a12c:	b5448513          	addi	a0,s1,-1196
1c00a130:	9802                	jalr	a6
1c00a132:	0b410783          	lb	a5,180(sp)
1c00a136:	ef89                	bnez	a5,1c00a150 <resnetCNN_Construct+0x820>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a138:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a13c:	4585                	li	a1,1
1c00a13e:	01c00513          	li	a0,28
1c00a142:	7fb080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a146:	300d1073          	csrw	mstatus,s10
1c00a14a:	0b410783          	lb	a5,180(sp)
1c00a14e:	d7ed                	beqz	a5,1c00a138 <resnetCNN_Construct+0x808>
			Size -= Chunk;
1c00a150:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a154:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a156:	f60b12e3          	bnez	s6,1c00a0ba <resnetCNN_Construct+0x78a>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353744+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a15a:	00056db7          	lui	s11,0x56
		int Size = 64, Base = 0;
1c00a15e:	04000b93          	li	s7,64
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353744+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a162:	5d0d8d93          	addi	s11,s11,1488 # 565d0 <__L1Cl+0x465d0>
  task->id = PI_TASK_NONE_ID;
1c00a166:	4c85                	li	s9,1
1c00a168:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a16c:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353744+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a170:	4010                	lw	a2,0(s0)
1c00a172:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a176:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353744+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a17a:	95ee                	add	a1,a1,s11
1c00a17c:	101c                	addi	a5,sp,32
1c00a17e:	4705                	li	a4,1
1c00a180:	86e2                	mv	a3,s8
1c00a182:	95da                	add	a1,a1,s6
1c00a184:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a186:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a188:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a18a:	02010a23          	sb	zero,52(sp)
1c00a18e:	354060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a192:	03410783          	lb	a5,52(sp)
1c00a196:	ef89                	bnez	a5,1c00a1b0 <resnetCNN_Construct+0x880>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a198:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a19c:	4585                	li	a1,1
1c00a19e:	01c00513          	li	a0,28
1c00a1a2:	79b080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a1a6:	300d1073          	csrw	mstatus,s10
1c00a1aa:	03410783          	lb	a5,52(sp)
1c00a1ae:	d7ed                	beqz	a5,1c00a198 <resnetCNN_Construct+0x868>
1c00a1b0:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327616+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a1b4:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a1b8:	0a010a23          	sb	zero,180(sp)
1c00a1bc:	0087a803          	lw	a6,8(a5)
1c00a1c0:	000507b7          	lui	a5,0x50
1c00a1c4:	fc078793          	addi	a5,a5,-64 # 4ffc0 <__L1Cl+0x3ffc0>
1c00a1c8:	4010                	lw	a2,0(s0)
1c00a1ca:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a1cc:	dd66                	sw	s9,184(sp)
1c00a1ce:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a1d0:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a1d2:	c5e6                	sw	s9,200(sp)
1c00a1d4:	4701                	li	a4,0
1c00a1d6:	86e2                	mv	a3,s8
1c00a1d8:	95da                	add	a1,a1,s6
1c00a1da:	b5448513          	addi	a0,s1,-1196
1c00a1de:	9802                	jalr	a6
1c00a1e0:	0b410783          	lb	a5,180(sp)
1c00a1e4:	ef89                	bnez	a5,1c00a1fe <resnetCNN_Construct+0x8ce>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a1e6:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a1ea:	4585                	li	a1,1
1c00a1ec:	01c00513          	li	a0,28
1c00a1f0:	74d080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a1f4:	300d1073          	csrw	mstatus,s10
1c00a1f8:	0b410783          	lb	a5,180(sp)
1c00a1fc:	d7ed                	beqz	a5,1c00a1e6 <resnetCNN_Construct+0x8b6>
			Size -= Chunk;
1c00a1fe:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a202:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a204:	f60b92e3          	bnez	s7,1c00a168 <resnetCNN_Construct+0x838>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353808+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a208:	00056d37          	lui	s10,0x56
		int Size = 64, Base = 0;
1c00a20c:	04000b13          	li	s6,64
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353808+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a210:	610d0d13          	addi	s10,s10,1552 # 56610 <__L1Cl+0x46610>
  task->id = PI_TASK_NONE_ID;
1c00a214:	4c85                	li	s9,1
1c00a216:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a21a:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353808+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a21e:	4010                	lw	a2,0(s0)
1c00a220:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a224:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353808+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a228:	95ea                	add	a1,a1,s10
1c00a22a:	101c                	addi	a5,sp,32
1c00a22c:	4705                	li	a4,1
1c00a22e:	86e2                	mv	a3,s8
1c00a230:	95de                	add	a1,a1,s7
1c00a232:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a234:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a236:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a238:	02010a23          	sb	zero,52(sp)
1c00a23c:	2a6060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a240:	03410783          	lb	a5,52(sp)
1c00a244:	ef89                	bnez	a5,1c00a25e <resnetCNN_Construct+0x92e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a246:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a24a:	4585                	li	a1,1
1c00a24c:	01c00513          	li	a0,28
1c00a250:	6ed080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a254:	300d9073          	csrw	mstatus,s11
1c00a258:	03410783          	lb	a5,52(sp)
1c00a25c:	d7ed                	beqz	a5,1c00a246 <resnetCNN_Construct+0x916>
1c00a25e:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327680+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a262:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a266:	0a010a23          	sb	zero,180(sp)
1c00a26a:	0087a803          	lw	a6,8(a5)
1c00a26e:	4010                	lw	a2,0(s0)
1c00a270:	000507b7          	lui	a5,0x50
1c00a274:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a276:	dd66                	sw	s9,184(sp)
1c00a278:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a27a:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a27c:	c5e6                	sw	s9,200(sp)
1c00a27e:	4701                	li	a4,0
1c00a280:	86e2                	mv	a3,s8
1c00a282:	95de                	add	a1,a1,s7
1c00a284:	b5448513          	addi	a0,s1,-1196
1c00a288:	9802                	jalr	a6
1c00a28a:	0b410783          	lb	a5,180(sp)
1c00a28e:	ef89                	bnez	a5,1c00a2a8 <resnetCNN_Construct+0x978>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a290:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a294:	4585                	li	a1,1
1c00a296:	01c00513          	li	a0,28
1c00a29a:	6a3080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a29e:	300d9073          	csrw	mstatus,s11
1c00a2a2:	0b410783          	lb	a5,180(sp)
1c00a2a6:	d7ed                	beqz	a5,1c00a290 <resnetCNN_Construct+0x960>
			Size -= Chunk;
1c00a2a8:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a2ac:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a2ae:	f60b14e3          	bnez	s6,1c00a216 <resnetCNN_Construct+0x8e6>
		int Size = 18432, Base = 0;
1c00a2b2:	6b95                	lui	s7,0x5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 276480+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a2b4:	00044d37          	lui	s10,0x44
		int Size = 18432, Base = 0;
1c00a2b8:	800b8b93          	addi	s7,s7,-2048 # 4800 <__rt_stack_size+0x4000>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 276480+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a2bc:	800d0d13          	addi	s10,s10,-2048 # 43800 <__L1Cl+0x33800>
  task->id = PI_TASK_NONE_ID;
1c00a2c0:	4c85                	li	s9,1
1c00a2c2:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a2c6:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 276480+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a2ca:	4010                	lw	a2,0(s0)
1c00a2cc:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a2d0:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 276480+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a2d4:	95ea                	add	a1,a1,s10
1c00a2d6:	101c                	addi	a5,sp,32
1c00a2d8:	4705                	li	a4,1
1c00a2da:	86e2                	mv	a3,s8
1c00a2dc:	95da                	add	a1,a1,s6
1c00a2de:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a2e0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a2e2:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a2e4:	02010a23          	sb	zero,52(sp)
1c00a2e8:	1fa060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a2ec:	03410783          	lb	a5,52(sp)
1c00a2f0:	ef89                	bnez	a5,1c00a30a <resnetCNN_Construct+0x9da>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a2f2:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a2f6:	4585                	li	a1,1
1c00a2f8:	01c00513          	li	a0,28
1c00a2fc:	641080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a300:	300d9073          	csrw	mstatus,s11
1c00a304:	03410783          	lb	a5,52(sp)
1c00a308:	d7ed                	beqz	a5,1c00a2f2 <resnetCNN_Construct+0x9c2>
1c00a30a:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 276480+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a30e:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a312:	0a010a23          	sb	zero,180(sp)
1c00a316:	0087a803          	lw	a6,8(a5) # 50008 <__L1Cl+0x40008>
1c00a31a:	4010                	lw	a2,0(s0)
1c00a31c:	95ea                	add	a1,a1,s10
1c00a31e:	111c                	addi	a5,sp,160
  task->id = PI_TASK_NONE_ID;
1c00a320:	dd66                	sw	s9,184(sp)
  task->arg[0] = (uint32_t)0;
1c00a322:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a324:	c5e6                	sw	s9,200(sp)
1c00a326:	4701                	li	a4,0
1c00a328:	86e2                	mv	a3,s8
1c00a32a:	95da                	add	a1,a1,s6
1c00a32c:	b5448513          	addi	a0,s1,-1196
1c00a330:	9802                	jalr	a6
1c00a332:	0b410783          	lb	a5,180(sp)
1c00a336:	ef89                	bnez	a5,1c00a350 <resnetCNN_Construct+0xa20>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a338:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a33c:	4585                	li	a1,1
1c00a33e:	01c00513          	li	a0,28
1c00a342:	5fb080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a346:	300d9073          	csrw	mstatus,s11
1c00a34a:	0b410783          	lb	a5,180(sp)
1c00a34e:	d7ed                	beqz	a5,1c00a338 <resnetCNN_Construct+0xa08>
			Size -= Chunk;
1c00a350:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a354:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a356:	f60b96e3          	bnez	s7,1c00a2c2 <resnetCNN_Construct+0x992>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353872+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a35a:	00056db7          	lui	s11,0x56
		int Size = 64, Base = 0;
1c00a35e:	04000b13          	li	s6,64
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353872+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a362:	650d8d93          	addi	s11,s11,1616 # 56650 <__L1Cl+0x46650>
  task->id = PI_TASK_NONE_ID;
1c00a366:	4c85                	li	s9,1
1c00a368:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a36c:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353872+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a370:	4010                	lw	a2,0(s0)
1c00a372:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a376:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353872+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a37a:	95ee                	add	a1,a1,s11
1c00a37c:	101c                	addi	a5,sp,32
1c00a37e:	4705                	li	a4,1
1c00a380:	86e2                	mv	a3,s8
1c00a382:	95de                	add	a1,a1,s7
1c00a384:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a386:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a388:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a38a:	02010a23          	sb	zero,52(sp)
1c00a38e:	154060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a392:	03410783          	lb	a5,52(sp)
1c00a396:	ef89                	bnez	a5,1c00a3b0 <resnetCNN_Construct+0xa80>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a398:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a39c:	4585                	li	a1,1
1c00a39e:	01c00513          	li	a0,28
1c00a3a2:	59b080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a3a6:	300d1073          	csrw	mstatus,s10
1c00a3aa:	03410783          	lb	a5,52(sp)
1c00a3ae:	d7ed                	beqz	a5,1c00a398 <resnetCNN_Construct+0xa68>
1c00a3b0:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327744+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a3b4:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a3b8:	0a010a23          	sb	zero,180(sp)
1c00a3bc:	0087a803          	lw	a6,8(a5)
1c00a3c0:	000507b7          	lui	a5,0x50
1c00a3c4:	04078793          	addi	a5,a5,64 # 50040 <__L1Cl+0x40040>
1c00a3c8:	4010                	lw	a2,0(s0)
1c00a3ca:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a3cc:	dd66                	sw	s9,184(sp)
1c00a3ce:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a3d0:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a3d2:	c5e6                	sw	s9,200(sp)
1c00a3d4:	4701                	li	a4,0
1c00a3d6:	86e2                	mv	a3,s8
1c00a3d8:	95de                	add	a1,a1,s7
1c00a3da:	b5448513          	addi	a0,s1,-1196
1c00a3de:	9802                	jalr	a6
1c00a3e0:	0b410783          	lb	a5,180(sp)
1c00a3e4:	ef89                	bnez	a5,1c00a3fe <resnetCNN_Construct+0xace>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a3e6:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a3ea:	4585                	li	a1,1
1c00a3ec:	01c00513          	li	a0,28
1c00a3f0:	54d080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a3f4:	300d1073          	csrw	mstatus,s10
1c00a3f8:	0b410783          	lb	a5,180(sp)
1c00a3fc:	d7ed                	beqz	a5,1c00a3e6 <resnetCNN_Construct+0xab6>
			Size -= Chunk;
1c00a3fe:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a402:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a404:	f60b12e3          	bnez	s6,1c00a368 <resnetCNN_Construct+0xa38>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353936+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a408:	00056db7          	lui	s11,0x56
		int Size = 64, Base = 0;
1c00a40c:	04000c13          	li	s8,64
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353936+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a410:	690d8d93          	addi	s11,s11,1680 # 56690 <__L1Cl+0x46690>
  task->id = PI_TASK_NONE_ID;
1c00a414:	4c85                	li	s9,1
1c00a416:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a41a:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353936+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a41e:	4010                	lw	a2,0(s0)
1c00a420:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a424:	04fc4bb3          	p.min	s7,s8,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353936+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a428:	95ee                	add	a1,a1,s11
1c00a42a:	101c                	addi	a5,sp,32
1c00a42c:	4705                	li	a4,1
1c00a42e:	86de                	mv	a3,s7
1c00a430:	95da                	add	a1,a1,s6
1c00a432:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a434:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a436:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a438:	02010a23          	sb	zero,52(sp)
1c00a43c:	0a6060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a440:	03410783          	lb	a5,52(sp)
1c00a444:	ef89                	bnez	a5,1c00a45e <resnetCNN_Construct+0xb2e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a446:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a44a:	4585                	li	a1,1
1c00a44c:	01c00513          	li	a0,28
1c00a450:	4ed080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a454:	300d1073          	csrw	mstatus,s10
1c00a458:	03410783          	lb	a5,52(sp)
1c00a45c:	d7ed                	beqz	a5,1c00a446 <resnetCNN_Construct+0xb16>
1c00a45e:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327808+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a462:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a466:	0a010a23          	sb	zero,180(sp)
1c00a46a:	0087a803          	lw	a6,8(a5)
1c00a46e:	000507b7          	lui	a5,0x50
1c00a472:	08078793          	addi	a5,a5,128 # 50080 <__L1Cl+0x40080>
1c00a476:	4010                	lw	a2,0(s0)
1c00a478:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a47a:	dd66                	sw	s9,184(sp)
1c00a47c:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a47e:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a480:	c5e6                	sw	s9,200(sp)
1c00a482:	4701                	li	a4,0
1c00a484:	86de                	mv	a3,s7
1c00a486:	95da                	add	a1,a1,s6
1c00a488:	b5448513          	addi	a0,s1,-1196
1c00a48c:	9802                	jalr	a6
1c00a48e:	0b410783          	lb	a5,180(sp)
1c00a492:	ef89                	bnez	a5,1c00a4ac <resnetCNN_Construct+0xb7c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a494:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a498:	4585                	li	a1,1
1c00a49a:	01c00513          	li	a0,28
1c00a49e:	49f080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a4a2:	300d1073          	csrw	mstatus,s10
1c00a4a6:	0b410783          	lb	a5,180(sp)
1c00a4aa:	d7ed                	beqz	a5,1c00a494 <resnetCNN_Construct+0xb64>
			Size -= Chunk;
1c00a4ac:	417c0c33          	sub	s8,s8,s7
			Base += Chunk;
1c00a4b0:	9b5e                	add	s6,s6,s7
		while (Size) {
1c00a4b2:	f60c12e3          	bnez	s8,1c00a416 <resnetCNN_Construct+0xae6>
		int Size = 73728, Base = 0;
1c00a4b6:	6bc9                	lui	s7,0x12
  task->id = PI_TASK_NONE_ID;
1c00a4b8:	4d05                	li	s10,1
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a4ba:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a4be:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a4c2:	4010                	lw	a2,0(s0)
1c00a4c4:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a4c8:	04fbccb3          	p.min	s9,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 0+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a4cc:	4705                	li	a4,1
1c00a4ce:	101c                	addi	a5,sp,32
1c00a4d0:	86e6                	mv	a3,s9
1c00a4d2:	95e2                	add	a1,a1,s8
1c00a4d4:	dc6a                	sw	s10,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a4d6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a4d8:	c4ea                	sw	s10,72(sp)
  task->done = 0;
1c00a4da:	02010a23          	sb	zero,52(sp)
1c00a4de:	004060ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a4e2:	03410783          	lb	a5,52(sp)
1c00a4e6:	ef89                	bnez	a5,1c00a500 <resnetCNN_Construct+0xbd0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a4e8:	30047b73          	csrrci	s6,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a4ec:	4585                	li	a1,1
1c00a4ee:	01c00513          	li	a0,28
1c00a4f2:	44b080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a4f6:	300b1073          	csrw	mstatus,s6
1c00a4fa:	03410783          	lb	a5,52(sp)
1c00a4fe:	d7ed                	beqz	a5,1c00a4e8 <resnetCNN_Construct+0xbb8>
1c00a500:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 0+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a504:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a508:	0a010a23          	sb	zero,180(sp)
1c00a50c:	0087a803          	lw	a6,8(a5)
1c00a510:	4010                	lw	a2,0(s0)
1c00a512:	111c                	addi	a5,sp,160
  task->id = PI_TASK_NONE_ID;
1c00a514:	dd6a                	sw	s10,184(sp)
  task->arg[0] = (uint32_t)0;
1c00a516:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a518:	c5ea                	sw	s10,200(sp)
1c00a51a:	4701                	li	a4,0
1c00a51c:	86e6                	mv	a3,s9
1c00a51e:	95e2                	add	a1,a1,s8
1c00a520:	b5448513          	addi	a0,s1,-1196
1c00a524:	9802                	jalr	a6
1c00a526:	0b410783          	lb	a5,180(sp)
1c00a52a:	ef89                	bnez	a5,1c00a544 <resnetCNN_Construct+0xc14>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a52c:	30047b73          	csrrci	s6,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a530:	4585                	li	a1,1
1c00a532:	01c00513          	li	a0,28
1c00a536:	407080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a53a:	300b1073          	csrw	mstatus,s6
1c00a53e:	0b410783          	lb	a5,180(sp)
1c00a542:	d7ed                	beqz	a5,1c00a52c <resnetCNN_Construct+0xbfc>
			Size -= Chunk;
1c00a544:	419b8bb3          	sub	s7,s7,s9
			Base += Chunk;
1c00a548:	9c66                	add	s8,s8,s9
		while (Size) {
1c00a54a:	f60b98e3          	bnez	s7,1c00a4ba <resnetCNN_Construct+0xb8a>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353296+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a54e:	00056db7          	lui	s11,0x56
		int Size = 128, Base = 0;
1c00a552:	08000b13          	li	s6,128
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353296+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a556:	410d8d93          	addi	s11,s11,1040 # 56410 <__L1Cl+0x46410>
  task->id = PI_TASK_NONE_ID;
1c00a55a:	4c85                	li	s9,1
1c00a55c:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a560:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353296+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a564:	4010                	lw	a2,0(s0)
1c00a566:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a56a:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353296+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a56e:	95ee                	add	a1,a1,s11
1c00a570:	101c                	addi	a5,sp,32
1c00a572:	4705                	li	a4,1
1c00a574:	86e2                	mv	a3,s8
1c00a576:	95de                	add	a1,a1,s7
1c00a578:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a57a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a57c:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a57e:	02010a23          	sb	zero,52(sp)
1c00a582:	761050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a586:	03410783          	lb	a5,52(sp)
1c00a58a:	ef89                	bnez	a5,1c00a5a4 <resnetCNN_Construct+0xc74>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a58c:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a590:	4585                	li	a1,1
1c00a592:	01c00513          	li	a0,28
1c00a596:	3a7080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a59a:	300d1073          	csrw	mstatus,s10
1c00a59e:	03410783          	lb	a5,52(sp)
1c00a5a2:	d7ed                	beqz	a5,1c00a58c <resnetCNN_Construct+0xc5c>
1c00a5a4:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327168+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a5a8:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a5ac:	0a010a23          	sb	zero,180(sp)
1c00a5b0:	0087a803          	lw	a6,8(a5)
1c00a5b4:	000507b7          	lui	a5,0x50
1c00a5b8:	e0078793          	addi	a5,a5,-512 # 4fe00 <__L1Cl+0x3fe00>
1c00a5bc:	4010                	lw	a2,0(s0)
1c00a5be:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a5c0:	dd66                	sw	s9,184(sp)
1c00a5c2:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a5c4:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a5c6:	c5e6                	sw	s9,200(sp)
1c00a5c8:	4701                	li	a4,0
1c00a5ca:	86e2                	mv	a3,s8
1c00a5cc:	95de                	add	a1,a1,s7
1c00a5ce:	b5448513          	addi	a0,s1,-1196
1c00a5d2:	9802                	jalr	a6
1c00a5d4:	0b410783          	lb	a5,180(sp)
1c00a5d8:	ef89                	bnez	a5,1c00a5f2 <resnetCNN_Construct+0xcc2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a5da:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a5de:	4585                	li	a1,1
1c00a5e0:	01c00513          	li	a0,28
1c00a5e4:	359080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a5e8:	300d1073          	csrw	mstatus,s10
1c00a5ec:	0b410783          	lb	a5,180(sp)
1c00a5f0:	d7ed                	beqz	a5,1c00a5da <resnetCNN_Construct+0xcaa>
			Size -= Chunk;
1c00a5f2:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a5f6:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a5f8:	f60b12e3          	bnez	s6,1c00a55c <resnetCNN_Construct+0xc2c>
		int Size = 73728, Base = 0;
1c00a5fc:	6bc9                	lui	s7,0x12
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 73728+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a5fe:	6d49                	lui	s10,0x12
  task->id = PI_TASK_NONE_ID;
1c00a600:	4c85                	li	s9,1
1c00a602:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a606:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 73728+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a60a:	4010                	lw	a2,0(s0)
1c00a60c:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a610:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 73728+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a614:	95ea                	add	a1,a1,s10
1c00a616:	101c                	addi	a5,sp,32
1c00a618:	4705                	li	a4,1
1c00a61a:	86e2                	mv	a3,s8
1c00a61c:	95da                	add	a1,a1,s6
1c00a61e:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a620:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a622:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a624:	02010a23          	sb	zero,52(sp)
1c00a628:	6bb050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a62c:	03410783          	lb	a5,52(sp)
1c00a630:	ef89                	bnez	a5,1c00a64a <resnetCNN_Construct+0xd1a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a632:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a636:	4585                	li	a1,1
1c00a638:	01c00513          	li	a0,28
1c00a63c:	301080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a640:	300d9073          	csrw	mstatus,s11
1c00a644:	03410783          	lb	a5,52(sp)
1c00a648:	d7ed                	beqz	a5,1c00a632 <resnetCNN_Construct+0xd02>
1c00a64a:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 73728+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a64e:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a652:	0a010a23          	sb	zero,180(sp)
1c00a656:	0087a803          	lw	a6,8(a5)
1c00a65a:	4010                	lw	a2,0(s0)
1c00a65c:	95ea                	add	a1,a1,s10
1c00a65e:	111c                	addi	a5,sp,160
  task->id = PI_TASK_NONE_ID;
1c00a660:	dd66                	sw	s9,184(sp)
  task->arg[0] = (uint32_t)0;
1c00a662:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a664:	c5e6                	sw	s9,200(sp)
1c00a666:	4701                	li	a4,0
1c00a668:	86e2                	mv	a3,s8
1c00a66a:	95da                	add	a1,a1,s6
1c00a66c:	b5448513          	addi	a0,s1,-1196
1c00a670:	9802                	jalr	a6
1c00a672:	0b410783          	lb	a5,180(sp)
1c00a676:	ef89                	bnez	a5,1c00a690 <resnetCNN_Construct+0xd60>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a678:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a67c:	4585                	li	a1,1
1c00a67e:	01c00513          	li	a0,28
1c00a682:	2bb080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a686:	300d9073          	csrw	mstatus,s11
1c00a68a:	0b410783          	lb	a5,180(sp)
1c00a68e:	d7ed                	beqz	a5,1c00a678 <resnetCNN_Construct+0xd48>
			Size -= Chunk;
1c00a690:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a694:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a696:	f60b96e3          	bnez	s7,1c00a602 <resnetCNN_Construct+0xcd2>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353424+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a69a:	00056db7          	lui	s11,0x56
		int Size = 128, Base = 0;
1c00a69e:	08000b13          	li	s6,128
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353424+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a6a2:	490d8d93          	addi	s11,s11,1168 # 56490 <__L1Cl+0x46490>
  task->id = PI_TASK_NONE_ID;
1c00a6a6:	4c85                	li	s9,1
1c00a6a8:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a6ac:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353424+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a6b0:	4010                	lw	a2,0(s0)
1c00a6b2:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a6b6:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353424+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a6ba:	95ee                	add	a1,a1,s11
1c00a6bc:	101c                	addi	a5,sp,32
1c00a6be:	4705                	li	a4,1
1c00a6c0:	86e2                	mv	a3,s8
1c00a6c2:	95de                	add	a1,a1,s7
1c00a6c4:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a6c6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a6c8:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a6ca:	02010a23          	sb	zero,52(sp)
1c00a6ce:	615050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a6d2:	03410783          	lb	a5,52(sp)
1c00a6d6:	ef89                	bnez	a5,1c00a6f0 <resnetCNN_Construct+0xdc0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a6d8:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a6dc:	4585                	li	a1,1
1c00a6de:	01c00513          	li	a0,28
1c00a6e2:	25b080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a6e6:	300d1073          	csrw	mstatus,s10
1c00a6ea:	03410783          	lb	a5,52(sp)
1c00a6ee:	d7ed                	beqz	a5,1c00a6d8 <resnetCNN_Construct+0xda8>
1c00a6f0:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327296+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a6f4:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a6f8:	0a010a23          	sb	zero,180(sp)
1c00a6fc:	0087a803          	lw	a6,8(a5)
1c00a700:	000507b7          	lui	a5,0x50
1c00a704:	e8078793          	addi	a5,a5,-384 # 4fe80 <__L1Cl+0x3fe80>
1c00a708:	4010                	lw	a2,0(s0)
1c00a70a:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a70c:	dd66                	sw	s9,184(sp)
1c00a70e:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a710:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a712:	c5e6                	sw	s9,200(sp)
1c00a714:	4701                	li	a4,0
1c00a716:	86e2                	mv	a3,s8
1c00a718:	95de                	add	a1,a1,s7
1c00a71a:	b5448513          	addi	a0,s1,-1196
1c00a71e:	9802                	jalr	a6
1c00a720:	0b410783          	lb	a5,180(sp)
1c00a724:	ef89                	bnez	a5,1c00a73e <resnetCNN_Construct+0xe0e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a726:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a72a:	4585                	li	a1,1
1c00a72c:	01c00513          	li	a0,28
1c00a730:	20d080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a734:	300d1073          	csrw	mstatus,s10
1c00a738:	0b410783          	lb	a5,180(sp)
1c00a73c:	d7ed                	beqz	a5,1c00a726 <resnetCNN_Construct+0xdf6>
			Size -= Chunk;
1c00a73e:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a742:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a744:	f60b12e3          	bnez	s6,1c00a6a8 <resnetCNN_Construct+0xd78>
		int Size = 73728, Base = 0;
1c00a748:	6bc9                	lui	s7,0x12
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 147456+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a74a:	00024d37          	lui	s10,0x24
  task->id = PI_TASK_NONE_ID;
1c00a74e:	4c85                	li	s9,1
1c00a750:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a754:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 147456+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a758:	4010                	lw	a2,0(s0)
1c00a75a:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a75e:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 147456+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a762:	95ea                	add	a1,a1,s10
1c00a764:	101c                	addi	a5,sp,32
1c00a766:	4705                	li	a4,1
1c00a768:	86e2                	mv	a3,s8
1c00a76a:	95da                	add	a1,a1,s6
1c00a76c:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a76e:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a770:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a772:	02010a23          	sb	zero,52(sp)
1c00a776:	56d050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a77a:	03410783          	lb	a5,52(sp)
1c00a77e:	ef89                	bnez	a5,1c00a798 <resnetCNN_Construct+0xe68>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a780:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a784:	4585                	li	a1,1
1c00a786:	01c00513          	li	a0,28
1c00a78a:	1b3080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a78e:	300d9073          	csrw	mstatus,s11
1c00a792:	03410783          	lb	a5,52(sp)
1c00a796:	d7ed                	beqz	a5,1c00a780 <resnetCNN_Construct+0xe50>
1c00a798:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 147456+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a79c:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a7a0:	0a010a23          	sb	zero,180(sp)
1c00a7a4:	0087a803          	lw	a6,8(a5)
1c00a7a8:	4010                	lw	a2,0(s0)
1c00a7aa:	95ea                	add	a1,a1,s10
1c00a7ac:	111c                	addi	a5,sp,160
  task->id = PI_TASK_NONE_ID;
1c00a7ae:	dd66                	sw	s9,184(sp)
  task->arg[0] = (uint32_t)0;
1c00a7b0:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a7b2:	c5e6                	sw	s9,200(sp)
1c00a7b4:	4701                	li	a4,0
1c00a7b6:	86e2                	mv	a3,s8
1c00a7b8:	95da                	add	a1,a1,s6
1c00a7ba:	b5448513          	addi	a0,s1,-1196
1c00a7be:	9802                	jalr	a6
1c00a7c0:	0b410783          	lb	a5,180(sp)
1c00a7c4:	ef89                	bnez	a5,1c00a7de <resnetCNN_Construct+0xeae>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a7c6:	30047df3          	csrrci	s11,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a7ca:	4585                	li	a1,1
1c00a7cc:	01c00513          	li	a0,28
1c00a7d0:	16d080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a7d4:	300d9073          	csrw	mstatus,s11
1c00a7d8:	0b410783          	lb	a5,180(sp)
1c00a7dc:	d7ed                	beqz	a5,1c00a7c6 <resnetCNN_Construct+0xe96>
			Size -= Chunk;
1c00a7de:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a7e2:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a7e4:	f60b96e3          	bnez	s7,1c00a750 <resnetCNN_Construct+0xe20>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353552+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a7e8:	00056db7          	lui	s11,0x56
		int Size = 128, Base = 0;
1c00a7ec:	08000b13          	li	s6,128
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353552+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a7f0:	510d8d93          	addi	s11,s11,1296 # 56510 <__L1Cl+0x46510>
  task->id = PI_TASK_NONE_ID;
1c00a7f4:	4c85                	li	s9,1
1c00a7f6:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a7fa:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353552+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a7fe:	4010                	lw	a2,0(s0)
1c00a800:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a804:	04fb4c33          	p.min	s8,s6,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353552+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a808:	95ee                	add	a1,a1,s11
1c00a80a:	101c                	addi	a5,sp,32
1c00a80c:	4705                	li	a4,1
1c00a80e:	86e2                	mv	a3,s8
1c00a810:	95de                	add	a1,a1,s7
1c00a812:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a814:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a816:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a818:	02010a23          	sb	zero,52(sp)
1c00a81c:	4c7050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a820:	03410783          	lb	a5,52(sp)
1c00a824:	ef89                	bnez	a5,1c00a83e <resnetCNN_Construct+0xf0e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a826:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a82a:	4585                	li	a1,1
1c00a82c:	01c00513          	li	a0,28
1c00a830:	10d080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a834:	300d1073          	csrw	mstatus,s10
1c00a838:	03410783          	lb	a5,52(sp)
1c00a83c:	d7ed                	beqz	a5,1c00a826 <resnetCNN_Construct+0xef6>
1c00a83e:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327424+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a842:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a846:	0a010a23          	sb	zero,180(sp)
1c00a84a:	0087a803          	lw	a6,8(a5)
1c00a84e:	000507b7          	lui	a5,0x50
1c00a852:	f0078793          	addi	a5,a5,-256 # 4ff00 <__L1Cl+0x3ff00>
1c00a856:	4010                	lw	a2,0(s0)
1c00a858:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a85a:	dd66                	sw	s9,184(sp)
1c00a85c:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a85e:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a860:	c5e6                	sw	s9,200(sp)
1c00a862:	4701                	li	a4,0
1c00a864:	86e2                	mv	a3,s8
1c00a866:	95de                	add	a1,a1,s7
1c00a868:	b5448513          	addi	a0,s1,-1196
1c00a86c:	9802                	jalr	a6
1c00a86e:	0b410783          	lb	a5,180(sp)
1c00a872:	ef89                	bnez	a5,1c00a88c <resnetCNN_Construct+0xf5c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a874:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a878:	4585                	li	a1,1
1c00a87a:	01c00513          	li	a0,28
1c00a87e:	0bf080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a882:	300d1073          	csrw	mstatus,s10
1c00a886:	0b410783          	lb	a5,180(sp)
1c00a88a:	d7ed                	beqz	a5,1c00a874 <resnetCNN_Construct+0xf44>
			Size -= Chunk;
1c00a88c:	418b0b33          	sub	s6,s6,s8
			Base += Chunk;
1c00a890:	9be2                	add	s7,s7,s8
		while (Size) {
1c00a892:	f60b12e3          	bnez	s6,1c00a7f6 <resnetCNN_Construct+0xec6>
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354240+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a896:	00056db7          	lui	s11,0x56
		int Size = 14, Base = 0;
1c00a89a:	4bb9                	li	s7,14
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354240+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a89c:	7c0d8d93          	addi	s11,s11,1984 # 567c0 <__L1Cl+0x467c0>
  task->id = PI_TASK_NONE_ID;
1c00a8a0:	4c85                	li	s9,1
1c00a8a2:	ae89a583          	lw	a1,-1304(s3)
			int Chunk = Min(Size, 1024);
1c00a8a6:	40000793          	li	a5,1024
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354240+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a8aa:	4010                	lw	a2,0(s0)
1c00a8ac:	01892503          	lw	a0,24(s2)
			int Chunk = Min(Size, 1024);
1c00a8b0:	04fbcc33          	p.min	s8,s7,a5
			AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354240+Base), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 0, &UchanHF1);
1c00a8b4:	95ee                	add	a1,a1,s11
1c00a8b6:	101c                	addi	a5,sp,32
1c00a8b8:	4705                	li	a4,1
1c00a8ba:	86e2                	mv	a3,s8
1c00a8bc:	95da                	add	a1,a1,s6
1c00a8be:	dc66                	sw	s9,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a8c0:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a8c2:	c4e6                	sw	s9,72(sp)
  task->done = 0;
1c00a8c4:	02010a23          	sb	zero,52(sp)
1c00a8c8:	41b050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a8cc:	03410783          	lb	a5,52(sp)
1c00a8d0:	ef89                	bnez	a5,1c00a8ea <resnetCNN_Construct+0xfba>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a8d2:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a8d6:	4585                	li	a1,1
1c00a8d8:	01c00513          	li	a0,28
1c00a8dc:	061080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a8e0:	300d1073          	csrw	mstatus,s10
1c00a8e4:	03410783          	lb	a5,52(sp)
1c00a8e8:	d7ed                	beqz	a5,1c00a8d2 <resnetCNN_Construct+0xfa2>
1c00a8ea:	b544a783          	lw	a5,-1196(s1)
			AT_HYPERRAM_FC_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328064+Base), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 0), Chunk, 1, &UchanHR2);
1c00a8ee:	b70a2583          	lw	a1,-1168(s4)
  task->done = 0;
1c00a8f2:	0a010a23          	sb	zero,180(sp)
1c00a8f6:	0087a803          	lw	a6,8(a5)
1c00a8fa:	000507b7          	lui	a5,0x50
1c00a8fe:	18078793          	addi	a5,a5,384 # 50180 <__L1Cl+0x40180>
1c00a902:	4010                	lw	a2,0(s0)
1c00a904:	95be                	add	a1,a1,a5
  task->id = PI_TASK_NONE_ID;
1c00a906:	dd66                	sw	s9,184(sp)
1c00a908:	111c                	addi	a5,sp,160
  task->arg[0] = (uint32_t)0;
1c00a90a:	d302                	sw	zero,164(sp)
  task->implem.keep = 1;
1c00a90c:	c5e6                	sw	s9,200(sp)
1c00a90e:	4701                	li	a4,0
1c00a910:	86e2                	mv	a3,s8
1c00a912:	95da                	add	a1,a1,s6
1c00a914:	b5448513          	addi	a0,s1,-1196
1c00a918:	9802                	jalr	a6
1c00a91a:	0b410783          	lb	a5,180(sp)
1c00a91e:	ef89                	bnez	a5,1c00a938 <resnetCNN_Construct+0x1008>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a920:	30047d73          	csrrci	s10,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a924:	4585                	li	a1,1
1c00a926:	01c00513          	li	a0,28
1c00a92a:	013080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a92e:	300d1073          	csrw	mstatus,s10
1c00a932:	0b410783          	lb	a5,180(sp)
1c00a936:	d7ed                	beqz	a5,1c00a920 <resnetCNN_Construct+0xff0>
			Size -= Chunk;
1c00a938:	418b8bb3          	sub	s7,s7,s8
			Base += Chunk;
1c00a93c:	9b62                	add	s6,s6,s8
		while (Size) {
1c00a93e:	f60b92e3          	bnez	s7,1c00a8a2 <resnetCNN_Construct+0xf72>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 352000), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 62208), 784, 0, &UchanHF1);
1c00a942:	400c                	lw	a1,0(s0)
1c00a944:	663d                	lui	a2,0xf
1c00a946:	ae89a503          	lw	a0,-1304(s3)
1c00a94a:	30060613          	addi	a2,a2,768 # f300 <__rt_stack_size+0xeb00>
1c00a94e:	962e                	add	a2,a2,a1
1c00a950:	000565b7          	lui	a1,0x56
1c00a954:	f0058593          	addi	a1,a1,-256 # 55f00 <__L1Cl+0x45f00>
1c00a958:	95aa                	add	a1,a1,a0
1c00a95a:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00a95e:	4805                	li	a6,1
1c00a960:	101c                	addi	a5,sp,32
1c00a962:	4705                	li	a4,1
1c00a964:	31000693          	li	a3,784
1c00a968:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a96a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a96c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00a96e:	02010a23          	sb	zero,52(sp)
1c00a972:	371050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a976:	03410783          	lb	a5,52(sp)
1c00a97a:	ef89                	bnez	a5,1c00a994 <resnetCNN_Construct+0x1064>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a97c:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a980:	4585                	li	a1,1
1c00a982:	01c00513          	li	a0,28
1c00a986:	7b6080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a98a:	300a1073          	csrw	mstatus,s4
1c00a98e:	03410783          	lb	a5,52(sp)
1c00a992:	d7ed                	beqz	a5,1c00a97c <resnetCNN_Construct+0x104c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354160), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 62992), 16, 0, &UchanHF1);
1c00a994:	400c                	lw	a1,0(s0)
1c00a996:	663d                	lui	a2,0xf
1c00a998:	ae89a503          	lw	a0,-1304(s3)
1c00a99c:	61060613          	addi	a2,a2,1552 # f610 <__rt_stack_size+0xee10>
1c00a9a0:	962e                	add	a2,a2,a1
1c00a9a2:	000565b7          	lui	a1,0x56
1c00a9a6:	77058593          	addi	a1,a1,1904 # 56770 <__L1Cl+0x46770>
1c00a9aa:	95aa                	add	a1,a1,a0
1c00a9ac:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00a9b0:	4805                	li	a6,1
1c00a9b2:	101c                	addi	a5,sp,32
1c00a9b4:	4705                	li	a4,1
1c00a9b6:	46c1                	li	a3,16
1c00a9b8:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00a9ba:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00a9bc:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00a9be:	02010a23          	sb	zero,52(sp)
1c00a9c2:	321050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00a9c6:	03410783          	lb	a5,52(sp)
1c00a9ca:	ef89                	bnez	a5,1c00a9e4 <resnetCNN_Construct+0x10b4>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00a9cc:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00a9d0:	4585                	li	a1,1
1c00a9d2:	01c00513          	li	a0,28
1c00a9d6:	766080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00a9da:	300a1073          	csrw	mstatus,s4
1c00a9de:	03410783          	lb	a5,52(sp)
1c00a9e2:	d7ed                	beqz	a5,1c00a9cc <resnetCNN_Construct+0x109c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 346368), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 59904), 1152, 0, &UchanHF1);
1c00a9e4:	400c                	lw	a1,0(s0)
1c00a9e6:	663d                	lui	a2,0xf
1c00a9e8:	ae89a503          	lw	a0,-1304(s3)
1c00a9ec:	a0060613          	addi	a2,a2,-1536 # ea00 <__rt_stack_size+0xe200>
1c00a9f0:	962e                	add	a2,a2,a1
1c00a9f2:	000555b7          	lui	a1,0x55
1c00a9f6:	90058593          	addi	a1,a1,-1792 # 54900 <__L1Cl+0x44900>
1c00a9fa:	95aa                	add	a1,a1,a0
1c00a9fc:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00aa00:	4805                	li	a6,1
1c00aa02:	101c                	addi	a5,sp,32
1c00aa04:	4705                	li	a4,1
1c00aa06:	48000693          	li	a3,1152
1c00aa0a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aa0c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00aa0e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00aa10:	02010a23          	sb	zero,52(sp)
1c00aa14:	2cf050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00aa18:	03410783          	lb	a5,52(sp)
1c00aa1c:	ef89                	bnez	a5,1c00aa36 <resnetCNN_Construct+0x1106>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aa1e:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00aa22:	4585                	li	a1,1
1c00aa24:	01c00513          	li	a0,28
1c00aa28:	714080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00aa2c:	300a1073          	csrw	mstatus,s4
1c00aa30:	03410783          	lb	a5,52(sp)
1c00aa34:	d7ed                	beqz	a5,1c00aa1e <resnetCNN_Construct+0x10ee>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354176), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 63008), 16, 0, &UchanHF1);
1c00aa36:	400c                	lw	a1,0(s0)
1c00aa38:	663d                	lui	a2,0xf
1c00aa3a:	ae89a503          	lw	a0,-1304(s3)
1c00aa3e:	62060613          	addi	a2,a2,1568 # f620 <__rt_stack_size+0xee20>
1c00aa42:	962e                	add	a2,a2,a1
1c00aa44:	000565b7          	lui	a1,0x56
1c00aa48:	78058593          	addi	a1,a1,1920 # 56780 <__L1Cl+0x46780>
1c00aa4c:	95aa                	add	a1,a1,a0
1c00aa4e:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00aa52:	4805                	li	a6,1
1c00aa54:	101c                	addi	a5,sp,32
1c00aa56:	4705                	li	a4,1
1c00aa58:	46c1                	li	a3,16
1c00aa5a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aa5c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00aa5e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00aa60:	02010a23          	sb	zero,52(sp)
1c00aa64:	27f050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00aa68:	03410783          	lb	a5,52(sp)
1c00aa6c:	ef89                	bnez	a5,1c00aa86 <resnetCNN_Construct+0x1156>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aa6e:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00aa72:	4585                	li	a1,1
1c00aa74:	01c00513          	li	a0,28
1c00aa78:	6c4080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00aa7c:	300a1073          	csrw	mstatus,s4
1c00aa80:	03410783          	lb	a5,52(sp)
1c00aa84:	d7ed                	beqz	a5,1c00aa6e <resnetCNN_Construct+0x113e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 347520), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 61056), 1152, 0, &UchanHF1);
1c00aa86:	400c                	lw	a1,0(s0)
1c00aa88:	663d                	lui	a2,0xf
1c00aa8a:	ae89a503          	lw	a0,-1304(s3)
1c00aa8e:	e8060613          	addi	a2,a2,-384 # ee80 <__rt_stack_size+0xe680>
1c00aa92:	962e                	add	a2,a2,a1
1c00aa94:	000555b7          	lui	a1,0x55
1c00aa98:	d8058593          	addi	a1,a1,-640 # 54d80 <__L1Cl+0x44d80>
1c00aa9c:	95aa                	add	a1,a1,a0
1c00aa9e:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00aaa2:	4805                	li	a6,1
1c00aaa4:	101c                	addi	a5,sp,32
1c00aaa6:	4705                	li	a4,1
1c00aaa8:	48000693          	li	a3,1152
1c00aaac:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aaae:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00aab0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00aab2:	02010a23          	sb	zero,52(sp)
1c00aab6:	22d050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00aaba:	03410783          	lb	a5,52(sp)
1c00aabe:	ef89                	bnez	a5,1c00aad8 <resnetCNN_Construct+0x11a8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aac0:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00aac4:	4585                	li	a1,1
1c00aac6:	01c00513          	li	a0,28
1c00aaca:	672080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00aace:	300a1073          	csrw	mstatus,s4
1c00aad2:	03410783          	lb	a5,52(sp)
1c00aad6:	d7ed                	beqz	a5,1c00aac0 <resnetCNN_Construct+0x1190>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 354192), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 63024), 16, 0, &UchanHF1);
1c00aad8:	400c                	lw	a1,0(s0)
1c00aada:	663d                	lui	a2,0xf
1c00aadc:	ae89a503          	lw	a0,-1304(s3)
1c00aae0:	63060613          	addi	a2,a2,1584 # f630 <__rt_stack_size+0xee30>
1c00aae4:	962e                	add	a2,a2,a1
1c00aae6:	000565b7          	lui	a1,0x56
1c00aaea:	79058593          	addi	a1,a1,1936 # 56790 <__L1Cl+0x46790>
1c00aaee:	95aa                	add	a1,a1,a0
1c00aaf0:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00aaf4:	4805                	li	a6,1
1c00aaf6:	101c                	addi	a5,sp,32
1c00aaf8:	4705                	li	a4,1
1c00aafa:	46c1                	li	a3,16
1c00aafc:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aafe:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ab00:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ab02:	02010a23          	sb	zero,52(sp)
1c00ab06:	1dd050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ab0a:	03410783          	lb	a5,52(sp)
1c00ab0e:	ef89                	bnez	a5,1c00ab28 <resnetCNN_Construct+0x11f8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ab10:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ab14:	4585                	li	a1,1
1c00ab16:	01c00513          	li	a0,28
1c00ab1a:	622080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ab1e:	300a1073          	csrw	mstatus,s4
1c00ab22:	03410783          	lb	a5,52(sp)
1c00ab26:	d7ed                	beqz	a5,1c00ab10 <resnetCNN_Construct+0x11e0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 348672), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 109120), 1152, 0, &UchanHF1);
1c00ab28:	400c                	lw	a1,0(s0)
1c00ab2a:	666d                	lui	a2,0x1b
1c00ab2c:	ae89a503          	lw	a0,-1304(s3)
1c00ab30:	a4060613          	addi	a2,a2,-1472 # 1aa40 <__L1Cl+0xaa40>
1c00ab34:	962e                	add	a2,a2,a1
1c00ab36:	000555b7          	lui	a1,0x55
1c00ab3a:	20058593          	addi	a1,a1,512 # 55200 <__L1Cl+0x45200>
1c00ab3e:	95aa                	add	a1,a1,a0
1c00ab40:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00ab44:	4805                	li	a6,1
1c00ab46:	101c                	addi	a5,sp,32
1c00ab48:	4705                	li	a4,1
1c00ab4a:	48000693          	li	a3,1152
1c00ab4e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ab50:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ab52:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ab54:	02010a23          	sb	zero,52(sp)
1c00ab58:	18b050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ab5c:	03410783          	lb	a5,52(sp)
1c00ab60:	ef89                	bnez	a5,1c00ab7a <resnetCNN_Construct+0x124a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ab62:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ab66:	4585                	li	a1,1
1c00ab68:	01c00513          	li	a0,28
1c00ab6c:	5d0080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ab70:	300a1073          	csrw	mstatus,s4
1c00ab74:	03410783          	lb	a5,52(sp)
1c00ab78:	d7ed                	beqz	a5,1c00ab62 <resnetCNN_Construct+0x1232>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 352784), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 3584), 256, 0, &UchanHF1);
1c00ab7a:	400c                	lw	a1,0(s0)
1c00ab7c:	6605                	lui	a2,0x1
1c00ab7e:	ae89a503          	lw	a0,-1304(s3)
1c00ab82:	e0060613          	addi	a2,a2,-512 # e00 <__rt_stack_size+0x600>
1c00ab86:	962e                	add	a2,a2,a1
1c00ab88:	000565b7          	lui	a1,0x56
1c00ab8c:	21058593          	addi	a1,a1,528 # 56210 <__L1Cl+0x46210>
1c00ab90:	95aa                	add	a1,a1,a0
1c00ab92:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00ab96:	4805                	li	a6,1
1c00ab98:	101c                	addi	a5,sp,32
1c00ab9a:	4705                	li	a4,1
1c00ab9c:	10000693          	li	a3,256
1c00aba0:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aba2:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00aba4:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00aba6:	02010a23          	sb	zero,52(sp)
1c00abaa:	139050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00abae:	03410783          	lb	a5,52(sp)
1c00abb2:	ef89                	bnez	a5,1c00abcc <resnetCNN_Construct+0x129c>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00abb4:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00abb8:	4585                	li	a1,1
1c00abba:	01c00513          	li	a0,28
1c00abbe:	57e080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00abc2:	300a1073          	csrw	mstatus,s4
1c00abc6:	03410783          	lb	a5,52(sp)
1c00abca:	d7ed                	beqz	a5,1c00abb4 <resnetCNN_Construct+0x1284>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 322560), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 55296), 4608, 0, &UchanHF1);
1c00abcc:	400c                	lw	a1,0(s0)
1c00abce:	6639                	lui	a2,0xe
1c00abd0:	ae89a503          	lw	a0,-1304(s3)
1c00abd4:	80060613          	addi	a2,a2,-2048 # d800 <__rt_stack_size+0xd000>
1c00abd8:	962e                	add	a2,a2,a1
1c00abda:	0004f5b7          	lui	a1,0x4f
1c00abde:	c0058593          	addi	a1,a1,-1024 # 4ec00 <__L1Cl+0x3ec00>
1c00abe2:	95aa                	add	a1,a1,a0
1c00abe4:	01892503          	lw	a0,24(s2)
1c00abe8:	6685                	lui	a3,0x1
  task->id = PI_TASK_NONE_ID;
1c00abea:	4805                	li	a6,1
1c00abec:	101c                	addi	a5,sp,32
1c00abee:	4705                	li	a4,1
1c00abf0:	20068693          	addi	a3,a3,512 # 1200 <__rt_stack_size+0xa00>
1c00abf4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00abf6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00abf8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00abfa:	02010a23          	sb	zero,52(sp)
1c00abfe:	0e5050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ac02:	03410783          	lb	a5,52(sp)
1c00ac06:	ef89                	bnez	a5,1c00ac20 <resnetCNN_Construct+0x12f0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ac08:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ac0c:	4585                	li	a1,1
1c00ac0e:	01c00513          	li	a0,28
1c00ac12:	52a080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ac16:	300a1073          	csrw	mstatus,s4
1c00ac1a:	03410783          	lb	a5,52(sp)
1c00ac1e:	d7ed                	beqz	a5,1c00ac08 <resnetCNN_Construct+0x12d8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 327168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 22528), 4608, 0, &UchanHF1);
1c00ac20:	400c                	lw	a1,0(s0)
1c00ac22:	6619                	lui	a2,0x6
1c00ac24:	ae89a503          	lw	a0,-1304(s3)
1c00ac28:	80060613          	addi	a2,a2,-2048 # 5800 <__rt_stack_size+0x5000>
1c00ac2c:	962e                	add	a2,a2,a1
1c00ac2e:	000505b7          	lui	a1,0x50
1c00ac32:	e0058593          	addi	a1,a1,-512 # 4fe00 <__L1Cl+0x3fe00>
1c00ac36:	95aa                	add	a1,a1,a0
1c00ac38:	01892503          	lw	a0,24(s2)
1c00ac3c:	6685                	lui	a3,0x1
  task->id = PI_TASK_NONE_ID;
1c00ac3e:	4805                	li	a6,1
1c00ac40:	101c                	addi	a5,sp,32
1c00ac42:	4705                	li	a4,1
1c00ac44:	20068693          	addi	a3,a3,512 # 1200 <__rt_stack_size+0xa00>
1c00ac48:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ac4a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ac4c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ac4e:	02010a23          	sb	zero,52(sp)
1c00ac52:	091050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ac56:	03410783          	lb	a5,52(sp)
1c00ac5a:	ef89                	bnez	a5,1c00ac74 <resnetCNN_Construct+0x1344>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ac5c:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ac60:	4585                	li	a1,1
1c00ac62:	01c00513          	li	a0,28
1c00ac66:	4d6080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ac6a:	300a1073          	csrw	mstatus,s4
1c00ac6e:	03410783          	lb	a5,52(sp)
1c00ac72:	d7ed                	beqz	a5,1c00ac5c <resnetCNN_Construct+0x132c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 331776), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 27136), 4608, 0, &UchanHF1);
1c00ac74:	4008                	lw	a0,0(s0)
1c00ac76:	ae89a583          	lw	a1,-1304(s3)
1c00ac7a:	661d                	lui	a2,0x7
1c00ac7c:	a0060613          	addi	a2,a2,-1536 # 6a00 <__rt_stack_size+0x6200>
1c00ac80:	962a                	add	a2,a2,a0
1c00ac82:	00051537          	lui	a0,0x51
1c00ac86:	95aa                	add	a1,a1,a0
1c00ac88:	01892503          	lw	a0,24(s2)
1c00ac8c:	6685                	lui	a3,0x1
  task->id = PI_TASK_NONE_ID;
1c00ac8e:	4805                	li	a6,1
1c00ac90:	101c                	addi	a5,sp,32
1c00ac92:	4705                	li	a4,1
1c00ac94:	20068693          	addi	a3,a3,512 # 1200 <__rt_stack_size+0xa00>
1c00ac98:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ac9a:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ac9c:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ac9e:	02010a23          	sb	zero,52(sp)
1c00aca2:	041050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00aca6:	03410783          	lb	a5,52(sp)
1c00acaa:	ef89                	bnez	a5,1c00acc4 <resnetCNN_Construct+0x1394>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00acac:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00acb0:	4585                	li	a1,1
1c00acb2:	01c00513          	li	a0,28
1c00acb6:	486080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00acba:	300a1073          	csrw	mstatus,s4
1c00acbe:	03410783          	lb	a5,52(sp)
1c00acc2:	d7ed                	beqz	a5,1c00acac <resnetCNN_Construct+0x137c>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 313344), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 99904), 9216, 0, &UchanHF1);
1c00acc4:	400c                	lw	a1,0(s0)
1c00acc6:	6661                	lui	a2,0x18
1c00acc8:	ae89a503          	lw	a0,-1304(s3)
1c00accc:	64060613          	addi	a2,a2,1600 # 18640 <__L1Cl+0x8640>
1c00acd0:	962e                	add	a2,a2,a1
1c00acd2:	0004d5b7          	lui	a1,0x4d
1c00acd6:	80058593          	addi	a1,a1,-2048 # 4c800 <__L1Cl+0x3c800>
1c00acda:	95aa                	add	a1,a1,a0
1c00acdc:	01892503          	lw	a0,24(s2)
1c00ace0:	6689                	lui	a3,0x2
  task->id = PI_TASK_NONE_ID;
1c00ace2:	4805                	li	a6,1
1c00ace4:	101c                	addi	a5,sp,32
1c00ace6:	4705                	li	a4,1
1c00ace8:	40068693          	addi	a3,a3,1024 # 2400 <__rt_stack_size+0x1c00>
1c00acec:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00acee:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00acf0:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00acf2:	02010a23          	sb	zero,52(sp)
1c00acf6:	7ec050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00acfa:	03410783          	lb	a5,52(sp)
1c00acfe:	ef89                	bnez	a5,1c00ad18 <resnetCNN_Construct+0x13e8>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad00:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ad04:	4585                	li	a1,1
1c00ad06:	01c00513          	li	a0,28
1c00ad0a:	432080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ad0e:	300a1073          	csrw	mstatus,s4
1c00ad12:	03410783          	lb	a5,52(sp)
1c00ad16:	d7ed                	beqz	a5,1c00ad00 <resnetCNN_Construct+0x13d0>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 350976), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 35840), 1024, 0, &UchanHF1);
1c00ad18:	400c                	lw	a1,0(s0)
1c00ad1a:	6625                	lui	a2,0x9
1c00ad1c:	ae89a503          	lw	a0,-1304(s3)
1c00ad20:	c0060613          	addi	a2,a2,-1024 # 8c00 <__rt_stack_size+0x8400>
1c00ad24:	962e                	add	a2,a2,a1
1c00ad26:	000565b7          	lui	a1,0x56
1c00ad2a:	b0058593          	addi	a1,a1,-1280 # 55b00 <__L1Cl+0x45b00>
1c00ad2e:	95aa                	add	a1,a1,a0
1c00ad30:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00ad34:	4805                	li	a6,1
1c00ad36:	101c                	addi	a5,sp,32
1c00ad38:	4705                	li	a4,1
1c00ad3a:	40000693          	li	a3,1024
1c00ad3e:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ad40:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ad42:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ad44:	02010a23          	sb	zero,52(sp)
1c00ad48:	79a050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ad4c:	03410783          	lb	a5,52(sp)
1c00ad50:	ef89                	bnez	a5,1c00ad6a <resnetCNN_Construct+0x143a>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad52:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ad56:	4585                	li	a1,1
1c00ad58:	01c00513          	li	a0,28
1c00ad5c:	3e0080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ad60:	300a1073          	csrw	mstatus,s4
1c00ad64:	03410783          	lb	a5,52(sp)
1c00ad68:	d7ed                	beqz	a5,1c00ad52 <resnetCNN_Construct+0x1422>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 258048), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 4096), 18432, 0, &UchanHF1);
1c00ad6a:	4008                	lw	a0,0(s0)
1c00ad6c:	ae89a583          	lw	a1,-1304(s3)
1c00ad70:	6605                	lui	a2,0x1
1c00ad72:	962a                	add	a2,a2,a0
1c00ad74:	0003f537          	lui	a0,0x3f
1c00ad78:	95aa                	add	a1,a1,a0
1c00ad7a:	01892503          	lw	a0,24(s2)
1c00ad7e:	6695                	lui	a3,0x5
  task->id = PI_TASK_NONE_ID;
1c00ad80:	4805                	li	a6,1
1c00ad82:	101c                	addi	a5,sp,32
1c00ad84:	4705                	li	a4,1
1c00ad86:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c00ad8a:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ad8c:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ad8e:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ad90:	02010a23          	sb	zero,52(sp)
1c00ad94:	74e050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ad98:	03410783          	lb	a5,52(sp)
1c00ad9c:	ef89                	bnez	a5,1c00adb6 <resnetCNN_Construct+0x1486>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ad9e:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ada2:	4585                	li	a1,1
1c00ada4:	01c00513          	li	a0,28
1c00ada8:	394080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00adac:	300a1073          	csrw	mstatus,s4
1c00adb0:	03410783          	lb	a5,52(sp)
1c00adb4:	d7ed                	beqz	a5,1c00ad9e <resnetCNN_Construct+0x146e>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 294912), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 36864), 18432, 0, &UchanHF1);
1c00adb6:	4008                	lw	a0,0(s0)
1c00adb8:	ae89a583          	lw	a1,-1304(s3)
1c00adbc:	6625                	lui	a2,0x9
1c00adbe:	962a                	add	a2,a2,a0
1c00adc0:	00048537          	lui	a0,0x48
1c00adc4:	95aa                	add	a1,a1,a0
1c00adc6:	01892503          	lw	a0,24(s2)
1c00adca:	6695                	lui	a3,0x5
  task->id = PI_TASK_NONE_ID;
1c00adcc:	4805                	li	a6,1
1c00adce:	101c                	addi	a5,sp,32
1c00add0:	4705                	li	a4,1
1c00add2:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c00add6:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00add8:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00adda:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00addc:	02010a23          	sb	zero,52(sp)
1c00ade0:	702050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ade4:	03410783          	lb	a5,52(sp)
1c00ade8:	ef89                	bnez	a5,1c00ae02 <resnetCNN_Construct+0x14d2>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00adea:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00adee:	4585                	li	a1,1
1c00adf0:	01c00513          	li	a0,28
1c00adf4:	348080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00adf8:	300a1073          	csrw	mstatus,s4
1c00adfc:	03410783          	lb	a5,52(sp)
1c00ae00:	d7ed                	beqz	a5,1c00adea <resnetCNN_Construct+0x14ba>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 221184), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 63040), 36864, 0, &UchanHF1);
1c00ae02:	4008                	lw	a0,0(s0)
1c00ae04:	ae89a583          	lw	a1,-1304(s3)
1c00ae08:	663d                	lui	a2,0xf
1c00ae0a:	64060613          	addi	a2,a2,1600 # f640 <__rt_stack_size+0xee40>
1c00ae0e:	962a                	add	a2,a2,a0
1c00ae10:	00036537          	lui	a0,0x36
1c00ae14:	95aa                	add	a1,a1,a0
1c00ae16:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00ae1a:	4805                	li	a6,1
1c00ae1c:	101c                	addi	a5,sp,32
1c00ae1e:	4705                	li	a4,1
1c00ae20:	66a5                	lui	a3,0x9
1c00ae22:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ae24:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ae26:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ae28:	02010a23          	sb	zero,52(sp)
1c00ae2c:	6b6050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ae30:	03410783          	lb	a5,52(sp)
1c00ae34:	ef89                	bnez	a5,1c00ae4e <resnetCNN_Construct+0x151e>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ae36:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ae3a:	4585                	li	a1,1
1c00ae3c:	01c00513          	li	a0,28
1c00ae40:	2fc080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ae44:	300a1073          	csrw	mstatus,s4
1c00ae48:	03410783          	lb	a5,52(sp)
1c00ae4c:	d7ed                	beqz	a5,1c00ae36 <resnetCNN_Construct+0x1506>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353040), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 3840), 128, 0, &UchanHF1);
1c00ae4e:	400c                	lw	a1,0(s0)
1c00ae50:	6605                	lui	a2,0x1
1c00ae52:	ae89a503          	lw	a0,-1304(s3)
1c00ae56:	f0060613          	addi	a2,a2,-256 # f00 <__rt_stack_size+0x700>
1c00ae5a:	962e                	add	a2,a2,a1
1c00ae5c:	000565b7          	lui	a1,0x56
1c00ae60:	31058593          	addi	a1,a1,784 # 56310 <__L1Cl+0x46310>
1c00ae64:	95aa                	add	a1,a1,a0
1c00ae66:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00ae6a:	4805                	li	a6,1
1c00ae6c:	101c                	addi	a5,sp,32
1c00ae6e:	4705                	li	a4,1
1c00ae70:	08000693          	li	a3,128
1c00ae74:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00ae76:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00ae78:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00ae7a:	02010a23          	sb	zero,52(sp)
1c00ae7e:	664050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00ae82:	03410783          	lb	a5,52(sp)
1c00ae86:	ef89                	bnez	a5,1c00aea0 <resnetCNN_Construct+0x1570>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00ae88:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00ae8c:	4585                	li	a1,1
1c00ae8e:	01c00513          	li	a0,28
1c00ae92:	2aa080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00ae96:	300a1073          	csrw	mstatus,s4
1c00ae9a:	03410783          	lb	a5,52(sp)
1c00ae9e:	d7ed                	beqz	a5,1c00ae88 <resnetCNN_Construct+0x1558>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 336384), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 31744), 4096, 0, &UchanHF1);
1c00aea0:	400c                	lw	a1,0(s0)
1c00aea2:	6621                	lui	a2,0x8
1c00aea4:	ae89a503          	lw	a0,-1304(s3)
1c00aea8:	c0060613          	addi	a2,a2,-1024 # 7c00 <__rt_stack_size+0x7400>
1c00aeac:	962e                	add	a2,a2,a1
1c00aeae:	000525b7          	lui	a1,0x52
1c00aeb2:	20058593          	addi	a1,a1,512 # 52200 <__L1Cl+0x42200>
1c00aeb6:	95aa                	add	a1,a1,a0
1c00aeb8:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00aebc:	4805                	li	a6,1
1c00aebe:	101c                	addi	a5,sp,32
1c00aec0:	4705                	li	a4,1
1c00aec2:	6685                	lui	a3,0x1
1c00aec4:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00aec6:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00aec8:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00aeca:	02010a23          	sb	zero,52(sp)
1c00aece:	614050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00aed2:	03410783          	lb	a5,52(sp)
1c00aed6:	ef89                	bnez	a5,1c00aef0 <resnetCNN_Construct+0x15c0>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00aed8:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00aedc:	4585                	li	a1,1
1c00aede:	01c00513          	li	a0,28
1c00aee2:	25a080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00aee6:	300a1073          	csrw	mstatus,s4
1c00aeea:	03410783          	lb	a5,52(sp)
1c00aeee:	d7ed                	beqz	a5,1c00aed8 <resnetCNN_Construct+0x15a8>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 353168), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 3968), 128, 0, &UchanHF1);
1c00aef0:	400c                	lw	a1,0(s0)
1c00aef2:	6605                	lui	a2,0x1
1c00aef4:	ae89a503          	lw	a0,-1304(s3)
1c00aef8:	f8060613          	addi	a2,a2,-128 # f80 <__rt_stack_size+0x780>
1c00aefc:	962e                	add	a2,a2,a1
1c00aefe:	000565b7          	lui	a1,0x56
1c00af02:	39058593          	addi	a1,a1,912 # 56390 <__L1Cl+0x46390>
1c00af06:	95aa                	add	a1,a1,a0
1c00af08:	01892503          	lw	a0,24(s2)
  task->id = PI_TASK_NONE_ID;
1c00af0c:	4805                	li	a6,1
1c00af0e:	101c                	addi	a5,sp,32
1c00af10:	4705                	li	a4,1
1c00af12:	08000693          	li	a3,128
1c00af16:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00af18:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00af1a:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00af1c:	02010a23          	sb	zero,52(sp)
1c00af20:	5c2050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00af24:	03410783          	lb	a5,52(sp)
1c00af28:	ef89                	bnez	a5,1c00af42 <resnetCNN_Construct+0x1612>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00af2a:	30047a73          	csrrci	s4,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00af2e:	4585                	li	a1,1
1c00af30:	01c00513          	li	a0,28
1c00af34:	208080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00af38:	300a1073          	csrw	mstatus,s4
1c00af3c:	03410783          	lb	a5,52(sp)
1c00af40:	d7ed                	beqz	a5,1c00af2a <resnetCNN_Construct+0x15fa>
	AT_HYPERFLASH_FS_FC_COPY(&HyperFlash, ((AT_HYPERFLASH_FS_EXT_ADDR_TYPE) resnet_L3_Flash + 340480), ((AT_HYPERFLASH_FS_INT_ADDR_TYPE) resnet_L2_Memory + 0), 3584, 0, &UchanHF1);
1c00af42:	ae89a883          	lw	a7,-1304(s3)
1c00af46:	01892503          	lw	a0,24(s2)
1c00af4a:	4010                	lw	a2,0(s0)
1c00af4c:	000535b7          	lui	a1,0x53
1c00af50:	6685                	lui	a3,0x1
1c00af52:	20058593          	addi	a1,a1,512 # 53200 <__L1Cl+0x43200>
  task->id = PI_TASK_NONE_ID;
1c00af56:	4805                	li	a6,1
1c00af58:	101c                	addi	a5,sp,32
1c00af5a:	4705                	li	a4,1
1c00af5c:	e0068693          	addi	a3,a3,-512 # e00 <__rt_stack_size+0x600>
1c00af60:	95c6                	add	a1,a1,a7
1c00af62:	dc42                	sw	a6,56(sp)
  task->arg[0] = (uint32_t)0;
1c00af64:	d202                	sw	zero,36(sp)
  task->implem.keep = 1;
1c00af66:	c4c2                	sw	a6,72(sp)
  task->done = 0;
1c00af68:	02010a23          	sb	zero,52(sp)
1c00af6c:	576050ef          	jal	ra,1c0104e2 <pi_fs_copy_async>
1c00af70:	03410783          	lb	a5,52(sp)
1c00af74:	c399                	beqz	a5,1c00af7a <resnetCNN_Construct+0x164a>
1c00af76:	a3dfe06f          	j	1c0099b2 <resnetCNN_Construct+0x82>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c00af7a:	30047473          	csrrci	s0,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c00af7e:	4585                	li	a1,1
1c00af80:	01c00513          	li	a0,28
1c00af84:	1b8080ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c00af88:	30041073          	csrw	mstatus,s0
1c00af8c:	03410783          	lb	a5,52(sp)
1c00af90:	d7ed                	beqz	a5,1c00af7a <resnetCNN_Construct+0x164a>
1c00af92:	a21fe06f          	j	1c0099b2 <resnetCNN_Construct+0x82>
	resnet_L3_Memory = (AT_HYPERRAM_POINTER) AT_HYPERRAM_ALLOC(&HyperRam, 328078);
1c00af96:	1c018a37          	lui	s4,0x1c018
1c00af9a:	b6fa2823          	sw	a5,-1168(s4) # 1c017b70 <resnet_L3_Memory>
1c00af9e:	abffe06f          	j	1c009a5c <resnetCNN_Construct+0x12c>
	if (resnet_L1_Memory == 0) return 4;
1c00afa2:	4b91                	li	s7,4
1c00afa4:	a0ffe06f          	j	1c0099b2 <resnetCNN_Construct+0x82>
  {
    pi_fs_unmount(&file->fs);
1c00afa8:	81848513          	addi	a0,s1,-2024
1c00afac:	4c2050ef          	jal	ra,1c01046e <pi_fs_unmount>
1c00afb0:	9f7fe06f          	j	1c0099a6 <resnetCNN_Construct+0x76>

1c00afb4 <resnetCNN_Destruct>:
}

static inline int pi_ram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
    pi_ram_api_t *api = (pi_ram_api_t *)device->api;
1c00afb4:	1c018537          	lui	a0,0x1c018
    return api->free(device, addr, size);
1c00afb8:	b5452783          	lw	a5,-1196(a0) # 1c017b54 <HyperRam>
int resnetCNN_Destruct()

{
	AT_HYPERRAM_FREE(&HyperRam, resnet_L3_Memory, 328078);
1c00afbc:	1c018737          	lui	a4,0x1c018
1c00afc0:	b7072583          	lw	a1,-1168(a4) # 1c017b70 <resnet_L3_Memory>
1c00afc4:	4bdc                	lw	a5,20(a5)
{
1c00afc6:	1141                	addi	sp,sp,-16
1c00afc8:	00050637          	lui	a2,0x50
1c00afcc:	c606                	sw	ra,12(sp)
1c00afce:	c422                	sw	s0,8(sp)
1c00afd0:	c226                	sw	s1,4(sp)
1c00afd2:	18e60613          	addi	a2,a2,398 # 5018e <__L1Cl+0x4018e>
1c00afd6:	b5450513          	addi	a0,a0,-1196
1c00afda:	9782                	jalr	a5
	AT_L2_FREE(0, resnet_L2_Memory, 200000);
1c00afdc:	1c0177b7          	lui	a5,0x1c017
1c00afe0:	71c7a503          	lw	a0,1820(a5) # 1c01771c <resnet_L2_Memory>
1c00afe4:	000315b7          	lui	a1,0x31
1c00afe8:	d4058593          	addi	a1,a1,-704 # 30d40 <__L1Cl+0x20d40>
1c00afec:	40a080ef          	jal	ra,1c0133f6 <pi_l2_free>
	AT_L1_FREE(0, resnet_L1_Memory, 48672);
1c00aff0:	100007b7          	lui	a5,0x10000
1c00aff4:	01c7a583          	lw	a1,28(a5) # 1000001c <resnet_L1_Memory>
1c00aff8:	6631                	lui	a2,0xc
1c00affa:	e2060613          	addi	a2,a2,-480 # be20 <__rt_stack_size+0xb620>
    file->file->size = 4*1024*1024;
}

static inline void __at_hyperflash_fs_close(AT_HYPERFLASH_FS_T *file)
{
  pi_fs_close(file->file);
1c00affe:	1c0184b7          	lui	s1,0x1c018
1c00b002:	4501                	li	a0,0
1c00b004:	3d8080ef          	jal	ra,1c0133dc <pi_cl_l1_free>
1c00b008:	81848413          	addi	s0,s1,-2024 # 1c017818 <_bss_start>
1c00b00c:	4c08                	lw	a0,24(s0)
1c00b00e:	470050ef          	jal	ra,1c01047e <pi_fs_close>
  pi_fs_unmount(&file->fs);
1c00b012:	81848513          	addi	a0,s1,-2024
1c00b016:	458050ef          	jal	ra,1c01046e <pi_fs_unmount>
1c00b01a:	445c                	lw	a5,12(s0)
1c00b01c:	00c40513          	addi	a0,s0,12
1c00b020:	43dc                	lw	a5,4(a5)
1c00b022:	9782                	jalr	a5
	AT_HYPERFLASH_FS_CLOSE(&HyperFlash);
	return 0;
}
1c00b024:	40b2                	lw	ra,12(sp)
1c00b026:	4422                	lw	s0,8(sp)
1c00b028:	4492                	lw	s1,4(sp)
1c00b02a:	4501                	li	a0,0
1c00b02c:	0141                	addi	sp,sp,16
1c00b02e:	8082                	ret

1c00b030 <resnetCNN>:
int resnetCNN(
		signed short * __restrict__ Input_1,
		signed short * __restrict__ Output_1)

{
1c00b030:	cb010113          	addi	sp,sp,-848
1c00b034:	34812423          	sw	s0,840(sp)
	AT_HYPERRAM_CL_EVENT UchanHR1;
	AT_HYPERRAM_CL_EVENT UchanHR2;
	AT_HYPERRAM_CL_EVENT UchanHR3;
	AT_HYPERRAM_CL_EVENT UchanHR4;
	/* Moving Res2cbranch2aconv2d_bias, size 16 from HyperRam at 328032 to (size 16) L2 at 185584 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b038:	1c017437          	lui	s0,0x1c017
1c00b03c:	71c40413          	addi	s0,s0,1820 # 1c01771c <resnet_L2_Memory>
{
1c00b040:	35212023          	sw	s2,832(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b044:	1c018937          	lui	s2,0x1c018
1c00b048:	00042303          	lw	t1,0(s0)
1c00b04c:	b7092883          	lw	a7,-1168(s2) # 1c017b70 <resnet_L3_Memory>
{
1c00b050:	33412c23          	sw	s4,824(sp)
1c00b054:	33512a23          	sw	s5,820(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b058:	0002da37          	lui	s4,0x2d
1c00b05c:	00050ab7          	lui	s5,0x50
1c00b060:	160a8813          	addi	a6,s5,352 # 50160 <__L1Cl+0x40160>
{
1c00b064:	34912223          	sw	s1,836(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b068:	4f0a0613          	addi	a2,s4,1264 # 2d4f0 <__L1Cl+0x1d4f0>
1c00b06c:	1c0184b7          	lui	s1,0x1c018
1c00b070:	961a                	add	a2,a2,t1
{
1c00b072:	33312e23          	sw	s3,828(sp)
1c00b076:	33612823          	sw	s6,816(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b07a:	878a                	mv	a5,sp
{
1c00b07c:	8b2a                	mv	s6,a0
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b07e:	4705                	li	a4,1
1c00b080:	46c1                	li	a3,16
1c00b082:	b5448513          	addi	a0,s1,-1196 # 1c017b54 <HyperRam>
{
1c00b086:	89ae                	mv	s3,a1
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b088:	010885b3          	add	a1,a7,a6
{
1c00b08c:	34112623          	sw	ra,844(sp)
1c00b090:	33712623          	sw	s7,812(sp)
1c00b094:	33812423          	sw	s8,808(sp)
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328032), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 16, 0, &UchanHR0);
1c00b098:	075060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res2cbranch2bkernel, size 1152 from HyperRam at 324480 to (size 1152) L2 at 184432 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 324480), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 184432), 1152, 0, &UchanHR1);
1c00b09c:	400c                	lw	a1,0(s0)
1c00b09e:	b7092503          	lw	a0,-1168(s2)
1c00b0a2:	070a0613          	addi	a2,s4,112
1c00b0a6:	962e                	add	a2,a2,a1
1c00b0a8:	0004f5b7          	lui	a1,0x4f
1c00b0ac:	38058593          	addi	a1,a1,896 # 4f380 <__L1Cl+0x3f380>
1c00b0b0:	95aa                	add	a1,a1,a0
1c00b0b2:	111c                	addi	a5,sp,160
1c00b0b4:	4705                	li	a4,1
1c00b0b6:	48000693          	li	a3,1152
1c00b0ba:	b5448513          	addi	a0,s1,-1196
1c00b0be:	04f060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res2cbranch2bconv2d_bias, size 16 from HyperRam at 328048 to (size 16) L2 at 185600 using event 2 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328048), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185600), 16, 0, &UchanHR2);
1c00b0c2:	4010                	lw	a2,0(s0)
1c00b0c4:	b7092583          	lw	a1,-1168(s2)
1c00b0c8:	500a0a13          	addi	s4,s4,1280
1c00b0cc:	170a8a93          	addi	s5,s5,368
1c00b0d0:	4705                	li	a4,1
1c00b0d2:	9652                	add	a2,a2,s4
1c00b0d4:	95d6                	add	a1,a1,s5
1c00b0d6:	029c                	addi	a5,sp,320
1c00b0d8:	46c1                	li	a3,16
1c00b0da:	b5448513          	addi	a0,s1,-1196
1c00b0de:	02f060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu(
1c00b0e2:	401c                	lw	a5,0(s0)
		((signed short * __restrict__) Input_1), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+62208)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+62992)), /* Bias */
1c00b0e4:	6a3d                	lui	s4,0xf
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
1c00b0e6:	6aed                	lui	s5,0x1b
1c00b0e8:	ec0a8a93          	addi	s5,s5,-320 # 1aec0 <__L1Cl+0xaec0>
		((signed short * __restrict__) (resnet_L2_Memory+62992)), /* Bias */
1c00b0ec:	610a0613          	addi	a2,s4,1552 # f610 <__rt_stack_size+0xee10>
		((signed short * __restrict__) (resnet_L2_Memory+62208)), /* Filter */
1c00b0f0:	300a0593          	addi	a1,s4,768
	S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu(
1c00b0f4:	015786b3          	add	a3,a5,s5
1c00b0f8:	963e                	add	a2,a2,a5
1c00b0fa:	95be                	add	a1,a1,a5
1c00b0fc:	855a                	mv	a0,s6
1c00b0fe:	bc4f60ef          	jal	ra,1c0014c2 <S4_Conv2d_8x1x7x7_MaxPool_3x3_Relu>
	);
	S7_Conv2d_8x8x3x3_Relu(
1c00b102:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+59904)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+63008)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+134608)) /* Out */
1c00b104:	00021b37          	lui	s6,0x21
1c00b108:	dd0b0b13          	addi	s6,s6,-560 # 20dd0 <__L1Cl+0x10dd0>
		((signed short * __restrict__) (resnet_L2_Memory+63008)), /* Bias */
1c00b10c:	620a0613          	addi	a2,s4,1568
		((signed short * __restrict__) (resnet_L2_Memory+59904)), /* Filter */
1c00b110:	a00a0593          	addi	a1,s4,-1536
	S7_Conv2d_8x8x3x3_Relu(
1c00b114:	016506b3          	add	a3,a0,s6
1c00b118:	962a                	add	a2,a2,a0
1c00b11a:	95aa                	add	a1,a1,a0
1c00b11c:	9556                	add	a0,a0,s5
1c00b11e:	9e7f60ef          	jal	ra,1c001b04 <S7_Conv2d_8x8x3x3_Relu>
	);
	S10_Conv2d_8x8x3x3(
1c00b122:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+134608)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+61056)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+63024)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+158944)) /* Out */
1c00b124:	00027bb7          	lui	s7,0x27
1c00b128:	ce0b8b93          	addi	s7,s7,-800 # 26ce0 <__L1Cl+0x16ce0>
		((signed short * __restrict__) (resnet_L2_Memory+63024)), /* Bias */
1c00b12c:	630a0613          	addi	a2,s4,1584
		((signed short * __restrict__) (resnet_L2_Memory+61056)), /* Filter */
1c00b130:	e80a0593          	addi	a1,s4,-384
	S10_Conv2d_8x8x3x3(
1c00b134:	017506b3          	add	a3,a0,s7
1c00b138:	962a                	add	a2,a2,a0
1c00b13a:	95aa                	add	a1,a1,a0
1c00b13c:	955a                	add	a0,a0,s6
1c00b13e:	fd5f60ef          	jal	ra,1c002112 <S10_Conv2d_8x8x3x3>
	);
	S11_MatAdd_8x39x39(
1c00b142:	4008                	lw	a0,0(s0)
1c00b144:	01650633          	add	a2,a0,s6
1c00b148:	015505b3          	add	a1,a0,s5
1c00b14c:	955e                	add	a0,a0,s7
1c00b14e:	dd4f70ef          	jal	ra,1c002722 <S11_MatAdd_8x39x39>
    while ((*(volatile char *)done) == 0)
1c00b152:	09c14783          	lbu	a5,156(sp)
1c00b156:	0ff7f793          	andi	a5,a5,255
1c00b15a:	ef99                	bnez	a5,1c00b178 <resnetCNN+0x148>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b15c:	4689                	li	a3,2
1c00b15e:	00204737          	lui	a4,0x204
1c00b162:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b166:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b16a:	00d72223          	sw	a3,4(a4)
1c00b16e:	09c14783          	lbu	a5,156(sp)
1c00b172:	0ff7f793          	andi	a5,a5,255
1c00b176:	d7f5                	beqz	a5,1c00b162 <resnetCNN+0x132>
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In2 */
		((signed short * __restrict__) (resnet_L2_Memory+134608)) /* Out */
	);
	/* Waiting completion of transfer of Res2cbranch2aconv2d_bias using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	S14_Conv2d_8x8x3x3_Relu(
1c00b178:	401c                	lw	a5,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+134608)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+109120)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+185584)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
1c00b17a:	65ed                	lui	a1,0x1b
	S14_Conv2d_8x8x3x3_Relu(
1c00b17c:	0002d637          	lui	a2,0x2d
1c00b180:	00021537          	lui	a0,0x21
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
1c00b184:	ec058693          	addi	a3,a1,-320 # 1aec0 <__L1Cl+0xaec0>
	S14_Conv2d_8x8x3x3_Relu(
1c00b188:	4f060613          	addi	a2,a2,1264 # 2d4f0 <__L1Cl+0x1d4f0>
		((signed short * __restrict__) (resnet_L2_Memory+109120)), /* Filter */
1c00b18c:	a4058593          	addi	a1,a1,-1472
	S14_Conv2d_8x8x3x3_Relu(
1c00b190:	dd050513          	addi	a0,a0,-560 # 20dd0 <__L1Cl+0x10dd0>
1c00b194:	96be                	add	a3,a3,a5
1c00b196:	963e                	add	a2,a2,a5
1c00b198:	95be                	add	a1,a1,a5
1c00b19a:	953e                	add	a0,a0,a5
1c00b19c:	991f70ef          	jal	ra,1c002b2c <S14_Conv2d_8x8x3x3_Relu>
1c00b1a0:	13c14783          	lbu	a5,316(sp)
1c00b1a4:	0ff7f793          	andi	a5,a5,255
1c00b1a8:	ef99                	bnez	a5,1c00b1c6 <resnetCNN+0x196>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b1aa:	4689                	li	a3,2
1c00b1ac:	00204737          	lui	a4,0x204
1c00b1b0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b1b4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b1b8:	00d72223          	sw	a3,4(a4)
1c00b1bc:	13c14783          	lbu	a5,316(sp)
1c00b1c0:	0ff7f793          	andi	a5,a5,255
1c00b1c4:	d7f5                	beqz	a5,1c00b1b0 <resnetCNN+0x180>
1c00b1c6:	1dc14783          	lbu	a5,476(sp)
1c00b1ca:	0ff7f793          	andi	a5,a5,255
1c00b1ce:	ef99                	bnez	a5,1c00b1ec <resnetCNN+0x1bc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b1d0:	4689                	li	a3,2
1c00b1d2:	00204737          	lui	a4,0x204
1c00b1d6:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b1da:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b1de:	00d72223          	sw	a3,4(a4)
1c00b1e2:	1dc14783          	lbu	a5,476(sp)
1c00b1e6:	0ff7f793          	andi	a5,a5,255
1c00b1ea:	d7f5                	beqz	a5,1c00b1d6 <resnetCNN+0x1a6>
	);
	/* Waiting completion of transfer of Res2cbranch2bkernel using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	/* Waiting completion of transfer of Res2cbranch2bconv2d_bias using event 2 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2);
	S17_Conv2d_8x8x3x3(
1c00b1ec:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+184432)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+185600)), /* Bias */
1c00b1ee:	0002dab7          	lui	s5,0x2d
		((signed short * __restrict__) (resnet_L2_Memory+158944)) /* Out */
1c00b1f2:	00027b37          	lui	s6,0x27
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b1f6:	6bed                	lui	s7,0x1b
		((signed short * __restrict__) (resnet_L2_Memory+158944)) /* Out */
1c00b1f8:	ce0b0c13          	addi	s8,s6,-800 # 26ce0 <__L1Cl+0x16ce0>
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b1fc:	ec0b8b93          	addi	s7,s7,-320 # 1aec0 <__L1Cl+0xaec0>
		((signed short * __restrict__) (resnet_L2_Memory+185600)), /* Bias */
1c00b200:	500a8613          	addi	a2,s5,1280 # 2d500 <__L1Cl+0x1d500>
		((signed short * __restrict__) (resnet_L2_Memory+184432)), /* Filter */
1c00b204:	070a8593          	addi	a1,s5,112
	S17_Conv2d_8x8x3x3(
1c00b208:	018506b3          	add	a3,a0,s8
1c00b20c:	962a                	add	a2,a2,a0
1c00b20e:	95aa                	add	a1,a1,a0
1c00b210:	955e                	add	a0,a0,s7
1c00b212:	f29f70ef          	jal	ra,1c00313a <S17_Conv2d_8x8x3x3>
	);
	/* Moving Res3a_branch2akernel, size 2304 from HyperRam at 321024 to (size 2304) L2 at 183280 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 321024), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 183280), 2304, 0, &UchanHR0);
1c00b216:	400c                	lw	a1,0(s0)
1c00b218:	b7092503          	lw	a0,-1168(s2)
1c00b21c:	bf0a8613          	addi	a2,s5,-1040
1c00b220:	962e                	add	a2,a2,a1
1c00b222:	0004e5b7          	lui	a1,0x4e
1c00b226:	6685                	lui	a3,0x1
1c00b228:	60058593          	addi	a1,a1,1536 # 4e600 <__L1Cl+0x3e600>
1c00b22c:	95aa                	add	a1,a1,a0
1c00b22e:	878a                	mv	a5,sp
1c00b230:	4705                	li	a4,1
1c00b232:	90068693          	addi	a3,a3,-1792 # 900 <__rt_stack_size+0x100>
1c00b236:	b5448513          	addi	a0,s1,-1196
1c00b23a:	6d2060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res3a_branch2aconv2d_bias, size 32 from HyperRam at 327872 to (size 32) L2 at 185584 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327872), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 185584), 32, 0, &UchanHR1);
1c00b23e:	b7092503          	lw	a0,-1168(s2)
1c00b242:	4010                	lw	a2,0(s0)
1c00b244:	00050a37          	lui	s4,0x50
1c00b248:	0c0a0593          	addi	a1,s4,192 # 500c0 <__L1Cl+0x400c0>
1c00b24c:	4f0a8a93          	addi	s5,s5,1264
1c00b250:	111c                	addi	a5,sp,160
1c00b252:	4705                	li	a4,1
1c00b254:	02000693          	li	a3,32
1c00b258:	95aa                	add	a1,a1,a0
1c00b25a:	9656                	add	a2,a2,s5
1c00b25c:	b5448513          	addi	a0,s1,-1196
1c00b260:	6ac060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S18_MatAdd_8x39x39(
1c00b264:	4008                	lw	a0,0(s0)
1c00b266:	000215b7          	lui	a1,0x21
1c00b26a:	dd058593          	addi	a1,a1,-560 # 20dd0 <__L1Cl+0x10dd0>
1c00b26e:	01750633          	add	a2,a0,s7
1c00b272:	95aa                	add	a1,a1,a0
1c00b274:	9562                	add	a0,a0,s8
1c00b276:	cd4f80ef          	jal	ra,1c00374a <S18_MatAdd_8x39x39>
		((signed short * __restrict__) (resnet_L2_Memory+158944)), /* In1 */
		((signed short * __restrict__) (resnet_L2_Memory+134608)), /* In2 */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Moving Res3a_branch1conv2d_bias, size 32 from HyperRam at 327904 to (size 32) L2 at 160464 using event 2 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327904), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 160464), 32, 0, &UchanHR2);
1c00b27a:	00042803          	lw	a6,0(s0)
1c00b27e:	b7092503          	lw	a0,-1168(s2)
1c00b282:	2d0b0613          	addi	a2,s6,720
1c00b286:	0e0a0593          	addi	a1,s4,224
1c00b28a:	9642                	add	a2,a2,a6
1c00b28c:	95aa                	add	a1,a1,a0
1c00b28e:	029c                	addi	a5,sp,320
1c00b290:	4705                	li	a4,1
1c00b292:	02000693          	li	a3,32
1c00b296:	b5448513          	addi	a0,s1,-1196
1c00b29a:	672060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res3a_branch2bconv2d_bias, size 32 from HyperRam at 327936 to (size 32) L2 at 160496 using event 3 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327936), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 160496), 32, 0, &UchanHR3);
1c00b29e:	b7092503          	lw	a0,-1168(s2)
1c00b2a2:	4010                	lw	a2,0(s0)
1c00b2a4:	100a0593          	addi	a1,s4,256
1c00b2a8:	2f0b0b13          	addi	s6,s6,752
1c00b2ac:	95aa                	add	a1,a1,a0
1c00b2ae:	139c                	addi	a5,sp,480
1c00b2b0:	4705                	li	a4,1
1c00b2b2:	02000693          	li	a3,32
1c00b2b6:	965a                	add	a2,a2,s6
1c00b2b8:	b5448513          	addi	a0,s1,-1196
1c00b2bc:	650060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res3bbranch2aconv2d_bias, size 32 from HyperRam at 327968 to (size 32) L2 at 164816 using event 4 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327968), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 164816), 32, 0, &UchanHR4);
1c00b2c0:	4008                	lw	a0,0(s0)
1c00b2c2:	b7092583          	lw	a1,-1168(s2)
1c00b2c6:	00028637          	lui	a2,0x28
1c00b2ca:	120a0a13          	addi	s4,s4,288
1c00b2ce:	3d060613          	addi	a2,a2,976 # 283d0 <__L1Cl+0x183d0>
1c00b2d2:	051c                	addi	a5,sp,640
1c00b2d4:	962a                	add	a2,a2,a0
1c00b2d6:	4705                	li	a4,1
1c00b2d8:	02000693          	li	a3,32
1c00b2dc:	95d2                	add	a1,a1,s4
1c00b2de:	b5448513          	addi	a0,s1,-1196
1c00b2e2:	62a060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
1c00b2e6:	09c14783          	lbu	a5,156(sp)
1c00b2ea:	0ff7f793          	andi	a5,a5,255
1c00b2ee:	ef99                	bnez	a5,1c00b30c <resnetCNN+0x2dc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b2f0:	4689                	li	a3,2
1c00b2f2:	00204737          	lui	a4,0x204
1c00b2f6:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b2fa:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b2fe:	00d72223          	sw	a3,4(a4)
1c00b302:	09c14783          	lbu	a5,156(sp)
1c00b306:	0ff7f793          	andi	a5,a5,255
1c00b30a:	d7f5                	beqz	a5,1c00b2f6 <resnetCNN+0x2c6>
1c00b30c:	13c14783          	lbu	a5,316(sp)
1c00b310:	0ff7f793          	andi	a5,a5,255
1c00b314:	ef99                	bnez	a5,1c00b332 <resnetCNN+0x302>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b316:	4689                	li	a3,2
1c00b318:	00204737          	lui	a4,0x204
1c00b31c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b320:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b324:	00d72223          	sw	a3,4(a4)
1c00b328:	13c14783          	lbu	a5,316(sp)
1c00b32c:	0ff7f793          	andi	a5,a5,255
1c00b330:	d7f5                	beqz	a5,1c00b31c <resnetCNN+0x2ec>
	/* Waiting completion of transfer of Res3a_branch2akernel using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	/* Waiting completion of transfer of Res3a_branch2aconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S21_Conv2d_16x8x3x3_Relu(
1c00b332:	401c                	lw	a5,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+183280)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+185584)), /* Bias */
1c00b334:	0002d5b7          	lui	a1,0x2d
	S21_Conv2d_16x8x3x3_Relu(
1c00b338:	000216b7          	lui	a3,0x21
1c00b33c:	656d                	lui	a0,0x1b
		((signed short * __restrict__) (resnet_L2_Memory+185584)), /* Bias */
1c00b33e:	4f058613          	addi	a2,a1,1264 # 2d4f0 <__L1Cl+0x1d4f0>
	S21_Conv2d_16x8x3x3_Relu(
1c00b342:	dd068693          	addi	a3,a3,-560 # 20dd0 <__L1Cl+0x10dd0>
		((signed short * __restrict__) (resnet_L2_Memory+183280)), /* Filter */
1c00b346:	bf058593          	addi	a1,a1,-1040
	S21_Conv2d_16x8x3x3_Relu(
1c00b34a:	ec050513          	addi	a0,a0,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b34e:	96be                	add	a3,a3,a5
1c00b350:	963e                	add	a2,a2,a5
1c00b352:	95be                	add	a1,a1,a5
1c00b354:	953e                	add	a0,a0,a5
1c00b356:	feef80ef          	jal	ra,1c003b44 <S21_Conv2d_16x8x3x3_Relu>
1c00b35a:	27c14783          	lbu	a5,636(sp)
1c00b35e:	0ff7f793          	andi	a5,a5,255
1c00b362:	ef99                	bnez	a5,1c00b380 <resnetCNN+0x350>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b364:	4689                	li	a3,2
1c00b366:	00204737          	lui	a4,0x204
1c00b36a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b36e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b372:	00d72223          	sw	a3,4(a4)
1c00b376:	27c14783          	lbu	a5,636(sp)
1c00b37a:	0ff7f793          	andi	a5,a5,255
1c00b37e:	d7f5                	beqz	a5,1c00b36a <resnetCNN+0x33a>
		((signed short * __restrict__) (resnet_L2_Memory+134608)) /* Out */
	);
	/* Waiting completion of transfer of Res3a_branch2bconv2d_bias using event 3 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR3);
	S27_Conv2d_16x16x3x3_Relu(
1c00b380:	401c                	lw	a5,0(s0)
1c00b382:	000246b7          	lui	a3,0x24
1c00b386:	00027637          	lui	a2,0x27
1c00b38a:	65b9                	lui	a1,0xe
1c00b38c:	00021537          	lui	a0,0x21
1c00b390:	fd068693          	addi	a3,a3,-48 # 23fd0 <__L1Cl+0x13fd0>
1c00b394:	2f060613          	addi	a2,a2,752 # 272f0 <__L1Cl+0x172f0>
1c00b398:	80058593          	addi	a1,a1,-2048 # d800 <__rt_stack_size+0xd000>
1c00b39c:	dd050513          	addi	a0,a0,-560 # 20dd0 <__L1Cl+0x10dd0>
1c00b3a0:	96be                	add	a3,a3,a5
1c00b3a2:	963e                	add	a2,a2,a5
1c00b3a4:	95be                	add	a1,a1,a5
1c00b3a6:	953e                	add	a0,a0,a5
1c00b3a8:	b16f90ef          	jal	ra,1c0046be <S27_Conv2d_16x16x3x3_Relu>
		((signed short * __restrict__) (resnet_L2_Memory+55296)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+160496)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+147408)) /* Out */
	);
	/* Moving Res4a_branch2aconv2d_bias, size 64 from HyperRam at 327552 to (size 64) L2 at 169920 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327552), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 169920), 64, 0, &UchanHR0);
1c00b3ac:	400c                	lw	a1,0(s0)
1c00b3ae:	00029637          	lui	a2,0x29
1c00b3b2:	b7092503          	lw	a0,-1168(s2)
1c00b3b6:	7c060613          	addi	a2,a2,1984 # 297c0 <__L1Cl+0x197c0>
1c00b3ba:	962e                	add	a2,a2,a1
1c00b3bc:	000505b7          	lui	a1,0x50
1c00b3c0:	f8058593          	addi	a1,a1,-128 # 4ff80 <__L1Cl+0x3ff80>
1c00b3c4:	878a                	mv	a5,sp
1c00b3c6:	95aa                	add	a1,a1,a0
1c00b3c8:	4705                	li	a4,1
1c00b3ca:	04000693          	li	a3,64
1c00b3ce:	b5448513          	addi	a0,s1,-1196
1c00b3d2:	53a060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
1c00b3d6:	1dc14783          	lbu	a5,476(sp)
1c00b3da:	0ff7f793          	andi	a5,a5,255
1c00b3de:	ef99                	bnez	a5,1c00b3fc <resnetCNN+0x3cc>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b3e0:	4689                	li	a3,2
1c00b3e2:	00204737          	lui	a4,0x204
1c00b3e6:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b3ea:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b3ee:	00d72223          	sw	a3,4(a4)
1c00b3f2:	1dc14783          	lbu	a5,476(sp)
1c00b3f6:	0ff7f793          	andi	a5,a5,255
1c00b3fa:	d7f5                	beqz	a5,1c00b3e6 <resnetCNN+0x3b6>
	/* Waiting completion of transfer of Res3a_branch1conv2d_bias using event 2 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2);
	S24_Conv2d_16x8x1x1(
1c00b3fc:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+3584)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+160464)), /* Bias */
1c00b3fe:	00027ab7          	lui	s5,0x27
		((signed short * __restrict__) (resnet_L2_Memory+134608)) /* Out */
1c00b402:	00021a37          	lui	s4,0x21
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b406:	6b6d                	lui	s6,0x1b
	S24_Conv2d_16x8x1x1(
1c00b408:	6585                	lui	a1,0x1
		((signed short * __restrict__) (resnet_L2_Memory+134608)) /* Out */
1c00b40a:	dd0a0a13          	addi	s4,s4,-560 # 20dd0 <__L1Cl+0x10dd0>
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b40e:	ec0b0b13          	addi	s6,s6,-320 # 1aec0 <__L1Cl+0xaec0>
		((signed short * __restrict__) (resnet_L2_Memory+160464)), /* Bias */
1c00b412:	2d0a8613          	addi	a2,s5,720 # 272d0 <__L1Cl+0x172d0>
	S24_Conv2d_16x8x1x1(
1c00b416:	e0058593          	addi	a1,a1,-512 # e00 <__rt_stack_size+0x600>
1c00b41a:	014506b3          	add	a3,a0,s4
1c00b41e:	962a                	add	a2,a2,a0
1c00b420:	95aa                	add	a1,a1,a0
1c00b422:	955a                	add	a0,a0,s6
1c00b424:	cbdf80ef          	jal	ra,1c0040e0 <S24_Conv2d_16x8x1x1>
	);
	S28_MatAdd_16x20x20(
1c00b428:	4008                	lw	a0,0(s0)
1c00b42a:	000247b7          	lui	a5,0x24
1c00b42e:	fd078793          	addi	a5,a5,-48 # 23fd0 <__L1Cl+0x13fd0>
1c00b432:	014505b3          	add	a1,a0,s4
1c00b436:	01650633          	add	a2,a0,s6
1c00b43a:	953e                	add	a0,a0,a5
1c00b43c:	fcaf90ef          	jal	ra,1c004c06 <S28_MatAdd_16x20x20>
		((signed short * __restrict__) (resnet_L2_Memory+147408)), /* In1 */
		((signed short * __restrict__) (resnet_L2_Memory+134608)), /* In2 */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Moving Res3bbranch2bconv2d_bias, size 32 from HyperRam at 328000 to (size 32) L2 at 153280 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328000), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 153280), 32, 0, &UchanHR1);
1c00b440:	00042803          	lw	a6,0(s0)
1c00b444:	b7092503          	lw	a0,-1168(s2)
1c00b448:	00050a37          	lui	s4,0x50
1c00b44c:	00025637          	lui	a2,0x25
1c00b450:	140a0593          	addi	a1,s4,320 # 50140 <__L1Cl+0x40140>
1c00b454:	6c060613          	addi	a2,a2,1728 # 256c0 <__L1Cl+0x156c0>
1c00b458:	9642                	add	a2,a2,a6
1c00b45a:	95aa                	add	a1,a1,a0
1c00b45c:	111c                	addi	a5,sp,160
1c00b45e:	4705                	li	a4,1
1c00b460:	02000693          	li	a3,32
1c00b464:	b5448513          	addi	a0,s1,-1196
1c00b468:	4a4060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res4a_branch1conv2d_bias, size 64 from HyperRam at 327616 to (size 64) L2 at 161728 using event 2 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327616), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 161728), 64, 0, &UchanHR2);
1c00b46c:	4010                	lw	a2,0(s0)
1c00b46e:	b7092583          	lw	a1,-1168(s2)
1c00b472:	7c0a8a93          	addi	s5,s5,1984
1c00b476:	fc0a0a13          	addi	s4,s4,-64
1c00b47a:	029c                	addi	a5,sp,320
1c00b47c:	4705                	li	a4,1
1c00b47e:	04000693          	li	a3,64
1c00b482:	9656                	add	a2,a2,s5
1c00b484:	95d2                	add	a1,a1,s4
1c00b486:	b5448513          	addi	a0,s1,-1196
1c00b48a:	482060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
1c00b48e:	31c14783          	lbu	a5,796(sp)
1c00b492:	0ff7f793          	andi	a5,a5,255
1c00b496:	ef99                	bnez	a5,1c00b4b4 <resnetCNN+0x484>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b498:	4689                	li	a3,2
1c00b49a:	00204737          	lui	a4,0x204
1c00b49e:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b4a2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b4a6:	00d72223          	sw	a3,4(a4)
1c00b4aa:	31c14783          	lbu	a5,796(sp)
1c00b4ae:	0ff7f793          	andi	a5,a5,255
1c00b4b2:	d7f5                	beqz	a5,1c00b49e <resnetCNN+0x46e>
	/* Waiting completion of transfer of Res3bbranch2aconv2d_bias using event 4 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR4);
	S31_Conv2d_16x16x3x3_Relu(
1c00b4b4:	401c                	lw	a5,0(s0)
1c00b4b6:	66f9                	lui	a3,0x1e
1c00b4b8:	00028637          	lui	a2,0x28
1c00b4bc:	6599                	lui	a1,0x6
1c00b4be:	656d                	lui	a0,0x1b
1c00b4c0:	0c068693          	addi	a3,a3,192 # 1e0c0 <__L1Cl+0xe0c0>
1c00b4c4:	3d060613          	addi	a2,a2,976 # 283d0 <__L1Cl+0x183d0>
1c00b4c8:	80058593          	addi	a1,a1,-2048 # 5800 <__rt_stack_size+0x5000>
1c00b4cc:	ec050513          	addi	a0,a0,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b4d0:	96be                	add	a3,a3,a5
1c00b4d2:	963e                	add	a2,a2,a5
1c00b4d4:	95be                	add	a1,a1,a5
1c00b4d6:	953e                	add	a0,a0,a5
1c00b4d8:	9bff90ef          	jal	ra,1c004e96 <S31_Conv2d_16x16x3x3_Relu>
1c00b4dc:	13c14783          	lbu	a5,316(sp)
1c00b4e0:	0ff7f793          	andi	a5,a5,255
1c00b4e4:	ef99                	bnez	a5,1c00b502 <resnetCNN+0x4d2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b4e6:	4689                	li	a3,2
1c00b4e8:	00204737          	lui	a4,0x204
1c00b4ec:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b4f0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b4f4:	00d72223          	sw	a3,4(a4)
1c00b4f8:	13c14783          	lbu	a5,316(sp)
1c00b4fc:	0ff7f793          	andi	a5,a5,255
1c00b500:	d7f5                	beqz	a5,1c00b4ec <resnetCNN+0x4bc>
		((signed short * __restrict__) (resnet_L2_Memory+164816)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
	);
	/* Waiting completion of transfer of Res3bbranch2bconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S34_Conv2d_16x16x3x3(
1c00b502:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+27136)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+153280)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+135872)) /* Out */
1c00b504:	00021a37          	lui	s4,0x21
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
1c00b508:	6af9                	lui	s5,0x1e
	S34_Conv2d_16x16x3x3(
1c00b50a:	00025637          	lui	a2,0x25
1c00b50e:	659d                	lui	a1,0x7
		((signed short * __restrict__) (resnet_L2_Memory+135872)) /* Out */
1c00b510:	2c0a0a13          	addi	s4,s4,704 # 212c0 <__L1Cl+0x112c0>
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
1c00b514:	0c0a8a93          	addi	s5,s5,192 # 1e0c0 <__L1Cl+0xe0c0>
	S34_Conv2d_16x16x3x3(
1c00b518:	6c060613          	addi	a2,a2,1728 # 256c0 <__L1Cl+0x156c0>
1c00b51c:	a0058593          	addi	a1,a1,-1536 # 6a00 <__rt_stack_size+0x6200>
1c00b520:	014506b3          	add	a3,a0,s4
1c00b524:	962a                	add	a2,a2,a0
1c00b526:	95aa                	add	a1,a1,a0
1c00b528:	9556                	add	a0,a0,s5
1c00b52a:	eb5f90ef          	jal	ra,1c0053de <S34_Conv2d_16x16x3x3>
	);
	S35_MatAdd_16x20x20(
1c00b52e:	4008                	lw	a0,0(s0)
1c00b530:	65ed                	lui	a1,0x1b
1c00b532:	ec058593          	addi	a1,a1,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b536:	01550633          	add	a2,a0,s5
1c00b53a:	95aa                	add	a1,a1,a0
1c00b53c:	9552                	add	a0,a0,s4
1c00b53e:	be8fa0ef          	jal	ra,1c005926 <S35_MatAdd_16x20x20>
		((signed short * __restrict__) (resnet_L2_Memory+135872)), /* In1 */
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In2 */
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
	);
	/* Moving Res4a_branch2bconv2d_bias, size 64 from HyperRam at 327680 to (size 64) L2 at 116672 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327680), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 116672), 64, 0, &UchanHR1);
1c00b542:	4008                	lw	a0,0(s0)
1c00b544:	b7092583          	lw	a1,-1168(s2)
1c00b548:	6671                	lui	a2,0x1c
1c00b54a:	7c060613          	addi	a2,a2,1984 # 1c7c0 <__L1Cl+0xc7c0>
1c00b54e:	962a                	add	a2,a2,a0
1c00b550:	00050537          	lui	a0,0x50
1c00b554:	95aa                	add	a1,a1,a0
1c00b556:	111c                	addi	a5,sp,160
1c00b558:	4705                	li	a4,1
1c00b55a:	04000693          	li	a3,64
1c00b55e:	b5448513          	addi	a0,s1,-1196
1c00b562:	3aa060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res4bbranch2akernel, size 18432 from HyperRam at 276480 to (size 18432) L2 at 142272 using event 3 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 276480), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 142272), 18432, 0, &UchanHR3);
1c00b566:	400c                	lw	a1,0(s0)
1c00b568:	00023637          	lui	a2,0x23
1c00b56c:	b7092503          	lw	a0,-1168(s2)
1c00b570:	bc060613          	addi	a2,a2,-1088 # 22bc0 <__L1Cl+0x12bc0>
1c00b574:	962e                	add	a2,a2,a1
1c00b576:	000445b7          	lui	a1,0x44
1c00b57a:	6695                	lui	a3,0x5
1c00b57c:	80058593          	addi	a1,a1,-2048 # 43800 <__L1Cl+0x33800>
1c00b580:	139c                	addi	a5,sp,480
1c00b582:	95aa                	add	a1,a1,a0
1c00b584:	4705                	li	a4,1
1c00b586:	80068693          	addi	a3,a3,-2048 # 4800 <__rt_stack_size+0x4000>
1c00b58a:	b5448513          	addi	a0,s1,-1196
1c00b58e:	37e060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
1c00b592:	09c14783          	lbu	a5,156(sp)
1c00b596:	0ff7f793          	andi	a5,a5,255
1c00b59a:	ef99                	bnez	a5,1c00b5b8 <resnetCNN+0x588>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b59c:	4689                	li	a3,2
1c00b59e:	00204737          	lui	a4,0x204
1c00b5a2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b5a6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b5aa:	00d72223          	sw	a3,4(a4)
1c00b5ae:	09c14783          	lbu	a5,156(sp)
1c00b5b2:	0ff7f793          	andi	a5,a5,255
1c00b5b6:	d7f5                	beqz	a5,1c00b5a2 <resnetCNN+0x572>
	/* Waiting completion of transfer of Res4a_branch2aconv2d_bias using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	S38_Conv2d_32x16x3x3_Relu(
1c00b5b8:	401c                	lw	a5,0(s0)
1c00b5ba:	66ed                	lui	a3,0x1b
1c00b5bc:	00029637          	lui	a2,0x29
1c00b5c0:	65e1                	lui	a1,0x18
1c00b5c2:	6579                	lui	a0,0x1e
1c00b5c4:	ec068693          	addi	a3,a3,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b5c8:	7c060613          	addi	a2,a2,1984 # 297c0 <__L1Cl+0x197c0>
1c00b5cc:	64058593          	addi	a1,a1,1600 # 18640 <__L1Cl+0x8640>
1c00b5d0:	0c050513          	addi	a0,a0,192 # 1e0c0 <__L1Cl+0xe0c0>
1c00b5d4:	96be                	add	a3,a3,a5
1c00b5d6:	963e                	add	a2,a2,a5
1c00b5d8:	95be                	add	a1,a1,a5
1c00b5da:	953e                	add	a0,a0,a5
1c00b5dc:	ddafa0ef          	jal	ra,1c005bb6 <S38_Conv2d_32x16x3x3_Relu>
1c00b5e0:	13c14783          	lbu	a5,316(sp)
1c00b5e4:	0ff7f793          	andi	a5,a5,255
1c00b5e8:	ef99                	bnez	a5,1c00b606 <resnetCNN+0x5d6>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b5ea:	4689                	li	a3,2
1c00b5ec:	00204737          	lui	a4,0x204
1c00b5f0:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b5f4:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b5f8:	00d72223          	sw	a3,4(a4)
1c00b5fc:	13c14783          	lbu	a5,316(sp)
1c00b600:	0ff7f793          	andi	a5,a5,255
1c00b604:	d7f5                	beqz	a5,1c00b5f0 <resnetCNN+0x5c0>
		((signed short * __restrict__) (resnet_L2_Memory+169920)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Waiting completion of transfer of Res4a_branch2bconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S44_Conv2d_32x32x3x3_Relu(
1c00b606:	401c                	lw	a5,0(s0)
1c00b608:	000216b7          	lui	a3,0x21
1c00b60c:	6671                	lui	a2,0x1c
1c00b60e:	656d                	lui	a0,0x1b
1c00b610:	2c068693          	addi	a3,a3,704 # 212c0 <__L1Cl+0x112c0>
1c00b614:	7c060613          	addi	a2,a2,1984 # 1c7c0 <__L1Cl+0xc7c0>
1c00b618:	6585                	lui	a1,0x1
1c00b61a:	ec050513          	addi	a0,a0,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b61e:	96be                	add	a3,a3,a5
1c00b620:	963e                	add	a2,a2,a5
1c00b622:	95be                	add	a1,a1,a5
1c00b624:	953e                	add	a0,a0,a5
1c00b626:	d4dfa0ef          	jal	ra,1c006372 <S44_Conv2d_32x32x3x3_Relu>
1c00b62a:	1dc14783          	lbu	a5,476(sp)
1c00b62e:	0ff7f793          	andi	a5,a5,255
1c00b632:	ef99                	bnez	a5,1c00b650 <resnetCNN+0x620>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b634:	4689                	li	a3,2
1c00b636:	00204737          	lui	a4,0x204
1c00b63a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b63e:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b642:	00d72223          	sw	a3,4(a4)
1c00b646:	1dc14783          	lbu	a5,476(sp)
1c00b64a:	0ff7f793          	andi	a5,a5,255
1c00b64e:	d7f5                	beqz	a5,1c00b63a <resnetCNN+0x60a>
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+135872)) /* Out */
	);
	/* Waiting completion of transfer of Res4a_branch1conv2d_bias using event 2 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR2);
	S41_Conv2d_32x16x1x1(
1c00b650:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+35840)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+161728)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+116672)) /* Out */
1c00b652:	6a71                	lui	s4,0x1c
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
1c00b654:	6b79                	lui	s6,0x1e
	S41_Conv2d_32x16x1x1(
1c00b656:	00027637          	lui	a2,0x27
1c00b65a:	65a5                	lui	a1,0x9
		((signed short * __restrict__) (resnet_L2_Memory+116672)) /* Out */
1c00b65c:	7c0a0a13          	addi	s4,s4,1984 # 1c7c0 <__L1Cl+0xc7c0>
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In */
1c00b660:	0c0b0b13          	addi	s6,s6,192 # 1e0c0 <__L1Cl+0xe0c0>
	S41_Conv2d_32x16x1x1(
1c00b664:	7c060613          	addi	a2,a2,1984 # 277c0 <__L1Cl+0x177c0>
1c00b668:	c0058593          	addi	a1,a1,-1024 # 8c00 <__rt_stack_size+0x8400>
1c00b66c:	014506b3          	add	a3,a0,s4
1c00b670:	962a                	add	a2,a2,a0
1c00b672:	95aa                	add	a1,a1,a0
1c00b674:	955a                	add	a0,a0,s6
1c00b676:	921fa0ef          	jal	ra,1c005f96 <S41_Conv2d_32x16x1x1>
	);
	/* Moving Res4bbranch2aconv2d_bias, size 64 from HyperRam at 327744 to (size 64) L2 at 123072 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327744), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 123072), 64, 0, &UchanHR0);
1c00b67a:	b7092503          	lw	a0,-1168(s2)
1c00b67e:	4010                	lw	a2,0(s0)
1c00b680:	00050ab7          	lui	s5,0x50
1c00b684:	040a8593          	addi	a1,s5,64 # 50040 <__L1Cl+0x40040>
1c00b688:	95aa                	add	a1,a1,a0
1c00b68a:	878a                	mv	a5,sp
1c00b68c:	4705                	li	a4,1
1c00b68e:	04000693          	li	a3,64
1c00b692:	965a                	add	a2,a2,s6
1c00b694:	b5448513          	addi	a0,s1,-1196
1c00b698:	274060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res4bbranch2bconv2d_bias, size 64 from HyperRam at 327808 to (size 64) L2 at 129472 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327808), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 129472), 64, 0, &UchanHR1);
1c00b69c:	4008                	lw	a0,0(s0)
1c00b69e:	b7092583          	lw	a1,-1168(s2)
1c00b6a2:	00020637          	lui	a2,0x20
1c00b6a6:	080a8a93          	addi	s5,s5,128
1c00b6aa:	9c060613          	addi	a2,a2,-1600 # 1f9c0 <__L1Cl+0xf9c0>
1c00b6ae:	962a                	add	a2,a2,a0
1c00b6b0:	111c                	addi	a5,sp,160
1c00b6b2:	4705                	li	a4,1
1c00b6b4:	04000693          	li	a3,64
1c00b6b8:	95d6                	add	a1,a1,s5
1c00b6ba:	b5448513          	addi	a0,s1,-1196
1c00b6be:	24e060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S45_MatAdd_32x10x10(
1c00b6c2:	4008                	lw	a0,0(s0)
1c00b6c4:	666d                	lui	a2,0x1b
1c00b6c6:	000217b7          	lui	a5,0x21
1c00b6ca:	2c078793          	addi	a5,a5,704 # 212c0 <__L1Cl+0x112c0>
1c00b6ce:	ec060613          	addi	a2,a2,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b6d2:	962a                	add	a2,a2,a0
1c00b6d4:	014505b3          	add	a1,a0,s4
1c00b6d8:	953e                	add	a0,a0,a5
1c00b6da:	86cfb0ef          	jal	ra,1c006746 <S45_MatAdd_32x10x10>
1c00b6de:	27c14783          	lbu	a5,636(sp)
1c00b6e2:	0ff7f793          	andi	a5,a5,255
1c00b6e6:	ef99                	bnez	a5,1c00b704 <resnetCNN+0x6d4>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b6e8:	4689                	li	a3,2
1c00b6ea:	00204737          	lui	a4,0x204
1c00b6ee:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b6f2:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b6f6:	00d72223          	sw	a3,4(a4)
1c00b6fa:	27c14783          	lbu	a5,636(sp)
1c00b6fe:	0ff7f793          	andi	a5,a5,255
1c00b702:	d7f5                	beqz	a5,1c00b6ee <resnetCNN+0x6be>
1c00b704:	09c14783          	lbu	a5,156(sp)
1c00b708:	0ff7f793          	andi	a5,a5,255
1c00b70c:	ef99                	bnez	a5,1c00b72a <resnetCNN+0x6fa>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b70e:	4689                	li	a3,2
1c00b710:	00204737          	lui	a4,0x204
1c00b714:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b718:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b71c:	00d72223          	sw	a3,4(a4)
1c00b720:	09c14783          	lbu	a5,156(sp)
1c00b724:	0ff7f793          	andi	a5,a5,255
1c00b728:	d7f5                	beqz	a5,1c00b714 <resnetCNN+0x6e4>
	);
	/* Waiting completion of transfer of Res4bbranch2akernel using event 3 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR3);
	/* Waiting completion of transfer of Res4bbranch2aconv2d_bias using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	S48_Conv2d_32x32x3x3_Relu(
1c00b72a:	401c                	lw	a5,0(s0)
1c00b72c:	66f1                	lui	a3,0x1c
1c00b72e:	6679                	lui	a2,0x1e
1c00b730:	000235b7          	lui	a1,0x23
1c00b734:	656d                	lui	a0,0x1b
1c00b736:	7c068693          	addi	a3,a3,1984 # 1c7c0 <__L1Cl+0xc7c0>
1c00b73a:	0c060613          	addi	a2,a2,192 # 1e0c0 <__L1Cl+0xe0c0>
1c00b73e:	bc058593          	addi	a1,a1,-1088 # 22bc0 <__L1Cl+0x12bc0>
1c00b742:	ec050513          	addi	a0,a0,-320 # 1aec0 <__L1Cl+0xaec0>
1c00b746:	96be                	add	a3,a3,a5
1c00b748:	963e                	add	a2,a2,a5
1c00b74a:	95be                	add	a1,a1,a5
1c00b74c:	953e                	add	a0,a0,a5
1c00b74e:	a9afb0ef          	jal	ra,1c0069e8 <S48_Conv2d_32x32x3x3_Relu>
1c00b752:	13c14783          	lbu	a5,316(sp)
1c00b756:	0ff7f793          	andi	a5,a5,255
1c00b75a:	ef99                	bnez	a5,1c00b778 <resnetCNN+0x748>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b75c:	4689                	li	a3,2
1c00b75e:	00204737          	lui	a4,0x204
1c00b762:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b766:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b76a:	00d72223          	sw	a3,4(a4)
1c00b76e:	13c14783          	lbu	a5,316(sp)
1c00b772:	0ff7f793          	andi	a5,a5,255
1c00b776:	d7f5                	beqz	a5,1c00b762 <resnetCNN+0x732>
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+116672)) /* Out */
	);
	/* Waiting completion of transfer of Res4bbranch2bconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S51_Conv2d_32x32x3x3(
1c00b778:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* In */
1c00b77a:	6af1                	lui	s5,0x1c
		((signed short * __restrict__) (resnet_L2_Memory+36864)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+129472)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
1c00b77c:	6b79                	lui	s6,0x1e
	S51_Conv2d_32x32x3x3(
1c00b77e:	00020637          	lui	a2,0x20
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* In */
1c00b782:	7c0a8b93          	addi	s7,s5,1984 # 1c7c0 <__L1Cl+0xc7c0>
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
1c00b786:	0c0b0b13          	addi	s6,s6,192 # 1e0c0 <__L1Cl+0xe0c0>
	S51_Conv2d_32x32x3x3(
1c00b78a:	9c060613          	addi	a2,a2,-1600 # 1f9c0 <__L1Cl+0xf9c0>
1c00b78e:	65a5                	lui	a1,0x9
1c00b790:	016506b3          	add	a3,a0,s6
1c00b794:	962a                	add	a2,a2,a0
1c00b796:	95aa                	add	a1,a1,a0
1c00b798:	955e                	add	a0,a0,s7
1c00b79a:	e22fb0ef          	jal	ra,1c006dbc <S51_Conv2d_32x32x3x3>
	);
	S52_MatAdd_32x10x10(
1c00b79e:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* In1 */
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In2 */
1c00b7a0:	6a6d                	lui	s4,0x1b
1c00b7a2:	ec0a0a13          	addi	s4,s4,-320 # 1aec0 <__L1Cl+0xaec0>
	S52_MatAdd_32x10x10(
1c00b7a6:	01750633          	add	a2,a0,s7
1c00b7aa:	014505b3          	add	a1,a0,s4
1c00b7ae:	955a                	add	a0,a0,s6
1c00b7b0:	9e3fb0ef          	jal	ra,1c007192 <S52_MatAdd_32x10x10>
		((signed short * __restrict__) (resnet_L2_Memory+116672)) /* Out */
	);
	/* Moving Res5a_branch2bkernel, size 73728 from HyperRam at 0 to (size 73728) L2 at 126272 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 0), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 126272), 73728, 0, &UchanHR0);
1c00b7b4:	4008                	lw	a0,0(s0)
1c00b7b6:	b7092583          	lw	a1,-1168(s2)
1c00b7ba:	667d                	lui	a2,0x1f
1c00b7bc:	d4060613          	addi	a2,a2,-704 # 1ed40 <__L1Cl+0xed40>
1c00b7c0:	962a                	add	a2,a2,a0
1c00b7c2:	878a                	mv	a5,sp
1c00b7c4:	4705                	li	a4,1
1c00b7c6:	66c9                	lui	a3,0x12
1c00b7c8:	b5448513          	addi	a0,s1,-1196
1c00b7cc:	140060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res5a_branch2bconv2d_bias, size 128 from HyperRam at 327168 to (size 128) L2 at 113472 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327168), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 113472), 128, 0, &UchanHR1);
1c00b7d0:	b7092503          	lw	a0,-1168(s2)
1c00b7d4:	4010                	lw	a2,0(s0)
1c00b7d6:	000505b7          	lui	a1,0x50
1c00b7da:	b40a8a93          	addi	s5,s5,-1216
1c00b7de:	e0058593          	addi	a1,a1,-512 # 4fe00 <__L1Cl+0x3fe00>
1c00b7e2:	111c                	addi	a5,sp,160
1c00b7e4:	95aa                	add	a1,a1,a0
1c00b7e6:	4705                	li	a4,1
1c00b7e8:	08000693          	li	a3,128
1c00b7ec:	9656                	add	a2,a2,s5
1c00b7ee:	b5448513          	addi	a0,s1,-1196
1c00b7f2:	11a060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S55_Conv2d_64x32x3x3_Relu(
1c00b7f6:	4008                	lw	a0,0(s0)
1c00b7f8:	6605                	lui	a2,0x1
1c00b7fa:	65bd                	lui	a1,0xf
1c00b7fc:	f0060613          	addi	a2,a2,-256 # f00 <__rt_stack_size+0x700>
1c00b800:	64058593          	addi	a1,a1,1600 # f640 <__rt_stack_size+0xee40>
1c00b804:	014506b3          	add	a3,a0,s4
1c00b808:	962a                	add	a2,a2,a0
1c00b80a:	95aa                	add	a1,a1,a0
1c00b80c:	955e                	add	a0,a0,s7
1c00b80e:	c27fb0ef          	jal	ra,1c007434 <S55_Conv2d_64x32x3x3_Relu>
1c00b812:	09c14783          	lbu	a5,156(sp)
1c00b816:	0ff7f793          	andi	a5,a5,255
1c00b81a:	ef99                	bnez	a5,1c00b838 <resnetCNN+0x808>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b81c:	4689                	li	a3,2
1c00b81e:	00204737          	lui	a4,0x204
1c00b822:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b826:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b82a:	00d72223          	sw	a3,4(a4)
1c00b82e:	09c14783          	lbu	a5,156(sp)
1c00b832:	0ff7f793          	andi	a5,a5,255
1c00b836:	d7f5                	beqz	a5,1c00b822 <resnetCNN+0x7f2>
1c00b838:	13c14783          	lbu	a5,316(sp)
1c00b83c:	0ff7f793          	andi	a5,a5,255
1c00b840:	ef99                	bnez	a5,1c00b85e <resnetCNN+0x82e>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b842:	4689                	li	a3,2
1c00b844:	00204737          	lui	a4,0x204
1c00b848:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b84c:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b850:	00d72223          	sw	a3,4(a4)
1c00b854:	13c14783          	lbu	a5,316(sp)
1c00b858:	0ff7f793          	andi	a5,a5,255
1c00b85c:	d7f5                	beqz	a5,1c00b848 <resnetCNN+0x818>
	);
	/* Waiting completion of transfer of Res5a_branch2bkernel using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	/* Waiting completion of transfer of Res5a_branch2bconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S61_Conv2d_64x64x3x3_Relu(
1c00b85e:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+126272)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+113472)), /* Bias */
1c00b860:	6af1                	lui	s5,0x1c
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b862:	6a6d                	lui	s4,0x1b
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
1c00b864:	6b79                	lui	s6,0x1e
		((signed short * __restrict__) (resnet_L2_Memory+126272)), /* Filter */
1c00b866:	6bfd                	lui	s7,0x1f
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b868:	ec0a0a13          	addi	s4,s4,-320 # 1aec0 <__L1Cl+0xaec0>
		((signed short * __restrict__) (resnet_L2_Memory+113472)), /* Bias */
1c00b86c:	b40a8c13          	addi	s8,s5,-1216 # 1bb40 <__L1Cl+0xbb40>
		((signed short * __restrict__) (resnet_L2_Memory+123072)) /* Out */
1c00b870:	0c0b0b13          	addi	s6,s6,192 # 1e0c0 <__L1Cl+0xe0c0>
		((signed short * __restrict__) (resnet_L2_Memory+126272)), /* Filter */
1c00b874:	d40b8b93          	addi	s7,s7,-704 # 1ed40 <__L1Cl+0xed40>
	S61_Conv2d_64x64x3x3_Relu(
1c00b878:	016506b3          	add	a3,a0,s6
1c00b87c:	01850633          	add	a2,a0,s8
1c00b880:	017505b3          	add	a1,a0,s7
1c00b884:	9552                	add	a0,a0,s4
1c00b886:	ce6fc0ef          	jal	ra,1c007d6c <S61_Conv2d_64x64x3x3_Relu>
	);
	/* Moving Res5bbranch2akernel, size 73728 from HyperRam at 73728 to (size 73728) L2 at 126272 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 73728), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 126272), 73728, 0, &UchanHR0);
1c00b88a:	4010                	lw	a2,0(s0)
1c00b88c:	b7092583          	lw	a1,-1168(s2)
1c00b890:	6549                	lui	a0,0x12
1c00b892:	878a                	mv	a5,sp
1c00b894:	4705                	li	a4,1
1c00b896:	95aa                	add	a1,a1,a0
1c00b898:	66c9                	lui	a3,0x12
1c00b89a:	965e                	add	a2,a2,s7
1c00b89c:	b5448513          	addi	a0,s1,-1196
1c00b8a0:	06c060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S58_Conv2d_64x32x1x1(
1c00b8a4:	4008                	lw	a0,0(s0)
1c00b8a6:	6605                	lui	a2,0x1
1c00b8a8:	65a1                	lui	a1,0x8
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* In */
1c00b8aa:	7c0a8a93          	addi	s5,s5,1984
	S58_Conv2d_64x32x1x1(
1c00b8ae:	f8060613          	addi	a2,a2,-128 # f80 <__rt_stack_size+0x780>
1c00b8b2:	c0058593          	addi	a1,a1,-1024 # 7c00 <__rt_stack_size+0x7400>
1c00b8b6:	014506b3          	add	a3,a0,s4
1c00b8ba:	962a                	add	a2,a2,a0
1c00b8bc:	95aa                	add	a1,a1,a0
1c00b8be:	9556                	add	a0,a0,s5
1c00b8c0:	8d6fc0ef          	jal	ra,1c007996 <S58_Conv2d_64x32x1x1>
		((signed short * __restrict__) (resnet_L2_Memory+31744)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+3968)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Moving Res5bbranch2aconv2d_bias, size 128 from HyperRam at 327296 to (size 128) L2 at 116672 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327296), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 116672), 128, 0, &UchanHR1);
1c00b8c4:	b7092503          	lw	a0,-1168(s2)
1c00b8c8:	4010                	lw	a2,0(s0)
1c00b8ca:	000505b7          	lui	a1,0x50
1c00b8ce:	e8058593          	addi	a1,a1,-384 # 4fe80 <__L1Cl+0x3fe80>
1c00b8d2:	111c                	addi	a5,sp,160
1c00b8d4:	95aa                	add	a1,a1,a0
1c00b8d6:	4705                	li	a4,1
1c00b8d8:	08000693          	li	a3,128
1c00b8dc:	9656                	add	a2,a2,s5
1c00b8de:	b5448513          	addi	a0,s1,-1196
1c00b8e2:	02a060ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S62_MatAdd_64x5x5(
1c00b8e6:	4008                	lw	a0,0(s0)
1c00b8e8:	01850633          	add	a2,a0,s8
1c00b8ec:	014505b3          	add	a1,a0,s4
1c00b8f0:	955a                	add	a0,a0,s6
1c00b8f2:	9b9fc0ef          	jal	ra,1c0082aa <S62_MatAdd_64x5x5>
1c00b8f6:	09c14783          	lbu	a5,156(sp)
1c00b8fa:	0ff7f793          	andi	a5,a5,255
1c00b8fe:	ef99                	bnez	a5,1c00b91c <resnetCNN+0x8ec>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b900:	4689                	li	a3,2
1c00b902:	00204737          	lui	a4,0x204
1c00b906:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b90a:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b90e:	00d72223          	sw	a3,4(a4)
1c00b912:	09c14783          	lbu	a5,156(sp)
1c00b916:	0ff7f793          	andi	a5,a5,255
1c00b91a:	d7f5                	beqz	a5,1c00b906 <resnetCNN+0x8d6>
1c00b91c:	13c14783          	lbu	a5,316(sp)
1c00b920:	0ff7f793          	andi	a5,a5,255
1c00b924:	ef99                	bnez	a5,1c00b942 <resnetCNN+0x912>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b926:	4689                	li	a3,2
1c00b928:	00204737          	lui	a4,0x204
1c00b92c:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b930:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b934:	00d72223          	sw	a3,4(a4)
1c00b938:	13c14783          	lbu	a5,316(sp)
1c00b93c:	0ff7f793          	andi	a5,a5,255
1c00b940:	d7f5                	beqz	a5,1c00b92c <resnetCNN+0x8fc>
	);
	/* Waiting completion of transfer of Res5bbranch2akernel using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	/* Waiting completion of transfer of Res5bbranch2aconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S65_Conv2d_64x64x3x3_Relu(
1c00b942:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+113472)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+126272)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* Bias */
1c00b944:	67f1                	lui	a5,0x1c
	S65_Conv2d_64x64x3x3_Relu(
1c00b946:	66ed                	lui	a3,0x1b
1c00b948:	65fd                	lui	a1,0x1f
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* Bias */
1c00b94a:	7c078a13          	addi	s4,a5,1984 # 1c7c0 <__L1Cl+0xc7c0>
	S65_Conv2d_64x64x3x3_Relu(
1c00b94e:	ec068693          	addi	a3,a3,-320 # 1aec0 <__L1Cl+0xaec0>
		((signed short * __restrict__) (resnet_L2_Memory+113472)), /* In */
1c00b952:	b4078793          	addi	a5,a5,-1216
	S65_Conv2d_64x64x3x3_Relu(
1c00b956:	d4058593          	addi	a1,a1,-704 # 1ed40 <__L1Cl+0xed40>
1c00b95a:	96aa                	add	a3,a3,a0
1c00b95c:	01450633          	add	a2,a0,s4
1c00b960:	95aa                	add	a1,a1,a0
1c00b962:	953e                	add	a0,a0,a5
1c00b964:	be9fc0ef          	jal	ra,1c00854c <S65_Conv2d_64x64x3x3_Relu>
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Moving Res5bbranch2bkernel, size 73728 from HyperRam at 147456 to (size 73728) L2 at 123072 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 147456), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 123072), 73728, 0, &UchanHR0);
1c00b968:	4008                	lw	a0,0(s0)
1c00b96a:	b7092583          	lw	a1,-1168(s2)
1c00b96e:	6679                	lui	a2,0x1e
1c00b970:	0c060613          	addi	a2,a2,192 # 1e0c0 <__L1Cl+0xe0c0>
1c00b974:	962a                	add	a2,a2,a0
1c00b976:	00024537          	lui	a0,0x24
1c00b97a:	95aa                	add	a1,a1,a0
1c00b97c:	878a                	mv	a5,sp
1c00b97e:	4705                	li	a4,1
1c00b980:	66c9                	lui	a3,0x12
1c00b982:	b5448513          	addi	a0,s1,-1196
1c00b986:	787050ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	/* Moving Res5bbranch2bconv2d_bias, size 128 from HyperRam at 327424 to (size 128) L2 at 116672 using event 1 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 327424), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 116672), 128, 0, &UchanHR1);
1c00b98a:	b7092503          	lw	a0,-1168(s2)
1c00b98e:	4010                	lw	a2,0(s0)
1c00b990:	000505b7          	lui	a1,0x50
1c00b994:	f0058593          	addi	a1,a1,-256 # 4ff00 <__L1Cl+0x3ff00>
1c00b998:	111c                	addi	a5,sp,160
1c00b99a:	95aa                	add	a1,a1,a0
1c00b99c:	4705                	li	a4,1
1c00b99e:	08000693          	li	a3,128
1c00b9a2:	9652                	add	a2,a2,s4
1c00b9a4:	b5448513          	addi	a0,s1,-1196
1c00b9a8:	765050ef          	jal	ra,1c01190c <pi_cl_ram_copy>
1c00b9ac:	09c14783          	lbu	a5,156(sp)
1c00b9b0:	0ff7f793          	andi	a5,a5,255
1c00b9b4:	ef99                	bnez	a5,1c00b9d2 <resnetCNN+0x9a2>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b9b6:	4689                	li	a3,2
1c00b9b8:	00204737          	lui	a4,0x204
1c00b9bc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b9c0:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b9c4:	00d72223          	sw	a3,4(a4)
1c00b9c8:	09c14783          	lbu	a5,156(sp)
1c00b9cc:	0ff7f793          	andi	a5,a5,255
1c00b9d0:	d7f5                	beqz	a5,1c00b9bc <resnetCNN+0x98c>
1c00b9d2:	13c14783          	lbu	a5,316(sp)
1c00b9d6:	0ff7f793          	andi	a5,a5,255
1c00b9da:	ef99                	bnez	a5,1c00b9f8 <resnetCNN+0x9c8>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00b9dc:	4689                	li	a3,2
1c00b9de:	00204737          	lui	a4,0x204
1c00b9e2:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00b9e6:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00b9ea:	00d72223          	sw	a3,4(a4)
1c00b9ee:	13c14783          	lbu	a5,316(sp)
1c00b9f2:	0ff7f793          	andi	a5,a5,255
1c00b9f6:	d7f5                	beqz	a5,1c00b9e2 <resnetCNN+0x9b2>
	/* Waiting completion of transfer of Res5bbranch2bkernel using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	/* Waiting completion of transfer of Res5bbranch2bconv2d_bias using event 1 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR1);
	S68_Conv2d_64x64x3x3(
1c00b9f8:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+123072)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* Bias */
1c00b9fa:	6a71                	lui	s4,0x1c
		((signed short * __restrict__) (resnet_L2_Memory+119872)) /* Out */
1c00b9fc:	6b75                	lui	s6,0x1d
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00b9fe:	6aed                	lui	s5,0x1b
	S68_Conv2d_64x64x3x3(
1c00ba00:	65f9                	lui	a1,0x1e
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* Bias */
1c00ba02:	7c0a0b93          	addi	s7,s4,1984 # 1c7c0 <__L1Cl+0xc7c0>
		((signed short * __restrict__) (resnet_L2_Memory+119872)) /* Out */
1c00ba06:	440b0b13          	addi	s6,s6,1088 # 1d440 <__L1Cl+0xd440>
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00ba0a:	ec0a8a93          	addi	s5,s5,-320 # 1aec0 <__L1Cl+0xaec0>
	S68_Conv2d_64x64x3x3(
1c00ba0e:	0c058593          	addi	a1,a1,192 # 1e0c0 <__L1Cl+0xe0c0>
1c00ba12:	016506b3          	add	a3,a0,s6
1c00ba16:	01750633          	add	a2,a0,s7
1c00ba1a:	95aa                	add	a1,a1,a0
1c00ba1c:	9556                	add	a0,a0,s5
1c00ba1e:	86cfd0ef          	jal	ra,1c008a8a <S68_Conv2d_64x64x3x3>
	);
	S69_MatAdd_64x5x5(
1c00ba22:	4008                	lw	a0,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+119872)), /* In1 */
		((signed short * __restrict__) (resnet_L2_Memory+113472)), /* In2 */
1c00ba24:	b40a0593          	addi	a1,s4,-1216
		((signed short * __restrict__) (resnet_L2_Memory+116672)) /* Out */
	);
	/* Moving Full_connection7matmul_bias, size 14 from HyperRam at 328064 to (size 14) L2 at 114384 using event 0 */
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328064), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 114384), 14, 0, &UchanHR0);
1c00ba28:	ed0a0a13          	addi	s4,s4,-304
	S69_MatAdd_64x5x5(
1c00ba2c:	01750633          	add	a2,a0,s7
1c00ba30:	95aa                	add	a1,a1,a0
1c00ba32:	955a                	add	a0,a0,s6
1c00ba34:	d96fd0ef          	jal	ra,1c008fca <S69_MatAdd_64x5x5>
	AT_HYPERRAM_CL_COPY(&HyperRam, ((AT_HYPERRAM_EXT_ADDR_TYPE) resnet_L3_Memory + 328064), ((AT_HYPERRAM_INT_ADDR_TYPE) resnet_L2_Memory + 114384), 14, 0, &UchanHR0);
1c00ba38:	b7092503          	lw	a0,-1168(s2)
1c00ba3c:	4010                	lw	a2,0(s0)
1c00ba3e:	000505b7          	lui	a1,0x50
1c00ba42:	18058593          	addi	a1,a1,384 # 50180 <__L1Cl+0x40180>
1c00ba46:	878a                	mv	a5,sp
1c00ba48:	95aa                	add	a1,a1,a0
1c00ba4a:	4705                	li	a4,1
1c00ba4c:	46b9                	li	a3,14
1c00ba4e:	9652                	add	a2,a2,s4
1c00ba50:	b5448513          	addi	a0,s1,-1196
1c00ba54:	6b9050ef          	jal	ra,1c01190c <pi_cl_ram_copy>
	S70_AveragePool_2x2(
1c00ba58:	4008                	lw	a0,0(s0)
1c00ba5a:	015505b3          	add	a1,a0,s5
1c00ba5e:	955e                	add	a0,a0,s7
1c00ba60:	80dfd0ef          	jal	ra,1c00926c <S70_AveragePool_2x2>
1c00ba64:	09c14783          	lbu	a5,156(sp)
1c00ba68:	0ff7f793          	andi	a5,a5,255
1c00ba6c:	ef99                	bnez	a5,1c00ba8a <resnetCNN+0xa5a>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c00ba6e:	4689                	li	a3,2
1c00ba70:	00204737          	lui	a4,0x204
1c00ba74:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00ba78:	03c76783          	p.elw	a5,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c00ba7c:	00d72223          	sw	a3,4(a4)
1c00ba80:	09c14783          	lbu	a5,156(sp)
1c00ba84:	0ff7f793          	andi	a5,a5,255
1c00ba88:	d7f5                	beqz	a5,1c00ba74 <resnetCNN+0xa44>
		((signed short * __restrict__) (resnet_L2_Memory+116672)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+110272)) /* Out */
	);
	/* Waiting completion of transfer of Full_connection7matmul_bias using event 0 */
	AT_HYPERRAM_CL_WAIT(&HyperRam, &UchanHR0);
	S73_Linear_7x64x2x2(
1c00ba8a:	400c                	lw	a1,0(s0)
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
		((signed short * __restrict__) (resnet_L2_Memory+0)), /* Filter */
		((signed short * __restrict__) (resnet_L2_Memory+114384)), /* Bias */
		((signed short * __restrict__) (resnet_L2_Memory+110784)) /* Out */
1c00ba8c:	656d                	lui	a0,0x1b
	S73_Linear_7x64x2x2(
1c00ba8e:	6671                	lui	a2,0x1c
		((signed short * __restrict__) (resnet_L2_Memory+110784)) /* Out */
1c00ba90:	0c050493          	addi	s1,a0,192 # 1b0c0 <__L1Cl+0xb0c0>
	S73_Linear_7x64x2x2(
1c00ba94:	ed060613          	addi	a2,a2,-304 # 1bed0 <__L1Cl+0xbed0>
		((signed short * __restrict__) (resnet_L2_Memory+110272)), /* In */
1c00ba98:	ec050513          	addi	a0,a0,-320
	S73_Linear_7x64x2x2(
1c00ba9c:	009586b3          	add	a3,a1,s1
1c00baa0:	962e                	add	a2,a2,a1
1c00baa2:	952e                	add	a0,a0,a1
1c00baa4:	9b9fd0ef          	jal	ra,1c00945c <S73_Linear_7x64x2x2>
	);
	S74_SoftMax(
		((signed short * __restrict__) (resnet_L2_Memory+110784)), /* In */
1c00baa8:	4008                	lw	a0,0(s0)
	S74_SoftMax(
1c00baaa:	85ce                	mv	a1,s3
1c00baac:	9526                	add	a0,a0,s1
1c00baae:	cd3fd0ef          	jal	ra,1c009780 <S74_SoftMax>
		((signed short * __restrict__) Output_1) /* Out */
	);
	return 0;
}
1c00bab2:	34c12083          	lw	ra,844(sp)
1c00bab6:	34812403          	lw	s0,840(sp)
1c00baba:	34412483          	lw	s1,836(sp)
1c00babe:	34012903          	lw	s2,832(sp)
1c00bac2:	33c12983          	lw	s3,828(sp)
1c00bac6:	33812a03          	lw	s4,824(sp)
1c00baca:	33412a83          	lw	s5,820(sp)
1c00bace:	33012b03          	lw	s6,816(sp)
1c00bad2:	32c12b83          	lw	s7,812(sp)
1c00bad6:	32812c03          	lw	s8,808(sp)
1c00bada:	4501                	li	a0,0
1c00badc:	35010113          	addi	sp,sp,848
1c00bae0:	8082                	ret

1c00bae2 <KerReductIO_Compact_fp>:
		int Input1 = AT_NORM(Input*LEAK_CONSTANT, LEAK_CONSTANT_FORMAT);
		int Acc0 = gap_clip(Neg*Input1+Pos*Input, 15);
		Os[i] = Acc0;
	}
	gap_waitbarrier(0);
}
1c00bae2:	1101                	addi	sp,sp,-32
1c00bae4:	cc26                	sw	s1,24(sp)
1c00bae6:	f14024f3          	csrr	s1,mhartid
1c00baea:	f83637b3          	p.bclr	a5,a2,28,3
1c00baee:	00365713          	srli	a4,a2,0x3
1c00baf2:	00f037b3          	snez	a5,a5
1c00baf6:	97ba                	add	a5,a5,a4
1c00baf8:	c80494b3          	p.extractu	s1,s1,4,0
1c00bafc:	02f48733          	mul	a4,s1,a5
1c00bb00:	ce22                	sw	s0,28(sp)
1c00bb02:	ca4a                	sw	s2,20(sp)
1c00bb04:	c84e                	sw	s3,16(sp)
1c00bb06:	c652                	sw	s4,12(sp)
1c00bb08:	c456                	sw	s5,8(sp)
1c00bb0a:	c25a                	sw	s6,4(sp)
1c00bb0c:	c05e                	sw	s7,0(sp)
1c00bb0e:	00f70e33          	add	t3,a4,a5
1c00bb12:	04ce4e33          	p.min	t3,t3,a2
1c00bb16:	40ee0e33          	sub	t3,t3,a4
1c00bb1a:	0cd65263          	ble	a3,a2,1c00bbde <KerReductIO_Compact_fp+0xfc>
1c00bb1e:	800004b7          	lui	s1,0x80000
1c00bb22:	040e6e33          	p.max	t3,t3,zero
1c00bb26:	fff4c493          	not	s1,s1
1c00bb2a:	002e5913          	srli	s2,t3,0x2
1c00bb2e:	c20e3fb3          	p.bclr	t6,t3,1,0
1c00bb32:	94f2                	add	s1,s1,t3
1c00bb34:	00171393          	slli	t2,a4,0x1
1c00bb38:	94ba                	add	s1,s1,a4
1c00bb3a:	9fba                	add	t6,t6,a4
1c00bb3c:	00261a13          	slli	s4,a2,0x2
1c00bb40:	00161993          	slli	s3,a2,0x1
1c00bb44:	00391a93          	slli	s5,s2,0x3
1c00bb48:	00149793          	slli	a5,s1,0x1
1c00bb4c:	001f9713          	slli	a4,t6,0x1
1c00bb50:	014582b3          	add	t0,a1,s4
1c00bb54:	01350fb3          	add	t6,a0,s3
1c00bb58:	9a9e                	add	s5,s5,t2
1c00bb5a:	00438493          	addi	s1,t2,4
1c00bb5e:	00204bb7          	lui	s7,0x204
1c00bb62:	002e7b13          	andi	s6,t3,2
1c00bb66:	00f28f33          	add	t5,t0,a5
1c00bb6a:	00ff8eb3          	add	t4,t6,a5
1c00bb6e:	fc1e3e33          	p.bclr	t3,t3,30,1
1c00bb72:	92ba                	add	t0,t0,a4
1c00bb74:	9fba                	add	t6,t6,a4
1c00bb76:	40fa8ab3          	sub	s5,s5,a5
1c00bb7a:	8432                	mv	s0,a2
1c00bb7c:	40f383b3          	sub	t2,t2,a5
1c00bb80:	8c9d                	sub	s1,s1,a5
1c00bb82:	200b8b93          	addi	s7,s7,512 # 204200 <__L2+0x184200>
1c00bb86:	02090963          	beqz	s2,1c00bbb8 <KerReductIO_Compact_fp+0xd6>
1c00bb8a:	407a87b3          	sub	a5,s5,t2
1c00bb8e:	17e1                	addi	a5,a5,-8
1c00bb90:	838d                	srli	a5,a5,0x3
1c00bb92:	007e8833          	add	a6,t4,t2
1c00bb96:	009f0533          	add	a0,t5,s1
1c00bb9a:	01d485b3          	add	a1,s1,t4
1c00bb9e:	007f0733          	add	a4,t5,t2
1c00bba2:	0785                	addi	a5,a5,1
1c00bba4:	0087c0fb          	lp.setup	x1,a5,1c00bbb4 <KerReductIO_Compact_fp+0xd2>
1c00bba8:	0087230b          	p.lw	t1,8(a4!)
1c00bbac:	0085288b          	p.lw	a7,8(a0!)
1c00bbb0:	0068242b          	p.sw	t1,8(a6!)
1c00bbb4:	0115a42b          	p.sw	a7,8(a1!)
1c00bbb8:	000b0663          	beqz	s6,1c00bbc4 <KerReductIO_Compact_fp+0xe2>
1c00bbbc:	0002d783          	lhu	a5,0(t0)
1c00bbc0:	00ff9023          	sh	a5,0(t6)
1c00bbc4:	020e0763          	beqz	t3,1c00bbf2 <KerReductIO_Compact_fp+0x110>
1c00bbc8:	414f778b          	p.lbu	a5,s4(t5!)
1c00bbcc:	00fec9ab          	p.sb	a5,s3(t4!)
1c00bbd0:	01cbe783          	p.elw	a5,28(s7)
1c00bbd4:	9432                	add	s0,s0,a2
1c00bbd6:	92d2                	add	t0,t0,s4
1c00bbd8:	9fce                	add	t6,t6,s3
1c00bbda:	fad446e3          	blt	s0,a3,1c00bb86 <KerReductIO_Compact_fp+0xa4>
1c00bbde:	4472                	lw	s0,28(sp)
1c00bbe0:	44e2                	lw	s1,24(sp)
1c00bbe2:	4952                	lw	s2,20(sp)
1c00bbe4:	49c2                	lw	s3,16(sp)
1c00bbe6:	4a32                	lw	s4,12(sp)
1c00bbe8:	4aa2                	lw	s5,8(sp)
1c00bbea:	4b12                	lw	s6,4(sp)
1c00bbec:	4b82                	lw	s7,0(sp)
1c00bbee:	6105                	addi	sp,sp,32
1c00bbf0:	8082                	ret
1c00bbf2:	01cbe783          	p.elw	a5,28(s7)
1c00bbf6:	9432                	add	s0,s0,a2
1c00bbf8:	9f52                	add	t5,t5,s4
1c00bbfa:	9ece                	add	t4,t4,s3
1c00bbfc:	92d2                	add	t0,t0,s4
1c00bbfe:	9fce                	add	t6,t6,s3
1c00bc00:	f8d443e3          	blt	s0,a3,1c00bb86 <KerReductIO_Compact_fp+0xa4>
1c00bc04:	bfe9                	j	1c00bbde <KerReductIO_Compact_fp+0xfc>

1c00bc06 <KerParSetBias_DP_fp>:
1c00bc06:	00855603          	lhu	a2,8(a0)
1c00bc0a:	f14026f3          	csrr	a3,mhartid
1c00bc0e:	4118                	lw	a4,0(a0)
1c00bc10:	f83637b3          	p.bclr	a5,a2,28,3
1c00bc14:	00365593          	srli	a1,a2,0x3
1c00bc18:	00f037b3          	snez	a5,a5
1c00bc1c:	97ae                	add	a5,a5,a1
1c00bc1e:	c80696b3          	p.extractu	a3,a3,4,0
1c00bc22:	02f686b3          	mul	a3,a3,a5
1c00bc26:	00455303          	lhu	t1,4(a0)
1c00bc2a:	00655583          	lhu	a1,6(a0)
1c00bc2e:	00c52803          	lw	a6,12(a0)
1c00bc32:	00a50e83          	lb	t4,10(a0)
1c00bc36:	97b6                	add	a5,a5,a3
1c00bc38:	04c7c7b3          	p.min	a5,a5,a2
1c00bc3c:	06f6f863          	bleu	a5,a3,1c00bcac <KerParSetBias_DP_fp+0xa6>
1c00bc40:	02b30333          	mul	t1,t1,a1
1c00bc44:	00169613          	slli	a2,a3,0x1
1c00bc48:	00179593          	slli	a1,a5,0x1
1c00bc4c:	8d91                	sub	a1,a1,a2
1c00bc4e:	15f9                	addi	a1,a1,-2
1c00bc50:	8185                	srli	a1,a1,0x1
1c00bc52:	4e11                	li	t3,4
1c00bc54:	9832                	add	a6,a6,a2
1c00bc56:	0585                	addi	a1,a1,1
1c00bc58:	00231f93          	slli	t6,t1,0x2
1c00bc5c:	ffcf8893          	addi	a7,t6,-4
1c00bc60:	8546                	mv	a0,a7
1c00bc62:	42df8533          	p.mac	a0,t6,a3
1c00bc66:	00135313          	srli	t1,t1,0x1
1c00bc6a:	00331f13          	slli	t5,t1,0x3
1c00bc6e:	411f0f33          	sub	t5,t5,a7
1c00bc72:	411e0e33          	sub	t3,t3,a7
1c00bc76:	953a                	add	a0,a0,a4
1c00bc78:	0195c07b          	lp.setup	x0,a1,1c00bcaa <KerParSetBias_DP_fp+0xa4>
1c00bc7c:	0028170b          	p.lh	a4,2(a6!)
1c00bc80:	01d71733          	sll	a4,a4,t4
1c00bc84:	02030163          	beqz	t1,1c00bca6 <KerParSetBias_DP_fp+0xa0>
1c00bc88:	01e887b3          	add	a5,a7,t5
1c00bc8c:	17e1                	addi	a5,a5,-8
1c00bc8e:	838d                	srli	a5,a5,0x3
1c00bc90:	00ae0633          	add	a2,t3,a0
1c00bc94:	411506b3          	sub	a3,a0,a7
1c00bc98:	0785                	addi	a5,a5,1
1c00bc9a:	0047c0fb          	lp.setup	x1,a5,1c00bca2 <KerParSetBias_DP_fp+0x9c>
1c00bc9e:	00e6a42b          	p.sw	a4,8(a3!) # 12008 <__L1Cl+0x2008>
1c00bca2:	00e6242b          	p.sw	a4,8(a2!)
1c00bca6:	00e56fab          	p.sw	a4,t6(a0!)
1c00bcaa:	0001                	nop
1c00bcac:	002047b7          	lui	a5,0x204
1c00bcb0:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00bcb4:	01c7e703          	p.elw	a4,28(a5)
1c00bcb8:	8082                	ret

1c00bcba <KerParLinearLayerReLU_fp>:
1c00bcba:	00855603          	lhu	a2,8(a0)
1c00bcbe:	f1402773          	csrr	a4,mhartid
1c00bcc2:	7139                	addi	sp,sp,-64
1c00bcc4:	f83637b3          	p.bclr	a5,a2,28,3
1c00bcc8:	00365693          	srli	a3,a2,0x3
1c00bccc:	00f037b3          	snez	a5,a5
1c00bcd0:	97b6                	add	a5,a5,a3
1c00bcd2:	c8071733          	p.extractu	a4,a4,4,0
1c00bcd6:	02f70733          	mul	a4,a4,a5
1c00bcda:	dc26                	sw	s1,56(sp)
1c00bcdc:	d84e                	sw	s3,48(sp)
1c00bcde:	d05e                	sw	s7,32(sp)
1c00bce0:	ce62                	sw	s8,28(sp)
1c00bce2:	de22                	sw	s0,60(sp)
1c00bce4:	da4a                	sw	s2,52(sp)
1c00bce6:	d652                	sw	s4,44(sp)
1c00bce8:	d456                	sw	s5,40(sp)
1c00bcea:	d25a                	sw	s6,36(sp)
1c00bcec:	97ba                	add	a5,a5,a4
1c00bcee:	cc66                	sw	s9,24(sp)
1c00bcf0:	ca6a                	sw	s10,20(sp)
1c00bcf2:	c86e                	sw	s11,16(sp)
1c00bcf4:	04c7c7b3          	p.min	a5,a5,a2
1c00bcf8:	00052f83          	lw	t6,0(a0)
1c00bcfc:	00655983          	lhu	s3,6(a0)
1c00bd00:	00455483          	lhu	s1,4(a0)
1c00bd04:	00c52e83          	lw	t4,12(a0)
1c00bd08:	4914                	lw	a3,16(a0)
1c00bd0a:	01854403          	lbu	s0,24(a0)
1c00bd0e:	01950b03          	lb	s6,25(a0)
1c00bd12:	01452383          	lw	t2,20(a0)
1c00bd16:	01c52b83          	lw	s7,28(a0)
1c00bd1a:	02052c03          	lw	s8,32(a0)
1c00bd1e:	0cf77f63          	bleu	a5,a4,1c00bdfc <KerParLinearLayerReLU_fp+0x142>
1c00bd22:	80000f37          	lui	t5,0x80000
1c00bd26:	02e985b3          	mul	a1,s3,a4
1c00bd2a:	ffff4f13          	not	t5,t5
1c00bd2e:	00170513          	addi	a0,a4,1
1c00bd32:	01e48ab3          	add	s5,s1,t5
1c00bd36:	0786                	slli	a5,a5,0x1
1c00bd38:	4014d913          	srai	s2,s1,0x1
1c00bd3c:	4024da13          	srai	s4,s1,0x2
1c00bd40:	97b6                	add	a5,a5,a3
1c00bd42:	090a                	slli	s2,s2,0x2
1c00bd44:	003a1613          	slli	a2,s4,0x3
1c00bd48:	42950f33          	p.mac	t5,a0,s1
1c00bd4c:	0586                	slli	a1,a1,0x1
1c00bd4e:	c23e                	sw	a5,4(sp)
1c00bd50:	4791                	li	a5,4
1c00bd52:	0706                	slli	a4,a4,0x1
1c00bd54:	0a86                	slli	s5,s5,0x1
1c00bd56:	95ca                	add	a1,a1,s2
1c00bd58:	967e                	add	a2,a2,t6
1c00bd5a:	412787b3          	sub	a5,a5,s2
1c00bd5e:	0024fd13          	andi	s10,s1,2
1c00bd62:	0f06                	slli	t5,t5,0x1
1c00bd64:	fc14bcb3          	p.bclr	s9,s1,30,1
1c00bd68:	9f76                	add	t5,t5,t4
1c00bd6a:	012f8db3          	add	s11,t6,s2
1c00bd6e:	9afe                	add	s5,s5,t6
1c00bd70:	00e682b3          	add	t0,a3,a4
1c00bd74:	93ba                	add	t2,t2,a4
1c00bd76:	0486                	slli	s1,s1,0x1
1c00bd78:	0986                	slli	s3,s3,0x1
1c00bd7a:	9eae                	add	t4,t4,a1
1c00bd7c:	c432                	sw	a2,8(sp)
1c00bd7e:	c63e                	sw	a5,12(sp)
1c00bd80:	0022978b          	p.lh	a5,2(t0!)
1c00bd84:	016797b3          	sll	a5,a5,s6
1c00bd88:	020a0e63          	beqz	s4,1c00bdc4 <KerParLinearLayerReLU_fp+0x10a>
1c00bd8c:	46a2                	lw	a3,8(sp)
1c00bd8e:	412e8e33          	sub	t3,t4,s2
1c00bd92:	004f8313          	addi	t1,t6,4
1c00bd96:	41f68733          	sub	a4,a3,t6
1c00bd9a:	46b2                	lw	a3,12(sp)
1c00bd9c:	1761                	addi	a4,a4,-8
1c00bd9e:	830d                	srli	a4,a4,0x3
1c00bda0:	01d688b3          	add	a7,a3,t4
1c00bda4:	887e                	mv	a6,t6
1c00bda6:	0705                	addi	a4,a4,1
1c00bda8:	00c740fb          	lp.setup	x1,a4,1c00bdc0 <KerParLinearLayerReLU_fp+0x106>
1c00bdac:	0088250b          	p.lw	a0,8(a6!)
1c00bdb0:	008e258b          	p.lw	a1,8(t3!)
1c00bdb4:	0083260b          	p.lw	a2,8(t1!)
1c00bdb8:	0088a68b          	p.lw	a3,8(a7!) # 2b0008 <__L2+0x230008>
1c00bdbc:	b8b507d7          	pv.sdotsp.h	a5,a0,a1
1c00bdc0:	b8d607d7          	pv.sdotsp.h	a5,a2,a3
1c00bdc4:	000d0863          	beqz	s10,1c00bdd4 <KerParLinearLayerReLU_fp+0x11a>
1c00bdc8:	000da683          	lw	a3,0(s11)
1c00bdcc:	000ea703          	lw	a4,0(t4)
1c00bdd0:	b8e687d7          	pv.sdotsp.h	a5,a3,a4
1c00bdd4:	040c8863          	beqz	s9,1c00be24 <KerParLinearLayerReLU_fp+0x16a>
1c00bdd8:	000ad683          	lhu	a3,0(s5)
1c00bddc:	509f770b          	p.lhu	a4,s1(t5!)
1c00bde0:	9ece                	add	t4,t4,s3
1c00bde2:	80e697db          	p.macs	a5,a3,a4
1c00bde6:	408067db          	p.mac.zh.sl	a5,zero,s0,zero
1c00bdea:	0577e7b3          	p.max	a5,a5,s7
1c00bdee:	0587c7b3          	p.min	a5,a5,s8
1c00bdf2:	00f3912b          	p.sh	a5,2(t2!)
1c00bdf6:	4792                	lw	a5,4(sp)
1c00bdf8:	f8f294e3          	bne	t0,a5,1c00bd80 <KerParLinearLayerReLU_fp+0xc6>
1c00bdfc:	002047b7          	lui	a5,0x204
1c00be00:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00be04:	01c7e703          	p.elw	a4,28(a5)
1c00be08:	5472                	lw	s0,60(sp)
1c00be0a:	54e2                	lw	s1,56(sp)
1c00be0c:	5952                	lw	s2,52(sp)
1c00be0e:	59c2                	lw	s3,48(sp)
1c00be10:	5a32                	lw	s4,44(sp)
1c00be12:	5aa2                	lw	s5,40(sp)
1c00be14:	5b12                	lw	s6,36(sp)
1c00be16:	5b82                	lw	s7,32(sp)
1c00be18:	4c72                	lw	s8,28(sp)
1c00be1a:	4ce2                	lw	s9,24(sp)
1c00be1c:	4d52                	lw	s10,20(sp)
1c00be1e:	4dc2                	lw	s11,16(sp)
1c00be20:	6121                	addi	sp,sp,64
1c00be22:	8082                	ret
1c00be24:	408067db          	p.mac.zh.sl	a5,zero,s0,zero
1c00be28:	0577e7b3          	p.max	a5,a5,s7
1c00be2c:	0587c7b3          	p.min	a5,a5,s8
1c00be30:	4692                	lw	a3,4(sp)
1c00be32:	00f3912b          	p.sh	a5,2(t2!)
1c00be36:	9f26                	add	t5,t5,s1
1c00be38:	9ece                	add	t4,t4,s3
1c00be3a:	f4d293e3          	bne	t0,a3,1c00bd80 <KerParLinearLayerReLU_fp+0xc6>
1c00be3e:	bf7d                	j	1c00bdfc <KerParLinearLayerReLU_fp+0x142>

1c00be40 <KerDP_fp>:
1c00be40:	00655703          	lhu	a4,6(a0)
1c00be44:	00455803          	lhu	a6,4(a0)
1c00be48:	00e55783          	lhu	a5,14(a0)
1c00be4c:	f14025f3          	csrr	a1,mhartid
1c00be50:	00e8085b          	p.mac	a6,a6,a4,zero
1c00be54:	00052e03          	lw	t3,0(a0)
1c00be58:	c80595b3          	p.extractu	a1,a1,4,0
1c00be5c:	00852f03          	lw	t5,8(a0)
1c00be60:	01052303          	lw	t1,16(a0)
1c00be64:	01452883          	lw	a7,20(a0)
1c00be68:	00c54e83          	lbu	t4,12(a0)
1c00be6c:	02f80833          	mul	a6,a6,a5
1c00be70:	f83837b3          	p.bclr	a5,a6,28,3
1c00be74:	00385713          	srli	a4,a6,0x3
1c00be78:	00f037b3          	snez	a5,a5
1c00be7c:	97ba                	add	a5,a5,a4
1c00be7e:	02f585b3          	mul	a1,a1,a5
1c00be82:	97ae                	add	a5,a5,a1
1c00be84:	0507c833          	p.min	a6,a5,a6
1c00be88:	40b80fb3          	sub	t6,a6,a1
1c00be8c:	040fefb3          	p.max	t6,t6,zero
1c00be90:	01ffd793          	srli	a5,t6,0x1f
1c00be94:	00259513          	slli	a0,a1,0x2
1c00be98:	03f7a7db          	p.addn	a5,a5,t6,1
1c00be9c:	9572                	add	a0,a0,t3
1c00be9e:	0586                	slli	a1,a1,0x1
1c00bea0:	04f05163          	blez	a5,1c00bee2 <KerDP_fp+0xa2>
1c00bea4:	00379693          	slli	a3,a5,0x3
1c00bea8:	16e1                	addi	a3,a3,-8
1c00beaa:	828d                	srli	a3,a3,0x3
1c00beac:	8676                	mv	a2,t4
1c00beae:	95fa                	add	a1,a1,t5
1c00beb0:	00450293          	addi	t0,a0,4
1c00beb4:	0685                	addi	a3,a3,1
1c00beb6:	0146c0fb          	lp.setup	x1,a3,1c00bede <KerDP_fp+0x9e>
1c00beba:	0082a70b          	p.lw	a4,8(t0!)
1c00bebe:	0085278b          	p.lw	a5,8(a0!)
1c00bec2:	40c0675b          	p.mac.zh.sl	a4,zero,a2,zero
1c00bec6:	40c067db          	p.mac.zh.sl	a5,zero,a2,zero
1c00beca:	0467e7b3          	p.max	a5,a5,t1
1c00bece:	04676733          	p.max	a4,a4,t1
1c00bed2:	0517c7b3          	p.min	a5,a5,a7
1c00bed6:	05174733          	p.min	a4,a4,a7
1c00beda:	d0f707d7          	pv.pack.h	a5,a4,a5
1c00bede:	00f5a22b          	p.sw	a5,4(a1!)
1c00bee2:	fc1fbfb3          	p.bclr	t6,t6,30,1
1c00bee6:	020f8163          	beqz	t6,1c00bf08 <KerDP_fp+0xc8>
1c00beea:	00281793          	slli	a5,a6,0x2
1c00beee:	17f1                	addi	a5,a5,-4
1c00bef0:	20fe7e03          	p.lw	t3,a5(t3)
1c00bef4:	0806                	slli	a6,a6,0x1
1c00bef6:	1879                	addi	a6,a6,-2
1c00bef8:	41d06e5b          	p.mac.zh.sl	t3,zero,t4,zero
1c00befc:	046e6333          	p.max	t1,t3,t1
1c00bf00:	051348b3          	p.min	a7,t1,a7
1c00bf04:	011f5823          	p.sh	a7,a6(t5)
1c00bf08:	002047b7          	lui	a5,0x204
1c00bf0c:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00bf10:	01c7e703          	p.elw	a4,28(a5)
1c00bf14:	8082                	ret

1c00bf16 <KerDP_IO_fp>:
	   NormBias: m
	   LB, UB: in o format
	*/
	int * __restrict__ In = Arg->In;
	short int * __restrict__ Out = Arg->Out;
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00bf16:	00455683          	lhu	a3,4(a0)
1c00bf1a:	00655703          	lhu	a4,6(a0)
1c00bf1e:	00e55783          	lhu	a5,14(a0)
	int LB = Arg->LB, UB = Arg->UB;
	unsigned int Norm = Arg->Norm;
	int i,j,k,U,A,B,Log2Core;
       	unsigned int CoreId = gap_coreid();
1c00bf22:	f14028f3          	csrr	a7,mhartid
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00bf26:	00e686db          	p.mac	a3,a3,a4,zero
	int * __restrict__ In = Arg->In;
1c00bf2a:	410c                	lw	a1,0(a0)
       	unsigned int CoreId = gap_coreid();
1c00bf2c:	c80898b3          	p.extractu	a7,a7,4,0
	int LB = Arg->LB, UB = Arg->UB;
1c00bf30:	01052e83          	lw	t4,16(a0)
1c00bf34:	01452e03          	lw	t3,20(a0)
	unsigned int Norm = Arg->Norm;
1c00bf38:	00c54383          	lbu	t2,12(a0)
	int S = Arg->W*Arg->H*Arg->InFeatures;
1c00bf3c:	02f686b3          	mul	a3,a3,a5
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00bf40:	f836b633          	p.bclr	a2,a3,28,3
1c00bf44:	0036d793          	srli	a5,a3,0x3
1c00bf48:	00c03633          	snez	a2,a2
1c00bf4c:	963e                	add	a2,a2,a5
       	unsigned int ChunkCell = ChunkSize(S);
       	unsigned int First = CoreId*ChunkCell;
1c00bf4e:	02c888b3          	mul	a7,a7,a2
       	unsigned int Last  = Min(First+ChunkCell, S);
1c00bf52:	00c88333          	add	t1,a7,a2
1c00bf56:	04d34333          	p.min	t1,t1,a3
	int Size = Max(0, Last-First);
1c00bf5a:	41130333          	sub	t1,t1,a7
1c00bf5e:	04036333          	p.max	t1,t1,zero

	/* First normalize In, each parallel chunk overwrites it's own input
	   After we are done In contains groups of contiguous normalized values
	   each group beeing followed by an empty group of exactly the same size, these
	   one need to be supressed, second step is taking care of this reduction */
	for (i=0; i<(Size/2); i++) {
1c00bf62:	01f35793          	srli	a5,t1,0x1f
	int *I = &In[First];
1c00bf66:	088a                	slli	a7,a7,0x2
	for (i=0; i<(Size/2); i++) {
1c00bf68:	0267a7db          	p.addn	a5,a5,t1,1
	int *I = &In[First];
1c00bf6c:	98ae                	add	a7,a7,a1
	for (i=0; i<(Size/2); i++) {
1c00bf6e:	04f05263          	blez	a5,1c00bfb2 <KerDP_IO_fp+0x9c>
1c00bf72:	00379513          	slli	a0,a5,0x3
1c00bf76:	1561                	addi	a0,a0,-8
1c00bf78:	810d                	srli	a0,a0,0x3
1c00bf7a:	881e                	mv	a6,t2
1c00bf7c:	82c6                	mv	t0,a7
1c00bf7e:	00488f93          	addi	t6,a7,4
1c00bf82:	8f46                	mv	t5,a7
1c00bf84:	0505                	addi	a0,a0,1
1c00bf86:	014540fb          	lp.setup	x1,a0,1c00bfae <KerDP_IO_fp+0x98>
		int Acc0 = I[2*i], Acc1 = I[2*i+1];
1c00bf8a:	008fa70b          	p.lw	a4,8(t6!)
		Acc0 = Min(Max(AT_NORM(Acc0, Norm), LB), UB); Acc1 = Min(Max(AT_NORM(Acc1, Norm), LB), UB);
1c00bf8e:	008f278b          	p.lw	a5,8(t5!) # 80000008 <pulp__FC+0x80000009>
1c00bf92:	4100675b          	p.mac.zh.sl	a4,zero,a6,zero
1c00bf96:	410067db          	p.mac.zh.sl	a5,zero,a6,zero
1c00bf9a:	05d7e7b3          	p.max	a5,a5,t4
1c00bf9e:	05d76733          	p.max	a4,a4,t4
1c00bfa2:	05c7c7b3          	p.min	a5,a5,t3
1c00bfa6:	05c74733          	p.min	a4,a4,t3
		O[i] = gap_pack2(Acc0, Acc1);
1c00bfaa:	d0f707d7          	pv.pack.h	a5,a4,a5
1c00bfae:	00f2a22b          	p.sw	a5,4(t0!)
	}
	if (Size&0x1) ((short int *)I)[Size-1] = Min(Max(AT_NORM(I[Size-1], Norm), LB), UB);
1c00bfb2:	fc1337b3          	p.bclr	a5,t1,30,1
1c00bfb6:	c385                	beqz	a5,1c00bfd6 <KerDP_IO_fp+0xc0>
1c00bfb8:	00231793          	slli	a5,t1,0x2
1c00bfbc:	17f1                	addi	a5,a5,-4
1c00bfbe:	20f8f783          	p.lw	a5,a5(a7)
1c00bfc2:	0306                	slli	t1,t1,0x1
1c00bfc4:	1379                	addi	t1,t1,-2
1c00bfc6:	407067db          	p.mac.zh.sl	a5,zero,t2,zero
1c00bfca:	05d7eeb3          	p.max	t4,a5,t4
1c00bfce:	05cece33          	p.min	t3,t4,t3
1c00bfd2:	01c8d323          	p.sh	t3,t1(a7)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c00bfd6:	002047b7          	lui	a5,0x204
1c00bfda:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00bfde:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	/* Now this is the reduction phase */

	KerReductIO_Compact_fp((short int *__restrict__)In, (short int *__restrict__)In, ChunkCell, S);
1c00bfe2:	852e                	mv	a0,a1
1c00bfe4:	affff06f          	j	1c00bae2 <KerReductIO_Compact_fp>

1c00bfe8 <KerConv2x3from3x3Stride1_V_DP_fp>:

	unsigned int InFeatures = Arg->InFeatures;
		
	TotalInFeatures = Arg->TotalInFeatures;
	for (unsigned int of=First; of<Last; of++) 
		for (unsigned int If=0; If<InFeatures; If++) {
1c00bfe8:	1141                	addi	sp,sp,-16
1c00bfea:	4e52                	lw	t3,20(sp)
1c00bfec:	c622                	sw	s0,12(sp)
1c00bfee:	c426                	sw	s1,8(sp)
1c00bff0:	c24a                	sw	s2,4(sp)
1c00bff2:	c04e                	sw	s3,0(sp)
1c00bff4:	4342                	lw	t1,16(sp)
1c00bff6:	0a0e0063          	beqz	t3,1c00c096 <KerConv2x3from3x3Stride1_V_DP_fp+0xae>
1c00bffa:	00032383          	lw	t2,0(t1)
1c00bffe:	00632283          	lw	t0,6(t1)
1c00c002:	00c32403          	lw	s0,12(t1)
1c00c006:	00159493          	slli	s1,a1,0x1
1c00c00a:	0a17a063          	p.beqimm	a5,1,1c00c0aa <KerConv2x3from3x3Stride1_V_DP_fp+0xc2>
1c00c00e:	40c78633          	sub	a2,a5,a2
1c00c012:	02b60633          	mul	a2,a2,a1
1c00c016:	893e                	mv	s2,a5
1c00c018:	02d787b3          	mul	a5,a5,a3
1c00c01c:	0606                	slli	a2,a2,0x1
1c00c01e:	9532                	add	a0,a0,a2
1c00c020:	20957e0b          	p.lw	t3,s1(a0!)
1c00c024:	2095760b          	p.lw	a2,s1(a0!)
1c00c028:	078a                	slli	a5,a5,0x2
1c00c02a:	98be                	add	a7,a7,a5
1c00c02c:	05097063          	bleu	a6,s2,1c00c06c <KerConv2x3from3x3Stride1_V_DP_fp+0x84>
1c00c030:	00269993          	slli	s3,a3,0x2
1c00c034:	8fca                	mv	t6,s2
1c00c036:	8f46                	mv	t5,a7
1c00c038:	86aa                	mv	a3,a0
1c00c03a:	41280eb3          	sub	t4,a6,s2
1c00c03e:	010ec0fb          	lp.setup	x1,t4,1c00c05e <KerConv2x3from3x3Stride1_V_DP_fp+0x76>
1c00c042:	000f2783          	lw	a5,0(t5)
1c00c046:	2096f30b          	p.lw	t1,s1(a3!)
1c00c04a:	0f85                	addi	t6,t6,1
1c00c04c:	b87e07d7          	pv.sdotsp.h	a5,t3,t2
1c00c050:	b85607d7          	pv.sdotsp.h	a5,a2,t0
1c00c054:	b88307d7          	pv.sdotsp.h	a5,t1,s0
1c00c058:	00ff69ab          	p.sw	a5,s3(t5!)
1c00c05c:	8e32                	mv	t3,a2
1c00c05e:	861a                	mv	a2,t1
1c00c060:	412f8fb3          	sub	t6,t6,s2
1c00c064:	43f48533          	p.mac	a0,s1,t6
1c00c068:	43f988b3          	p.mac	a7,s3,t6
1c00c06c:	01070f63          	beq	a4,a6,1c00c08a <KerConv2x3from3x3Stride1_V_DP_fp+0xa2>
1c00c070:	058a                	slli	a1,a1,0x2
1c00c072:	8d0d                	sub	a0,a0,a1
1c00c074:	0008a783          	lw	a5,0(a7)
1c00c078:	4118                	lw	a4,0(a0)
1c00c07a:	20957503          	p.lw	a0,s1(a0)
1c00c07e:	b87707d7          	pv.sdotsp.h	a5,a4,t2
1c00c082:	b85507d7          	pv.sdotsp.h	a5,a0,t0
1c00c086:	00f8a023          	sw	a5,0(a7)
1c00c08a:	4432                	lw	s0,12(sp)
1c00c08c:	44a2                	lw	s1,8(sp)
1c00c08e:	4912                	lw	s2,4(sp)
1c00c090:	4982                	lw	s3,0(sp)
1c00c092:	0141                	addi	sp,sp,16
1c00c094:	8082                	ret
1c00c096:	00232383          	lw	t2,2(t1)
1c00c09a:	00832283          	lw	t0,8(t1)
1c00c09e:	00e32403          	lw	s0,14(t1)
1c00c0a2:	00159493          	slli	s1,a1,0x1
1c00c0a6:	f617b4e3          	p.bneimm	a5,1,1c00c00e <KerConv2x3from3x3Stride1_V_DP_fp+0x26>
1c00c0aa:	2095760b          	p.lw	a2,s1(a0!)
1c00c0ae:	4901                	li	s2,0
1c00c0b0:	00006e57          	pv.add.sci.h	t3,zero,0
1c00c0b4:	bfa5                	j	1c00c02c <KerConv2x3from3x3Stride1_V_DP_fp+0x44>

1c00c0b6 <KerConv2x3from3x3Stride2_V_DP_fp>:
1c00c0b6:	1101                	addi	sp,sp,-32
1c00c0b8:	5e12                	lw	t3,36(sp)
1c00c0ba:	ce22                	sw	s0,28(sp)
1c00c0bc:	cc26                	sw	s1,24(sp)
1c00c0be:	ca4a                	sw	s2,20(sp)
1c00c0c0:	c84e                	sw	s3,16(sp)
1c00c0c2:	c652                	sw	s4,12(sp)
1c00c0c4:	5302                	lw	t1,32(sp)
1c00c0c6:	0a0e0963          	beqz	t3,1c00c178 <KerConv2x3from3x3Stride2_V_DP_fp+0xc2>
1c00c0ca:	00032403          	lw	s0,0(t1)
1c00c0ce:	00632383          	lw	t2,6(t1)
1c00c0d2:	00c32483          	lw	s1,12(t1)
1c00c0d6:	0a17a963          	p.beqimm	a5,1,1c00c188 <KerConv2x3from3x3Stride2_V_DP_fp+0xd2>
1c00c0da:	00179313          	slli	t1,a5,0x1
1c00c0de:	40c30633          	sub	a2,t1,a2
1c00c0e2:	02b60633          	mul	a2,a2,a1
1c00c0e6:	893e                	mv	s2,a5
1c00c0e8:	00159e13          	slli	t3,a1,0x1
1c00c0ec:	02d787b3          	mul	a5,a5,a3
1c00c0f0:	0606                	slli	a2,a2,0x1
1c00c0f2:	962a                	add	a2,a2,a0
1c00c0f4:	00062303          	lw	t1,0(a2)
1c00c0f8:	01c60533          	add	a0,a2,t3
1c00c0fc:	078a                	slli	a5,a5,0x2
1c00c0fe:	98be                	add	a7,a7,a5
1c00c100:	05097663          	bleu	a6,s2,1c00c14c <KerConv2x3from3x3Stride2_V_DP_fp+0x96>
1c00c104:	00159293          	slli	t0,a1,0x1
1c00c108:	00269993          	slli	s3,a3,0x2
1c00c10c:	00259a13          	slli	s4,a1,0x2
1c00c110:	92aa                	add	t0,t0,a0
1c00c112:	8fca                	mv	t6,s2
1c00c114:	8ec6                	mv	t4,a7
1c00c116:	86aa                	mv	a3,a0
1c00c118:	41280e33          	sub	t3,a6,s2
1c00c11c:	011e40fb          	lp.setup	x1,t3,1c00c13e <KerConv2x3from3x3Stride2_V_DP_fp+0x88>
1c00c120:	000ea783          	lw	a5,0(t4)
1c00c124:	2146ff0b          	p.lw	t5,s4(a3!)
1c00c128:	2142f60b          	p.lw	a2,s4(t0!)
1c00c12c:	b88307d7          	pv.sdotsp.h	a5,t1,s0
1c00c130:	b87f07d7          	pv.sdotsp.h	a5,t5,t2
1c00c134:	b89607d7          	pv.sdotsp.h	a5,a2,s1
1c00c138:	00fee9ab          	p.sw	a5,s3(t4!)
1c00c13c:	0f85                	addi	t6,t6,1
1c00c13e:	8332                	mv	t1,a2
1c00c140:	412f8fb3          	sub	t6,t6,s2
1c00c144:	43fa0533          	p.mac	a0,s4,t6
1c00c148:	43f988b3          	p.mac	a7,s3,t6
1c00c14c:	01070f63          	beq	a4,a6,1c00c16a <KerConv2x3from3x3Stride2_V_DP_fp+0xb4>
1c00c150:	0586                	slli	a1,a1,0x1
1c00c152:	40b505b3          	sub	a1,a0,a1
1c00c156:	0008a783          	lw	a5,0(a7)
1c00c15a:	4194                	lw	a3,0(a1)
1c00c15c:	4118                	lw	a4,0(a0)
1c00c15e:	b88687d7          	pv.sdotsp.h	a5,a3,s0
1c00c162:	b87707d7          	pv.sdotsp.h	a5,a4,t2
1c00c166:	00f8a023          	sw	a5,0(a7)
1c00c16a:	4472                	lw	s0,28(sp)
1c00c16c:	44e2                	lw	s1,24(sp)
1c00c16e:	4952                	lw	s2,20(sp)
1c00c170:	49c2                	lw	s3,16(sp)
1c00c172:	4a32                	lw	s4,12(sp)
1c00c174:	6105                	addi	sp,sp,32
1c00c176:	8082                	ret
1c00c178:	00232403          	lw	s0,2(t1)
1c00c17c:	00832383          	lw	t2,8(t1)
1c00c180:	00e32483          	lw	s1,14(t1)
1c00c184:	f417bbe3          	p.bneimm	a5,1,1c00c0da <KerConv2x3from3x3Stride2_V_DP_fp+0x24>
1c00c188:	4901                	li	s2,0
1c00c18a:	00006357          	pv.add.sci.h	t1,zero,0
1c00c18e:	bf8d                	j	1c00c100 <KerConv2x3from3x3Stride2_V_DP_fp+0x4a>

1c00c190 <KerConv1x1Stride2_Body_DP_fp.isra.16>:
1c00c190:	1101                	addi	sp,sp,-32
1c00c192:	5e12                	lw	t3,36(sp)
1c00c194:	5f82                	lw	t6,32(sp)
1c00c196:	ce22                	sw	s0,28(sp)
1c00c198:	cc26                	sw	s1,24(sp)
1c00c19a:	ca4a                	sw	s2,20(sp)
1c00c19c:	c84e                	sw	s3,16(sp)
1c00c19e:	c652                	sw	s4,12(sp)
1c00c1a0:	c456                	sw	s5,8(sp)
1c00c1a2:	c25a                	sw	s6,4(sp)
1c00c1a4:	780e7357          	pv.extract.b	t1,t3,0
1c00c1a8:	40f803b3          	sub	t2,a6,a5
1c00c1ac:	781e7e57          	pv.extract.b	t3,t3,2
1c00c1b0:	0df8f663          	bleu	t6,a7,1c00c27c <KerConv1x1Stride2_Body_DP_fp.isra.16+0xec>
1c00c1b4:	10035eb3          	p.exthz	t4,t1
1c00c1b8:	100e5e33          	p.exthz	t3,t3
1c00c1bc:	00179313          	slli	t1,a5,0x1
1c00c1c0:	00189f13          	slli	t5,a7,0x1
1c00c1c4:	41cf0f33          	sub	t5,t5,t3
1c00c1c8:	41d30333          	sub	t1,t1,t4
1c00c1cc:	40000e37          	lui	t3,0x40000
1c00c1d0:	410782b3          	sub	t0,a5,a6
1c00c1d4:	1e7d                	addi	t3,t3,-1
1c00c1d6:	879a                	mv	a5,t1
1c00c1d8:	42e88e33          	p.mac	t3,a7,a4
1c00c1dc:	01f3da13          	srli	s4,t2,0x1f
1c00c1e0:	027a2a5b          	p.addn	s4,s4,t2,1
1c00c1e4:	fff38a93          	addi	s5,t2,-1
1c00c1e8:	001a1413          	slli	s0,s4,0x1
1c00c1ec:	0a8a                	slli	s5,s5,0x2
1c00c1ee:	9416                	add	s0,s0,t0
1c00c1f0:	040a                	slli	s0,s0,0x2
1c00c1f2:	028a                	slli	t0,t0,0x2
1c00c1f4:	4b11                	li	s6,4
1c00c1f6:	42df07b3          	p.mac	a5,t5,a3
1c00c1fa:	9872                	add	a6,a6,t3
1c00c1fc:	080a                	slli	a6,a6,0x2
1c00c1fe:	00428493          	addi	s1,t0,4
1c00c202:	fc13b3b3          	p.bclr	t2,t2,30,1
1c00c206:	00271993          	slli	s3,a4,0x2
1c00c20a:	95c2                	add	a1,a1,a6
1c00c20c:	00269913          	slli	s2,a3,0x2
1c00c210:	02a1                	addi	t0,t0,8
1c00c212:	415b0b33          	sub	s6,s6,s5
1c00c216:	0786                	slli	a5,a5,0x1
1c00c218:	97d6                	add	a5,a5,s5
1c00c21a:	953e                	add	a0,a0,a5
1c00c21c:	0411                	addi	s0,s0,4
1c00c21e:	411f8fb3          	sub	t6,t6,a7
1c00c222:	02cfc07b          	lp.setup	x0,t6,1c00c27a <KerConv1x1Stride2_Body_DP_fp.isra.16+0xea>
1c00c226:	040a0163          	beqz	s4,1c00c268 <KerConv1x1Stride2_Body_DP_fp.isra.16+0xd8>
1c00c22a:	409407b3          	sub	a5,s0,s1
1c00c22e:	17e1                	addi	a5,a5,-8
1c00c230:	838d                	srli	a5,a5,0x3
1c00c232:	41550e33          	sub	t3,a0,s5
1c00c236:	00b288b3          	add	a7,t0,a1
1c00c23a:	00ab0333          	add	t1,s6,a0
1c00c23e:	00b48833          	add	a6,s1,a1
1c00c242:	0785                	addi	a5,a5,1
1c00c244:	0107c0fb          	lp.setup	x1,a5,1c00c264 <KerConv1x1Stride2_Body_DP_fp.isra.16+0xd4>
1c00c248:	00082683          	lw	a3,0(a6)
1c00c24c:	008e1f0b          	p.lh	t5,8(t3!) # 40000008 <__l2_end+0x23fe83ec>
1c00c250:	0008a703          	lw	a4,0(a7)
1c00c254:	00831e8b          	p.lh	t4,8(t1!)
1c00c258:	42cf06b3          	p.mac	a3,t5,a2
1c00c25c:	42ce8733          	p.mac	a4,t4,a2
1c00c260:	00d8242b          	p.sw	a3,8(a6!)
1c00c264:	00e8a42b          	p.sw	a4,8(a7!)
1c00c268:	00038863          	beqz	t2,1c00c278 <KerConv1x1Stride2_Body_DP_fp.isra.16+0xe8>
1c00c26c:	419c                	lw	a5,0(a1)
1c00c26e:	00051703          	lh	a4,0(a0)
1c00c272:	42c707b3          	p.mac	a5,a4,a2
1c00c276:	c19c                	sw	a5,0(a1)
1c00c278:	95ce                	add	a1,a1,s3
1c00c27a:	954a                	add	a0,a0,s2
1c00c27c:	4472                	lw	s0,28(sp)
1c00c27e:	44e2                	lw	s1,24(sp)
1c00c280:	4952                	lw	s2,20(sp)
1c00c282:	49c2                	lw	s3,16(sp)
1c00c284:	4a32                	lw	s4,12(sp)
1c00c286:	4aa2                	lw	s5,8(sp)
1c00c288:	4b12                	lw	s6,4(sp)
1c00c28a:	6105                	addi	sp,sp,32
1c00c28c:	8082                	ret

1c00c28e <KerConv1x1Stride2_Body_DP_2In_fp.isra.58>:
1c00c28e:	1141                	addi	sp,sp,-16
1c00c290:	4362                	lw	t1,24(sp)
1c00c292:	c622                	sw	s0,12(sp)
1c00c294:	4ed2                	lw	t4,20(sp)
1c00c296:	4442                	lw	s0,16(sp)
1c00c298:	78037e57          	pv.extract.b	t3,t1,0
1c00c29c:	78137357          	pv.extract.b	t1,t1,2
1c00c2a0:	100e52b3          	p.exthz	t0,t3
1c00c2a4:	410888b3          	sub	a7,a7,a6
1c00c2a8:	10035e33          	p.exthz	t3,t1
1c00c2ac:	00062303          	lw	t1,0(a2)
1c00c2b0:	07d47963          	bleu	t4,s0,1c00c322 <KerConv1x1Stride2_Body_DP_2In_fp.isra.58+0x94>
1c00c2b4:	00181613          	slli	a2,a6,0x1
1c00c2b8:	40560633          	sub	a2,a2,t0
1c00c2bc:	02d70733          	mul	a4,a4,a3
1c00c2c0:	06088163          	beqz	a7,1c00c322 <KerConv1x1Stride2_Body_DP_2In_fp.isra.58+0x94>
1c00c2c4:	00141f13          	slli	t5,s0,0x1
1c00c2c8:	41cf0e33          	sub	t3,t5,t3
1c00c2cc:	00279393          	slli	t2,a5,0x2
1c00c2d0:	00269293          	slli	t0,a3,0x2
1c00c2d4:	00171f13          	slli	t5,a4,0x1
1c00c2d8:	00289f93          	slli	t6,a7,0x2
1c00c2dc:	408e8eb3          	sub	t4,t4,s0
1c00c2e0:	42f40833          	p.mac	a6,s0,a5
1c00c2e4:	42de0633          	p.mac	a2,t3,a3
1c00c2e8:	080a                	slli	a6,a6,0x2
1c00c2ea:	95c2                	add	a1,a1,a6
1c00c2ec:	0606                	slli	a2,a2,0x1
1c00c2ee:	9532                	add	a0,a0,a2
1c00c2f0:	018ec07b          	lp.setup	x0,t4,1c00c320 <KerConv1x1Stride2_Body_DP_2In_fp.isra.58+0x92>
1c00c2f4:	ffcf8693          	addi	a3,t6,-4
1c00c2f8:	8289                	srli	a3,a3,0x2
1c00c2fa:	01e508b3          	add	a7,a0,t5
1c00c2fe:	882a                	mv	a6,a0
1c00c300:	862e                	mv	a2,a1
1c00c302:	0685                	addi	a3,a3,1
1c00c304:	00b6c0fb          	lp.setup	x1,a3,1c00c31a <KerConv1x1Stride2_Body_DP_2In_fp.isra.58+0x8c>
1c00c308:	0048578b          	p.lhu	a5,4(a6!)
1c00c30c:	0048de0b          	p.lhu	t3,4(a7!)
1c00c310:	4218                	lw	a4,0(a2)
1c00c312:	d0fe07d7          	pv.pack.h	a5,t3,a5
1c00c316:	b8678757          	pv.sdotsp.h	a4,a5,t1
1c00c31a:	00e6222b          	p.sw	a4,4(a2!)
1c00c31e:	959e                	add	a1,a1,t2
1c00c320:	9516                	add	a0,a0,t0
1c00c322:	4432                	lw	s0,12(sp)
1c00c324:	0141                	addi	sp,sp,16
1c00c326:	8082                	ret

1c00c328 <KerConv3x3Stride1_Body_DP_fp.isra.60>:
1c00c328:	7179                	addi	sp,sp,-48
1c00c32a:	ca5a                	sw	s6,20(sp)
1c00c32c:	8b3e                	mv	s6,a5
1c00c32e:	43170b33          	p.mac	s6,a4,a7
1c00c332:	5352                	lw	t1,52(sp)
1c00c334:	00465f83          	lhu	t6,4(a2)
1c00c338:	00a65e83          	lhu	t4,10(a2)
1c00c33c:	01065283          	lhu	t0,16(a2)
1c00c340:	d622                	sw	s0,44(sp)
1c00c342:	d426                	sw	s1,40(sp)
1c00c344:	00062383          	lw	t2,0(a2)
1c00c348:	00662403          	lw	s0,6(a2)
1c00c34c:	4644                	lw	s1,12(a2)
1c00c34e:	0b0a                	slli	s6,s6,0x2
1c00c350:	4601                	li	a2,0
1c00c352:	d24a                	sw	s2,36(sp)
1c00c354:	d04e                	sw	s3,32(sp)
1c00c356:	ce52                	sw	s4,28(sp)
1c00c358:	cc56                	sw	s5,24(sp)
1c00c35a:	c85e                	sw	s7,16(sp)
1c00c35c:	c662                	sw	s8,12(sp)
1c00c35e:	c466                	sw	s9,8(sp)
1c00c360:	c26a                	sw	s10,4(sp)
1c00c362:	c06e                	sw	s11,0(sp)
1c00c364:	78037e57          	pv.extract.b	t3,t1,0
1c00c368:	d1fe8fd7          	pv.pack.h	t6,t4,t6
1c00c36c:	78137357          	pv.extract.b	t1,t1,2
1c00c370:	d05602d7          	pv.pack.h	t0,a2,t0
1c00c374:	9b2e                	add	s6,s6,a1
1c00c376:	0d07fd63          	bleu	a6,a5,1c00c450 <KerConv3x3Stride1_Body_DP_fp.isra.60+0x128>
1c00c37a:	10035333          	p.exthz	t1,t1
1c00c37e:	40688333          	sub	t1,a7,t1
1c00c382:	02d30333          	mul	t1,t1,a3
1c00c386:	80000637          	lui	a2,0x80000
1c00c38a:	ffe64613          	xori	a2,a2,-2
1c00c38e:	96b2                	add	a3,a3,a2
1c00c390:	5642                	lw	a2,48(sp)
1c00c392:	100e5e33          	p.exthz	t3,t3
1c00c396:	00169c93          	slli	s9,a3,0x1
1c00c39a:	00271d13          	slli	s10,a4,0x2
1c00c39e:	004c8d93          	addi	s11,s9,4
1c00c3a2:	41c30733          	sub	a4,t1,t3
1c00c3a6:	0ac8f563          	bleu	a2,a7,1c00c450 <KerConv3x3Stride1_Body_DP_fp.isra.60+0x128>
1c00c3aa:	00278a93          	addi	s5,a5,2
1c00c3ae:	9aba                	add	s5,s5,a4
1c00c3b0:	01070933          	add	s2,a4,a6
1c00c3b4:	0a86                	slli	s5,s5,0x1
1c00c3b6:	0906                	slli	s2,s2,0x1
1c00c3b8:	00450613          	addi	a2,a0,4
1c00c3bc:	9aaa                	add	s5,s5,a0
1c00c3be:	9932                	add	s2,s2,a2
1c00c3c0:	00e78a33          	add	s4,a5,a4
1c00c3c4:	41590933          	sub	s2,s2,s5
1c00c3c8:	1c0177b7          	lui	a5,0x1c017
1c00c3cc:	0a06                	slli	s4,s4,0x1
1c00c3ce:	008c8993          	addi	s3,s9,8
1c00c3d2:	1979                	addi	s2,s2,-2
1c00c3d4:	23c7a583          	lw	a1,572(a5) # 1c01723c <__clz_tab+0x624>
1c00c3d8:	014d8bb3          	add	s7,s11,s4
1c00c3dc:	99d2                	add	s3,s3,s4
1c00c3de:	068a                	slli	a3,a3,0x2
1c00c3e0:	00195913          	srli	s2,s2,0x1
1c00c3e4:	9a2a                	add	s4,s4,a0
1c00c3e6:	9baa                	add	s7,s7,a0
1c00c3e8:	99aa                	add	s3,s3,a0
1c00c3ea:	00868c13          	addi	s8,a3,8
1c00c3ee:	0905                	addi	s2,s2,1
1c00c3f0:	02f9407b          	lp.setup	x0,s2,1c00c44e <KerConv3x3Stride1_Body_DP_fp.isra.60+0x126>
1c00c3f4:	8ed6                	mv	t4,s5
1c00c3f6:	0009a783          	lw	a5,0(s3)
1c00c3fa:	218ef70b          	p.lw	a4,s8(t4!)
1c00c3fe:	000a2e03          	lw	t3,0(s4)
1c00c402:	000ba683          	lw	a3,0(s7)
1c00c406:	d0e7c757          	pv.pack.l.h	a4,a5,a4
1c00c40a:	57c2                	lw	a5,48(sp)
1c00c40c:	013c8f33          	add	t5,s9,s3
1c00c410:	835a                	mv	t1,s6
1c00c412:	41178833          	sub	a6,a5,a7
1c00c416:	017840fb          	lp.setup	x1,a6,1c00c444 <KerConv3x3Stride1_Body_DP_fp.isra.60+0x11c>
1c00c41a:	00032783          	lw	a5,0(t1)
1c00c41e:	21bf760b          	p.lw	a2,s11(t5!)
1c00c422:	21bef50b          	p.lw	a0,s11(t4!)
1c00c426:	b87e07d7          	pv.sdotsp.h	a5,t3,t2
1c00c42a:	b88687d7          	pv.sdotsp.h	a5,a3,s0
1c00c42e:	b9f707d7          	pv.sdotsp.h	a5,a4,t6
1c00c432:	b89607d7          	pv.sdotsp.h	a5,a2,s1
1c00c436:	b85507d7          	pv.sdotsp.h	a5,a0,t0
1c00c43a:	00f36d2b          	p.sw	a5,s10(t1!)
1c00c43e:	8e36                	mv	t3,a3
1c00c440:	c8b50757          	pv.shuffle2.h	a4,a0,a1
1c00c444:	86b2                	mv	a3,a2
1c00c446:	0b11                	addi	s6,s6,4
1c00c448:	0a09                	addi	s4,s4,2
1c00c44a:	0b89                	addi	s7,s7,2
1c00c44c:	0a89                	addi	s5,s5,2
1c00c44e:	0989                	addi	s3,s3,2
1c00c450:	5432                	lw	s0,44(sp)
1c00c452:	54a2                	lw	s1,40(sp)
1c00c454:	5912                	lw	s2,36(sp)
1c00c456:	5982                	lw	s3,32(sp)
1c00c458:	4a72                	lw	s4,28(sp)
1c00c45a:	4ae2                	lw	s5,24(sp)
1c00c45c:	4b52                	lw	s6,20(sp)
1c00c45e:	4bc2                	lw	s7,16(sp)
1c00c460:	4c32                	lw	s8,12(sp)
1c00c462:	4ca2                	lw	s9,8(sp)
1c00c464:	4d12                	lw	s10,4(sp)
1c00c466:	4d82                	lw	s11,0(sp)
1c00c468:	6145                	addi	sp,sp,48
1c00c46a:	8082                	ret

1c00c46c <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>:
1c00c46c:	40c68633          	sub	a2,a3,a2
1c00c470:	0606                	slli	a2,a2,0x1
1c00c472:	9532                	add	a0,a0,a2
1c00c474:	00682303          	lw	t1,6(a6)
1c00c478:	00a81e03          	lh	t3,10(a6)
1c00c47c:	06088063          	beqz	a7,1c00c4dc <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x70>
1c00c480:	00082603          	lw	a2,0(a6)
1c00c484:	00485803          	lhu	a6,4(a6)
1c00c488:	d0c34f57          	pv.pack.l.h	t5,t1,a2
1c00c48c:	d10e0e57          	pv.pack.h	t3,t3,a6
1c00c490:	d0c36357          	pv.pack.h.h	t1,t1,a2
1c00c494:	0586                	slli	a1,a1,0x1
1c00c496:	00052803          	lw	a6,0(a0)
1c00c49a:	20b57603          	p.lw	a2,a1(a0)
1c00c49e:	00450e93          	addi	t4,a0,4
1c00c4a2:	d10648d7          	pv.pack.l.h	a7,a2,a6
1c00c4a6:	d1066857          	pv.pack.h.h	a6,a2,a6
1c00c4aa:	02e6f863          	bleu	a4,a3,1c00c4da <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x6e>
1c00c4ae:	0591                	addi	a1,a1,4
1c00c4b0:	952e                	add	a0,a0,a1
1c00c4b2:	8f15                	sub	a4,a4,a3
1c00c4b4:	012740fb          	lp.setup	x1,a4,1c00c4d8 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x6c>
1c00c4b8:	4390                	lw	a2,0(a5)
1c00c4ba:	002e958b          	p.lh	a1,2(t4!)
1c00c4be:	0025168b          	p.lh	a3,2(a0!)
1c00c4c2:	b9e88657          	pv.sdotsp.h	a2,a7,t5
1c00c4c6:	b8680657          	pv.sdotsp.h	a2,a6,t1
1c00c4ca:	d0b685d7          	pv.pack.h	a1,a3,a1
1c00c4ce:	b9c58657          	pv.sdotsp.h	a2,a1,t3
1c00c4d2:	00c7a22b          	p.sw	a2,4(a5!)
1c00c4d6:	88c2                	mv	a7,a6
1c00c4d8:	882e                	mv	a6,a1
1c00c4da:	8082                	ret
1c00c4dc:	00c82603          	lw	a2,12(a6)
1c00c4e0:	01085803          	lhu	a6,16(a6)
1c00c4e4:	d0664f57          	pv.pack.l.h	t5,a2,t1
1c00c4e8:	d1c80e57          	pv.pack.h	t3,a6,t3
1c00c4ec:	d0666357          	pv.pack.h.h	t1,a2,t1
1c00c4f0:	b755                	j	1c00c494 <KerConv3x2from3x3Stride1_H_DP_fp.isra.61+0x28>

1c00c4f2 <KerConv3x3BorderStride1_DP_fp.isra.62>:
1c00c4f2:	711d                	addi	sp,sp,-96
1c00c4f4:	5326                	lw	t1,104(sp)
1c00c4f6:	5e36                	lw	t3,108(sp)
1c00c4f8:	cca2                	sw	s0,88(sp)
1c00c4fa:	caa6                	sw	s1,84(sp)
1c00c4fc:	c8ca                	sw	s2,80(sp)
1c00c4fe:	c6ce                	sw	s3,76(sp)
1c00c500:	c4d2                	sw	s4,72(sp)
1c00c502:	c2d6                	sw	s5,68(sp)
1c00c504:	c0da                	sw	s6,64(sp)
1c00c506:	de5e                	sw	s7,60(sp)
1c00c508:	dc62                	sw	s8,56(sp)
1c00c50a:	da66                	sw	s9,52(sp)
1c00c50c:	d86a                	sw	s10,48(sp)
1c00c50e:	d66e                	sw	s11,44(sp)
1c00c510:	ce86                	sw	ra,92(sp)
1c00c512:	78037ed7          	pv.extract.b	t4,t1,0
1c00c516:	780e7cd7          	pv.extract.b	s9,t3,0
1c00c51a:	781e74d7          	pv.extract.b	s1,t3,2
1c00c51e:	8c2a                	mv	s8,a0
1c00c520:	8aae                	mv	s5,a1
1c00c522:	8b32                	mv	s6,a2
1c00c524:	8936                	mv	s2,a3
1c00c526:	8bba                	mv	s7,a4
1c00c528:	89be                	mv	s3,a5
1c00c52a:	8d42                	mv	s10,a6
1c00c52c:	8f46                	mv	t5,a7
1c00c52e:	5f86                	lw	t6,96(sp)
1c00c530:	5a16                	lw	s4,100(sp)
1c00c532:	7a037e57          	pv.extract.b	t3,t1,1
1c00c536:	78137dd7          	pv.extract.b	s11,t1,2
1c00c53a:	7a137457          	pv.extract.b	s0,t1,3
1c00c53e:	0a0e9863          	bnez	t4,1c00c5ee <KerConv3x3BorderStride1_DP_fp.isra.62+0xfc>
1c00c542:	080e1063          	bnez	t3,1c00c5c2 <KerConv3x3BorderStride1_DP_fp.isra.62+0xd0>
1c00c546:	020d9263          	bnez	s11,1c00c56a <KerConv3x3BorderStride1_DP_fp.isra.62+0x78>
1c00c54a:	ec05                	bnez	s0,1c00c582 <KerConv3x3BorderStride1_DP_fp.isra.62+0x90>
1c00c54c:	40f6                	lw	ra,92(sp)
1c00c54e:	4466                	lw	s0,88(sp)
1c00c550:	44d6                	lw	s1,84(sp)
1c00c552:	4946                	lw	s2,80(sp)
1c00c554:	49b6                	lw	s3,76(sp)
1c00c556:	4a26                	lw	s4,72(sp)
1c00c558:	4a96                	lw	s5,68(sp)
1c00c55a:	4b06                	lw	s6,64(sp)
1c00c55c:	5bf2                	lw	s7,60(sp)
1c00c55e:	5c62                	lw	s8,56(sp)
1c00c560:	5cd2                	lw	s9,52(sp)
1c00c562:	5d42                	lw	s10,48(sp)
1c00c564:	5db2                	lw	s11,44(sp)
1c00c566:	6125                	addi	sp,sp,96
1c00c568:	8082                	ret
1c00c56a:	00299793          	slli	a5,s3,0x2
1c00c56e:	4881                	li	a7,0
1c00c570:	885a                	mv	a6,s6
1c00c572:	97d6                	add	a5,a5,s5
1c00c574:	876a                	mv	a4,s10
1c00c576:	86ce                	mv	a3,s3
1c00c578:	8666                	mv	a2,s9
1c00c57a:	85ca                	mv	a1,s2
1c00c57c:	8562                	mv	a0,s8
1c00c57e:	35fd                	jal	1c00c46c <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>
1c00c580:	d471                	beqz	s0,1c00c54c <KerConv3x3BorderStride1_DP_fp.isra.62+0x5a>
1c00c582:	409a0533          	sub	a0,s4,s1
1c00c586:	87ce                	mv	a5,s3
1c00c588:	434b87b3          	p.mac	a5,s7,s4
1c00c58c:	4466                	lw	s0,88(sp)
1c00c58e:	40f6                	lw	ra,92(sp)
1c00c590:	44d6                	lw	s1,84(sp)
1c00c592:	4a26                	lw	s4,72(sp)
1c00c594:	5bf2                	lw	s7,60(sp)
1c00c596:	5db2                	lw	s11,44(sp)
1c00c598:	885a                	mv	a6,s6
1c00c59a:	876a                	mv	a4,s10
1c00c59c:	4b06                	lw	s6,64(sp)
1c00c59e:	03250533          	mul	a0,a0,s2
1c00c5a2:	078a                	slli	a5,a5,0x2
1c00c5a4:	5d42                	lw	s10,48(sp)
1c00c5a6:	86ce                	mv	a3,s3
1c00c5a8:	8666                	mv	a2,s9
1c00c5aa:	49b6                	lw	s3,76(sp)
1c00c5ac:	5cd2                	lw	s9,52(sp)
1c00c5ae:	85ca                	mv	a1,s2
1c00c5b0:	97d6                	add	a5,a5,s5
1c00c5b2:	4946                	lw	s2,80(sp)
1c00c5b4:	0506                	slli	a0,a0,0x1
1c00c5b6:	4a96                	lw	s5,68(sp)
1c00c5b8:	9562                	add	a0,a0,s8
1c00c5ba:	5c62                	lw	s8,56(sp)
1c00c5bc:	4885                	li	a7,1
1c00c5be:	6125                	addi	sp,sp,96
1c00c5c0:	b575                	j	1c00c46c <KerConv3x2from3x3Stride1_H_DP_fp.isra.61>
1c00c5c2:	002b9893          	slli	a7,s7,0x2
1c00c5c6:	419d0533          	sub	a0,s10,s9
1c00c5ca:	4785                	li	a5,1
1c00c5cc:	18f1                	addi	a7,a7,-4
1c00c5ce:	0506                	slli	a0,a0,0x1
1c00c5d0:	c23e                	sw	a5,4(sp)
1c00c5d2:	c05a                	sw	s6,0(sp)
1c00c5d4:	98d6                	add	a7,a7,s5
1c00c5d6:	8852                	mv	a6,s4
1c00c5d8:	87fe                	mv	a5,t6
1c00c5da:	877a                	mv	a4,t5
1c00c5dc:	86de                	mv	a3,s7
1c00c5de:	8626                	mv	a2,s1
1c00c5e0:	85ca                	mv	a1,s2
1c00c5e2:	9562                	add	a0,a0,s8
1c00c5e4:	a05ff0ef          	jal	ra,1c00bfe8 <KerConv2x3from3x3Stride1_V_DP_fp>
1c00c5e8:	f60d81e3          	beqz	s11,1c00c54a <KerConv3x3BorderStride1_DP_fp.isra.62+0x58>
1c00c5ec:	bfbd                	j	1c00c56a <KerConv3x3BorderStride1_DP_fp.isra.62+0x78>
1c00c5ee:	c032                	sw	a2,0(sp)
1c00c5f0:	88ae                	mv	a7,a1
1c00c5f2:	87fe                	mv	a5,t6
1c00c5f4:	877a                	mv	a4,t5
1c00c5f6:	c202                	sw	zero,4(sp)
1c00c5f8:	8852                	mv	a6,s4
1c00c5fa:	86de                	mv	a3,s7
1c00c5fc:	8626                	mv	a2,s1
1c00c5fe:	85ca                	mv	a1,s2
1c00c600:	ce72                	sw	t3,28(sp)
1c00c602:	cc7a                	sw	t5,24(sp)
1c00c604:	ca7e                	sw	t6,20(sp)
1c00c606:	9e3ff0ef          	jal	ra,1c00bfe8 <KerConv2x3from3x3Stride1_V_DP_fp>
1c00c60a:	4e72                	lw	t3,28(sp)
1c00c60c:	4fd2                	lw	t6,20(sp)
1c00c60e:	4f62                	lw	t5,24(sp)
1c00c610:	f20e0be3          	beqz	t3,1c00c546 <KerConv3x3BorderStride1_DP_fp.isra.62+0x54>
1c00c614:	b77d                	j	1c00c5c2 <KerConv3x3BorderStride1_DP_fp.isra.62+0xd0>

1c00c616 <KerConv3x3Stride2_Body_DP_fp.isra.63>:
1c00c616:	7179                	addi	sp,sp,-48
1c00c618:	d04e                	sw	s3,32(sp)
1c00c61a:	89be                	mv	s3,a5
1c00c61c:	431709b3          	p.mac	s3,a4,a7
1c00c620:	5352                	lw	t1,52(sp)
1c00c622:	00465f83          	lhu	t6,4(a2) # 80000004 <pulp__FC+0x80000005>
1c00c626:	00a65283          	lhu	t0,10(a2)
1c00c62a:	01065383          	lhu	t2,16(a2)
1c00c62e:	4e01                	li	t3,0
1c00c630:	d622                	sw	s0,44(sp)
1c00c632:	d426                	sw	s1,40(sp)
1c00c634:	d24a                	sw	s2,36(sp)
1c00c636:	ce52                	sw	s4,28(sp)
1c00c638:	098a                	slli	s3,s3,0x2
1c00c63a:	cc56                	sw	s5,24(sp)
1c00c63c:	ca5a                	sw	s6,20(sp)
1c00c63e:	c85e                	sw	s7,16(sp)
1c00c640:	c662                	sw	s8,12(sp)
1c00c642:	c466                	sw	s9,8(sp)
1c00c644:	c26a                	sw	s10,4(sp)
1c00c646:	c06e                	sw	s11,0(sp)
1c00c648:	78037ed7          	pv.extract.b	t4,t1,0
1c00c64c:	5a42                	lw	s4,48(sp)
1c00c64e:	78137357          	pv.extract.b	t1,t1,2
1c00c652:	4200                	lw	s0,0(a2)
1c00c654:	d1fe0fd7          	pv.pack.h	t6,t3,t6
1c00c658:	00662483          	lw	s1,6(a2)
1c00c65c:	d05e02d7          	pv.pack.h	t0,t3,t0
1c00c660:	00c62903          	lw	s2,12(a2)
1c00c664:	d07e03d7          	pv.pack.h	t2,t3,t2
1c00c668:	99ae                	add	s3,s3,a1
1c00c66a:	0b07f263          	bleu	a6,a5,1c00c70e <KerConv3x3Stride2_Body_DP_fp.isra.63+0xf8>
1c00c66e:	10035333          	p.exthz	t1,t1
1c00c672:	00189593          	slli	a1,a7,0x1
1c00c676:	406585b3          	sub	a1,a1,t1
1c00c67a:	02d585b3          	mul	a1,a1,a3
1c00c67e:	0686                	slli	a3,a3,0x1
1c00c680:	100edeb3          	p.exthz	t4,t4
1c00c684:	ffc68b93          	addi	s7,a3,-4
1c00c688:	00271c93          	slli	s9,a4,0x2
1c00c68c:	004b8a93          	addi	s5,s7,4
1c00c690:	41d58733          	sub	a4,a1,t4
1c00c694:	0748fd63          	bleu	s4,a7,1c00c70e <KerConv3x3Stride2_Body_DP_fp.isra.63+0xf8>
1c00c698:	0786                	slli	a5,a5,0x1
1c00c69a:	00181593          	slli	a1,a6,0x1
1c00c69e:	97ba                	add	a5,a5,a4
1c00c6a0:	95ba                	add	a1,a1,a4
1c00c6a2:	0786                	slli	a5,a5,0x1
1c00c6a4:	0586                	slli	a1,a1,0x1
1c00c6a6:	8d9d                	sub	a1,a1,a5
1c00c6a8:	15f1                	addi	a1,a1,-4
1c00c6aa:	001a9b13          	slli	s6,s5,0x1
1c00c6ae:	8189                	srli	a1,a1,0x2
1c00c6b0:	953e                	add	a0,a0,a5
1c00c6b2:	ffcb0c13          	addi	s8,s6,-4
1c00c6b6:	0585                	addi	a1,a1,1
1c00c6b8:	02a5c07b          	lp.setup	x0,a1,1c00c70c <KerConv3x3Stride2_Body_DP_fp.isra.63+0xf6>
1c00c6bc:	0045268b          	p.lw	a3,4(a0!)
1c00c6c0:	884e                	mv	a6,s3
1c00c6c2:	411a0633          	sub	a2,s4,a7
1c00c6c6:	832a                	mv	t1,a0
1c00c6c8:	2173770b          	p.lw	a4,s7(t1!)
1c00c6cc:	00ac0f33          	add	t5,s8,a0
1c00c6d0:	00aa8eb3          	add	t4,s5,a0
1c00c6d4:	00ab0e33          	add	t3,s6,a0
1c00c6d8:	018640fb          	lp.setup	x1,a2,1c00c708 <KerConv3x3Stride2_Body_DP_fp.isra.63+0xf2>
1c00c6dc:	00082783          	lw	a5,0(a6)
1c00c6e0:	21637d8b          	p.lw	s11,s6(t1!)
1c00c6e4:	216efd0b          	p.lw	s10,s6(t4!)
1c00c6e8:	b88687d7          	pv.sdotsp.h	a5,a3,s0
1c00c6ec:	b9f707d7          	pv.sdotsp.h	a5,a4,t6
1c00c6f0:	216f768b          	p.lw	a3,s6(t5!)
1c00c6f4:	216e770b          	p.lw	a4,s6(t3!)
1c00c6f8:	b89d87d7          	pv.sdotsp.h	a5,s11,s1
1c00c6fc:	b85d07d7          	pv.sdotsp.h	a5,s10,t0
1c00c700:	b92687d7          	pv.sdotsp.h	a5,a3,s2
1c00c704:	b87707d7          	pv.sdotsp.h	a5,a4,t2
1c00c708:	00f86cab          	p.sw	a5,s9(a6!)
1c00c70c:	0991                	addi	s3,s3,4
1c00c70e:	5432                	lw	s0,44(sp)
1c00c710:	54a2                	lw	s1,40(sp)
1c00c712:	5912                	lw	s2,36(sp)
1c00c714:	5982                	lw	s3,32(sp)
1c00c716:	4a72                	lw	s4,28(sp)
1c00c718:	4ae2                	lw	s5,24(sp)
1c00c71a:	4b52                	lw	s6,20(sp)
1c00c71c:	4bc2                	lw	s7,16(sp)
1c00c71e:	4c32                	lw	s8,12(sp)
1c00c720:	4ca2                	lw	s9,8(sp)
1c00c722:	4d12                	lw	s10,4(sp)
1c00c724:	4d82                	lw	s11,0(sp)
1c00c726:	6145                	addi	sp,sp,48
1c00c728:	8082                	ret

1c00c72a <KerConv3x2from3x3Stride2_H_DP_fp.isra.64>:
1c00c72a:	00169313          	slli	t1,a3,0x1
1c00c72e:	40c30633          	sub	a2,t1,a2
1c00c732:	0606                	slli	a2,a2,0x1
1c00c734:	9532                	add	a0,a0,a2
1c00c736:	00682303          	lw	t1,6(a6)
1c00c73a:	00a81e03          	lh	t3,10(a6)
1c00c73e:	04088f63          	beqz	a7,1c00c79c <KerConv3x2from3x3Stride2_H_DP_fp.isra.64+0x72>
1c00c742:	00082603          	lw	a2,0(a6)
1c00c746:	00485803          	lhu	a6,4(a6)
1c00c74a:	d0c34f57          	pv.pack.l.h	t5,t1,a2
1c00c74e:	d10e0e57          	pv.pack.h	t3,t3,a6
1c00c752:	d0c36357          	pv.pack.h.h	t1,t1,a2
1c00c756:	00159613          	slli	a2,a1,0x1
1c00c75a:	50c57803          	p.lhu	a6,a2(a0)
1c00c75e:	00055583          	lhu	a1,0(a0)
1c00c762:	00250e93          	addi	t4,a0,2
1c00c766:	d0b805d7          	pv.pack.h	a1,a6,a1
1c00c76a:	02e6f863          	bleu	a4,a3,1c00c79a <KerConv3x2from3x3Stride2_H_DP_fp.isra.64+0x70>
1c00c76e:	0609                	addi	a2,a2,2
1c00c770:	9532                	add	a0,a0,a2
1c00c772:	8f15                	sub	a4,a4,a3
1c00c774:	011740fb          	lp.setup	x1,a4,1c00c796 <KerConv3x2from3x3Stride2_H_DP_fp.isra.64+0x6c>
1c00c778:	4390                	lw	a2,0(a5)
1c00c77a:	004ea80b          	p.lw	a6,4(t4!)
1c00c77e:	0045288b          	p.lw	a7,4(a0!)
1c00c782:	b9e58657          	pv.sdotsp.h	a2,a1,t5
1c00c786:	d108c6d7          	pv.pack.l.h	a3,a7,a6
1c00c78a:	d108e5d7          	pv.pack.h.h	a1,a7,a6
1c00c78e:	b8668657          	pv.sdotsp.h	a2,a3,t1
1c00c792:	b9c58657          	pv.sdotsp.h	a2,a1,t3
1c00c796:	00c7a22b          	p.sw	a2,4(a5!)
1c00c79a:	8082                	ret
1c00c79c:	00c82603          	lw	a2,12(a6)
1c00c7a0:	01085803          	lhu	a6,16(a6)
1c00c7a4:	d0664f57          	pv.pack.l.h	t5,a2,t1
1c00c7a8:	d1c80e57          	pv.pack.h	t3,a6,t3
1c00c7ac:	d0666357          	pv.pack.h.h	t1,a2,t1
1c00c7b0:	b75d                	j	1c00c756 <KerConv3x2from3x3Stride2_H_DP_fp.isra.64+0x2c>

1c00c7b2 <KerConv3x3BorderStride2_DP_fp.isra.65>:
1c00c7b2:	711d                	addi	sp,sp,-96
1c00c7b4:	5326                	lw	t1,104(sp)
1c00c7b6:	5e36                	lw	t3,108(sp)
1c00c7b8:	cca2                	sw	s0,88(sp)
1c00c7ba:	caa6                	sw	s1,84(sp)
1c00c7bc:	c8ca                	sw	s2,80(sp)
1c00c7be:	c6ce                	sw	s3,76(sp)
1c00c7c0:	c4d2                	sw	s4,72(sp)
1c00c7c2:	c2d6                	sw	s5,68(sp)
1c00c7c4:	c0da                	sw	s6,64(sp)
1c00c7c6:	de5e                	sw	s7,60(sp)
1c00c7c8:	dc62                	sw	s8,56(sp)
1c00c7ca:	da66                	sw	s9,52(sp)
1c00c7cc:	d86a                	sw	s10,48(sp)
1c00c7ce:	d66e                	sw	s11,44(sp)
1c00c7d0:	ce86                	sw	ra,92(sp)
1c00c7d2:	78037fd7          	pv.extract.b	t6,t1,0
1c00c7d6:	780e7cd7          	pv.extract.b	s9,t3,0
1c00c7da:	781e74d7          	pv.extract.b	s1,t3,2
1c00c7de:	8c2a                	mv	s8,a0
1c00c7e0:	8aae                	mv	s5,a1
1c00c7e2:	8b32                	mv	s6,a2
1c00c7e4:	8936                	mv	s2,a3
1c00c7e6:	8bba                	mv	s7,a4
1c00c7e8:	89be                	mv	s3,a5
1c00c7ea:	8d42                	mv	s10,a6
1c00c7ec:	8dc6                	mv	s11,a7
1c00c7ee:	5e86                	lw	t4,96(sp)
1c00c7f0:	5a16                	lw	s4,100(sp)
1c00c7f2:	7a037f57          	pv.extract.b	t5,t1,1
1c00c7f6:	78137e57          	pv.extract.b	t3,t1,2
1c00c7fa:	7a137457          	pv.extract.b	s0,t1,3
1c00c7fe:	0a0f9d63          	bnez	t6,1c00c8b8 <KerConv3x3BorderStride2_DP_fp.isra.65+0x106>
1c00c802:	080f1163          	bnez	t5,1c00c884 <KerConv3x3BorderStride2_DP_fp.isra.65+0xd2>
1c00c806:	020e1263          	bnez	t3,1c00c82a <KerConv3x3BorderStride2_DP_fp.isra.65+0x78>
1c00c80a:	ec05                	bnez	s0,1c00c842 <KerConv3x3BorderStride2_DP_fp.isra.65+0x90>
1c00c80c:	40f6                	lw	ra,92(sp)
1c00c80e:	4466                	lw	s0,88(sp)
1c00c810:	44d6                	lw	s1,84(sp)
1c00c812:	4946                	lw	s2,80(sp)
1c00c814:	49b6                	lw	s3,76(sp)
1c00c816:	4a26                	lw	s4,72(sp)
1c00c818:	4a96                	lw	s5,68(sp)
1c00c81a:	4b06                	lw	s6,64(sp)
1c00c81c:	5bf2                	lw	s7,60(sp)
1c00c81e:	5c62                	lw	s8,56(sp)
1c00c820:	5cd2                	lw	s9,52(sp)
1c00c822:	5d42                	lw	s10,48(sp)
1c00c824:	5db2                	lw	s11,44(sp)
1c00c826:	6125                	addi	sp,sp,96
1c00c828:	8082                	ret
1c00c82a:	00299793          	slli	a5,s3,0x2
1c00c82e:	4881                	li	a7,0
1c00c830:	885a                	mv	a6,s6
1c00c832:	97d6                	add	a5,a5,s5
1c00c834:	876a                	mv	a4,s10
1c00c836:	86ce                	mv	a3,s3
1c00c838:	8666                	mv	a2,s9
1c00c83a:	85ca                	mv	a1,s2
1c00c83c:	8562                	mv	a0,s8
1c00c83e:	35f5                	jal	1c00c72a <KerConv3x2from3x3Stride2_H_DP_fp.isra.64>
1c00c840:	d471                	beqz	s0,1c00c80c <KerConv3x3BorderStride2_DP_fp.isra.65+0x5a>
1c00c842:	001a1513          	slli	a0,s4,0x1
1c00c846:	8d05                	sub	a0,a0,s1
1c00c848:	87ce                	mv	a5,s3
1c00c84a:	434b87b3          	p.mac	a5,s7,s4
1c00c84e:	4466                	lw	s0,88(sp)
1c00c850:	40f6                	lw	ra,92(sp)
1c00c852:	44d6                	lw	s1,84(sp)
1c00c854:	4a26                	lw	s4,72(sp)
1c00c856:	5bf2                	lw	s7,60(sp)
1c00c858:	5db2                	lw	s11,44(sp)
1c00c85a:	885a                	mv	a6,s6
1c00c85c:	876a                	mv	a4,s10
1c00c85e:	4b06                	lw	s6,64(sp)
1c00c860:	03250533          	mul	a0,a0,s2
1c00c864:	078a                	slli	a5,a5,0x2
1c00c866:	5d42                	lw	s10,48(sp)
1c00c868:	86ce                	mv	a3,s3
1c00c86a:	8666                	mv	a2,s9
1c00c86c:	49b6                	lw	s3,76(sp)
1c00c86e:	5cd2                	lw	s9,52(sp)
1c00c870:	85ca                	mv	a1,s2
1c00c872:	97d6                	add	a5,a5,s5
1c00c874:	4946                	lw	s2,80(sp)
1c00c876:	0506                	slli	a0,a0,0x1
1c00c878:	4a96                	lw	s5,68(sp)
1c00c87a:	9562                	add	a0,a0,s8
1c00c87c:	5c62                	lw	s8,56(sp)
1c00c87e:	4885                	li	a7,1
1c00c880:	6125                	addi	sp,sp,96
1c00c882:	b565                	j	1c00c72a <KerConv3x2from3x3Stride2_H_DP_fp.isra.64>
1c00c884:	001d1513          	slli	a0,s10,0x1
1c00c888:	002b9893          	slli	a7,s7,0x2
1c00c88c:	41950533          	sub	a0,a0,s9
1c00c890:	4785                	li	a5,1
1c00c892:	18f1                	addi	a7,a7,-4
1c00c894:	0506                	slli	a0,a0,0x1
1c00c896:	c23e                	sw	a5,4(sp)
1c00c898:	c05a                	sw	s6,0(sp)
1c00c89a:	98d6                	add	a7,a7,s5
1c00c89c:	8852                	mv	a6,s4
1c00c89e:	87f6                	mv	a5,t4
1c00c8a0:	876e                	mv	a4,s11
1c00c8a2:	86de                	mv	a3,s7
1c00c8a4:	8626                	mv	a2,s1
1c00c8a6:	85ca                	mv	a1,s2
1c00c8a8:	9562                	add	a0,a0,s8
1c00c8aa:	ca72                	sw	t3,20(sp)
1c00c8ac:	80bff0ef          	jal	ra,1c00c0b6 <KerConv2x3from3x3Stride2_V_DP_fp>
1c00c8b0:	4e52                	lw	t3,20(sp)
1c00c8b2:	f40e0ce3          	beqz	t3,1c00c80a <KerConv3x3BorderStride2_DP_fp.isra.65+0x58>
1c00c8b6:	bf95                	j	1c00c82a <KerConv3x3BorderStride2_DP_fp.isra.65+0x78>
1c00c8b8:	c032                	sw	a2,0(sp)
1c00c8ba:	88ae                	mv	a7,a1
1c00c8bc:	87f6                	mv	a5,t4
1c00c8be:	c202                	sw	zero,4(sp)
1c00c8c0:	8852                	mv	a6,s4
1c00c8c2:	876e                	mv	a4,s11
1c00c8c4:	86de                	mv	a3,s7
1c00c8c6:	8626                	mv	a2,s1
1c00c8c8:	85ca                	mv	a1,s2
1c00c8ca:	ca72                	sw	t3,20(sp)
1c00c8cc:	cc76                	sw	t4,24(sp)
1c00c8ce:	ce7a                	sw	t5,28(sp)
1c00c8d0:	fe6ff0ef          	jal	ra,1c00c0b6 <KerConv2x3from3x3Stride2_V_DP_fp>
1c00c8d4:	4f72                	lw	t5,28(sp)
1c00c8d6:	4ee2                	lw	t4,24(sp)
1c00c8d8:	4e52                	lw	t3,20(sp)
1c00c8da:	f20f06e3          	beqz	t5,1c00c806 <KerConv3x3BorderStride2_DP_fp.isra.65+0x54>
1c00c8de:	b75d                	j	1c00c884 <KerConv3x3BorderStride2_DP_fp.isra.65+0xd2>

1c00c8e0 <KerConv7x7StrideS_Body_DP_fp.constprop.100>:
1c00c8e0:	7115                	addi	sp,sp,-224
1c00c8e2:	c546                	sw	a7,136(sp)
1c00c8e4:	42aa                	lw	t0,136(sp)
1c00c8e6:	8fbe                	mv	t6,a5
1c00c8e8:	532e                	lw	t1,232(sp)
1c00c8ea:	42570fb3          	p.mac	t6,a4,t0
1c00c8ee:	5e9e                	lw	t4,228(sp)
1c00c8f0:	88be                	mv	a7,a5
1c00c8f2:	78137f57          	pv.extract.b	t5,t1,2
1c00c8f6:	780377d7          	pv.extract.b	a5,t1,0
1c00c8fa:	4319                	li	t1,6
1c00c8fc:	41d30333          	sub	t1,t1,t4
1c00c900:	cfa2                	sw	s0,220(sp)
1c00c902:	cda6                	sw	s1,216(sp)
1c00c904:	cbca                	sw	s2,212(sp)
1c00c906:	0f8a                	slli	t6,t6,0x2
1c00c908:	9fae                	add	t6,t6,a1
1c00c90a:	c9ce                	sw	s3,208(sp)
1c00c90c:	c7d2                	sw	s4,204(sp)
1c00c90e:	c5d6                	sw	s5,200(sp)
1c00c910:	c3da                	sw	s6,196(sp)
1c00c912:	c1de                	sw	s7,192(sp)
1c00c914:	df62                	sw	s8,188(sp)
1c00c916:	dd66                	sw	s9,184(sp)
1c00c918:	db6a                	sw	s10,180(sp)
1c00c91a:	d96e                	sw	s11,176(sp)
1c00c91c:	c17e                	sw	t6,128(sp)
1c00c91e:	02d30333          	mul	t1,t1,a3
1c00c922:	2b08f663          	bleu	a6,a7,1c00cbce <KerConv7x7StrideS_Body_DP_fp.constprop.100+0x2ee>
1c00c926:	8396                	mv	t2,t0
1c00c928:	070a                	slli	a4,a4,0x2
1c00c92a:	d53a                	sw	a4,168(sp)
1c00c92c:	80000fb7          	lui	t6,0x80000
1c00c930:	540e                	lw	s0,224(sp)
1c00c932:	100f5f33          	p.exthz	t5,t5
1c00c936:	40600333          	neg	t1,t1
1c00c93a:	ffafcf93          	xori	t6,t6,-6
1c00c93e:	03d38733          	mul	a4,t2,t4
1c00c942:	9fb6                	add	t6,t6,a3
1c00c944:	0306                	slli	t1,t1,0x1
1c00c946:	001f9593          	slli	a1,t6,0x1
1c00c94a:	ff430293          	addi	t0,t1,-12
1c00c94e:	41e70f33          	sub	t5,a4,t5
1c00c952:	02df06b3          	mul	a3,t5,a3
1c00c956:	2683fc63          	bleu	s0,t2,1c00cbce <KerConv7x7StrideS_Body_DP_fp.constprop.100+0x2ee>
1c00c95a:	4618                	lw	a4,8(a2)
1c00c95c:	00c61903          	lh	s2,12(a2)
1c00c960:	00062983          	lw	s3,0(a2)
1c00c964:	de3a                	sw	a4,60(sp)
1c00c966:	01262a03          	lw	s4,18(a2)
1c00c96a:	01662a83          	lw	s5,22(a2)
1c00c96e:	01a61383          	lh	t2,26(a2)
1c00c972:	8e2a                	mv	t3,a0
1c00c974:	03d88733          	mul	a4,a7,t4
1c00c978:	4248                	lw	a0,4(a2)
1c00c97a:	00e62403          	lw	s0,14(a2)
1c00c97e:	00c58493          	addi	s1,a1,12
1c00c982:	c726                	sw	s1,140(sp)
1c00c984:	da2a                	sw	a0,52(sp)
1c00c986:	5204                	lw	s1,32(a2)
1c00c988:	5248                	lw	a0,36(a2)
1c00c98a:	daca                	sw	s2,116(sp)
1c00c98c:	d24e                	sw	s3,36(sp)
1c00c98e:	02861903          	lh	s2,40(a2)
1c00c992:	01c62983          	lw	s3,28(a2)
1c00c996:	c6d2                	sw	s4,76(sp)
1c00c998:	cad6                	sw	s5,84(sp)
1c00c99a:	02e62a03          	lw	s4,46(a2)
1c00c99e:	03262a83          	lw	s5,50(a2)
1c00c9a2:	de9e                	sw	t2,124(sp)
1c00c9a4:	03661383          	lh	t2,54(a2)
1c00c9a8:	c2a2                	sw	s0,68(sp)
1c00c9aa:	02a62403          	lw	s0,42(a2)
1c00c9ae:	1007d7b3          	p.exthz	a5,a5
1c00c9b2:	40f707b3          	sub	a5,a4,a5
1c00c9b6:	c826                	sw	s1,16(sp)
1c00c9b8:	cc2a                	sw	a0,24(sp)
1c00c9ba:	d4ca                	sw	s2,104(sp)
1c00c9bc:	cece                	sw	s3,92(sp)
1c00c9be:	d052                	sw	s4,32(sp)
1c00c9c0:	d456                	sw	s5,40(sp)
1c00c9c2:	d69e                	sw	t2,108(sp)
1c00c9c4:	ce22                	sw	s0,28(sp)
1c00c9c6:	00d78533          	add	a0,a5,a3
1c00c9ca:	4234                	lw	a3,64(a2)
1c00c9cc:	5e44                	lw	s1,60(a2)
1c00c9ce:	5e1c                	lw	a5,56(a2)
1c00c9d0:	04461703          	lh	a4,68(a2)
1c00c9d4:	002f9f13          	slli	t5,t6,0x2
1c00c9d8:	dc36                	sw	a3,56(sp)
1c00c9da:	46ba                	lw	a3,140(sp)
1c00c9dc:	04a62903          	lw	s2,74(a2)
1c00c9e0:	9f2e                	add	t5,t5,a1
1c00c9e2:	0f8e                	slli	t6,t6,0x3
1c00c9e4:	001f1d13          	slli	s10,t5,0x1
1c00c9e8:	04e62983          	lw	s3,78(a2)
1c00c9ec:	05261a03          	lh	s4,82(a2)
1c00c9f0:	04662a83          	lw	s5,70(a2)
1c00c9f4:	05862383          	lw	t2,88(a2)
1c00c9f8:	4e60                	lw	s0,92(a2)
1c00c9fa:	d826                	sw	s1,48(sp)
1c00c9fc:	d63e                	sw	a5,44(sp)
1c00c9fe:	06061483          	lh	s1,96(a2)
1c00ca02:	00bf87b3          	add	a5,t6,a1
1c00ca06:	4a70                	lw	a2,84(a2)
1c00ca08:	0506                	slli	a0,a0,0x1
1c00ca0a:	d8ba                	sw	a4,112(sp)
1c00ca0c:	03c78793          	addi	a5,a5,60
1c00ca10:	01a30733          	add	a4,t1,s10
1c00ca14:	9536                	add	a0,a0,a3
1c00ca16:	c4ca                	sw	s2,72(sp)
1c00ca18:	d33e                	sw	a5,164(sp)
1c00ca1a:	0e86                	slli	t4,t4,0x1
1c00ca1c:	9572                	add	a0,a0,t3
1c00ca1e:	00169913          	slli	s2,a3,0x1
1c00ca22:	024f0f13          	addi	t5,t5,36
1c00ca26:	030f8f93          	addi	t6,t6,48 # 80000030 <pulp__FC+0x80000031>
1c00ca2a:	04870713          	addi	a4,a4,72
1c00ca2e:	57d1                	li	a5,-12
1c00ca30:	c8ce                	sw	s3,80(sp)
1c00ca32:	dcd2                	sw	s4,120(sp)
1c00ca34:	c0d6                	sw	s5,64(sp)
1c00ca36:	c61e                	sw	t2,12(sp)
1c00ca38:	ca22                	sw	s0,20(sp)
1c00ca3a:	d2a6                	sw	s1,100(sp)
1c00ca3c:	ccb2                	sw	a2,88(sp)
1c00ca3e:	054d0d13          	addi	s10,s10,84 # 24054 <__L1Cl+0x14054>
1c00ca42:	cb76                	sw	t4,148(sp)
1c00ca44:	d0aa                	sw	a0,96(sp)
1c00ca46:	c94a                	sw	s2,144(sp)
1c00ca48:	cf7a                	sw	t5,156(sp)
1c00ca4a:	d17e                	sw	t6,160(sp)
1c00ca4c:	d73a                	sw	a4,172(sp)
1c00ca4e:	8f8d                	sub	a5,a5,a1
1c00ca50:	41180833          	sub	a6,a6,a7
1c00ca54:	cd3e                	sw	a5,152(sp)
1c00ca56:	9d16                	add	s10,s10,t0
1c00ca58:	c342                	sw	a6,132(sp)
1c00ca5a:	5a06                	lw	s4,96(sp)
1c00ca5c:	49ea                	lw	s3,152(sp)
1c00ca5e:	4aba                	lw	s5,140(sp)
1c00ca60:	4eca                	lw	t4,144(sp)
1c00ca62:	4f7a                	lw	t5,156(sp)
1c00ca64:	5f8a                	lw	t6,160(sp)
1c00ca66:	529a                	lw	t0,164(sp)
1c00ca68:	538e                	lw	t2,224(sp)
1c00ca6a:	442a                	lw	s0,136(sp)
1c00ca6c:	4e0a                	lw	t3,128(sp)
1c00ca6e:	014988b3          	add	a7,s3,s4
1c00ca72:	015a0833          	add	a6,s4,s5
1c00ca76:	014e8533          	add	a0,t4,s4
1c00ca7a:	014f05b3          	add	a1,t5,s4
1c00ca7e:	014f8633          	add	a2,t6,s4
1c00ca82:	014286b3          	add	a3,t0,s4
1c00ca86:	8752                	mv	a4,s4
1c00ca88:	40838333          	sub	t1,t2,s0
1c00ca8c:	093340fb          	lp.setup	x1,t1,1c00cbb2 <KerConv7x7StrideS_Body_DP_fp.constprop.100+0x2d2>
1c00ca90:	54ba                	lw	s1,172(sp)
1c00ca92:	0048af03          	lw	t5,4(a7)
1c00ca96:	0088ae83          	lw	t4,8(a7)
1c00ca9a:	00c89403          	lh	s0,12(a7)
1c00ca9e:	000e2783          	lw	a5,0(t3)
1c00caa2:	2098ff8b          	p.lw	t6,s1(a7!)
1c00caa6:	5912                	lw	s2,36(sp)
1c00caa8:	59d2                	lw	s3,52(sp)
1c00caaa:	5a72                	lw	s4,60(sp)
1c00caac:	b92f87d7          	pv.sdotsp.h	a5,t6,s2
1c00cab0:	5ad6                	lw	s5,116(sp)
1c00cab2:	b93f07d7          	pv.sdotsp.h	a5,t5,s3
1c00cab6:	b94e87d7          	pv.sdotsp.h	a5,t4,s4
1c00caba:	435407b3          	p.mac	a5,s0,s5
1c00cabe:	00472383          	lw	t2,4(a4)
1c00cac2:	00c71483          	lh	s1,12(a4)
1c00cac6:	00872283          	lw	t0,8(a4)
1c00caca:	4996                	lw	s3,68(sp)
1c00cacc:	21a7740b          	p.lw	s0,s10(a4!)
1c00cad0:	4a36                	lw	s4,76(sp)
1c00cad2:	00852903          	lw	s2,8(a0)
1c00cad6:	00482f03          	lw	t5,4(a6)
1c00cada:	00882e83          	lw	t4,8(a6)
1c00cade:	b93407d7          	pv.sdotsp.h	a5,s0,s3
1c00cae2:	b94387d7          	pv.sdotsp.h	a5,t2,s4
1c00cae6:	43d6                	lw	t2,84(sp)
1c00cae8:	5476                	lw	s0,124(sp)
1c00caea:	00c81d83          	lh	s11,12(a6)
1c00caee:	b87287d7          	pv.sdotsp.h	a5,t0,t2
1c00caf2:	428487b3          	p.mac	a5,s1,s0
1c00caf6:	00452a83          	lw	s5,4(a0)
1c00cafa:	4584                	lw	s1,8(a1)
1c00cafc:	00462383          	lw	t2,4(a2)
1c00cb00:	21a87f8b          	p.lw	t6,s10(a6!)
1c00cb04:	00c51c83          	lh	s9,12(a0)
1c00cb08:	00c59c03          	lh	s8,12(a1)
1c00cb0c:	c44a                	sw	s2,8(sp)
1c00cb0e:	21a57b0b          	p.lw	s6,s10(a0!)
1c00cb12:	0045a903          	lw	s2,4(a1)
1c00cb16:	21a5f98b          	p.lw	s3,s10(a1!)
1c00cb1a:	00862283          	lw	t0,8(a2)
1c00cb1e:	4a76                	lw	s4,92(sp)
1c00cb20:	00c61b83          	lh	s7,12(a2)
1c00cb24:	21a6740b          	p.lw	s0,s10(a2!)
1c00cb28:	b94f87d7          	pv.sdotsp.h	a5,t6,s4
1c00cb2c:	4fc2                	lw	t6,16(sp)
1c00cb2e:	4a62                	lw	s4,24(sp)
1c00cb30:	b9ff07d7          	pv.sdotsp.h	a5,t5,t6
1c00cb34:	b94e87d7          	pv.sdotsp.h	a5,t4,s4
1c00cb38:	5ea6                	lw	t4,104(sp)
1c00cb3a:	4a72                	lw	s4,28(sp)
1c00cb3c:	0046af03          	lw	t5,4(a3)
1c00cb40:	43dd87b3          	p.mac	a5,s11,t4
1c00cb44:	0086ae83          	lw	t4,8(a3)
1c00cb48:	00c69d83          	lh	s11,12(a3)
1c00cb4c:	21a6ff8b          	p.lw	t6,s10(a3!)
1c00cb50:	b94b07d7          	pv.sdotsp.h	a5,s6,s4
1c00cb54:	5a02                	lw	s4,32(sp)
1c00cb56:	b94a87d7          	pv.sdotsp.h	a5,s5,s4
1c00cb5a:	4aa2                	lw	s5,8(sp)
1c00cb5c:	5a22                	lw	s4,40(sp)
1c00cb5e:	b94a87d7          	pv.sdotsp.h	a5,s5,s4
1c00cb62:	5ab6                	lw	s5,108(sp)
1c00cb64:	5a32                	lw	s4,44(sp)
1c00cb66:	435c87b3          	p.mac	a5,s9,s5
1c00cb6a:	5ac2                	lw	s5,48(sp)
1c00cb6c:	b94987d7          	pv.sdotsp.h	a5,s3,s4
1c00cb70:	b95907d7          	pv.sdotsp.h	a5,s2,s5
1c00cb74:	5962                	lw	s2,56(sp)
1c00cb76:	59c6                	lw	s3,112(sp)
1c00cb78:	4a06                	lw	s4,64(sp)
1c00cb7a:	b92487d7          	pv.sdotsp.h	a5,s1,s2
1c00cb7e:	433c07b3          	p.mac	a5,s8,s3
1c00cb82:	4aa6                	lw	s5,72(sp)
1c00cb84:	44e6                	lw	s1,88(sp)
1c00cb86:	4932                	lw	s2,12(sp)
1c00cb88:	49d2                	lw	s3,20(sp)
1c00cb8a:	b94407d7          	pv.sdotsp.h	a5,s0,s4
1c00cb8e:	b95387d7          	pv.sdotsp.h	a5,t2,s5
1c00cb92:	43c6                	lw	t2,80(sp)
1c00cb94:	5466                	lw	s0,120(sp)
1c00cb96:	5a16                	lw	s4,100(sp)
1c00cb98:	b87287d7          	pv.sdotsp.h	a5,t0,t2
1c00cb9c:	428b87b3          	p.mac	a5,s7,s0
1c00cba0:	5aaa                	lw	s5,168(sp)
1c00cba2:	b89f87d7          	pv.sdotsp.h	a5,t6,s1
1c00cba6:	b92f07d7          	pv.sdotsp.h	a5,t5,s2
1c00cbaa:	b93e87d7          	pv.sdotsp.h	a5,t4,s3
1c00cbae:	434d87b3          	p.mac	a5,s11,s4
1c00cbb2:	00fe6aab          	p.sw	a5,s5(t3!)
1c00cbb6:	4e8a                	lw	t4,128(sp)
1c00cbb8:	5f06                	lw	t5,96(sp)
1c00cbba:	429a                	lw	t0,132(sp)
1c00cbbc:	4fda                	lw	t6,148(sp)
1c00cbbe:	0e91                	addi	t4,t4,4
1c00cbc0:	12fd                	addi	t0,t0,-1
1c00cbc2:	9f7e                	add	t5,t5,t6
1c00cbc4:	c176                	sw	t4,128(sp)
1c00cbc6:	d0fa                	sw	t5,96(sp)
1c00cbc8:	c316                	sw	t0,132(sp)
1c00cbca:	e80298e3          	bnez	t0,1c00ca5a <KerConv7x7StrideS_Body_DP_fp.constprop.100+0x17a>
1c00cbce:	447e                	lw	s0,220(sp)
1c00cbd0:	44ee                	lw	s1,216(sp)
1c00cbd2:	495e                	lw	s2,212(sp)
1c00cbd4:	49ce                	lw	s3,208(sp)
1c00cbd6:	4a3e                	lw	s4,204(sp)
1c00cbd8:	4aae                	lw	s5,200(sp)
1c00cbda:	4b1e                	lw	s6,196(sp)
1c00cbdc:	4b8e                	lw	s7,192(sp)
1c00cbde:	5c7a                	lw	s8,188(sp)
1c00cbe0:	5cea                	lw	s9,184(sp)
1c00cbe2:	5d5a                	lw	s10,180(sp)
1c00cbe4:	5dca                	lw	s11,176(sp)
1c00cbe6:	612d                	addi	sp,sp,224
1c00cbe8:	8082                	ret

1c00cbea <KerConvNxNStrideS_Border_DP_fp.constprop.102>:
1c00cbea:	7135                	addi	sp,sp,-160
1c00cbec:	5e5a                	lw	t3,180(sp)
1c00cbee:	534a                	lw	t1,176(sp)
1c00cbf0:	4e8d                	li	t4,3
1c00cbf2:	780e72d7          	pv.extract.b	t0,t3,0
1c00cbf6:	781e7e57          	pv.extract.b	t3,t3,2
1c00cbfa:	41ce83b3          	sub	t2,t4,t3
1c00cbfe:	405e8eb3          	sub	t4,t4,t0
1c00cc02:	d81e                	sw	t2,48(sp)
1c00cc04:	c94e                	sw	s3,144(sp)
1c00cc06:	c8f6                	sw	t4,80(sp)
1c00cc08:	59aa                	lw	s3,168(sp)
1c00cc0a:	78137ed7          	pv.extract.b	t4,t1,2
1c00cc0e:	cf22                	sw	s0,156(sp)
1c00cc10:	d4f6                	sw	t4,104(sp)
1c00cc12:	543a                	lw	s0,172(sp)
1c00cc14:	5ec2                	lw	t4,48(sp)
1c00cc16:	d072                	sw	t3,32(sp)
1c00cc18:	fff98e13          	addi	t3,s3,-1
1c00cc1c:	428e0eb3          	p.mac	t4,t3,s0
1c00cc20:	7a0373d7          	pv.extract.b	t2,t1,1
1c00cc24:	d216                	sw	t0,36(sp)
1c00cc26:	780372d7          	pv.extract.b	t0,t1,0
1c00cc2a:	7a137357          	pv.extract.b	t1,t1,3
1c00cc2e:	cd26                	sw	s1,152(sp)
1c00cc30:	dee2                	sw	s8,124(sp)
1c00cc32:	d8ee                	sw	s11,112(sp)
1c00cc34:	ca46                	sw	a7,20(sp)
1c00cc36:	ce96                	sw	t0,92(sp)
1c00cc38:	c49e                	sw	t2,72(sp)
1c00cc3a:	cb4a                	sw	s2,148(sp)
1c00cc3c:	c752                	sw	s4,140(sp)
1c00cc3e:	c556                	sw	s5,136(sp)
1c00cc40:	c35a                	sw	s6,132(sp)
1c00cc42:	c15e                	sw	s7,128(sp)
1c00cc44:	dce6                	sw	s9,120(sp)
1c00cc46:	daea                	sw	s10,116(sp)
1c00cc48:	d42a                	sw	a0,40(sp)
1c00cc4a:	c0ae                	sw	a1,64(sp)
1c00cc4c:	de3a                	sw	a4,60(sp)
1c00cc4e:	c83e                	sw	a5,16(sp)
1c00cc50:	c642                	sw	a6,12(sp)
1c00cc52:	c69a                	sw	t1,76(sp)
1c00cc54:	5d9a                	lw	s11,164(sp)
1c00cc56:	d0f6                	sw	t4,96(sp)
1c00cc58:	42c6                	lw	t0,80(sp)
1c00cc5a:	18fd                	addi	a7,a7,-1
1c00cc5c:	53a6                	lw	t2,104(sp)
1c00cc5e:	428882b3          	p.mac	t0,a7,s0
1c00cc62:	84b2                	mv	s1,a2
1c00cc64:	8c36                	mv	s8,a3
1c00cc66:	d296                	sw	t0,100(sp)
1c00cc68:	16038463          	beqz	t2,1c00cdd0 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1e6>
1c00cc6c:	58c2                	lw	a7,48(sp)
1c00cc6e:	411705b3          	sub	a1,a4,a7
1c00cc72:	140d8f63          	beqz	s11,1c00cdd0 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1e6>
1c00cc76:	02880533          	mul	a0,a6,s0
1c00cc7a:	5e82                	lw	t4,32(sp)
1c00cc7c:	42d2                	lw	t0,20(sp)
1c00cc7e:	4886                	lw	a7,64(sp)
1c00cc80:	83be                	mv	t2,a5
1c00cc82:	00229693          	slli	a3,t0,0x2
1c00cc86:	003e9b13          	slli	s6,t4,0x3
1c00cc8a:	00341793          	slli	a5,s0,0x3
1c00cc8e:	40580733          	sub	a4,a6,t0
1c00cc92:	41db0b33          	sub	s6,s6,t4
1c00cc96:	40f407b3          	sub	a5,s0,a5
1c00cc9a:	00d88cb3          	add	s9,a7,a3
1c00cc9e:	8d76                	mv	s10,t4
1c00cca0:	41d006b3          	neg	a3,t4
1c00cca4:	5292                	lw	t0,36(sp)
1c00cca6:	5ec2                	lw	t4,48(sp)
1c00cca8:	0786                	slli	a5,a5,0x1
1c00ccaa:	c2be                	sw	a5,68(sp)
1c00ccac:	00271793          	slli	a5,a4,0x2
1c00ccb0:	0b06                	slli	s6,s6,0x1
1c00ccb2:	038a                	slli	t2,t2,0x2
1c00ccb4:	da3e                	sw	a5,52(sp)
1c00ccb6:	4701                	li	a4,0
1c00ccb8:	95f6                	add	a1,a1,t4
1c00ccba:	405507b3          	sub	a5,a0,t0
1c00ccbe:	9b32                	add	s6,s6,a2
1c00ccc0:	ce62                	sw	s8,28(sp)
1c00ccc2:	001c1613          	slli	a2,s8,0x1
1c00ccc6:	d66e                	sw	s11,44(sp)
1c00ccc8:	dc1e                	sw	t2,56(sp)
1c00ccca:	00141b93          	slli	s7,s0,0x1
1c00ccce:	caae                	sw	a1,84(sp)
1c00ccd0:	ccbe                	sw	a5,88(sp)
1c00ccd2:	cc26                	sw	s1,24(sp)
1c00ccd4:	8c3a                	mv	s8,a4
1c00ccd6:	8db6                	mv	s11,a3
1c00ccd8:	d6ce                	sw	s3,108(sp)
1c00ccda:	43d6                	lw	t2,84(sp)
1c00ccdc:	45b2                	lw	a1,12(sp)
1c00ccde:	48d2                	lw	a7,20(sp)
1c00cce0:	01a38ab3          	add	s5,t2,s10
1c00cce4:	451d                	li	a0,7
1c00cce6:	14aaeab3          	p.clipur	s5,s5,a0
1c00ccea:	0d15f463          	bleu	a7,a1,1c00cdb2 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1c8>
1c00ccee:	4ee6                	lw	t4,88(sp)
1c00ccf0:	42f2                	lw	t0,28(sp)
1c00ccf2:	01ad87b3          	add	a5,s11,s10
1c00ccf6:	53d2                	lw	t2,52(sp)
1c00ccf8:	42578eb3          	p.mac	t4,a5,t0
1c00ccfc:	003a9a13          	slli	s4,s5,0x3
1c00cd00:	019389b3          	add	s3,t2,s9
1c00cd04:	413c84b3          	sub	s1,s9,s3
1c00cd08:	4562                	lw	a0,24(sp)
1c00cd0a:	58a2                	lw	a7,40(sp)
1c00cd0c:	415a0a33          	sub	s4,s4,s5
1c00cd10:	14f1                	addi	s1,s1,-4
1c00cd12:	0a06                	slli	s4,s4,0x1
1c00cd14:	8089                	srli	s1,s1,0x2
1c00cd16:	001e9793          	slli	a5,t4,0x1
1c00cd1a:	9a2a                	add	s4,s4,a0
1c00cd1c:	0485                	addi	s1,s1,1
1c00cd1e:	00f88933          	add	s2,a7,a5
1c00cd22:	0474c07b          	lp.setup	x0,s1,1c00cdb0 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1c6>
1c00cd26:	0049a78b          	p.lw	a5,4(s3!)
1c00cd2a:	095d7163          	bleu	s5,s10,1c00cdac <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1c2>
1c00cd2e:	416a05b3          	sub	a1,s4,s6
1c00cd32:	15c9                	addi	a1,a1,-14
1c00cd34:	36db7737          	lui	a4,0x36db7
1c00cd38:	db770713          	addi	a4,a4,-585 # 36db6db7 <__l2_end+0x1ad9f19b>
1c00cd3c:	8185                	srli	a1,a1,0x1
1c00cd3e:	02e585b3          	mul	a1,a1,a4
1c00cd42:	86da                	mv	a3,s6
1c00cd44:	874a                	mv	a4,s2
1c00cd46:	c422                	sw	s0,8(sp)
1c00cd48:	c1f5b5b3          	p.bclr	a1,a1,0,31
1c00cd4c:	0585                	addi	a1,a1,1
1c00cd4e:	02c5c0fb          	lp.setup	x1,a1,1c00cda6 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x1bc>
1c00cd52:	00075803          	lhu	a6,0(a4)
1c00cd56:	0006d503          	lhu	a0,0(a3)
1c00cd5a:	00275383          	lhu	t2,2(a4)
1c00cd5e:	0026d403          	lhu	s0,2(a3)
1c00cd62:	80a817db          	p.macs	a5,a6,a0
1c00cd66:	00475283          	lhu	t0,4(a4)
1c00cd6a:	0046df83          	lhu	t6,4(a3)
1c00cd6e:	00675f03          	lhu	t5,6(a4)
1c00cd72:	0066de83          	lhu	t4,6(a3)
1c00cd76:	00875e03          	lhu	t3,8(a4)
1c00cd7a:	0086d303          	lhu	t1,8(a3)
1c00cd7e:	00a75883          	lhu	a7,10(a4)
1c00cd82:	00a6d803          	lhu	a6,10(a3)
1c00cd86:	00c75503          	lhu	a0,12(a4)
1c00cd8a:	808397db          	p.macs	a5,t2,s0
1c00cd8e:	00c6d383          	lhu	t2,12(a3)
1c00cd92:	9732                	add	a4,a4,a2
1c00cd94:	06b9                	addi	a3,a3,14
1c00cd96:	81f297db          	p.macs	a5,t0,t6
1c00cd9a:	81df17db          	p.macs	a5,t5,t4
1c00cd9e:	806e17db          	p.macs	a5,t3,t1
1c00cda2:	810897db          	p.macs	a5,a7,a6
1c00cda6:	807517db          	p.macs	a5,a0,t2
1c00cdaa:	4422                	lw	s0,8(sp)
1c00cdac:	fef9ae23          	sw	a5,-4(s3)
1c00cdb0:	995e                	add	s2,s2,s7
1c00cdb2:	5562                	lw	a0,56(sp)
1c00cdb4:	4596                	lw	a1,68(sp)
1c00cdb6:	56b2                	lw	a3,44(sp)
1c00cdb8:	0c05                	addi	s8,s8,1
1c00cdba:	408d0d33          	sub	s10,s10,s0
1c00cdbe:	9caa                	add	s9,s9,a0
1c00cdc0:	9da2                	add	s11,s11,s0
1c00cdc2:	9b2e                	add	s6,s6,a1
1c00cdc4:	f0dc1be3          	bne	s8,a3,1c00ccda <KerConvNxNStrideS_Border_DP_fp.constprop.102+0xf0>
1c00cdc8:	44e2                	lw	s1,24(sp)
1c00cdca:	4c72                	lw	s8,28(sp)
1c00cdcc:	59b6                	lw	s3,108(sp)
1c00cdce:	8db6                	mv	s11,a3
1c00cdd0:	4736                	lw	a4,76(sp)
1c00cdd2:	14070563          	beqz	a4,1c00cf1c <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x332>
1c00cdd6:	5806                	lw	a6,96(sp)
1c00cdd8:	58f2                	lw	a7,60(sp)
1c00cdda:	5e8a                	lw	t4,160(sp)
1c00cddc:	010407b3          	add	a5,s0,a6
1c00cde0:	40f887b3          	sub	a5,a7,a5
1c00cde4:	00378b93          	addi	s7,a5,3
1c00cde8:	13d9fa63          	bleu	t4,s3,1c00cf1c <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x332>
1c00cdec:	42b2                	lw	t0,12(sp)
1c00cdee:	48d2                	lw	a7,20(sp)
1c00cdf0:	028986b3          	mul	a3,s3,s0
1c00cdf4:	4ec2                	lw	t4,16(sp)
1c00cdf6:	411287b3          	sub	a5,t0,a7
1c00cdfa:	078a                	slli	a5,a5,0x2
1c00cdfc:	cc3e                	sw	a5,24(sp)
1c00cdfe:	5892                	lw	a7,36(sp)
1c00ce00:	0e8a                	slli	t4,t4,0x2
1c00ce02:	d676                	sw	t4,44(sp)
1c00ce04:	4752                	lw	a4,20(sp)
1c00ce06:	4ec2                	lw	t4,16(sp)
1c00ce08:	028287b3          	mul	a5,t0,s0
1c00ce0c:	5282                	lw	t0,32(sp)
1c00ce0e:	001c1393          	slli	t2,s8,0x1
1c00ce12:	da62                	sw	s8,52(sp)
1c00ce14:	405686b3          	sub	a3,a3,t0
1c00ce18:	4286                	lw	t0,64(sp)
1c00ce1a:	dc6e                	sw	s11,56(sp)
1c00ce1c:	00141c93          	slli	s9,s0,0x1
1c00ce20:	c2ce                	sw	s3,68(sp)
1c00ce22:	411787b3          	sub	a5,a5,a7
1c00ce26:	438687b3          	p.mac	a5,a3,s8
1c00ce2a:	58a2                	lw	a7,40(sp)
1c00ce2c:	8c4e                	mv	s8,s3
1c00ce2e:	43d98733          	p.mac	a4,s3,t4
1c00ce32:	0786                	slli	a5,a5,0x1
1c00ce34:	97c6                	add	a5,a5,a7
1c00ce36:	8dbe                	mv	s11,a5
1c00ce38:	02838533          	mul	a0,t2,s0
1c00ce3c:	070a                	slli	a4,a4,0x2
1c00ce3e:	00e28d33          	add	s10,t0,a4
1c00ce42:	ce2a                	sw	a0,28(sp)
1c00ce44:	42b2                	lw	t0,12(sp)
1c00ce46:	48d2                	lw	a7,20(sp)
1c00ce48:	4e9d                	li	t4,7
1c00ce4a:	15dbeb33          	p.clipur	s6,s7,t4
1c00ce4e:	0b12fa63          	bleu	a7,t0,1c00cf02 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x318>
1c00ce52:	4ee2                	lw	t4,24(sp)
1c00ce54:	003b1a93          	slli	s5,s6,0x3
1c00ce58:	416a8ab3          	sub	s5,s5,s6
1c00ce5c:	01ae89b3          	add	s3,t4,s10
1c00ce60:	413d0933          	sub	s2,s10,s3
1c00ce64:	1971                	addi	s2,s2,-4
1c00ce66:	0a86                	slli	s5,s5,0x1
1c00ce68:	00295913          	srli	s2,s2,0x2
1c00ce6c:	9aa6                	add	s5,s5,s1
1c00ce6e:	8a6e                	mv	s4,s11
1c00ce70:	0905                	addi	s2,s2,1
1c00ce72:	0479407b          	lp.setup	x0,s2,1c00cf00 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x316>
1c00ce76:	0049a78b          	p.lw	a5,4(s3!)
1c00ce7a:	080b0163          	beqz	s6,1c00cefc <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x312>
1c00ce7e:	409a8633          	sub	a2,s5,s1
1c00ce82:	1649                	addi	a2,a2,-14
1c00ce84:	36db7737          	lui	a4,0x36db7
1c00ce88:	db770713          	addi	a4,a4,-585 # 36db6db7 <__l2_end+0x1ad9f19b>
1c00ce8c:	8205                	srli	a2,a2,0x1
1c00ce8e:	02e60633          	mul	a2,a2,a4
1c00ce92:	86a6                	mv	a3,s1
1c00ce94:	8752                	mv	a4,s4
1c00ce96:	c422                	sw	s0,8(sp)
1c00ce98:	c1f63633          	p.bclr	a2,a2,0,31
1c00ce9c:	0605                	addi	a2,a2,1
1c00ce9e:	02c640fb          	lp.setup	x1,a2,1c00cef6 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x30c>
1c00cea2:	00075503          	lhu	a0,0(a4)
1c00cea6:	0006d583          	lhu	a1,0(a3)
1c00ceaa:	00275283          	lhu	t0,2(a4)
1c00ceae:	0026d403          	lhu	s0,2(a3)
1c00ceb2:	80b517db          	p.macs	a5,a0,a1
1c00ceb6:	00475f83          	lhu	t6,4(a4)
1c00ceba:	0046df03          	lhu	t5,4(a3)
1c00cebe:	00675e83          	lhu	t4,6(a4)
1c00cec2:	0066de03          	lhu	t3,6(a3)
1c00cec6:	00875303          	lhu	t1,8(a4)
1c00ceca:	0086d883          	lhu	a7,8(a3)
1c00cece:	00a75803          	lhu	a6,10(a4)
1c00ced2:	00a6d503          	lhu	a0,10(a3)
1c00ced6:	00c75583          	lhu	a1,12(a4)
1c00ceda:	808297db          	p.macs	a5,t0,s0
1c00cede:	00c6d283          	lhu	t0,12(a3)
1c00cee2:	971e                	add	a4,a4,t2
1c00cee4:	06b9                	addi	a3,a3,14
1c00cee6:	81ef97db          	p.macs	a5,t6,t5
1c00ceea:	81ce97db          	p.macs	a5,t4,t3
1c00ceee:	811317db          	p.macs	a5,t1,a7
1c00cef2:	80a817db          	p.macs	a5,a6,a0
1c00cef6:	805597db          	p.macs	a5,a1,t0
1c00cefa:	4422                	lw	s0,8(sp)
1c00cefc:	fef9ae23          	sw	a5,-4(s3)
1c00cf00:	9a66                	add	s4,s4,s9
1c00cf02:	5532                	lw	a0,44(sp)
1c00cf04:	45f2                	lw	a1,28(sp)
1c00cf06:	560a                	lw	a2,160(sp)
1c00cf08:	0c05                	addi	s8,s8,1
1c00cf0a:	408b8bb3          	sub	s7,s7,s0
1c00cf0e:	9d2a                	add	s10,s10,a0
1c00cf10:	9dae                	add	s11,s11,a1
1c00cf12:	f2cc19e3          	bne	s8,a2,1c00ce44 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x25a>
1c00cf16:	5c52                	lw	s8,52(sp)
1c00cf18:	5de2                	lw	s11,56(sp)
1c00cf1a:	4996                	lw	s3,68(sp)
1c00cf1c:	46f6                	lw	a3,92(sp)
1c00cf1e:	caed                	beqz	a3,1c00d010 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x426>
1c00cf20:	48c6                	lw	a7,80(sp)
1c00cf22:	4eb2                	lw	t4,12(sp)
1c00cf24:	411c06b3          	sub	a3,s8,a7
1c00cf28:	0e0e8463          	beqz	t4,1c00d010 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x426>
1c00cf2c:	028d8633          	mul	a2,s11,s0
1c00cf30:	5382                	lw	t2,32(sp)
1c00cf32:	4542                	lw	a0,16(sp)
1c00cf34:	4d06                	lw	s10,64(sp)
1c00cf36:	001c1f13          	slli	t5,s8,0x1
1c00cf3a:	002d9593          	slli	a1,s11,0x2
1c00cf3e:	5292                	lw	t0,36(sp)
1c00cf40:	40800733          	neg	a4,s0
1c00cf44:	06248793          	addi	a5,s1,98 # 80000062 <pulp__FC+0x80000063>
1c00cf48:	405686b3          	sub	a3,a3,t0
1c00cf4c:	40760633          	sub	a2,a2,t2
1c00cf50:	03860633          	mul	a2,a2,s8
1c00cf54:	00129a13          	slli	s4,t0,0x1
1c00cf58:	0706                	slli	a4,a4,0x1
1c00cf5a:	068d                	addi	a3,a3,3
1c00cf5c:	01478ab3          	add	s5,a5,s4
1c00cf60:	ce62                	sw	s8,28(sp)
1c00cf62:	9a26                	add	s4,s4,s1
1c00cf64:	00251b93          	slli	s7,a0,0x2
1c00cf68:	8e16                	mv	t3,t0
1c00cf6a:	4c81                	li	s9,0
1c00cf6c:	42a58d33          	p.mac	s10,a1,a0
1c00cf70:	40560633          	sub	a2,a2,t0
1c00cf74:	c436                	sw	a3,8(sp)
1c00cf76:	8932                	mv	s2,a2
1c00cf78:	cc26                	sw	s1,24(sp)
1c00cf7a:	8c3a                	mv	s8,a4
1c00cf7c:	028f0b33          	mul	s6,t5,s0
1c00cf80:	45a2                	lw	a1,8(sp)
1c00cf82:	461d                	li	a2,7
1c00cf84:	01c58eb3          	add	t4,a1,t3
1c00cf88:	14ceeeb3          	p.clipur	t4,t4,a2
1c00cf8c:	073df663          	bleu	s3,s11,1c00cff8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x40e>
1c00cf90:	58a2                	lw	a7,40(sp)
1c00cf92:	01c902b3          	add	t0,s2,t3
1c00cf96:	0286                	slli	t0,t0,0x1
1c00cf98:	41ce8fb3          	sub	t6,t4,t3
1c00cf9c:	92c6                	add	t0,t0,a7
1c00cf9e:	0f86                	slli	t6,t6,0x1
1c00cfa0:	84ea                	mv	s1,s10
1c00cfa2:	83ee                	mv	t2,s11
1c00cfa4:	414a85b3          	sub	a1,s5,s4
1c00cfa8:	15c9                	addi	a1,a1,-14
1c00cfaa:	36db77b7          	lui	a5,0x36db7
1c00cfae:	8185                	srli	a1,a1,0x1
1c00cfb0:	db778793          	addi	a5,a5,-585 # 36db6db7 <__l2_end+0x1ad9f19b>
1c00cfb4:	02f585b3          	mul	a1,a1,a5
1c00cfb8:	4090                	lw	a2,0(s1)
1c00cfba:	8852                	mv	a6,s4
1c00cfbc:	8516                	mv	a0,t0
1c00cfbe:	c1f5b5b3          	p.bclr	a1,a1,0,31
1c00cfc2:	0585                	addi	a1,a1,1
1c00cfc4:	0135c07b          	lp.setup	x0,a1,1c00cfea <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x400>
1c00cfc8:	03de7063          	bleu	t4,t3,1c00cfe8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x3fe>
1c00cfcc:	ffef8793          	addi	a5,t6,-2
1c00cfd0:	8385                	srli	a5,a5,0x1
1c00cfd2:	86c2                	mv	a3,a6
1c00cfd4:	872a                	mv	a4,a0
1c00cfd6:	0785                	addi	a5,a5,1
1c00cfd8:	0067c0fb          	lp.setup	x1,a5,1c00cfe4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x3fa>
1c00cfdc:	0027130b          	p.lh	t1,2(a4!)
1c00cfe0:	0026988b          	p.lh	a7,2(a3!)
1c00cfe4:	43130633          	p.mac	a2,t1,a7
1c00cfe8:	957a                	add	a0,a0,t5
1c00cfea:	0839                	addi	a6,a6,14
1c00cfec:	00c4ebab          	p.sw	a2,s7(s1!)
1c00cff0:	0385                	addi	t2,t2,1
1c00cff2:	92da                	add	t0,t0,s6
1c00cff4:	fb3398e3          	bne	t2,s3,1c00cfa4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x3ba>
1c00cff8:	4eb2                	lw	t4,12(sp)
1c00cffa:	0c85                	addi	s9,s9,1
1c00cffc:	408e0e33          	sub	t3,t3,s0
1c00d000:	9ae2                	add	s5,s5,s8
1c00d002:	9a62                	add	s4,s4,s8
1c00d004:	0d11                	addi	s10,s10,4
1c00d006:	9922                	add	s2,s2,s0
1c00d008:	f7dc9ce3          	bne	s9,t4,1c00cf80 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x396>
1c00d00c:	44e2                	lw	s1,24(sp)
1c00d00e:	4c72                	lw	s8,28(sp)
1c00d010:	42a6                	lw	t0,72(sp)
1c00d012:	0c028c63          	beqz	t0,1c00d0ea <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x500>
1c00d016:	5396                	lw	t2,100(sp)
1c00d018:	4b52                	lw	s6,20(sp)
1c00d01a:	4542                	lw	a0,16(sp)
1c00d01c:	00740bb3          	add	s7,s0,t2
1c00d020:	417c0bb3          	sub	s7,s8,s7
1c00d024:	0b8d                	addi	s7,s7,3
1c00d026:	0cab7263          	bleu	a0,s6,1c00d0ea <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x500>
1c00d02a:	028b07b3          	mul	a5,s6,s0
1c00d02e:	5292                	lw	t0,36(sp)
1c00d030:	5882                	lw	a7,32(sp)
1c00d032:	875a                	mv	a4,s6
1c00d034:	001c1e93          	slli	t4,s8,0x1
1c00d038:	00251a93          	slli	s5,a0,0x2
1c00d03c:	4386                	lw	t2,64(sp)
1c00d03e:	00141593          	slli	a1,s0,0x1
1c00d042:	c42e                	sw	a1,8(sp)
1c00d044:	06248a13          	addi	s4,s1,98
1c00d048:	028d86b3          	mul	a3,s11,s0
1c00d04c:	405787b3          	sub	a5,a5,t0
1c00d050:	8d3e                	mv	s10,a5
1c00d052:	411686b3          	sub	a3,a3,a7
1c00d056:	42ad8733          	p.mac	a4,s11,a0
1c00d05a:	5522                	lw	a0,40(sp)
1c00d05c:	43868d33          	p.mac	s10,a3,s8
1c00d060:	070a                	slli	a4,a4,0x2
1c00d062:	00e38cb3          	add	s9,t2,a4
1c00d066:	028e8933          	mul	s2,t4,s0
1c00d06a:	0d06                	slli	s10,s10,0x1
1c00d06c:	9d2a                	add	s10,s10,a0
1c00d06e:	459d                	li	a1,7
1c00d070:	14bbee33          	p.clipur	t3,s7,a1
1c00d074:	073df263          	bleu	s3,s11,1c00d0d8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x4ee>
1c00d078:	001e1f13          	slli	t5,t3,0x1
1c00d07c:	83ea                	mv	t2,s10
1c00d07e:	82e6                	mv	t0,s9
1c00d080:	8fee                	mv	t6,s11
1c00d082:	409a05b3          	sub	a1,s4,s1
1c00d086:	15c9                	addi	a1,a1,-14
1c00d088:	36db77b7          	lui	a5,0x36db7
1c00d08c:	8185                	srli	a1,a1,0x1
1c00d08e:	db778793          	addi	a5,a5,-585 # 36db6db7 <__l2_end+0x1ad9f19b>
1c00d092:	02f585b3          	mul	a1,a1,a5
1c00d096:	0002a603          	lw	a2,0(t0)
1c00d09a:	8826                	mv	a6,s1
1c00d09c:	851e                	mv	a0,t2
1c00d09e:	c1f5b5b3          	p.bclr	a1,a1,0,31
1c00d0a2:	0585                	addi	a1,a1,1
1c00d0a4:	0135c07b          	lp.setup	x0,a1,1c00d0ca <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x4e0>
1c00d0a8:	020e0063          	beqz	t3,1c00d0c8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x4de>
1c00d0ac:	ffef0793          	addi	a5,t5,-2
1c00d0b0:	8385                	srli	a5,a5,0x1
1c00d0b2:	86c2                	mv	a3,a6
1c00d0b4:	872a                	mv	a4,a0
1c00d0b6:	0785                	addi	a5,a5,1
1c00d0b8:	0067c0fb          	lp.setup	x1,a5,1c00d0c4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x4da>
1c00d0bc:	0027130b          	p.lh	t1,2(a4!)
1c00d0c0:	0026988b          	p.lh	a7,2(a3!)
1c00d0c4:	43130633          	p.mac	a2,t1,a7
1c00d0c8:	9576                	add	a0,a0,t4
1c00d0ca:	0839                	addi	a6,a6,14
1c00d0cc:	00c2eaab          	p.sw	a2,s5(t0!)
1c00d0d0:	0f85                	addi	t6,t6,1
1c00d0d2:	93ca                	add	t2,t2,s2
1c00d0d4:	fb3f97e3          	bne	t6,s3,1c00d082 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x498>
1c00d0d8:	4622                	lw	a2,8(sp)
1c00d0da:	46c2                	lw	a3,16(sp)
1c00d0dc:	0b05                	addi	s6,s6,1
1c00d0de:	408b8bb3          	sub	s7,s7,s0
1c00d0e2:	0c91                	addi	s9,s9,4
1c00d0e4:	9d32                	add	s10,s10,a2
1c00d0e6:	f8db14e3          	bne	s6,a3,1c00d06e <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x484>
1c00d0ea:	58a6                	lw	a7,104(sp)
1c00d0ec:	20088963          	beqz	a7,1c00d2fe <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x714>
1c00d0f0:	4ef6                	lw	t4,92(sp)
1c00d0f2:	300e8963          	beqz	t4,1c00d404 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x81a>
1c00d0f6:	53c2                	lw	t2,48(sp)
1c00d0f8:	52f2                	lw	t0,60(sp)
1c00d0fa:	40728733          	sub	a4,t0,t2
1c00d0fe:	00370513          	addi	a0,a4,3
1c00d102:	d82a                	sw	a0,48(sp)
1c00d104:	300d8e63          	beqz	s11,1c00d420 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x836>
1c00d108:	48c6                	lw	a7,80(sp)
1c00d10a:	4eb2                	lw	t4,12(sp)
1c00d10c:	411c0d33          	sub	s10,s8,a7
1c00d110:	0e0e8c63          	beqz	t4,1c00d208 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x61e>
1c00d114:	5282                	lw	t0,32(sp)
1c00d116:	5392                	lw	t2,36(sp)
1c00d118:	00341693          	slli	a3,s0,0x3
1c00d11c:	00329793          	slli	a5,t0,0x3
1c00d120:	405787b3          	sub	a5,a5,t0
1c00d124:	979e                	add	a5,a5,t2
1c00d126:	40d406b3          	sub	a3,s0,a3
1c00d12a:	48c2                	lw	a7,16(sp)
1c00d12c:	458d                	li	a1,3
1c00d12e:	002e9a93          	slli	s5,t4,0x2
1c00d132:	0786                	slli	a5,a5,0x1
1c00d134:	41d00633          	neg	a2,t4
1c00d138:	0686                	slli	a3,a3,0x1
1c00d13a:	4e86                	lw	t4,64(sp)
1c00d13c:	40558533          	sub	a0,a1,t0
1c00d140:	cc36                	sw	a3,24(sp)
1c00d142:	00f486b3          	add	a3,s1,a5
1c00d146:	00261793          	slli	a5,a2,0x2
1c00d14a:	40800cb3          	neg	s9,s0
1c00d14e:	407585b3          	sub	a1,a1,t2
1c00d152:	40500833          	neg	a6,t0
1c00d156:	088a                	slli	a7,a7,0x2
1c00d158:	ce3e                	sw	a5,28(sp)
1c00d15a:	953a                	add	a0,a0,a4
1c00d15c:	4781                	li	a5,0
1c00d15e:	001c1f93          	slli	t6,s8,0x1
1c00d162:	da26                	sw	s1,52(sp)
1c00d164:	dc62                	sw	s8,56(sp)
1c00d166:	c2ce                	sw	s3,68(sp)
1c00d168:	c446                	sw	a7,8(sp)
1c00d16a:	9af6                	add	s5,s5,t4
1c00d16c:	0c86                	slli	s9,s9,0x1
1c00d16e:	8916                	mv	s2,t0
1c00d170:	d62a                	sw	a0,44(sp)
1c00d172:	9d2e                	add	s10,s10,a1
1c00d174:	4b9d                	li	s7,7
1c00d176:	84be                	mv	s1,a5
1c00d178:	8c42                	mv	s8,a6
1c00d17a:	89b6                	mv	s3,a3
1c00d17c:	5b22                	lw	s6,40(sp)
1c00d17e:	012c07b3          	add	a5,s8,s2
1c00d182:	52b2                	lw	t0,44(sp)
1c00d184:	43f78b33          	p.mac	s6,a5,t6
1c00d188:	43f2                	lw	t2,28(sp)
1c00d18a:	5e12                	lw	t3,36(sp)
1c00d18c:	01228a33          	add	s4,t0,s2
1c00d190:	157a6a33          	p.clipur	s4,s4,s7
1c00d194:	015382b3          	add	t0,t2,s5
1c00d198:	83ce                	mv	t2,s3
1c00d19a:	01cd08b3          	add	a7,s10,t3
1c00d19e:	0042a60b          	p.lw	a2,4(t0!)
1c00d1a2:	1578e8b3          	p.clipur	a7,a7,s7
1c00d1a6:	03497d63          	bleu	s4,s2,1c00d1e0 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x5f6>
1c00d1aa:	41c88333          	sub	t1,a7,t3
1c00d1ae:	0306                	slli	t1,t1,0x1
1c00d1b0:	881e                	mv	a6,t2
1c00d1b2:	855a                	mv	a0,s6
1c00d1b4:	412a05b3          	sub	a1,s4,s2
1c00d1b8:	0135c07b          	lp.setup	x0,a1,1c00d1de <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x5f4>
1c00d1bc:	031e7063          	bleu	a7,t3,1c00d1dc <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x5f2>
1c00d1c0:	ffe30793          	addi	a5,t1,-2
1c00d1c4:	8385                	srli	a5,a5,0x1
1c00d1c6:	86c2                	mv	a3,a6
1c00d1c8:	872a                	mv	a4,a0
1c00d1ca:	0785                	addi	a5,a5,1
1c00d1cc:	0067c0fb          	lp.setup	x1,a5,1c00d1d8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x5ee>
1c00d1d0:	00271f0b          	p.lh	t5,2(a4!)
1c00d1d4:	00269e8b          	p.lh	t4,2(a3!)
1c00d1d8:	43df0633          	p.mac	a2,t5,t4
1c00d1dc:	957e                	add	a0,a0,t6
1c00d1de:	0839                	addi	a6,a6,14
1c00d1e0:	fec2ae23          	sw	a2,-4(t0)
1c00d1e4:	408e0e33          	sub	t3,t3,s0
1c00d1e8:	93e6                	add	t2,t2,s9
1c00d1ea:	fa5a98e3          	bne	s5,t0,1c00d19a <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x5b0>
1c00d1ee:	4522                	lw	a0,8(sp)
1c00d1f0:	45e2                	lw	a1,24(sp)
1c00d1f2:	0485                	addi	s1,s1,1
1c00d1f4:	40890933          	sub	s2,s2,s0
1c00d1f8:	9c22                	add	s8,s8,s0
1c00d1fa:	9aaa                	add	s5,s5,a0
1c00d1fc:	99ae                	add	s3,s3,a1
1c00d1fe:	f7b49fe3          	bne	s1,s11,1c00d17c <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x592>
1c00d202:	54d2                	lw	s1,52(sp)
1c00d204:	5c62                	lw	s8,56(sp)
1c00d206:	4996                	lw	s3,68(sp)
1c00d208:	4626                	lw	a2,72(sp)
1c00d20a:	20060b63          	beqz	a2,1c00d420 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x836>
1c00d20e:	5e96                	lw	t4,100(sp)
1c00d210:	42d2                	lw	t0,20(sp)
1c00d212:	43c2                	lw	t2,16(sp)
1c00d214:	01d407b3          	add	a5,s0,t4
1c00d218:	40fc07b3          	sub	a5,s8,a5
1c00d21c:	078d                	addi	a5,a5,3
1c00d21e:	cc3e                	sw	a5,24(sp)
1c00d220:	0c72ff63          	bleu	t2,t0,1c00d2fe <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x714>
1c00d224:	028286b3          	mul	a3,t0,s0
1c00d228:	5882                	lw	a7,32(sp)
1c00d22a:	00341793          	slli	a5,s0,0x3
1c00d22e:	00239e93          	slli	t4,t2,0x2
1c00d232:	40728733          	sub	a4,t0,t2
1c00d236:	40f407b3          	sub	a5,s0,a5
1c00d23a:	5392                	lw	t2,36(sp)
1c00d23c:	0786                	slli	a5,a5,0x1
1c00d23e:	00389b13          	slli	s6,a7,0x3
1c00d242:	4286                	lw	t0,64(sp)
1c00d244:	411b0b33          	sub	s6,s6,a7
1c00d248:	d63e                	sw	a5,44(sp)
1c00d24a:	00271793          	slli	a5,a4,0x2
1c00d24e:	0b06                	slli	s6,s6,0x1
1c00d250:	ce3e                	sw	a5,28(sp)
1c00d252:	4701                	li	a4,0
1c00d254:	407687b3          	sub	a5,a3,t2
1c00d258:	c476                	sw	t4,8(sp)
1c00d25a:	01d28ab3          	add	s5,t0,t4
1c00d25e:	9b26                	add	s6,s6,s1
1c00d260:	dc26                	sw	s1,56(sp)
1c00d262:	8946                	mv	s2,a7
1c00d264:	54c2                	lw	s1,48(sp)
1c00d266:	41100d33          	neg	s10,a7
1c00d26a:	d84e                	sw	s3,48(sp)
1c00d26c:	00141c93          	slli	s9,s0,0x1
1c00d270:	001c1e93          	slli	t4,s8,0x1
1c00d274:	da3e                	sw	a5,52(sp)
1c00d276:	4b9d                	li	s7,7
1c00d278:	89ba                	mv	s3,a4
1c00d27a:	52d2                	lw	t0,52(sp)
1c00d27c:	012d07b3          	add	a5,s10,s2
1c00d280:	4572                	lw	a0,28(sp)
1c00d282:	438782b3          	p.mac	t0,a5,s8
1c00d286:	58a2                	lw	a7,40(sp)
1c00d288:	43e2                	lw	t2,24(sp)
1c00d28a:	01550fb3          	add	t6,a0,s5
1c00d28e:	1574ea33          	p.clipur	s4,s1,s7
1c00d292:	0286                	slli	t0,t0,0x1
1c00d294:	92c6                	add	t0,t0,a7
1c00d296:	004fa60b          	p.lw	a2,4(t6!)
1c00d29a:	1573e8b3          	p.clipur	a7,t2,s7
1c00d29e:	03497c63          	bleu	s4,s2,1c00d2d6 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x6ec>
1c00d2a2:	00189313          	slli	t1,a7,0x1
1c00d2a6:	885a                	mv	a6,s6
1c00d2a8:	8516                	mv	a0,t0
1c00d2aa:	412a05b3          	sub	a1,s4,s2
1c00d2ae:	0135c07b          	lp.setup	x0,a1,1c00d2d4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x6ea>
1c00d2b2:	02088063          	beqz	a7,1c00d2d2 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x6e8>
1c00d2b6:	ffe30793          	addi	a5,t1,-2
1c00d2ba:	8385                	srli	a5,a5,0x1
1c00d2bc:	86c2                	mv	a3,a6
1c00d2be:	872a                	mv	a4,a0
1c00d2c0:	0785                	addi	a5,a5,1
1c00d2c2:	0067c0fb          	lp.setup	x1,a5,1c00d2ce <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x6e4>
1c00d2c6:	00271f0b          	p.lh	t5,2(a4!)
1c00d2ca:	00269e0b          	p.lh	t3,2(a3!)
1c00d2ce:	43cf0633          	p.mac	a2,t5,t3
1c00d2d2:	9576                	add	a0,a0,t4
1c00d2d4:	0839                	addi	a6,a6,14
1c00d2d6:	fecfae23          	sw	a2,-4(t6)
1c00d2da:	408383b3          	sub	t2,t2,s0
1c00d2de:	92e6                	add	t0,t0,s9
1c00d2e0:	fbfa9be3          	bne	s5,t6,1c00d296 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x6ac>
1c00d2e4:	42a2                	lw	t0,8(sp)
1c00d2e6:	53b2                	lw	t2,44(sp)
1c00d2e8:	0985                	addi	s3,s3,1
1c00d2ea:	8c81                	sub	s1,s1,s0
1c00d2ec:	40890933          	sub	s2,s2,s0
1c00d2f0:	9d22                	add	s10,s10,s0
1c00d2f2:	9a96                	add	s5,s5,t0
1c00d2f4:	9b1e                	add	s6,s6,t2
1c00d2f6:	f9b9e2e3          	bltu	s3,s11,1c00d27a <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x690>
1c00d2fa:	54e2                	lw	s1,56(sp)
1c00d2fc:	59c2                	lw	s3,48(sp)
1c00d2fe:	4536                	lw	a0,76(sp)
1c00d300:	c565                	beqz	a0,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d302:	45f6                	lw	a1,92(sp)
1c00d304:	12059063          	bnez	a1,1c00d424 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x83a>
1c00d308:	46a6                	lw	a3,72(sp)
1c00d30a:	cef9                	beqz	a3,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d30c:	5706                	lw	a4,96(sp)
1c00d30e:	58f2                	lw	a7,60(sp)
1c00d310:	5e8a                	lw	t4,160(sp)
1c00d312:	00e40db3          	add	s11,s0,a4
1c00d316:	41b88db3          	sub	s11,a7,s11
1c00d31a:	c44e                	sw	s3,8(sp)
1c00d31c:	0d8d                	addi	s11,s11,3
1c00d31e:	0dd9f563          	bleu	t4,s3,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d322:	5396                	lw	t2,100(sp)
1c00d324:	48d2                	lw	a7,20(sp)
1c00d326:	4ec2                	lw	t4,16(sp)
1c00d328:	007402b3          	add	t0,s0,t2
1c00d32c:	405c02b3          	sub	t0,s8,t0
1c00d330:	028d                	addi	t0,t0,3
1c00d332:	0bd8fb63          	bleu	t4,a7,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d336:	02898733          	mul	a4,s3,s0
1c00d33a:	8576                	mv	a0,t4
1c00d33c:	40a883b3          	sub	t2,a7,a0
1c00d340:	87aa                	mv	a5,a0
1c00d342:	001c1e93          	slli	t4,s8,0x1
1c00d346:	00251913          	slli	s2,a0,0x2
1c00d34a:	038a                	slli	t2,t2,0x2
1c00d34c:	00141f93          	slli	t6,s0,0x1
1c00d350:	4f1d                	li	t5,7
1c00d352:	02888d33          	mul	s10,a7,s0
1c00d356:	5882                	lw	a7,32(sp)
1c00d358:	41170733          	sub	a4,a4,a7
1c00d35c:	5892                	lw	a7,36(sp)
1c00d35e:	411d0d33          	sub	s10,s10,a7
1c00d362:	42a987b3          	p.mac	a5,s3,a0
1c00d366:	58a2                	lw	a7,40(sp)
1c00d368:	4506                	lw	a0,64(sp)
1c00d36a:	43870d33          	p.mac	s10,a4,s8
1c00d36e:	00279c13          	slli	s8,a5,0x2
1c00d372:	9c2a                	add	s8,s8,a0
1c00d374:	028e8cb3          	mul	s9,t4,s0
1c00d378:	0d06                	slli	s10,s10,0x1
1c00d37a:	9d46                	add	s10,s10,a7
1c00d37c:	01838a33          	add	s4,t2,s8
1c00d380:	8b6a                	mv	s6,s10
1c00d382:	8a96                	mv	s5,t0
1c00d384:	15edebb3          	p.clipur	s7,s11,t5
1c00d388:	004a260b          	p.lw	a2,4(s4!)
1c00d38c:	15eae8b3          	p.clipur	a7,s5,t5
1c00d390:	020b8b63          	beqz	s7,1c00d3c6 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7dc>
1c00d394:	8826                	mv	a6,s1
1c00d396:	00189313          	slli	t1,a7,0x1
1c00d39a:	855a                	mv	a0,s6
1c00d39c:	85de                	mv	a1,s7
1c00d39e:	0135c07b          	lp.setup	x0,a1,1c00d3c4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7da>
1c00d3a2:	02088063          	beqz	a7,1c00d3c2 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7d8>
1c00d3a6:	ffe30793          	addi	a5,t1,-2
1c00d3aa:	8385                	srli	a5,a5,0x1
1c00d3ac:	86c2                	mv	a3,a6
1c00d3ae:	872a                	mv	a4,a0
1c00d3b0:	0785                	addi	a5,a5,1
1c00d3b2:	0067c0fb          	lp.setup	x1,a5,1c00d3be <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7d4>
1c00d3b6:	0027198b          	p.lh	s3,2(a4!)
1c00d3ba:	00269e0b          	p.lh	t3,2(a3!)
1c00d3be:	43c98633          	p.mac	a2,s3,t3
1c00d3c2:	9576                	add	a0,a0,t4
1c00d3c4:	0839                	addi	a6,a6,14
1c00d3c6:	feca2e23          	sw	a2,-4(s4)
1c00d3ca:	408a8ab3          	sub	s5,s5,s0
1c00d3ce:	9b7e                	add	s6,s6,t6
1c00d3d0:	fb4c1ce3          	bne	s8,s4,1c00d388 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x79e>
1c00d3d4:	4522                	lw	a0,8(sp)
1c00d3d6:	558a                	lw	a1,160(sp)
1c00d3d8:	408d8db3          	sub	s11,s11,s0
1c00d3dc:	0505                	addi	a0,a0,1
1c00d3de:	c42a                	sw	a0,8(sp)
1c00d3e0:	9c4a                	add	s8,s8,s2
1c00d3e2:	9d66                	add	s10,s10,s9
1c00d3e4:	f8b56ce3          	bltu	a0,a1,1c00d37c <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x792>
1c00d3e8:	447a                	lw	s0,156(sp)
1c00d3ea:	44ea                	lw	s1,152(sp)
1c00d3ec:	495a                	lw	s2,148(sp)
1c00d3ee:	49ca                	lw	s3,144(sp)
1c00d3f0:	4a3a                	lw	s4,140(sp)
1c00d3f2:	4aaa                	lw	s5,136(sp)
1c00d3f4:	4b1a                	lw	s6,132(sp)
1c00d3f6:	4b8a                	lw	s7,128(sp)
1c00d3f8:	5c76                	lw	s8,124(sp)
1c00d3fa:	5ce6                	lw	s9,120(sp)
1c00d3fc:	5d56                	lw	s10,116(sp)
1c00d3fe:	5dc6                	lw	s11,112(sp)
1c00d400:	610d                	addi	sp,sp,160
1c00d402:	8082                	ret
1c00d404:	4626                	lw	a2,72(sp)
1c00d406:	d26d                	beqz	a2,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d408:	58c2                	lw	a7,48(sp)
1c00d40a:	56f2                	lw	a3,60(sp)
1c00d40c:	411687b3          	sub	a5,a3,a7
1c00d410:	078d                	addi	a5,a5,3
1c00d412:	d83e                	sw	a5,48(sp)
1c00d414:	de0d9de3          	bnez	s11,1c00d20e <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x624>
1c00d418:	47b6                	lw	a5,76(sp)
1c00d41a:	ee0799e3          	bnez	a5,1c00d30c <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x722>
1c00d41e:	b7e9                	j	1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d420:	4736                	lw	a4,76(sp)
1c00d422:	d379                	beqz	a4,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d424:	5606                	lw	a2,96(sp)
1c00d426:	56f2                	lw	a3,60(sp)
1c00d428:	570a                	lw	a4,160(sp)
1c00d42a:	00c40db3          	add	s11,s0,a2
1c00d42e:	41b68db3          	sub	s11,a3,s11
1c00d432:	c44e                	sw	s3,8(sp)
1c00d434:	0d8d                	addi	s11,s11,3
1c00d436:	fae9f9e3          	bleu	a4,s3,1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>
1c00d43a:	48c6                	lw	a7,80(sp)
1c00d43c:	4eb2                	lw	t4,12(sp)
1c00d43e:	411c0ab3          	sub	s5,s8,a7
1c00d442:	0c0e8763          	beqz	t4,1c00d510 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x926>
1c00d446:	028987b3          	mul	a5,s3,s0
1c00d44a:	4542                	lw	a0,16(sp)
1c00d44c:	5882                	lw	a7,32(sp)
1c00d44e:	8a76                	mv	s4,t4
1c00d450:	5ba2                	lw	s7,40(sp)
1c00d452:	001c1f93          	slli	t6,s8,0x1
1c00d456:	41d006b3          	neg	a3,t4
1c00d45a:	5292                	lw	t0,36(sp)
1c00d45c:	43c2                	lw	t2,16(sp)
1c00d45e:	40800b33          	neg	s6,s0
1c00d462:	42a98a33          	p.mac	s4,s3,a0
1c00d466:	411787b3          	sub	a5,a5,a7
1c00d46a:	00129713          	slli	a4,t0,0x1
1c00d46e:	405a8ab3          	sub	s5,s5,t0
1c00d472:	4286                	lw	t0,64(sp)
1c00d474:	9726                	add	a4,a4,s1
1c00d476:	038a                	slli	t2,t2,0x2
1c00d478:	068a                	slli	a3,a3,0x2
1c00d47a:	ce26                	sw	s1,28(sp)
1c00d47c:	de1e                	sw	t2,60(sp)
1c00d47e:	028f8eb3          	mul	t4,t6,s0
1c00d482:	0a0a                	slli	s4,s4,0x2
1c00d484:	cc36                	sw	a3,24(sp)
1c00d486:	0b06                	slli	s6,s6,0x1
1c00d488:	d83a                	sw	a4,48(sp)
1c00d48a:	8d6e                	mv	s10,s11
1c00d48c:	0a8d                	addi	s5,s5,3
1c00d48e:	4c9d                	li	s9,7
1c00d490:	9a16                	add	s4,s4,t0
1c00d492:	84ce                	mv	s1,s3
1c00d494:	43f78bb3          	p.mac	s7,a5,t6
1c00d498:	c676                	sw	t4,12(sp)
1c00d49a:	43e2                	lw	t2,24(sp)
1c00d49c:	5e12                	lw	t3,36(sp)
1c00d49e:	159d6933          	p.clipur	s2,s10,s9
1c00d4a2:	014382b3          	add	t0,t2,s4
1c00d4a6:	53c2                	lw	t2,48(sp)
1c00d4a8:	01ca88b3          	add	a7,s5,t3
1c00d4ac:	0042a60b          	p.lw	a2,4(t0!)
1c00d4b0:	1598e8b3          	p.clipur	a7,a7,s9
1c00d4b4:	02090c63          	beqz	s2,1c00d4ec <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x902>
1c00d4b8:	41c88333          	sub	t1,a7,t3
1c00d4bc:	0306                	slli	t1,t1,0x1
1c00d4be:	881e                	mv	a6,t2
1c00d4c0:	855e                	mv	a0,s7
1c00d4c2:	85ca                	mv	a1,s2
1c00d4c4:	0135c07b          	lp.setup	x0,a1,1c00d4ea <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x900>
1c00d4c8:	031e7063          	bleu	a7,t3,1c00d4e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x8fe>
1c00d4cc:	ffe30793          	addi	a5,t1,-2
1c00d4d0:	8385                	srli	a5,a5,0x1
1c00d4d2:	86c2                	mv	a3,a6
1c00d4d4:	872a                	mv	a4,a0
1c00d4d6:	0785                	addi	a5,a5,1
1c00d4d8:	0067c0fb          	lp.setup	x1,a5,1c00d4e4 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x8fa>
1c00d4dc:	00271f0b          	p.lh	t5,2(a4!)
1c00d4e0:	00269e8b          	p.lh	t4,2(a3!)
1c00d4e4:	43df0633          	p.mac	a2,t5,t4
1c00d4e8:	957e                	add	a0,a0,t6
1c00d4ea:	0839                	addi	a6,a6,14
1c00d4ec:	fec2ae23          	sw	a2,-4(t0)
1c00d4f0:	408e0e33          	sub	t3,t3,s0
1c00d4f4:	93da                	add	t2,t2,s6
1c00d4f6:	fa5a19e3          	bne	s4,t0,1c00d4a8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x8be>
1c00d4fa:	5572                	lw	a0,60(sp)
1c00d4fc:	45b2                	lw	a1,12(sp)
1c00d4fe:	560a                	lw	a2,160(sp)
1c00d500:	0485                	addi	s1,s1,1
1c00d502:	408d0d33          	sub	s10,s10,s0
1c00d506:	9a2a                	add	s4,s4,a0
1c00d508:	9bae                	add	s7,s7,a1
1c00d50a:	f8c498e3          	bne	s1,a2,1c00d49a <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x8b0>
1c00d50e:	44f2                	lw	s1,28(sp)
1c00d510:	46a6                	lw	a3,72(sp)
1c00d512:	e00698e3          	bnez	a3,1c00d322 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x738>
1c00d516:	bdc9                	j	1c00d3e8 <KerConvNxNStrideS_Border_DP_fp.constprop.102+0x7fe>

1c00d518 <KerParConv1x1Stride2_DP_fp>:
1c00d518:	00e55583          	lhu	a1,14(a0)
1c00d51c:	f14027f3          	csrr	a5,mhartid
1c00d520:	7119                	addi	sp,sp,-128
1c00d522:	f835b733          	p.bclr	a4,a1,28,3
1c00d526:	0035d693          	srli	a3,a1,0x3
1c00d52a:	00e03733          	snez	a4,a4
1c00d52e:	9736                	add	a4,a4,a3
1c00d530:	c80797b3          	p.extractu	a5,a5,4,0
1c00d534:	02e787b3          	mul	a5,a5,a4
1c00d538:	dca2                	sw	s0,120(sp)
1c00d53a:	daa6                	sw	s1,116(sp)
1c00d53c:	d8ca                	sw	s2,112(sp)
1c00d53e:	d6ce                	sw	s3,108(sp)
1c00d540:	d2d6                	sw	s5,100(sp)
1c00d542:	d0da                	sw	s6,96(sp)
1c00d544:	cce2                	sw	s8,88(sp)
1c00d546:	cae6                	sw	s9,84(sp)
1c00d548:	de86                	sw	ra,124(sp)
1c00d54a:	d4d2                	sw	s4,104(sp)
1c00d54c:	cede                	sw	s7,92(sp)
1c00d54e:	c8ea                	sw	s10,80(sp)
1c00d550:	c6ee                	sw	s11,76(sp)
1c00d552:	01c52a03          	lw	s4,28(a0)
1c00d556:	00a55683          	lhu	a3,10(a0)
1c00d55a:	cc3e                	sw	a5,24(sp)
1c00d55c:	781a7857          	pv.extract.b	a6,s4,2
1c00d560:	fff68793          	addi	a5,a3,-1
1c00d564:	00180313          	addi	t1,a6,1
1c00d568:	00655603          	lhu	a2,6(a0)
1c00d56c:	97c2                	add	a5,a5,a6
1c00d56e:	96c2                	add	a3,a3,a6
1c00d570:	4862                	lw	a6,24(sp)
1c00d572:	780a78d7          	pv.extract.b	a7,s4,0
1c00d576:	01f35993          	srli	s3,t1,0x1f
1c00d57a:	fff60493          	addi	s1,a2,-1
1c00d57e:	9742                	add	a4,a4,a6
1c00d580:	9646                	add	a2,a2,a7
1c00d582:	0269a9db          	p.addn	s3,s3,t1,1
1c00d586:	00052303          	lw	t1,0(a0)
1c00d58a:	0605                	addi	a2,a2,1
1c00d58c:	04b74733          	p.min	a4,a4,a1
1c00d590:	00188e13          	addi	t3,a7,1
1c00d594:	94c6                	add	s1,s1,a7
1c00d596:	01f65a93          	srli	s5,a2,0x1f
1c00d59a:	ce3a                	sw	a4,28(sp)
1c00d59c:	7a0a7ed7          	pv.extract.b	t4,s4,1
1c00d5a0:	7a1a78d7          	pv.extract.b	a7,s4,3
1c00d5a4:	0685                	addi	a3,a3,1
1c00d5a6:	02caaadb          	p.addn	s5,s5,a2,1
1c00d5aa:	83d4a4db          	p.addun	s1,s1,t4,1
1c00d5ae:	01fe5913          	srli	s2,t3,0x1f
1c00d5b2:	8317a7db          	p.addun	a5,a5,a7,1
1c00d5b6:	d41a                	sw	t1,40(sp)
1c00d5b8:	4672                	lw	a2,28(sp)
1c00d5ba:	4362                	lw	t1,24(sp)
1c00d5bc:	0485                	addi	s1,s1,1
1c00d5be:	03c9295b          	p.addn	s2,s2,t3,1
1c00d5c2:	0785                	addi	a5,a5,1
1c00d5c4:	01f6db13          	srli	s6,a3,0x1f
1c00d5c8:	0524c933          	p.min	s2,s1,s2
1c00d5cc:	0537c9b3          	p.min	s3,a5,s3
1c00d5d0:	02db2b5b          	p.addn	s6,s6,a3,1
1c00d5d4:	00455c03          	lhu	s8,4(a0)
1c00d5d8:	00855c83          	lhu	s9,8(a0)
1c00d5dc:	01051803          	lh	a6,16(a0)
1c00d5e0:	494c                	lw	a1,20(a0)
1c00d5e2:	4d00                	lw	s0,24(a0)
1c00d5e4:	05596ab3          	p.max	s5,s2,s5
1c00d5e8:	0569eb33          	p.max	s6,s3,s6
1c00d5ec:	00c55703          	lhu	a4,12(a0)
1c00d5f0:	0cc37763          	bleu	a2,t1,1c00d6be <KerParConv1x1Stride2_DP_fp+0x1a6>
1c00d5f4:	039c0533          	mul	a0,s8,s9
1c00d5f8:	00175313          	srli	t1,a4,0x1
1c00d5fc:	80000db7          	lui	s11,0x80000
1c00d600:	00131613          	slli	a2,t1,0x1
1c00d604:	fffdcd93          	not	s11,s11
1c00d608:	fff70693          	addi	a3,a4,-1
1c00d60c:	9dba                	add	s11,s11,a4
1c00d60e:	40e008b3          	neg	a7,a4
1c00d612:	8e19                	sub	a2,a2,a4
1c00d614:	fc173733          	p.bclr	a4,a4,30,1
1c00d618:	02f487b3          	mul	a5,s1,a5
1c00d61c:	d63a                	sw	a4,44(sp)
1c00d61e:	d21a                	sw	t1,36(sp)
1c00d620:	00251313          	slli	t1,a0,0x2
1c00d624:	c81a                	sw	t1,16(sp)
1c00d626:	00181313          	slli	t1,a6,0x1
1c00d62a:	d81a                	sw	t1,48(sp)
1c00d62c:	4362                	lw	t1,24(sp)
1c00d62e:	0606                	slli	a2,a2,0x1
1c00d630:	0609                	addi	a2,a2,2
1c00d632:	02a68733          	mul	a4,a3,a0
1c00d636:	078a                	slli	a5,a5,0x2
1c00d638:	d03e                	sw	a5,32(sp)
1c00d63a:	87ee                	mv	a5,s11
1c00d63c:	dc32                	sw	a2,56(sp)
1c00d63e:	4662                	lw	a2,24(sp)
1c00d640:	0886                	slli	a7,a7,0x1
1c00d642:	0889                	addi	a7,a7,2
1c00d644:	da46                	sw	a7,52(sp)
1c00d646:	426807b3          	p.mac	a5,a6,t1
1c00d64a:	5322                	lw	t1,40(sp)
1c00d64c:	0706                	slli	a4,a4,0x1
1c00d64e:	971a                	add	a4,a4,t1
1c00d650:	5302                	lw	t1,32(sp)
1c00d652:	de3a                	sw	a4,60(sp)
1c00d654:	42c30433          	p.mac	s0,t1,a2
1c00d658:	0786                	slli	a5,a5,0x1
1c00d65a:	97ae                	add	a5,a5,a1
1c00d65c:	ca3e                	sw	a5,20(sp)
1c00d65e:	5312                	lw	t1,36(sp)
1c00d660:	02030f63          	beqz	t1,1c00d69e <KerParConv1x1Stride2_DP_fp+0x186>
1c00d664:	5352                	lw	t1,52(sp)
1c00d666:	4652                	lw	a2,20(sp)
1c00d668:	5d22                	lw	s10,40(sp)
1c00d66a:	00c30db3          	add	s11,t1,a2
1c00d66e:	5362                	lw	t1,56(sp)
1c00d670:	00c30bb3          	add	s7,t1,a2
1c00d674:	87de                	mv	a5,s7
1c00d676:	8bea                	mv	s7,s10
1c00d678:	8d3e                	mv	s10,a5
1c00d67a:	866e                	mv	a2,s11
1c00d67c:	855e                	mv	a0,s7
1c00d67e:	c452                	sw	s4,8(sp)
1c00d680:	c25a                	sw	s6,4(sp)
1c00d682:	c04e                	sw	s3,0(sp)
1c00d684:	88d6                	mv	a7,s5
1c00d686:	884a                	mv	a6,s2
1c00d688:	87a6                	mv	a5,s1
1c00d68a:	8766                	mv	a4,s9
1c00d68c:	86e2                	mv	a3,s8
1c00d68e:	85a2                	mv	a1,s0
1c00d690:	bfffe0ef          	jal	ra,1c00c28e <KerConv1x1Stride2_Body_DP_2In_fp.isra.58>
1c00d694:	4342                	lw	t1,16(sp)
1c00d696:	0d91                	addi	s11,s11,4
1c00d698:	9b9a                	add	s7,s7,t1
1c00d69a:	ffad90e3          	bne	s11,s10,1c00d67a <KerParConv1x1Stride2_DP_fp+0x162>
1c00d69e:	5332                	lw	t1,44(sp)
1c00d6a0:	04031463          	bnez	t1,1c00d6e8 <KerParConv1x1Stride2_DP_fp+0x1d0>
1c00d6a4:	4362                	lw	t1,24(sp)
1c00d6a6:	5642                	lw	a2,48(sp)
1c00d6a8:	0305                	addi	t1,t1,1
1c00d6aa:	cc1a                	sw	t1,24(sp)
1c00d6ac:	4352                	lw	t1,20(sp)
1c00d6ae:	9332                	add	t1,t1,a2
1c00d6b0:	ca1a                	sw	t1,20(sp)
1c00d6b2:	5302                	lw	t1,32(sp)
1c00d6b4:	4662                	lw	a2,24(sp)
1c00d6b6:	941a                	add	s0,s0,t1
1c00d6b8:	4372                	lw	t1,28(sp)
1c00d6ba:	fac312e3          	bne	t1,a2,1c00d65e <KerParConv1x1Stride2_DP_fp+0x146>
1c00d6be:	002047b7          	lui	a5,0x204
1c00d6c2:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00d6c6:	01c7e703          	p.elw	a4,28(a5)
1c00d6ca:	50f6                	lw	ra,124(sp)
1c00d6cc:	5466                	lw	s0,120(sp)
1c00d6ce:	54d6                	lw	s1,116(sp)
1c00d6d0:	5946                	lw	s2,112(sp)
1c00d6d2:	59b6                	lw	s3,108(sp)
1c00d6d4:	5a26                	lw	s4,104(sp)
1c00d6d6:	5a96                	lw	s5,100(sp)
1c00d6d8:	5b06                	lw	s6,96(sp)
1c00d6da:	4bf6                	lw	s7,92(sp)
1c00d6dc:	4c66                	lw	s8,88(sp)
1c00d6de:	4cd6                	lw	s9,84(sp)
1c00d6e0:	4d46                	lw	s10,80(sp)
1c00d6e2:	4db6                	lw	s11,76(sp)
1c00d6e4:	6109                	addi	sp,sp,128
1c00d6e6:	8082                	ret
1c00d6e8:	4352                	lw	t1,20(sp)
1c00d6ea:	5572                	lw	a0,60(sp)
1c00d6ec:	88ce                	mv	a7,s3
1c00d6ee:	00031603          	lh	a2,0(t1)
1c00d6f2:	8856                	mv	a6,s5
1c00d6f4:	c252                	sw	s4,4(sp)
1c00d6f6:	c05a                	sw	s6,0(sp)
1c00d6f8:	87ca                	mv	a5,s2
1c00d6fa:	8726                	mv	a4,s1
1c00d6fc:	86e2                	mv	a3,s8
1c00d6fe:	85a2                	mv	a1,s0
1c00d700:	a91fe0ef          	jal	ra,1c00c190 <KerConv1x1Stride2_Body_DP_fp.isra.16>
1c00d704:	b745                	j	1c00d6a4 <KerParConv1x1Stride2_DP_fp+0x18c>

1c00d706 <KerParConv3x3Stride1_DP_fp>:
1c00d706:	00e55683          	lhu	a3,14(a0)
1c00d70a:	7119                	addi	sp,sp,-128
1c00d70c:	cae6                	sw	s9,84(sp)
1c00d70e:	f1402cf3          	csrr	s9,mhartid
1c00d712:	f836b7b3          	p.bclr	a5,a3,28,3
1c00d716:	0036d713          	srli	a4,a3,0x3
1c00d71a:	00f037b3          	snez	a5,a5
1c00d71e:	97ba                	add	a5,a5,a4
1c00d720:	c80c9cb3          	p.extractu	s9,s9,4,0
1c00d724:	02fc8cb3          	mul	s9,s9,a5
1c00d728:	daa6                	sw	s1,116(sp)
1c00d72a:	d8ca                	sw	s2,112(sp)
1c00d72c:	d6ce                	sw	s3,108(sp)
1c00d72e:	d4d2                	sw	s4,104(sp)
1c00d730:	d2d6                	sw	s5,100(sp)
1c00d732:	d0da                	sw	s6,96(sp)
1c00d734:	cede                	sw	s7,92(sp)
1c00d736:	cce2                	sw	s8,88(sp)
1c00d738:	c6ee                	sw	s11,76(sp)
1c00d73a:	de86                	sw	ra,124(sp)
1c00d73c:	dca2                	sw	s0,120(sp)
1c00d73e:	c8ea                	sw	s10,80(sp)
1c00d740:	4d40                	lw	s0,28(a0)
1c00d742:	00a55b03          	lhu	s6,10(a0)
1c00d746:	00655a03          	lhu	s4,6(a0)
1c00d74a:	78147ad7          	pv.extract.b	s5,s0,2
1c00d74e:	ffeb0613          	addi	a2,s6,-2
1c00d752:	97e6                	add	a5,a5,s9
1c00d754:	9656                	add	a2,a2,s5
1c00d756:	04d7c7b3          	p.min	a5,a5,a3
1c00d75a:	7a147857          	pv.extract.b	a6,s0,3
1c00d75e:	780479d7          	pv.extract.b	s3,s0,0
1c00d762:	9832                	add	a6,a6,a2
1c00d764:	ffea0913          	addi	s2,s4,-2
1c00d768:	d43e                	sw	a5,40(sp)
1c00d76a:	4110                	lw	a2,0(a0)
1c00d76c:	00455b83          	lhu	s7,4(a0)
1c00d770:	00855c03          	lhu	s8,8(a0)
1c00d774:	01051783          	lh	a5,16(a0)
1c00d778:	01452d83          	lw	s11,20(a0)
1c00d77c:	4d04                	lw	s1,24(a0)
1c00d77e:	00c55503          	lhu	a0,12(a0)
1c00d782:	4709                	li	a4,2
1c00d784:	994e                	add	s2,s2,s3
1c00d786:	7a0475d7          	pv.extract.b	a1,s0,1
1c00d78a:	56a2                	lw	a3,40(sp)
1c00d78c:	992e                	add	s2,s2,a1
1c00d78e:	413705b3          	sub	a1,a4,s3
1c00d792:	41570733          	sub	a4,a4,s5
1c00d796:	053949b3          	p.min	s3,s2,s3
1c00d79a:	40ba0a33          	sub	s4,s4,a1
1c00d79e:	05584ab3          	p.min	s5,a6,s5
1c00d7a2:	40eb0b33          	sub	s6,s6,a4
1c00d7a6:	ce66                	sw	s9,28(sp)
1c00d7a8:	d042                	sw	a6,32(sp)
1c00d7aa:	da32                	sw	a2,52(sp)
1c00d7ac:	d22a                	sw	a0,36(sp)
1c00d7ae:	0549ea33          	p.max	s4,s3,s4
1c00d7b2:	056aeb33          	p.max	s6,s5,s6
1c00d7b6:	08dcf063          	bleu	a3,s9,1c00d836 <KerParConv3x3Stride1_DP_fp+0x130>
1c00d7ba:	03090733          	mul	a4,s2,a6
1c00d7be:	00379693          	slli	a3,a5,0x3
1c00d7c2:	96be                	add	a3,a3,a5
1c00d7c4:	00351793          	slli	a5,a0,0x3
1c00d7c8:	97aa                	add	a5,a5,a0
1c00d7ca:	0686                	slli	a3,a3,0x1
1c00d7cc:	0786                	slli	a5,a5,0x1
1c00d7ce:	de3e                	sw	a5,60(sp)
1c00d7d0:	d836                	sw	a3,48(sp)
1c00d7d2:	dc22                	sw	s0,56(sp)
1c00d7d4:	00271793          	slli	a5,a4,0x2
1c00d7d8:	038b8c33          	mul	s8,s7,s8
1c00d7dc:	d63e                	sw	a5,44(sp)
1c00d7de:	42dc8db3          	p.mac	s11,s9,a3
1c00d7e2:	0c06                	slli	s8,s8,0x1
1c00d7e4:	42fc84b3          	p.mac	s1,s9,a5
1c00d7e8:	cc6e                	sw	s11,24(sp)
1c00d7ea:	5712                	lw	a4,36(sp)
1c00d7ec:	cb0d                	beqz	a4,1c00d81e <KerParConv3x3Stride1_DP_fp+0x118>
1c00d7ee:	5762                	lw	a4,56(sp)
1c00d7f0:	eb25                	bnez	a4,1c00d860 <KerParConv3x3Stride1_DP_fp+0x15a>
1c00d7f2:	47e2                	lw	a5,24(sp)
1c00d7f4:	58f2                	lw	a7,60(sp)
1c00d7f6:	5d52                	lw	s10,52(sp)
1c00d7f8:	8dbe                	mv	s11,a5
1c00d7fa:	01178cb3          	add	s9,a5,a7
1c00d7fe:	866e                	mv	a2,s11
1c00d800:	856a                	mv	a0,s10
1c00d802:	c222                	sw	s0,4(sp)
1c00d804:	c05a                	sw	s6,0(sp)
1c00d806:	88d6                	mv	a7,s5
1c00d808:	8852                	mv	a6,s4
1c00d80a:	87ce                	mv	a5,s3
1c00d80c:	874a                	mv	a4,s2
1c00d80e:	86de                	mv	a3,s7
1c00d810:	85a6                	mv	a1,s1
1c00d812:	0dc9                	addi	s11,s11,18
1c00d814:	b15fe0ef          	jal	ra,1c00c328 <KerConv3x3Stride1_Body_DP_fp.isra.60>
1c00d818:	9d62                	add	s10,s10,s8
1c00d81a:	ff9d92e3          	bne	s11,s9,1c00d7fe <KerParConv3x3Stride1_DP_fp+0xf8>
1c00d81e:	4772                	lw	a4,28(sp)
1c00d820:	47e2                	lw	a5,24(sp)
1c00d822:	58c2                	lw	a7,48(sp)
1c00d824:	5632                	lw	a2,44(sp)
1c00d826:	56a2                	lw	a3,40(sp)
1c00d828:	0705                	addi	a4,a4,1
1c00d82a:	97c6                	add	a5,a5,a7
1c00d82c:	ce3a                	sw	a4,28(sp)
1c00d82e:	cc3e                	sw	a5,24(sp)
1c00d830:	94b2                	add	s1,s1,a2
1c00d832:	fae69ce3          	bne	a3,a4,1c00d7ea <KerParConv3x3Stride1_DP_fp+0xe4>
1c00d836:	002047b7          	lui	a5,0x204
1c00d83a:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00d83e:	01c7e703          	p.elw	a4,28(a5)
1c00d842:	50f6                	lw	ra,124(sp)
1c00d844:	5466                	lw	s0,120(sp)
1c00d846:	54d6                	lw	s1,116(sp)
1c00d848:	5946                	lw	s2,112(sp)
1c00d84a:	59b6                	lw	s3,108(sp)
1c00d84c:	5a26                	lw	s4,104(sp)
1c00d84e:	5a96                	lw	s5,100(sp)
1c00d850:	5b06                	lw	s6,96(sp)
1c00d852:	4bf6                	lw	s7,92(sp)
1c00d854:	4c66                	lw	s8,88(sp)
1c00d856:	4cd6                	lw	s9,84(sp)
1c00d858:	4d46                	lw	s10,80(sp)
1c00d85a:	4db6                	lw	s11,76(sp)
1c00d85c:	6109                	addi	sp,sp,128
1c00d85e:	8082                	ret
1c00d860:	4662                	lw	a2,24(sp)
1c00d862:	56f2                	lw	a3,60(sp)
1c00d864:	5dd2                	lw	s11,52(sp)
1c00d866:	8cb2                	mv	s9,a2
1c00d868:	00d60d33          	add	s10,a2,a3
1c00d86c:	87ea                	mv	a5,s10
1c00d86e:	8d6e                	mv	s10,s11
1c00d870:	8dbe                	mv	s11,a5
1c00d872:	8666                	mv	a2,s9
1c00d874:	856a                	mv	a0,s10
1c00d876:	88d6                	mv	a7,s5
1c00d878:	8852                	mv	a6,s4
1c00d87a:	87ce                	mv	a5,s3
1c00d87c:	874a                	mv	a4,s2
1c00d87e:	86de                	mv	a3,s7
1c00d880:	85a6                	mv	a1,s1
1c00d882:	c222                	sw	s0,4(sp)
1c00d884:	c05a                	sw	s6,0(sp)
1c00d886:	aa3fe0ef          	jal	ra,1c00c328 <KerConv3x3Stride1_Body_DP_fp.isra.60>
1c00d88a:	5882                	lw	a7,32(sp)
1c00d88c:	8666                	mv	a2,s9
1c00d88e:	856a                	mv	a0,s10
1c00d890:	c622                	sw	s0,12(sp)
1c00d892:	c422                	sw	s0,8(sp)
1c00d894:	c25a                	sw	s6,4(sp)
1c00d896:	c056                	sw	s5,0(sp)
1c00d898:	8852                	mv	a6,s4
1c00d89a:	87ce                	mv	a5,s3
1c00d89c:	874a                	mv	a4,s2
1c00d89e:	86de                	mv	a3,s7
1c00d8a0:	85a6                	mv	a1,s1
1c00d8a2:	0cc9                	addi	s9,s9,18
1c00d8a4:	c4ffe0ef          	jal	ra,1c00c4f2 <KerConv3x3BorderStride1_DP_fp.isra.62>
1c00d8a8:	9d62                	add	s10,s10,s8
1c00d8aa:	fdbc94e3          	bne	s9,s11,1c00d872 <KerParConv3x3Stride1_DP_fp+0x16c>
1c00d8ae:	bf85                	j	1c00d81e <KerParConv3x3Stride1_DP_fp+0x118>

1c00d8b0 <KerParConv3x3Stride2_DP_fp>:
1c00d8b0:	00e55803          	lhu	a6,14(a0)
1c00d8b4:	7119                	addi	sp,sp,-128
1c00d8b6:	cae6                	sw	s9,84(sp)
1c00d8b8:	f1402cf3          	csrr	s9,mhartid
1c00d8bc:	f83837b3          	p.bclr	a5,a6,28,3
1c00d8c0:	00385713          	srli	a4,a6,0x3
1c00d8c4:	00f037b3          	snez	a5,a5
1c00d8c8:	97ba                	add	a5,a5,a4
1c00d8ca:	c80c9cb3          	p.extractu	s9,s9,4,0
1c00d8ce:	02fc8cb3          	mul	s9,s9,a5
1c00d8d2:	daa6                	sw	s1,116(sp)
1c00d8d4:	d8ca                	sw	s2,112(sp)
1c00d8d6:	d6ce                	sw	s3,108(sp)
1c00d8d8:	d4d2                	sw	s4,104(sp)
1c00d8da:	d2d6                	sw	s5,100(sp)
1c00d8dc:	d0da                	sw	s6,96(sp)
1c00d8de:	cede                	sw	s7,92(sp)
1c00d8e0:	cce2                	sw	s8,88(sp)
1c00d8e2:	c6ee                	sw	s11,76(sp)
1c00d8e4:	de86                	sw	ra,124(sp)
1c00d8e6:	dca2                	sw	s0,120(sp)
1c00d8e8:	c8ea                	sw	s10,80(sp)
1c00d8ea:	4d40                	lw	s0,28(a0)
1c00d8ec:	00a55703          	lhu	a4,10(a0)
1c00d8f0:	00655683          	lhu	a3,6(a0)
1c00d8f4:	78047e57          	pv.extract.b	t3,s0,0
1c00d8f8:	781478d7          	pv.extract.b	a7,s0,2
1c00d8fc:	4589                	li	a1,2
1c00d8fe:	ffd70613          	addi	a2,a4,-3
1c00d902:	41c58f33          	sub	t5,a1,t3
1c00d906:	00188313          	addi	t1,a7,1
1c00d90a:	411585b3          	sub	a1,a1,a7
1c00d90e:	9646                	add	a2,a2,a7
1c00d910:	97e6                	add	a5,a5,s9
1c00d912:	7a1478d7          	pv.extract.b	a7,s0,3
1c00d916:	ffd68913          	addi	s2,a3,-3
1c00d91a:	0507c7b3          	p.min	a5,a5,a6
1c00d91e:	8316265b          	p.addun	a2,a2,a7,1
1c00d922:	01f35a13          	srli	s4,t1,0x1f
1c00d926:	001e0e93          	addi	t4,t3,1
1c00d92a:	0605                	addi	a2,a2,1
1c00d92c:	9972                	add	s2,s2,t3
1c00d92e:	8f0d                	sub	a4,a4,a1
1c00d930:	d43e                	sw	a5,40(sp)
1c00d932:	410c                	lw	a1,0(a0)
1c00d934:	7a047e57          	pv.extract.b	t3,s0,1
1c00d938:	41e686b3          	sub	a3,a3,t5
1c00d93c:	026a2a5b          	p.addn	s4,s4,t1,1
1c00d940:	00455b83          	lhu	s7,4(a0)
1c00d944:	00855c03          	lhu	s8,8(a0)
1c00d948:	01051783          	lh	a5,16(a0)
1c00d94c:	01452d83          	lw	s11,20(a0)
1c00d950:	4d04                	lw	s1,24(a0)
1c00d952:	00c55503          	lhu	a0,12(a0)
1c00d956:	0685                	addi	a3,a3,1
1c00d958:	0705                	addi	a4,a4,1
1c00d95a:	05464a33          	p.min	s4,a2,s4
1c00d95e:	83c9295b          	p.addun	s2,s2,t3,1
1c00d962:	01fed993          	srli	s3,t4,0x1f
1c00d966:	d032                	sw	a2,32(sp)
1c00d968:	5622                	lw	a2,40(sp)
1c00d96a:	0905                	addi	s2,s2,1
1c00d96c:	03d9a9db          	p.addn	s3,s3,t4,1
1c00d970:	01f6da93          	srli	s5,a3,0x1f
1c00d974:	01f75b13          	srli	s6,a4,0x1f
1c00d978:	053949b3          	p.min	s3,s2,s3
1c00d97c:	02daaadb          	p.addn	s5,s5,a3,1
1c00d980:	02eb2b5b          	p.addn	s6,s6,a4,1
1c00d984:	ce66                	sw	s9,28(sp)
1c00d986:	da2e                	sw	a1,52(sp)
1c00d988:	d22a                	sw	a0,36(sp)
1c00d98a:	0559eab3          	p.max	s5,s3,s5
1c00d98e:	056a6b33          	p.max	s6,s4,s6
1c00d992:	08ccf163          	bleu	a2,s9,1c00da14 <KerParConv3x3Stride2_DP_fp+0x164>
1c00d996:	5682                	lw	a3,32(sp)
1c00d998:	038b8c33          	mul	s8,s7,s8
1c00d99c:	dc22                	sw	s0,56(sp)
1c00d99e:	02d90733          	mul	a4,s2,a3
1c00d9a2:	00379693          	slli	a3,a5,0x3
1c00d9a6:	96be                	add	a3,a3,a5
1c00d9a8:	00351793          	slli	a5,a0,0x3
1c00d9ac:	97aa                	add	a5,a5,a0
1c00d9ae:	0686                	slli	a3,a3,0x1
1c00d9b0:	0786                	slli	a5,a5,0x1
1c00d9b2:	de3e                	sw	a5,60(sp)
1c00d9b4:	d836                	sw	a3,48(sp)
1c00d9b6:	0c06                	slli	s8,s8,0x1
1c00d9b8:	00271793          	slli	a5,a4,0x2
1c00d9bc:	42dc8db3          	p.mac	s11,s9,a3
1c00d9c0:	d63e                	sw	a5,44(sp)
1c00d9c2:	42fc84b3          	p.mac	s1,s9,a5
1c00d9c6:	cc6e                	sw	s11,24(sp)
1c00d9c8:	5712                	lw	a4,36(sp)
1c00d9ca:	cb0d                	beqz	a4,1c00d9fc <KerParConv3x3Stride2_DP_fp+0x14c>
1c00d9cc:	5762                	lw	a4,56(sp)
1c00d9ce:	eb25                	bnez	a4,1c00da3e <KerParConv3x3Stride2_DP_fp+0x18e>
1c00d9d0:	47e2                	lw	a5,24(sp)
1c00d9d2:	55f2                	lw	a1,60(sp)
1c00d9d4:	5d52                	lw	s10,52(sp)
1c00d9d6:	8dbe                	mv	s11,a5
1c00d9d8:	00b78cb3          	add	s9,a5,a1
1c00d9dc:	866e                	mv	a2,s11
1c00d9de:	856a                	mv	a0,s10
1c00d9e0:	c222                	sw	s0,4(sp)
1c00d9e2:	c05a                	sw	s6,0(sp)
1c00d9e4:	88d2                	mv	a7,s4
1c00d9e6:	8856                	mv	a6,s5
1c00d9e8:	87ce                	mv	a5,s3
1c00d9ea:	874a                	mv	a4,s2
1c00d9ec:	86de                	mv	a3,s7
1c00d9ee:	85a6                	mv	a1,s1
1c00d9f0:	0dc9                	addi	s11,s11,18
1c00d9f2:	c25fe0ef          	jal	ra,1c00c616 <KerConv3x3Stride2_Body_DP_fp.isra.63>
1c00d9f6:	9d62                	add	s10,s10,s8
1c00d9f8:	ff9d92e3          	bne	s11,s9,1c00d9dc <KerParConv3x3Stride2_DP_fp+0x12c>
1c00d9fc:	4772                	lw	a4,28(sp)
1c00d9fe:	47e2                	lw	a5,24(sp)
1c00da00:	55c2                	lw	a1,48(sp)
1c00da02:	5632                	lw	a2,44(sp)
1c00da04:	56a2                	lw	a3,40(sp)
1c00da06:	0705                	addi	a4,a4,1
1c00da08:	97ae                	add	a5,a5,a1
1c00da0a:	ce3a                	sw	a4,28(sp)
1c00da0c:	cc3e                	sw	a5,24(sp)
1c00da0e:	94b2                	add	s1,s1,a2
1c00da10:	fae69ce3          	bne	a3,a4,1c00d9c8 <KerParConv3x3Stride2_DP_fp+0x118>
1c00da14:	002047b7          	lui	a5,0x204
1c00da18:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00da1c:	01c7e703          	p.elw	a4,28(a5)
1c00da20:	50f6                	lw	ra,124(sp)
1c00da22:	5466                	lw	s0,120(sp)
1c00da24:	54d6                	lw	s1,116(sp)
1c00da26:	5946                	lw	s2,112(sp)
1c00da28:	59b6                	lw	s3,108(sp)
1c00da2a:	5a26                	lw	s4,104(sp)
1c00da2c:	5a96                	lw	s5,100(sp)
1c00da2e:	5b06                	lw	s6,96(sp)
1c00da30:	4bf6                	lw	s7,92(sp)
1c00da32:	4c66                	lw	s8,88(sp)
1c00da34:	4cd6                	lw	s9,84(sp)
1c00da36:	4d46                	lw	s10,80(sp)
1c00da38:	4db6                	lw	s11,76(sp)
1c00da3a:	6109                	addi	sp,sp,128
1c00da3c:	8082                	ret
1c00da3e:	4662                	lw	a2,24(sp)
1c00da40:	56f2                	lw	a3,60(sp)
1c00da42:	5dd2                	lw	s11,52(sp)
1c00da44:	8cb2                	mv	s9,a2
1c00da46:	00d60d33          	add	s10,a2,a3
1c00da4a:	87ea                	mv	a5,s10
1c00da4c:	8d6e                	mv	s10,s11
1c00da4e:	8dbe                	mv	s11,a5
1c00da50:	8666                	mv	a2,s9
1c00da52:	856a                	mv	a0,s10
1c00da54:	88d2                	mv	a7,s4
1c00da56:	8856                	mv	a6,s5
1c00da58:	87ce                	mv	a5,s3
1c00da5a:	874a                	mv	a4,s2
1c00da5c:	86de                	mv	a3,s7
1c00da5e:	85a6                	mv	a1,s1
1c00da60:	c222                	sw	s0,4(sp)
1c00da62:	c05a                	sw	s6,0(sp)
1c00da64:	bb3fe0ef          	jal	ra,1c00c616 <KerConv3x3Stride2_Body_DP_fp.isra.63>
1c00da68:	5882                	lw	a7,32(sp)
1c00da6a:	8666                	mv	a2,s9
1c00da6c:	856a                	mv	a0,s10
1c00da6e:	c622                	sw	s0,12(sp)
1c00da70:	c422                	sw	s0,8(sp)
1c00da72:	c25a                	sw	s6,4(sp)
1c00da74:	c052                	sw	s4,0(sp)
1c00da76:	8856                	mv	a6,s5
1c00da78:	87ce                	mv	a5,s3
1c00da7a:	874a                	mv	a4,s2
1c00da7c:	86de                	mv	a3,s7
1c00da7e:	85a6                	mv	a1,s1
1c00da80:	0cc9                	addi	s9,s9,18
1c00da82:	d31fe0ef          	jal	ra,1c00c7b2 <KerConv3x3BorderStride2_DP_fp.isra.65>
1c00da86:	9d62                	add	s10,s10,s8
1c00da88:	fdbc94e3          	bne	s9,s11,1c00da50 <KerParConv3x3Stride2_DP_fp+0x1a0>
1c00da8c:	bf85                	j	1c00d9fc <KerParConv3x3Stride2_DP_fp+0x14c>

1c00da8e <KerParConv7x7StrideS_DP_fp>:
	gap_waitbarrier(0);
}

void KerParConv7x7StrideS_DP_fp(KerConv_DP_fp_T *Arg)

{
1c00da8e:	7175                	addi	sp,sp,-144
1c00da90:	c326                	sw	s1,132(sp)
1c00da92:	c14a                	sw	s2,128(sp)
1c00da94:	dece                	sw	s3,124(sp)
1c00da96:	dcd2                	sw	s4,120(sp)
1c00da98:	dad6                	sw	s5,116(sp)
1c00da9a:	d6de                	sw	s7,108(sp)
1c00da9c:	d4e2                	sw	s8,104(sp)
1c00da9e:	ceee                	sw	s11,92(sp)
1c00daa0:	c706                	sw	ra,140(sp)
1c00daa2:	c522                	sw	s0,136(sp)
1c00daa4:	d8da                	sw	s6,112(sp)
1c00daa6:	d2e6                	sw	s9,100(sp)
1c00daa8:	d0ea                	sw	s10,96(sp)

	unsigned int CoreId = gap_coreid();
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c00daaa:	4d40                	lw	s0,28(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00daac:	00655703          	lhu	a4,6(a0)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00dab0:	00a55783          	lhu	a5,10(a0)
	unsigned int FS=7, S=Arg->S;
1c00dab4:	02254b03          	lbu	s6,34(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00dab8:	78047657          	pv.extract.b	a2,s0,0
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00dabc:	781476d7          	pv.extract.b	a3,s0,2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00dac0:	4599                	li	a1,6
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00dac2:	ff970b93          	addi	s7,a4,-7
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00dac6:	ff978813          	addi	a6,a5,-7
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00daca:	40c58333          	sub	t1,a1,a2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00dace:	9bb2                	add	s7,s7,a2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00dad0:	8d95                	sub	a1,a1,a3
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00dad2:	9836                	add	a6,a6,a3
1c00dad4:	7a1478d7          	pv.extract.b	a7,s0,3
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00dad8:	7a047e57          	pv.extract.b	t3,s0,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00dadc:	9846                	add	a6,a6,a7
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00dade:	8f8d                	sub	a5,a5,a1
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00dae0:	9bf2                	add	s7,s7,t3
	return ((Pad+Stride-1)/Stride);
1c00dae2:	965a                	add	a2,a2,s6
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00dae4:	40670733          	sub	a4,a4,t1
	return ((Pad+Stride-1)/Stride);
1c00dae8:	96da                	add	a3,a3,s6
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00daea:	975a                	add	a4,a4,s6
1c00daec:	97da                	add	a5,a5,s6
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00daee:	036bdbb3          	divu	s7,s7,s6
	return ((Pad+Stride-1)/Stride);
1c00daf2:	167d                	addi	a2,a2,-1
1c00daf4:	16fd                	addi	a3,a3,-1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00daf6:	fff70993          	addi	s3,a4,-1
1c00dafa:	fff78a93          	addi	s5,a5,-1
	unsigned int OutFeatures = Arg->OutFeatures;
1c00dafe:	00e55703          	lhu	a4,14(a0)
	short int * __restrict__ In = Arg->In;
1c00db02:	410c                	lw	a1,0(a0)
	unsigned int CoreId = gap_coreid();
1c00db04:	f14028f3          	csrr	a7,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00db08:	f83737b3          	p.bclr	a5,a4,28,3
	short int * __restrict__ In = Arg->In;
1c00db0c:	c2ae                	sw	a1,68(sp)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00db0e:	00f037b3          	snez	a5,a5
1c00db12:	00375593          	srli	a1,a4,0x3
1c00db16:	97ae                	add	a5,a5,a1
	unsigned int CoreId = gap_coreid();
1c00db18:	c80898b3          	p.extractu	a7,a7,4,0
	unsigned int H = Arg->H;
1c00db1c:	00855583          	lhu	a1,8(a0)
	unsigned int W = Arg->W;
1c00db20:	00455c03          	lhu	s8,4(a0)
	short int * __restrict__ Filter = Arg->Filter;
1c00db24:	01452d83          	lw	s11,20(a0)
	unsigned int H = Arg->H;
1c00db28:	d82e                	sw	a1,48(sp)
	int * __restrict__ Out = Arg->Out;
1c00db2a:	4d04                	lw	s1,24(a0)
	int TotalInFeatures = Arg->TotalInFeatures;
1c00db2c:	01051583          	lh	a1,16(a0)
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));

	unsigned int InFeatures = Arg->InFeatures;
1c00db30:	00c55503          	lhu	a0,12(a0)
1c00db34:	da2a                	sw	a0,52(sp)
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00db36:	03685833          	divu	a6,a6,s6
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00db3a:	0b85                	addi	s7,s7,1
	return ((Pad+Stride-1)/Stride);
1c00db3c:	03664933          	div	s2,a2,s6
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00db40:	0805                	addi	a6,a6,1
1c00db42:	d642                	sw	a6,44(sp)
	return ((Pad+Stride-1)/Stride);
1c00db44:	0366ca33          	div	s4,a3,s6
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00db48:	052bc933          	p.min	s2,s7,s2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00db4c:	0369c9b3          	div	s3,s3,s6
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00db50:	05484a33          	p.min	s4,a6,s4
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00db54:	036acab3          	div	s5,s5,s6
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00db58:	053969b3          	p.max	s3,s2,s3
	unsigned int First = Chunk*CoreId;
1c00db5c:	02f888b3          	mul	a7,a7,a5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00db60:	055a6ab3          	p.max	s5,s4,s5
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00db64:	97c6                	add	a5,a5,a7
1c00db66:	04e7c7b3          	p.min	a5,a5,a4
	unsigned int First = Chunk*CoreId;
1c00db6a:	d446                	sw	a7,40(sp)
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00db6c:	dc3e                	sw	a5,56(sp)
		
	for (unsigned int of=First; of<Last; of++) 
1c00db6e:	08f8f963          	bleu	a5,a7,1c00dc00 <KerParConv7x7StrideS_DP_fp+0x172>
		for (unsigned int If=0; If<InFeatures; If++) {
			short int *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
			int *out = Out+Wo*Ho*(of);
1c00db72:	030b86b3          	mul	a3,s7,a6
1c00db76:	00159713          	slli	a4,a1,0x1
1c00db7a:	972e                	add	a4,a4,a1
1c00db7c:	0712                	slli	a4,a4,0x4
1c00db7e:	972e                	add	a4,a4,a1
1c00db80:	0706                	slli	a4,a4,0x1
1c00db82:	c0ba                	sw	a4,64(sp)
			short int *in = In+W*H*If, *filter = Filter+FS*FS*(TotalInFeatures*of + If);
1c00db84:	5642                	lw	a2,48(sp)
1c00db86:	00151793          	slli	a5,a0,0x1
1c00db8a:	97aa                	add	a5,a5,a0
1c00db8c:	00269713          	slli	a4,a3,0x2
1c00db90:	4686                	lw	a3,64(sp)
1c00db92:	02cc0cb3          	mul	s9,s8,a2
1c00db96:	0792                	slli	a5,a5,0x4
1c00db98:	97aa                	add	a5,a5,a0
1c00db9a:	0786                	slli	a5,a5,0x1
1c00db9c:	de3a                	sw	a4,60(sp)
			KerConv7x7StrideS_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, PadIn);
			if ((int)PadIn) KerConvNxNStrideS_Border_DP_fp(in, out, filter, FS, FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, PadIn, PadIn);
1c00db9e:	c4a2                	sw	s0,72(sp)
1c00dba0:	c6be                	sw	a5,76(sp)
1c00dba2:	42d88db3          	p.mac	s11,a7,a3
1c00dba6:	0c86                	slli	s9,s9,0x1
1c00dba8:	42e884b3          	p.mac	s1,a7,a4
1c00dbac:	d26e                	sw	s11,36(sp)
		for (unsigned int If=0; If<InFeatures; If++) {
1c00dbae:	5652                	lw	a2,52(sp)
1c00dbb0:	ce05                	beqz	a2,1c00dbe8 <KerParConv7x7StrideS_DP_fp+0x15a>
1c00dbb2:	4726                	lw	a4,72(sp)
1c00dbb4:	eb3d                	bnez	a4,1c00dc2a <KerParConv7x7StrideS_DP_fp+0x19c>
1c00dbb6:	5792                	lw	a5,36(sp)
1c00dbb8:	45b6                	lw	a1,76(sp)
1c00dbba:	4d16                	lw	s10,68(sp)
			int *out = Out+Wo*Ho*(of);
1c00dbbc:	5d92                	lw	s11,36(sp)
1c00dbbe:	97ae                	add	a5,a5,a1
1c00dbc0:	d03e                	sw	a5,32(sp)
			KerConv7x7StrideS_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, PadIn);
1c00dbc2:	866e                	mv	a2,s11
1c00dbc4:	856a                	mv	a0,s10
1c00dbc6:	c422                	sw	s0,8(sp)
1c00dbc8:	c25a                	sw	s6,4(sp)
1c00dbca:	c056                	sw	s5,0(sp)
1c00dbcc:	88d2                	mv	a7,s4
1c00dbce:	884e                	mv	a6,s3
1c00dbd0:	87ca                	mv	a5,s2
1c00dbd2:	875e                	mv	a4,s7
1c00dbd4:	86e2                	mv	a3,s8
1c00dbd6:	85a6                	mv	a1,s1
1c00dbd8:	d09fe0ef          	jal	ra,1c00c8e0 <KerConv7x7StrideS_Body_DP_fp.constprop.100>
		for (unsigned int If=0; If<InFeatures; If++) {
1c00dbdc:	5602                	lw	a2,32(sp)
1c00dbde:	062d8d93          	addi	s11,s11,98 # 80000062 <pulp__FC+0x80000063>
1c00dbe2:	9d66                	add	s10,s10,s9
1c00dbe4:	fccd9fe3          	bne	s11,a2,1c00dbc2 <KerParConv7x7StrideS_DP_fp+0x134>
	for (unsigned int of=First; of<Last; of++) 
1c00dbe8:	5622                	lw	a2,40(sp)
1c00dbea:	5692                	lw	a3,36(sp)
1c00dbec:	4706                	lw	a4,64(sp)
1c00dbee:	57f2                	lw	a5,60(sp)
1c00dbf0:	55e2                	lw	a1,56(sp)
1c00dbf2:	0605                	addi	a2,a2,1
1c00dbf4:	96ba                	add	a3,a3,a4
1c00dbf6:	d432                	sw	a2,40(sp)
1c00dbf8:	d236                	sw	a3,36(sp)
1c00dbfa:	94be                	add	s1,s1,a5
1c00dbfc:	fac599e3          	bne	a1,a2,1c00dbae <KerParConv7x7StrideS_DP_fp+0x120>
1c00dc00:	002047b7          	lui	a5,0x204
1c00dc04:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00dc08:	01c7e703          	p.elw	a4,28(a5)
		}
	gap_waitbarrier(0);
}
1c00dc0c:	40ba                	lw	ra,140(sp)
1c00dc0e:	442a                	lw	s0,136(sp)
1c00dc10:	449a                	lw	s1,132(sp)
1c00dc12:	490a                	lw	s2,128(sp)
1c00dc14:	59f6                	lw	s3,124(sp)
1c00dc16:	5a66                	lw	s4,120(sp)
1c00dc18:	5ad6                	lw	s5,116(sp)
1c00dc1a:	5b46                	lw	s6,112(sp)
1c00dc1c:	5bb6                	lw	s7,108(sp)
1c00dc1e:	5c26                	lw	s8,104(sp)
1c00dc20:	5c96                	lw	s9,100(sp)
1c00dc22:	5d06                	lw	s10,96(sp)
1c00dc24:	4df6                	lw	s11,92(sp)
1c00dc26:	6149                	addi	sp,sp,144
1c00dc28:	8082                	ret
			int *out = Out+Wo*Ho*(of);
1c00dc2a:	5d12                	lw	s10,36(sp)
1c00dc2c:	5692                	lw	a3,36(sp)
1c00dc2e:	4736                	lw	a4,76(sp)
1c00dc30:	4d96                	lw	s11,68(sp)
1c00dc32:	87ea                	mv	a5,s10
1c00dc34:	96ba                	add	a3,a3,a4
1c00dc36:	8d6e                	mv	s10,s11
1c00dc38:	d036                	sw	a3,32(sp)
1c00dc3a:	8dbe                	mv	s11,a5
			KerConv7x7StrideS_Body_DP_fp(in, out, filter, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, PadIn);
1c00dc3c:	866e                	mv	a2,s11
1c00dc3e:	856a                	mv	a0,s10
1c00dc40:	88d2                	mv	a7,s4
1c00dc42:	884e                	mv	a6,s3
1c00dc44:	87ca                	mv	a5,s2
1c00dc46:	875e                	mv	a4,s7
1c00dc48:	86e2                	mv	a3,s8
1c00dc4a:	85a6                	mv	a1,s1
1c00dc4c:	c422                	sw	s0,8(sp)
1c00dc4e:	c25a                	sw	s6,4(sp)
1c00dc50:	c056                	sw	s5,0(sp)
1c00dc52:	c8ffe0ef          	jal	ra,1c00c8e0 <KerConv7x7StrideS_Body_DP_fp.constprop.100>
			if ((int)PadIn) KerConvNxNStrideS_Border_DP_fp(in, out, filter, FS, FS, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, PadIn, PadIn);
1c00dc56:	57b2                	lw	a5,44(sp)
1c00dc58:	5742                	lw	a4,48(sp)
1c00dc5a:	866e                	mv	a2,s11
1c00dc5c:	856a                	mv	a0,s10
1c00dc5e:	c03e                	sw	a5,0(sp)
1c00dc60:	85a6                	mv	a1,s1
1c00dc62:	ca22                	sw	s0,20(sp)
1c00dc64:	c822                	sw	s0,16(sp)
1c00dc66:	c65a                	sw	s6,12(sp)
1c00dc68:	c456                	sw	s5,8(sp)
1c00dc6a:	c252                	sw	s4,4(sp)
1c00dc6c:	88ce                	mv	a7,s3
1c00dc6e:	884a                	mv	a6,s2
1c00dc70:	87de                	mv	a5,s7
1c00dc72:	86e2                	mv	a3,s8
1c00dc74:	f77fe0ef          	jal	ra,1c00cbea <KerConvNxNStrideS_Border_DP_fp.constprop.102>
		for (unsigned int If=0; If<InFeatures; If++) {
1c00dc78:	5582                	lw	a1,32(sp)
1c00dc7a:	062d8d93          	addi	s11,s11,98
1c00dc7e:	9d66                	add	s10,s10,s9
1c00dc80:	fabd9ee3          	bne	s11,a1,1c00dc3c <KerParConv7x7StrideS_DP_fp+0x1ae>
1c00dc84:	b795                	j	1c00dbe8 <KerParConv7x7StrideS_DP_fp+0x15a>

1c00dc86 <KerMaxPoolNxNStrideS_Border_fp>:
1c00dc86:	7119                	addi	sp,sp,-128
1c00dc88:	fff60e13          	addi	t3,a2,-1
1c00dc8c:	cee2                	sw	s8,92(sp)
1c00dc8e:	fff68c13          	addi	s8,a3,-1
1c00dc92:	01fe5f13          	srli	t5,t3,0x1f
1c00dc96:	01fc5e93          	srli	t4,s8,0x1f
1c00dc9a:	7807ffd7          	pv.extract.b	t6,a5,0
1c00dc9e:	03cf2f5b          	p.addn	t5,t5,t3,1
1c00dca2:	038eaedb          	p.addn	t4,t4,s8,1
1c00dca6:	7817f7d7          	pv.extract.b	a5,a5,2
1c00dcaa:	c87e                	sw	t6,16(sp)
1c00dcac:	cc3e                	sw	a5,24(sp)
1c00dcae:	d076                	sw	t4,32(sp)
1c00dcb0:	40fe87b3          	sub	a5,t4,a5
1c00dcb4:	ce2a                	sw	a0,28(sp)
1c00dcb6:	41ff0eb3          	sub	t4,t5,t6
1c00dcba:	d42e                	sw	a1,40(sp)
1c00dcbc:	78177fd7          	pv.extract.b	t6,a4,2
1c00dcc0:	78077557          	pv.extract.b	a0,a4,0
1c00dcc4:	7a0775d7          	pv.extract.b	a1,a4,1
1c00dcc8:	dea2                	sw	s0,124(sp)
1c00dcca:	dca6                	sw	s1,120(sp)
1c00dccc:	d6d2                	sw	s4,108(sp)
1c00dcce:	d4d6                	sw	s5,104(sp)
1c00dcd0:	d2da                	sw	s6,100(sp)
1c00dcd2:	caea                	sw	s10,84(sp)
1c00dcd4:	4ada                	lw	s5,148(sp)
1c00dcd6:	d23e                	sw	a5,36(sp)
1c00dcd8:	de76                	sw	t4,60(sp)
1c00dcda:	7a177757          	pv.extract.b	a4,a4,3
1c00dcde:	daca                	sw	s2,116(sp)
1c00dce0:	d8ce                	sw	s3,112(sp)
1c00dce2:	d0de                	sw	s7,96(sp)
1c00dce4:	cce6                	sw	s9,88(sp)
1c00dce6:	c8ee                	sw	s11,80(sp)
1c00dce8:	da7a                	sw	t5,52(sp)
1c00dcea:	c67e                	sw	t6,12(sp)
1c00dcec:	d646                	sw	a7,44(sp)
1c00dcee:	c0aa                	sw	a0,64(sp)
1c00dcf0:	dc2e                	sw	a1,56(sp)
1c00dcf2:	436a                	lw	t1,152(sp)
1c00dcf4:	4a2a                	lw	s4,136(sp)
1c00dcf6:	8d42                	mv	s10,a6
1c00dcf8:	441a                	lw	s0,132(sp)
1c00dcfa:	480a                	lw	a6,128(sp)
1c00dcfc:	4b3a                	lw	s6,140(sp)
1c00dcfe:	44ca                	lw	s1,144(sp)
1c00dd00:	4efa                	lw	t4,156(sp)
1c00dd02:	d83a                	sw	a4,48(sp)
1c00dd04:	5712                	lw	a4,36(sp)
1c00dd06:	fffa8e13          	addi	t3,s5,-1
1c00dd0a:	fffa0793          	addi	a5,s4,-1
1c00dd0e:	426e0733          	p.mac	a4,t3,t1
1c00dd12:	5e72                	lw	t3,60(sp)
1c00dd14:	42678e33          	p.mac	t3,a5,t1
1c00dd18:	c2ba                	sw	a4,68(sp)
1c00dd1a:	c4f2                	sw	t3,72(sp)
1c00dd1c:	4c0f8363          	beqz	t6,1c00e1e2 <KerMaxPoolNxNStrideS_Border_fp+0x55c>
1c00dd20:	8da2                	mv	s11,s0
1c00dd22:	17447263          	bleu	s4,s0,1c00de86 <KerMaxPoolNxNStrideS_Border_fp+0x200>
1c00dd26:	5f92                	lw	t6,36(sp)
1c00dd28:	5702                	lw	a4,32(sp)
1c00dd2a:	41f887b3          	sub	a5,a7,t6
1c00dd2e:	97ba                	add	a5,a5,a4
1c00dd30:	c03e                	sw	a5,0(sp)
1c00dd32:	ccc1                	beqz	s1,1c00ddca <KerMaxPoolNxNStrideS_Border_fp+0x144>
1c00dd34:	026409b3          	mul	s3,s0,t1
1c00dd38:	5e22                	lw	t3,40(sp)
1c00dd3a:	00141c13          	slli	s8,s0,0x1
1c00dd3e:	001a1793          	slli	a5,s4,0x1
1c00dd42:	97f2                	add	a5,a5,t3
1c00dd44:	9c72                	add	s8,s8,t3
1c00dd46:	4e42                	lw	t3,16(sp)
1c00dd48:	c43e                	sw	a5,8(sp)
1c00dd4a:	4762                	lw	a4,24(sp)
1c00dd4c:	4782                	lw	a5,0(sp)
1c00dd4e:	4572                	lw	a0,28(sp)
1c00dd50:	41c989b3          	sub	s3,s3,t3
1c00dd54:	00131f93          	slli	t6,t1,0x1
1c00dd58:	0986                	slli	s3,s3,0x1
1c00dd5a:	c27e                	sw	t6,4(sp)
1c00dd5c:	00181c93          	slli	s9,a6,0x1
1c00dd60:	001d1f93          	slli	t6,s10,0x1
1c00dd64:	00161f13          	slli	t5,a2,0x1
1c00dd68:	40f70bb3          	sub	s7,a4,a5
1c00dd6c:	99aa                	add	s3,s3,a0
1c00dd6e:	4282                	lw	t0,0(sp)
1c00dd70:	8962                	mv	s2,s8
1c00dd72:	4381                	li	t2,0
1c00dd74:	0456c5b3          	p.min	a1,a3,t0
1c00dd78:	005b87b3          	add	a5,s7,t0
1c00dd7c:	854e                	mv	a0,s3
1c00dd7e:	4701                	li	a4,0
1c00dd80:	40f588b3          	sub	a7,a1,a5
1c00dd84:	02b7f463          	bleu	a1,a5,1c00ddac <KerMaxPoolNxNStrideS_Border_fp+0x126>
1c00dd88:	0118c07b          	lp.setup	x0,a7,1c00ddaa <KerMaxPoolNxNStrideS_Border_fp+0x124>
1c00dd8c:	01e507b3          	add	a5,a0,t5
1c00dd90:	85aa                	mv	a1,a0
1c00dd92:	ca19                	beqz	a2,1c00dda8 <KerMaxPoolNxNStrideS_Border_fp+0x122>
1c00dd94:	8f89                	sub	a5,a5,a0
1c00dd96:	17f9                	addi	a5,a5,-2
1c00dd98:	8385                	srli	a5,a5,0x1
1c00dd9a:	0785                	addi	a5,a5,1
1c00dd9c:	0047c0fb          	lp.setup	x1,a5,1c00dda4 <KerMaxPoolNxNStrideS_Border_fp+0x11e>
1c00dda0:	00259e0b          	p.lh	t3,2(a1!)
1c00dda4:	05c76733          	p.max	a4,a4,t3
1c00dda8:	957e                	add	a0,a0,t6
1c00ddaa:	0001                	nop
1c00ddac:	04eee733          	p.max	a4,t4,a4
1c00ddb0:	00e95cab          	p.sh	a4,s9(s2!)
1c00ddb4:	0385                	addi	t2,t2,1
1c00ddb6:	406282b3          	sub	t0,t0,t1
1c00ddba:	fa939de3          	bne	t2,s1,1c00dd74 <KerMaxPoolNxNStrideS_Border_fp+0xee>
1c00ddbe:	4592                	lw	a1,4(sp)
1c00ddc0:	4722                	lw	a4,8(sp)
1c00ddc2:	0c09                	addi	s8,s8,2
1c00ddc4:	99ae                	add	s3,s3,a1
1c00ddc6:	faec14e3          	bne	s8,a4,1c00dd6e <KerMaxPoolNxNStrideS_Border_fp+0xe8>
1c00ddca:	58c2                	lw	a7,48(sp)
1c00ddcc:	0a088d63          	beqz	a7,1c00de86 <KerMaxPoolNxNStrideS_Border_fp+0x200>
1c00ddd0:	4896                	lw	a7,68(sp)
1c00ddd2:	5e32                	lw	t3,44(sp)
1c00ddd4:	5f82                	lw	t6,32(sp)
1c00ddd6:	011307b3          	add	a5,t1,a7
1c00ddda:	40fe07b3          	sub	a5,t3,a5
1c00ddde:	97fe                	add	a5,a5,t6
1c00dde0:	c03e                	sw	a5,0(sp)
1c00dde2:	0b6af263          	bleu	s6,s5,1c00de86 <KerMaxPoolNxNStrideS_Border_fp+0x200>
1c00dde6:	026a87b3          	mul	a5,s5,t1
1c00ddea:	4762                	lw	a4,24(sp)
1c00ddec:	4e42                	lw	t3,16(sp)
1c00ddee:	001d1f13          	slli	t5,s10,0x1
1c00ddf2:	00131513          	slli	a0,t1,0x1
1c00ddf6:	c22a                	sw	a0,4(sp)
1c00ddf8:	5522                	lw	a0,40(sp)
1c00ddfa:	c46a                	sw	s10,8(sp)
1c00ddfc:	00181c13          	slli	s8,a6,0x1
1c00de00:	00161f93          	slli	t6,a2,0x1
1c00de04:	8f99                	sub	a5,a5,a4
1c00de06:	03a787b3          	mul	a5,a5,s10
1c00de0a:	8722                	mv	a4,s0
1c00de0c:	430a8733          	p.mac	a4,s5,a6
1c00de10:	41c787b3          	sub	a5,a5,t3
1c00de14:	426407b3          	p.mac	a5,s0,t1
1c00de18:	0706                	slli	a4,a4,0x1
1c00de1a:	00e50cb3          	add	s9,a0,a4
1c00de1e:	4772                	lw	a4,28(sp)
1c00de20:	026f0bb3          	mul	s7,t5,t1
1c00de24:	0786                	slli	a5,a5,0x1
1c00de26:	97ba                	add	a5,a5,a4
1c00de28:	8d3e                	mv	s10,a5
1c00de2a:	4282                	lw	t0,0(sp)
1c00de2c:	896a                	mv	s2,s10
1c00de2e:	89e6                	mv	s3,s9
1c00de30:	83d6                	mv	t2,s5
1c00de32:	0456c8b3          	p.min	a7,a3,t0
1c00de36:	4701                	li	a4,0
1c00de38:	02088663          	beqz	a7,1c00de64 <KerMaxPoolNxNStrideS_Border_fp+0x1de>
1c00de3c:	854a                	mv	a0,s2
1c00de3e:	4701                	li	a4,0
1c00de40:	0118c07b          	lp.setup	x0,a7,1c00de62 <KerMaxPoolNxNStrideS_Border_fp+0x1dc>
1c00de44:	01f507b3          	add	a5,a0,t6
1c00de48:	85aa                	mv	a1,a0
1c00de4a:	ca19                	beqz	a2,1c00de60 <KerMaxPoolNxNStrideS_Border_fp+0x1da>
1c00de4c:	8f89                	sub	a5,a5,a0
1c00de4e:	17f9                	addi	a5,a5,-2
1c00de50:	8385                	srli	a5,a5,0x1
1c00de52:	0785                	addi	a5,a5,1
1c00de54:	0047c0fb          	lp.setup	x1,a5,1c00de5c <KerMaxPoolNxNStrideS_Border_fp+0x1d6>
1c00de58:	00259e0b          	p.lh	t3,2(a1!)
1c00de5c:	05c76733          	p.max	a4,a4,t3
1c00de60:	957a                	add	a0,a0,t5
1c00de62:	0001                	nop
1c00de64:	04eee733          	p.max	a4,t4,a4
1c00de68:	00e9dc2b          	p.sh	a4,s8(s3!)
1c00de6c:	0385                	addi	t2,t2,1
1c00de6e:	406282b3          	sub	t0,t0,t1
1c00de72:	995e                	add	s2,s2,s7
1c00de74:	fb639fe3          	bne	t2,s6,1c00de32 <KerMaxPoolNxNStrideS_Border_fp+0x1ac>
1c00de78:	4792                	lw	a5,4(sp)
1c00de7a:	0d85                	addi	s11,s11,1
1c00de7c:	0c89                	addi	s9,s9,2
1c00de7e:	9d3e                	add	s10,s10,a5
1c00de80:	fb4de5e3          	bltu	s11,s4,1c00de2a <KerMaxPoolNxNStrideS_Border_fp+0x1a4>
1c00de84:	4d22                	lw	s10,8(sp)
1c00de86:	4886                	lw	a7,64(sp)
1c00de88:	36088663          	beqz	a7,1c00e1f4 <KerMaxPoolNxNStrideS_Border_fp+0x56e>
1c00de8c:	8ca6                	mv	s9,s1
1c00de8e:	0b54f863          	bleu	s5,s1,1c00df3e <KerMaxPoolNxNStrideS_Border_fp+0x2b8>
1c00de92:	5e72                	lw	t3,60(sp)
1c00de94:	5fd2                	lw	t6,52(sp)
1c00de96:	41cd07b3          	sub	a5,s10,t3
1c00de9a:	97fe                	add	a5,a5,t6
1c00de9c:	c03e                	sw	a5,0(sp)
1c00de9e:	cc49                	beqz	s0,1c00df38 <KerMaxPoolNxNStrideS_Border_fp+0x2b2>
1c00dea0:	02648733          	mul	a4,s1,t1
1c00dea4:	4e62                	lw	t3,24(sp)
1c00dea6:	408007b3          	neg	a5,s0
1c00deaa:	8ba2                	mv	s7,s0
1c00deac:	4c72                	lw	s8,28(sp)
1c00deae:	001d1393          	slli	t2,s10,0x1
1c00deb2:	0786                	slli	a5,a5,0x1
1c00deb4:	ca3e                	sw	a5,20(sp)
1c00deb6:	00181513          	slli	a0,a6,0x1
1c00deba:	c22a                	sw	a0,4(sp)
1c00debc:	43048bb3          	p.mac	s7,s1,a6
1c00dec0:	41c707b3          	sub	a5,a4,t3
1c00dec4:	5522                	lw	a0,40(sp)
1c00dec6:	8da6                	mv	s11,s1
1c00dec8:	02730fb3          	mul	t6,t1,t2
1c00decc:	0b86                	slli	s7,s7,0x1
1c00dece:	9baa                	add	s7,s7,a0
1c00ded0:	42778c33          	p.mac	s8,a5,t2
1c00ded4:	c47e                	sw	t6,8(sp)
1c00ded6:	45d2                	lw	a1,20(sp)
1c00ded8:	4f42                	lw	t5,16(sp)
1c00deda:	4902                	lw	s2,0(sp)
1c00dedc:	00bb89b3          	add	s3,s7,a1
1c00dee0:	052648b3          	p.min	a7,a2,s2
1c00dee4:	40068663          	beqz	a3,1c00e2f0 <KerMaxPoolNxNStrideS_Border_fp+0x66a>
1c00dee8:	41e88e33          	sub	t3,a7,t5
1c00deec:	0e06                	slli	t3,t3,0x1
1c00deee:	8562                	mv	a0,s8
1c00def0:	4701                	li	a4,0
1c00def2:	85b6                	mv	a1,a3
1c00def4:	0105c07b          	lp.setup	x0,a1,1c00df14 <KerMaxPoolNxNStrideS_Border_fp+0x28e>
1c00def8:	011f7d63          	bleu	a7,t5,1c00df12 <KerMaxPoolNxNStrideS_Border_fp+0x28c>
1c00defc:	ffee0793          	addi	a5,t3,-2
1c00df00:	8385                	srli	a5,a5,0x1
1c00df02:	8faa                	mv	t6,a0
1c00df04:	0785                	addi	a5,a5,1
1c00df06:	0047c0fb          	lp.setup	x1,a5,1c00df0e <KerMaxPoolNxNStrideS_Border_fp+0x288>
1c00df0a:	002f928b          	p.lh	t0,2(t6!)
1c00df0e:	04576733          	p.max	a4,a4,t0
1c00df12:	951e                	add	a0,a0,t2
1c00df14:	0001                	nop
1c00df16:	04eee733          	p.max	a4,t4,a4
1c00df1a:	00e9912b          	p.sh	a4,2(s3!)
1c00df1e:	40690933          	sub	s2,s2,t1
1c00df22:	406f0f33          	sub	t5,t5,t1
1c00df26:	fb799de3          	bne	s3,s7,1c00dee0 <KerMaxPoolNxNStrideS_Border_fp+0x25a>
1c00df2a:	4712                	lw	a4,4(sp)
1c00df2c:	47a2                	lw	a5,8(sp)
1c00df2e:	0d85                	addi	s11,s11,1
1c00df30:	9bba                	add	s7,s7,a4
1c00df32:	9c3e                	add	s8,s8,a5
1c00df34:	fb5d91e3          	bne	s11,s5,1c00ded6 <KerMaxPoolNxNStrideS_Border_fp+0x250>
1c00df38:	5e62                	lw	t3,56(sp)
1c00df3a:	2c0e1363          	bnez	t3,1c00e200 <KerMaxPoolNxNStrideS_Border_fp+0x57a>
1c00df3e:	4732                	lw	a4,12(sp)
1c00df40:	1a070663          	beqz	a4,1c00e0ec <KerMaxPoolNxNStrideS_Border_fp+0x466>
1c00df44:	55b2                	lw	a1,44(sp)
1c00df46:	5712                	lw	a4,36(sp)
1c00df48:	5e02                	lw	t3,32(sp)
1c00df4a:	40e587b3          	sub	a5,a1,a4
1c00df4e:	97f2                	add	a5,a5,t3
1c00df50:	c03e                	sw	a5,0(sp)
1c00df52:	3e048d63          	beqz	s1,1c00e34c <KerMaxPoolNxNStrideS_Border_fp+0x6c6>
1c00df56:	5ff2                	lw	t6,60(sp)
1c00df58:	5752                	lw	a4,52(sp)
1c00df5a:	41fd07b3          	sub	a5,s10,t6
1c00df5e:	97ba                	add	a5,a5,a4
1c00df60:	c63e                	sw	a5,12(sp)
1c00df62:	c845                	beqz	s0,1c00e012 <KerMaxPoolNxNStrideS_Border_fp+0x38c>
1c00df64:	4be2                	lw	s7,24(sp)
1c00df66:	408007b3          	neg	a5,s0
1c00df6a:	5e22                	lw	t3,40(sp)
1c00df6c:	4702                	lw	a4,0(sp)
1c00df6e:	0786                	slli	a5,a5,0x1
1c00df70:	00141c93          	slli	s9,s0,0x1
1c00df74:	00181893          	slli	a7,a6,0x1
1c00df78:	417005b3          	neg	a1,s7
1c00df7c:	c23e                	sw	a5,4(sp)
1c00df7e:	4781                	li	a5,0
1c00df80:	c442                	sw	a6,8(sp)
1c00df82:	ca22                	sw	s0,20(sp)
1c00df84:	c6d2                	sw	s4,76(sp)
1c00df86:	d246                	sw	a7,36(sp)
1c00df88:	9cf2                	add	s9,s9,t3
1c00df8a:	001d1393          	slli	t2,s10,0x1
1c00df8e:	883a                	mv	a6,a4
1c00df90:	843e                	mv	s0,a5
1c00df92:	8a2e                	mv	s4,a1
1c00df94:	4df2                	lw	s11,28(sp)
1c00df96:	014b87b3          	add	a5,s7,s4
1c00df9a:	4f92                	lw	t6,4(sp)
1c00df9c:	42778db3          	p.mac	s11,a5,t2
1c00dfa0:	4f42                	lw	t5,16(sp)
1c00dfa2:	4932                	lw	s2,12(sp)
1c00dfa4:	01fc89b3          	add	s3,s9,t6
1c00dfa8:	0506cc33          	p.min	s8,a3,a6
1c00dfac:	052648b3          	p.min	a7,a2,s2
1c00dfb0:	398bf263          	bleu	s8,s7,1c00e334 <KerMaxPoolNxNStrideS_Border_fp+0x6ae>
1c00dfb4:	41e88e33          	sub	t3,a7,t5
1c00dfb8:	0e06                	slli	t3,t3,0x1
1c00dfba:	856e                	mv	a0,s11
1c00dfbc:	4701                	li	a4,0
1c00dfbe:	417c05b3          	sub	a1,s8,s7
1c00dfc2:	0105c07b          	lp.setup	x0,a1,1c00dfe2 <KerMaxPoolNxNStrideS_Border_fp+0x35c>
1c00dfc6:	011f7d63          	bleu	a7,t5,1c00dfe0 <KerMaxPoolNxNStrideS_Border_fp+0x35a>
1c00dfca:	ffee0793          	addi	a5,t3,-2
1c00dfce:	8385                	srli	a5,a5,0x1
1c00dfd0:	8faa                	mv	t6,a0
1c00dfd2:	0785                	addi	a5,a5,1
1c00dfd4:	0047c0fb          	lp.setup	x1,a5,1c00dfdc <KerMaxPoolNxNStrideS_Border_fp+0x356>
1c00dfd8:	002f928b          	p.lh	t0,2(t6!)
1c00dfdc:	04576733          	p.max	a4,a4,t0
1c00dfe0:	951e                	add	a0,a0,t2
1c00dfe2:	0001                	nop
1c00dfe4:	04eee733          	p.max	a4,t4,a4
1c00dfe8:	00e9912b          	p.sh	a4,2(s3!)
1c00dfec:	40690933          	sub	s2,s2,t1
1c00dff0:	406f0f33          	sub	t5,t5,t1
1c00dff4:	fb999ce3          	bne	s3,s9,1c00dfac <KerMaxPoolNxNStrideS_Border_fp+0x326>
1c00dff8:	5512                	lw	a0,36(sp)
1c00dffa:	0405                	addi	s0,s0,1
1c00dffc:	40680833          	sub	a6,a6,t1
1c00e000:	406b8bb3          	sub	s7,s7,t1
1c00e004:	9a1a                	add	s4,s4,t1
1c00e006:	9caa                	add	s9,s9,a0
1c00e008:	f89416e3          	bne	s0,s1,1c00df94 <KerMaxPoolNxNStrideS_Border_fp+0x30e>
1c00e00c:	4822                	lw	a6,8(sp)
1c00e00e:	4452                	lw	s0,20(sp)
1c00e010:	4a36                	lw	s4,76(sp)
1c00e012:	5fe2                	lw	t6,56(sp)
1c00e014:	320f8c63          	beqz	t6,1c00e34c <KerMaxPoolNxNStrideS_Border_fp+0x6c6>
1c00e018:	4526                	lw	a0,72(sp)
1c00e01a:	5752                	lw	a4,52(sp)
1c00e01c:	00a307b3          	add	a5,t1,a0
1c00e020:	40fd07b3          	sub	a5,s10,a5
1c00e024:	97ba                	add	a5,a5,a4
1c00e026:	c23e                	sw	a5,4(sp)
1c00e028:	0d0a7263          	bleu	a6,s4,1c00e0ec <KerMaxPoolNxNStrideS_Border_fp+0x466>
1c00e02c:	03430733          	mul	a4,t1,s4
1c00e030:	00181793          	slli	a5,a6,0x1
1c00e034:	c63e                	sw	a5,12(sp)
1c00e036:	5e22                	lw	t3,40(sp)
1c00e038:	4fb2                	lw	t6,12(sp)
1c00e03a:	4be2                	lw	s7,24(sp)
1c00e03c:	410a07b3          	sub	a5,s4,a6
1c00e040:	01fe0cb3          	add	s9,t3,t6
1c00e044:	4e42                	lw	t3,16(sp)
1c00e046:	0786                	slli	a5,a5,0x1
1c00e048:	417005b3          	neg	a1,s7
1c00e04c:	d23e                	sw	a5,36(sp)
1c00e04e:	41c70733          	sub	a4,a4,t3
1c00e052:	4781                	li	a5,0
1c00e054:	ca42                	sw	a6,20(sp)
1c00e056:	c6a2                	sw	s0,76(sp)
1c00e058:	00131d93          	slli	s11,t1,0x1
1c00e05c:	4402                	lw	s0,0(sp)
1c00e05e:	001d1293          	slli	t0,s10,0x1
1c00e062:	c052                	sw	s4,0(sp)
1c00e064:	c43a                	sw	a4,8(sp)
1c00e066:	882e                	mv	a6,a1
1c00e068:	8a3e                	mv	s4,a5
1c00e06a:	43a2                	lw	t2,8(sp)
1c00e06c:	010b87b3          	add	a5,s7,a6
1c00e070:	5f92                	lw	t6,36(sp)
1c00e072:	43a783b3          	p.mac	t2,a5,s10
1c00e076:	4572                	lw	a0,28(sp)
1c00e078:	4912                	lw	s2,4(sp)
1c00e07a:	01fc89b3          	add	s3,s9,t6
1c00e07e:	0486cc33          	p.min	s8,a3,s0
1c00e082:	0386                	slli	t2,t2,0x1
1c00e084:	93aa                	add	t2,t2,a0
1c00e086:	05264e33          	p.min	t3,a2,s2
1c00e08a:	298bfa63          	bleu	s8,s7,1c00e31e <KerMaxPoolNxNStrideS_Border_fp+0x698>
1c00e08e:	001e1f13          	slli	t5,t3,0x1
1c00e092:	851e                	mv	a0,t2
1c00e094:	4701                	li	a4,0
1c00e096:	417c08b3          	sub	a7,s8,s7
1c00e09a:	0128c07b          	lp.setup	x0,a7,1c00e0be <KerMaxPoolNxNStrideS_Border_fp+0x438>
1c00e09e:	01e507b3          	add	a5,a0,t5
1c00e0a2:	85aa                	mv	a1,a0
1c00e0a4:	000e0c63          	beqz	t3,1c00e0bc <KerMaxPoolNxNStrideS_Border_fp+0x436>
1c00e0a8:	8f89                	sub	a5,a5,a0
1c00e0aa:	17f9                	addi	a5,a5,-2
1c00e0ac:	8385                	srli	a5,a5,0x1
1c00e0ae:	0785                	addi	a5,a5,1
1c00e0b0:	0047c0fb          	lp.setup	x1,a5,1c00e0b8 <KerMaxPoolNxNStrideS_Border_fp+0x432>
1c00e0b4:	00259f8b          	p.lh	t6,2(a1!)
1c00e0b8:	05f76733          	p.max	a4,a4,t6
1c00e0bc:	9516                	add	a0,a0,t0
1c00e0be:	0001                	nop
1c00e0c0:	04eee733          	p.max	a4,t4,a4
1c00e0c4:	00e9912b          	p.sh	a4,2(s3!)
1c00e0c8:	40690933          	sub	s2,s2,t1
1c00e0cc:	93ee                	add	t2,t2,s11
1c00e0ce:	fb3c9ce3          	bne	s9,s3,1c00e086 <KerMaxPoolNxNStrideS_Border_fp+0x400>
1c00e0d2:	45b2                	lw	a1,12(sp)
1c00e0d4:	0a05                	addi	s4,s4,1
1c00e0d6:	40640433          	sub	s0,s0,t1
1c00e0da:	406b8bb3          	sub	s7,s7,t1
1c00e0de:	981a                	add	a6,a6,t1
1c00e0e0:	9cae                	add	s9,s9,a1
1c00e0e2:	f89a64e3          	bltu	s4,s1,1c00e06a <KerMaxPoolNxNStrideS_Border_fp+0x3e4>
1c00e0e6:	4852                	lw	a6,20(sp)
1c00e0e8:	4436                	lw	s0,76(sp)
1c00e0ea:	4a02                	lw	s4,0(sp)
1c00e0ec:	5742                	lw	a4,48(sp)
1c00e0ee:	cf61                	beqz	a4,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e0f0:	4786                	lw	a5,64(sp)
1c00e0f2:	26079063          	bnez	a5,1c00e352 <KerMaxPoolNxNStrideS_Border_fp+0x6cc>
1c00e0f6:	58e2                	lw	a7,56(sp)
1c00e0f8:	0c088763          	beqz	a7,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e0fc:	4e16                	lw	t3,68(sp)
1c00e0fe:	5fb2                	lw	t6,44(sp)
1c00e100:	5702                	lw	a4,32(sp)
1c00e102:	01c30c33          	add	s8,t1,t3
1c00e106:	418f8c33          	sub	s8,t6,s8
1c00e10a:	9c3a                	add	s8,s8,a4
1c00e10c:	8cd6                	mv	s9,s5
1c00e10e:	0b6afc63          	bleu	s6,s5,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e112:	47a6                	lw	a5,72(sp)
1c00e114:	5e52                	lw	t3,52(sp)
1c00e116:	00f30fb3          	add	t6,t1,a5
1c00e11a:	41fd0fb3          	sub	t6,s10,t6
1c00e11e:	9ff2                	add	t6,t6,t3
1c00e120:	0b0a7363          	bleu	a6,s4,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e124:	026a8733          	mul	a4,s5,t1
1c00e128:	4562                	lw	a0,24(sp)
1c00e12a:	45c2                	lw	a1,16(sp)
1c00e12c:	410a02b3          	sub	t0,s4,a6
1c00e130:	00181393          	slli	t2,a6,0x1
1c00e134:	001d1e13          	slli	t3,s10,0x1
1c00e138:	0286                	slli	t0,t0,0x1
1c00e13a:	00131f13          	slli	t5,t1,0x1
1c00e13e:	026a07b3          	mul	a5,s4,t1
1c00e142:	8f09                	sub	a4,a4,a0
1c00e144:	8f8d                	sub	a5,a5,a1
1c00e146:	43a707b3          	p.mac	a5,a4,s10
1c00e14a:	5722                	lw	a4,40(sp)
1c00e14c:	430a8833          	p.mac	a6,s5,a6
1c00e150:	00179d13          	slli	s10,a5,0x1
1c00e154:	47f2                	lw	a5,28(sp)
1c00e156:	9d3e                	add	s10,s10,a5
1c00e158:	026e0bb3          	mul	s7,t3,t1
1c00e15c:	00181a93          	slli	s5,a6,0x1
1c00e160:	9aba                	add	s5,s5,a4
1c00e162:	01528933          	add	s2,t0,s5
1c00e166:	89ea                	mv	s3,s10
1c00e168:	84fe                	mv	s1,t6
1c00e16a:	0586ca33          	p.min	s4,a3,s8
1c00e16e:	049648b3          	p.min	a7,a2,s1
1c00e172:	2a0a0963          	beqz	s4,1c00e424 <KerMaxPoolNxNStrideS_Border_fp+0x79e>
1c00e176:	00189413          	slli	s0,a7,0x1
1c00e17a:	854e                	mv	a0,s3
1c00e17c:	4701                	li	a4,0
1c00e17e:	8852                	mv	a6,s4
1c00e180:	0128407b          	lp.setup	x0,a6,1c00e1a4 <KerMaxPoolNxNStrideS_Border_fp+0x51e>
1c00e184:	00a407b3          	add	a5,s0,a0
1c00e188:	85aa                	mv	a1,a0
1c00e18a:	00088c63          	beqz	a7,1c00e1a2 <KerMaxPoolNxNStrideS_Border_fp+0x51c>
1c00e18e:	8f89                	sub	a5,a5,a0
1c00e190:	17f9                	addi	a5,a5,-2
1c00e192:	8385                	srli	a5,a5,0x1
1c00e194:	0785                	addi	a5,a5,1
1c00e196:	0047c0fb          	lp.setup	x1,a5,1c00e19e <KerMaxPoolNxNStrideS_Border_fp+0x518>
1c00e19a:	00259d8b          	p.lh	s11,2(a1!)
1c00e19e:	05b76733          	p.max	a4,a4,s11
1c00e1a2:	9572                	add	a0,a0,t3
1c00e1a4:	0001                	nop
1c00e1a6:	04eee733          	p.max	a4,t4,a4
1c00e1aa:	00e9112b          	p.sh	a4,2(s2!)
1c00e1ae:	406484b3          	sub	s1,s1,t1
1c00e1b2:	99fa                	add	s3,s3,t5
1c00e1b4:	fb2a9de3          	bne	s5,s2,1c00e16e <KerMaxPoolNxNStrideS_Border_fp+0x4e8>
1c00e1b8:	0c85                	addi	s9,s9,1
1c00e1ba:	406c0c33          	sub	s8,s8,t1
1c00e1be:	9a9e                	add	s5,s5,t2
1c00e1c0:	9d5e                	add	s10,s10,s7
1c00e1c2:	fb6ce0e3          	bltu	s9,s6,1c00e162 <KerMaxPoolNxNStrideS_Border_fp+0x4dc>
1c00e1c6:	5476                	lw	s0,124(sp)
1c00e1c8:	54e6                	lw	s1,120(sp)
1c00e1ca:	5956                	lw	s2,116(sp)
1c00e1cc:	59c6                	lw	s3,112(sp)
1c00e1ce:	5a36                	lw	s4,108(sp)
1c00e1d0:	5aa6                	lw	s5,104(sp)
1c00e1d2:	5b16                	lw	s6,100(sp)
1c00e1d4:	5b86                	lw	s7,96(sp)
1c00e1d6:	4c76                	lw	s8,92(sp)
1c00e1d8:	4ce6                	lw	s9,88(sp)
1c00e1da:	4d56                	lw	s10,84(sp)
1c00e1dc:	4dc6                	lw	s11,80(sp)
1c00e1de:	6109                	addi	sp,sp,128
1c00e1e0:	8082                	ret
1c00e1e2:	57c2                	lw	a5,48(sp)
1c00e1e4:	ca0781e3          	beqz	a5,1c00de86 <KerMaxPoolNxNStrideS_Border_fp+0x200>
1c00e1e8:	8da2                	mv	s11,s0
1c00e1ea:	bf4463e3          	bltu	s0,s4,1c00ddd0 <KerMaxPoolNxNStrideS_Border_fp+0x14a>
1c00e1ee:	4886                	lw	a7,64(sp)
1c00e1f0:	c8089ee3          	bnez	a7,1c00de8c <KerMaxPoolNxNStrideS_Border_fp+0x206>
1c00e1f4:	58e2                	lw	a7,56(sp)
1c00e1f6:	0e088963          	beqz	a7,1c00e2e8 <KerMaxPoolNxNStrideS_Border_fp+0x662>
1c00e1fa:	8ca6                	mv	s9,s1
1c00e1fc:	2554fb63          	bleu	s5,s1,1c00e452 <KerMaxPoolNxNStrideS_Border_fp+0x7cc>
1c00e200:	4e26                	lw	t3,72(sp)
1c00e202:	5fd2                	lw	t6,52(sp)
1c00e204:	01c307b3          	add	a5,t1,t3
1c00e208:	40fd07b3          	sub	a5,s10,a5
1c00e20c:	97fe                	add	a5,a5,t6
1c00e20e:	c03e                	sw	a5,0(sp)
1c00e210:	0b0a7663          	bleu	a6,s4,1c00e2bc <KerMaxPoolNxNStrideS_Border_fp+0x636>
1c00e214:	026485b3          	mul	a1,s1,t1
1c00e218:	410a07b3          	sub	a5,s4,a6
1c00e21c:	0786                	slli	a5,a5,0x1
1c00e21e:	ca3e                	sw	a5,20(sp)
1c00e220:	4762                	lw	a4,24(sp)
1c00e222:	4e42                	lw	t3,16(sp)
1c00e224:	00181513          	slli	a0,a6,0x1
1c00e228:	001d1293          	slli	t0,s10,0x1
1c00e22c:	c22a                	sw	a0,4(sp)
1c00e22e:	5fa2                	lw	t6,40(sp)
1c00e230:	026a07b3          	mul	a5,s4,t1
1c00e234:	8d99                	sub	a1,a1,a4
1c00e236:	8742                	mv	a4,a6
1c00e238:	00131c13          	slli	s8,t1,0x1
1c00e23c:	42980733          	p.mac	a4,a6,s1
1c00e240:	41c787b3          	sub	a5,a5,t3
1c00e244:	43a587b3          	p.mac	a5,a1,s10
1c00e248:	0706                	slli	a4,a4,0x1
1c00e24a:	00ef8bb3          	add	s7,t6,a4
1c00e24e:	4772                	lw	a4,28(sp)
1c00e250:	02530533          	mul	a0,t1,t0
1c00e254:	0786                	slli	a5,a5,0x1
1c00e256:	00f70db3          	add	s11,a4,a5
1c00e25a:	c42a                	sw	a0,8(sp)
1c00e25c:	47d2                	lw	a5,20(sp)
1c00e25e:	4382                	lw	t2,0(sp)
1c00e260:	89ee                	mv	s3,s11
1c00e262:	00fb8933          	add	s2,s7,a5
1c00e266:	04764e33          	p.min	t3,a2,t2
1c00e26a:	ced9                	beqz	a3,1c00e308 <KerMaxPoolNxNStrideS_Border_fp+0x682>
1c00e26c:	001e1f13          	slli	t5,t3,0x1
1c00e270:	854e                	mv	a0,s3
1c00e272:	4701                	li	a4,0
1c00e274:	88b6                	mv	a7,a3
1c00e276:	0128c07b          	lp.setup	x0,a7,1c00e29a <KerMaxPoolNxNStrideS_Border_fp+0x614>
1c00e27a:	01e507b3          	add	a5,a0,t5
1c00e27e:	85aa                	mv	a1,a0
1c00e280:	000e0c63          	beqz	t3,1c00e298 <KerMaxPoolNxNStrideS_Border_fp+0x612>
1c00e284:	8f89                	sub	a5,a5,a0
1c00e286:	17f9                	addi	a5,a5,-2
1c00e288:	8385                	srli	a5,a5,0x1
1c00e28a:	0785                	addi	a5,a5,1
1c00e28c:	0047c0fb          	lp.setup	x1,a5,1c00e294 <KerMaxPoolNxNStrideS_Border_fp+0x60e>
1c00e290:	00259f8b          	p.lh	t6,2(a1!)
1c00e294:	05f76733          	p.max	a4,a4,t6
1c00e298:	9516                	add	a0,a0,t0
1c00e29a:	0001                	nop
1c00e29c:	04eee733          	p.max	a4,t4,a4
1c00e2a0:	00e9112b          	p.sh	a4,2(s2!)
1c00e2a4:	406383b3          	sub	t2,t2,t1
1c00e2a8:	99e2                	add	s3,s3,s8
1c00e2aa:	fb791ee3          	bne	s2,s7,1c00e266 <KerMaxPoolNxNStrideS_Border_fp+0x5e0>
1c00e2ae:	4892                	lw	a7,4(sp)
1c00e2b0:	4e22                	lw	t3,8(sp)
1c00e2b2:	0c85                	addi	s9,s9,1
1c00e2b4:	9bc6                	add	s7,s7,a7
1c00e2b6:	9df2                	add	s11,s11,t3
1c00e2b8:	fb5ce2e3          	bltu	s9,s5,1c00e25c <KerMaxPoolNxNStrideS_Border_fp+0x5d6>
1c00e2bc:	4fb2                	lw	t6,12(sp)
1c00e2be:	e20f87e3          	beqz	t6,1c00e0ec <KerMaxPoolNxNStrideS_Border_fp+0x466>
1c00e2c2:	4506                	lw	a0,64(sp)
1c00e2c4:	c80510e3          	bnez	a0,1c00df44 <KerMaxPoolNxNStrideS_Border_fp+0x2be>
1c00e2c8:	55e2                	lw	a1,56(sp)
1c00e2ca:	ee058ee3          	beqz	a1,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e2ce:	5732                	lw	a4,44(sp)
1c00e2d0:	5e12                	lw	t3,36(sp)
1c00e2d2:	5f82                	lw	t6,32(sp)
1c00e2d4:	41c707b3          	sub	a5,a4,t3
1c00e2d8:	97fe                	add	a5,a5,t6
1c00e2da:	c03e                	sw	a5,0(sp)
1c00e2dc:	d2049ee3          	bnez	s1,1c00e018 <KerMaxPoolNxNStrideS_Border_fp+0x392>
1c00e2e0:	5e42                	lw	t3,48(sp)
1c00e2e2:	e00e1de3          	bnez	t3,1c00e0fc <KerMaxPoolNxNStrideS_Border_fp+0x476>
1c00e2e6:	b5c5                	j	1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e2e8:	4fb2                	lw	t6,12(sp)
1c00e2ea:	e00f81e3          	beqz	t6,1c00e0ec <KerMaxPoolNxNStrideS_Border_fp+0x466>
1c00e2ee:	bde1                	j	1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e2f0:	4701                	li	a4,0
1c00e2f2:	04eee733          	p.max	a4,t4,a4
1c00e2f6:	00e9912b          	p.sh	a4,2(s3!)
1c00e2fa:	40690933          	sub	s2,s2,t1
1c00e2fe:	406f0f33          	sub	t5,t5,t1
1c00e302:	bd799fe3          	bne	s3,s7,1c00dee0 <KerMaxPoolNxNStrideS_Border_fp+0x25a>
1c00e306:	b115                	j	1c00df2a <KerMaxPoolNxNStrideS_Border_fp+0x2a4>
1c00e308:	4701                	li	a4,0
1c00e30a:	04eee733          	p.max	a4,t4,a4
1c00e30e:	00e9112b          	p.sh	a4,2(s2!)
1c00e312:	406383b3          	sub	t2,t2,t1
1c00e316:	99e2                	add	s3,s3,s8
1c00e318:	f57917e3          	bne	s2,s7,1c00e266 <KerMaxPoolNxNStrideS_Border_fp+0x5e0>
1c00e31c:	bf49                	j	1c00e2ae <KerMaxPoolNxNStrideS_Border_fp+0x628>
1c00e31e:	4701                	li	a4,0
1c00e320:	04eee733          	p.max	a4,t4,a4
1c00e324:	00e9912b          	p.sh	a4,2(s3!)
1c00e328:	40690933          	sub	s2,s2,t1
1c00e32c:	93ee                	add	t2,t2,s11
1c00e32e:	d53c9ce3          	bne	s9,s3,1c00e086 <KerMaxPoolNxNStrideS_Border_fp+0x400>
1c00e332:	b345                	j	1c00e0d2 <KerMaxPoolNxNStrideS_Border_fp+0x44c>
1c00e334:	4701                	li	a4,0
1c00e336:	04eee733          	p.max	a4,t4,a4
1c00e33a:	00e9912b          	p.sh	a4,2(s3!)
1c00e33e:	40690933          	sub	s2,s2,t1
1c00e342:	406f0f33          	sub	t5,t5,t1
1c00e346:	c79993e3          	bne	s3,s9,1c00dfac <KerMaxPoolNxNStrideS_Border_fp+0x326>
1c00e34a:	b17d                	j	1c00dff8 <KerMaxPoolNxNStrideS_Border_fp+0x372>
1c00e34c:	58c2                	lw	a7,48(sp)
1c00e34e:	e6088ce3          	beqz	a7,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e352:	4896                	lw	a7,68(sp)
1c00e354:	5e32                	lw	t3,44(sp)
1c00e356:	5f82                	lw	t6,32(sp)
1c00e358:	01130c33          	add	s8,t1,a7
1c00e35c:	418e0c33          	sub	s8,t3,s8
1c00e360:	9c7e                	add	s8,s8,t6
1c00e362:	8cd6                	mv	s9,s5
1c00e364:	e76af1e3          	bleu	s6,s5,1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e368:	5772                	lw	a4,60(sp)
1c00e36a:	5e52                	lw	t3,52(sp)
1c00e36c:	40ed07b3          	sub	a5,s10,a4
1c00e370:	97f2                	add	a5,a5,t3
1c00e372:	c63e                	sw	a5,12(sp)
1c00e374:	c445                	beqz	s0,1c00e41c <KerMaxPoolNxNStrideS_Border_fp+0x796>
1c00e376:	035307b3          	mul	a5,t1,s5
1c00e37a:	4e62                	lw	t3,24(sp)
1c00e37c:	89a2                	mv	s3,s0
1c00e37e:	4bf2                	lw	s7,28(sp)
1c00e380:	00181f93          	slli	t6,a6,0x1
1c00e384:	001d1393          	slli	t2,s10,0x1
1c00e388:	d67e                	sw	t6,44(sp)
1c00e38a:	5522                	lw	a0,40(sp)
1c00e38c:	40800733          	neg	a4,s0
1c00e390:	0706                	slli	a4,a4,0x1
1c00e392:	435809b3          	p.mac	s3,a6,s5
1c00e396:	41c787b3          	sub	a5,a5,t3
1c00e39a:	c042                	sw	a6,0(sp)
1c00e39c:	d83a                	sw	a4,48(sp)
1c00e39e:	8dd6                	mv	s11,s5
1c00e3a0:	8862                	mv	a6,s8
1c00e3a2:	02730fb3          	mul	t6,t1,t2
1c00e3a6:	0986                	slli	s3,s3,0x1
1c00e3a8:	99aa                	add	s3,s3,a0
1c00e3aa:	42778bb3          	p.mac	s7,a5,t2
1c00e3ae:	d07e                	sw	t6,32(sp)
1c00e3b0:	55c2                	lw	a1,48(sp)
1c00e3b2:	4f42                	lw	t5,16(sp)
1c00e3b4:	4432                	lw	s0,12(sp)
1c00e3b6:	013584b3          	add	s1,a1,s3
1c00e3ba:	0506c933          	p.min	s2,a3,a6
1c00e3be:	048648b3          	p.min	a7,a2,s0
1c00e3c2:	06090c63          	beqz	s2,1c00e43a <KerMaxPoolNxNStrideS_Border_fp+0x7b4>
1c00e3c6:	41e88e33          	sub	t3,a7,t5
1c00e3ca:	0e06                	slli	t3,t3,0x1
1c00e3cc:	855e                	mv	a0,s7
1c00e3ce:	4701                	li	a4,0
1c00e3d0:	85ca                	mv	a1,s2
1c00e3d2:	0105c07b          	lp.setup	x0,a1,1c00e3f2 <KerMaxPoolNxNStrideS_Border_fp+0x76c>
1c00e3d6:	011f7d63          	bleu	a7,t5,1c00e3f0 <KerMaxPoolNxNStrideS_Border_fp+0x76a>
1c00e3da:	ffee0793          	addi	a5,t3,-2
1c00e3de:	8385                	srli	a5,a5,0x1
1c00e3e0:	8faa                	mv	t6,a0
1c00e3e2:	0785                	addi	a5,a5,1
1c00e3e4:	0047c0fb          	lp.setup	x1,a5,1c00e3ec <KerMaxPoolNxNStrideS_Border_fp+0x766>
1c00e3e8:	002f928b          	p.lh	t0,2(t6!)
1c00e3ec:	04576733          	p.max	a4,a4,t0
1c00e3f0:	951e                	add	a0,a0,t2
1c00e3f2:	0001                	nop
1c00e3f4:	04eee733          	p.max	a4,t4,a4
1c00e3f8:	00e4912b          	p.sh	a4,2(s1!)
1c00e3fc:	40640433          	sub	s0,s0,t1
1c00e400:	406f0f33          	sub	t5,t5,t1
1c00e404:	fa999de3          	bne	s3,s1,1c00e3be <KerMaxPoolNxNStrideS_Border_fp+0x738>
1c00e408:	5732                	lw	a4,44(sp)
1c00e40a:	5782                	lw	a5,32(sp)
1c00e40c:	0d85                	addi	s11,s11,1
1c00e40e:	40680833          	sub	a6,a6,t1
1c00e412:	99ba                	add	s3,s3,a4
1c00e414:	9bbe                	add	s7,s7,a5
1c00e416:	f96d9de3          	bne	s11,s6,1c00e3b0 <KerMaxPoolNxNStrideS_Border_fp+0x72a>
1c00e41a:	4802                	lw	a6,0(sp)
1c00e41c:	5562                	lw	a0,56(sp)
1c00e41e:	ce051ae3          	bnez	a0,1c00e112 <KerMaxPoolNxNStrideS_Border_fp+0x48c>
1c00e422:	b355                	j	1c00e1c6 <KerMaxPoolNxNStrideS_Border_fp+0x540>
1c00e424:	4701                	li	a4,0
1c00e426:	04eee733          	p.max	a4,t4,a4
1c00e42a:	00e9112b          	p.sh	a4,2(s2!)
1c00e42e:	406484b3          	sub	s1,s1,t1
1c00e432:	99fa                	add	s3,s3,t5
1c00e434:	d32a9de3          	bne	s5,s2,1c00e16e <KerMaxPoolNxNStrideS_Border_fp+0x4e8>
1c00e438:	b341                	j	1c00e1b8 <KerMaxPoolNxNStrideS_Border_fp+0x532>
1c00e43a:	4701                	li	a4,0
1c00e43c:	04eee733          	p.max	a4,t4,a4
1c00e440:	00e4912b          	p.sh	a4,2(s1!)
1c00e444:	40640433          	sub	s0,s0,t1
1c00e448:	406f0f33          	sub	t5,t5,t1
1c00e44c:	f69999e3          	bne	s3,s1,1c00e3be <KerMaxPoolNxNStrideS_Border_fp+0x738>
1c00e450:	bf65                	j	1c00e408 <KerMaxPoolNxNStrideS_Border_fp+0x782>
1c00e452:	47b2                	lw	a5,12(sp)
1c00e454:	e6079de3          	bnez	a5,1c00e2ce <KerMaxPoolNxNStrideS_Border_fp+0x648>
1c00e458:	b951                	j	1c00e0ec <KerMaxPoolNxNStrideS_Border_fp+0x466>

1c00e45a <KerAvgPoolNxNStrideS_Border_fp>:
1c00e45a:	7175                	addi	sp,sp,-144
1c00e45c:	d4e6                	sw	s9,104(sp)
1c00e45e:	fff68c93          	addi	s9,a3,-1
1c00e462:	7807ffd7          	pv.extract.b	t6,a5,0
1c00e466:	01fcde93          	srli	t4,s9,0x1f
1c00e46a:	d07e                	sw	t6,32(sp)
1c00e46c:	039eaedb          	p.addn	t4,t4,s9,1
1c00e470:	7817f7d7          	pv.extract.b	a5,a5,2
1c00e474:	fff60393          	addi	t2,a2,-1
1c00e478:	d63e                	sw	a5,44(sp)
1c00e47a:	ce76                	sw	t4,28(sp)
1c00e47c:	40fe87b3          	sub	a5,t4,a5
1c00e480:	5e82                	lw	t4,32(sp)
1c00e482:	01f3df13          	srli	t5,t2,0x1f
1c00e486:	027f2f5b          	p.addn	t5,t5,t2,1
1c00e48a:	41df0eb3          	sub	t4,t5,t4
1c00e48e:	c6f6                	sw	t4,76(sp)
1c00e490:	d82a                	sw	a0,48(sp)
1c00e492:	78177ed7          	pv.extract.b	t4,a4,2
1c00e496:	dc2e                	sw	a1,56(sp)
1c00e498:	78077557          	pv.extract.b	a0,a4,0
1c00e49c:	7a0775d7          	pv.extract.b	a1,a4,1
1c00e4a0:	c722                	sw	s0,140(sp)
1c00e4a2:	c526                	sw	s1,136(sp)
1c00e4a4:	ded2                	sw	s4,124(sp)
1c00e4a6:	dcd6                	sw	s5,120(sp)
1c00e4a8:	dada                	sw	s6,116(sp)
1c00e4aa:	d2ea                	sw	s10,100(sp)
1c00e4ac:	5a9a                	lw	s5,164(sp)
1c00e4ae:	c2fa                	sw	t5,68(sp)
1c00e4b0:	da3e                	sw	a5,52(sp)
1c00e4b2:	d276                	sw	t4,36(sp)
1c00e4b4:	7a177757          	pv.extract.b	a4,a4,3
1c00e4b8:	c34a                	sw	s2,132(sp)
1c00e4ba:	c14e                	sw	s3,128(sp)
1c00e4bc:	d8de                	sw	s7,112(sp)
1c00e4be:	d6e2                	sw	s8,108(sp)
1c00e4c0:	d0ee                	sw	s11,96(sp)
1c00e4c2:	de46                	sw	a7,60(sp)
1c00e4c4:	c8aa                	sw	a0,80(sp)
1c00e4c6:	c4ae                	sw	a1,72(sp)
1c00e4c8:	532a                	lw	t1,168(sp)
1c00e4ca:	4a6a                	lw	s4,152(sp)
1c00e4cc:	444a                	lw	s0,144(sp)
1c00e4ce:	4b7a                	lw	s6,156(sp)
1c00e4d0:	548a                	lw	s1,160(sp)
1c00e4d2:	5eba                	lw	t4,172(sp)
1c00e4d4:	c0ba                	sw	a4,64(sp)
1c00e4d6:	5752                	lw	a4,52(sp)
1c00e4d8:	fffa8f93          	addi	t6,s5,-1
1c00e4dc:	fffa0793          	addi	a5,s4,-1
1c00e4e0:	426f8733          	p.mac	a4,t6,t1
1c00e4e4:	4fb6                	lw	t6,76(sp)
1c00e4e6:	6f41                	lui	t5,0x10
1c00e4e8:	8d42                	mv	s10,a6
1c00e4ea:	42678fb3          	p.mac	t6,a5,t1
1c00e4ee:	caba                	sw	a4,84(sp)
1c00e4f0:	5712                	lw	a4,36(sp)
1c00e4f2:	02d60e33          	mul	t3,a2,a3
1c00e4f6:	ccfe                	sw	t6,88(sp)
1c00e4f8:	03cf4f33          	div	t5,t5,t3
1c00e4fc:	50070363          	beqz	a4,1c00ea02 <KerAvgPoolNxNStrideS_Border_fp+0x5a8>
1c00e500:	4dda                	lw	s11,148(sp)
1c00e502:	174dfb63          	bleu	s4,s11,1c00e678 <KerAvgPoolNxNStrideS_Border_fp+0x21e>
1c00e506:	5fd2                	lw	t6,52(sp)
1c00e508:	4772                	lw	a4,28(sp)
1c00e50a:	41f887b3          	sub	a5,a7,t6
1c00e50e:	97ba                	add	a5,a5,a4
1c00e510:	c63e                	sw	a5,12(sp)
1c00e512:	c0cd                	beqz	s1,1c00e5b4 <KerAvgPoolNxNStrideS_Border_fp+0x15a>
1c00e514:	5fe2                	lw	t6,56(sp)
1c00e516:	001a1793          	slli	a5,s4,0x1
1c00e51a:	5732                	lw	a4,44(sp)
1c00e51c:	97fe                	add	a5,a5,t6
1c00e51e:	ca3e                	sw	a5,20(sp)
1c00e520:	47b2                	lw	a5,12(sp)
1c00e522:	001d9c13          	slli	s8,s11,0x1
1c00e526:	00131513          	slli	a0,t1,0x1
1c00e52a:	40f70bb3          	sub	s7,a4,a5
1c00e52e:	5702                	lw	a4,32(sp)
1c00e530:	57c2                	lw	a5,48(sp)
1c00e532:	9c7e                	add	s8,s8,t6
1c00e534:	c82a                	sw	a0,16(sp)
1c00e536:	00141c93          	slli	s9,s0,0x1
1c00e53a:	00181f93          	slli	t6,a6,0x1
1c00e53e:	00161e13          	slli	t3,a2,0x1
1c00e542:	026d89b3          	mul	s3,s11,t1
1c00e546:	40e989b3          	sub	s3,s3,a4
1c00e54a:	0986                	slli	s3,s3,0x1
1c00e54c:	99be                	add	s3,s3,a5
1c00e54e:	42b2                	lw	t0,12(sp)
1c00e550:	8962                	mv	s2,s8
1c00e552:	4381                	li	t2,0
1c00e554:	0456c5b3          	p.min	a1,a3,t0
1c00e558:	005b87b3          	add	a5,s7,t0
1c00e55c:	854e                	mv	a0,s3
1c00e55e:	4701                	li	a4,0
1c00e560:	40f58833          	sub	a6,a1,a5
1c00e564:	5ab7ff63          	bleu	a1,a5,1c00eb22 <KerAvgPoolNxNStrideS_Border_fp+0x6c8>
1c00e568:	0108407b          	lp.setup	x0,a6,1c00e588 <KerAvgPoolNxNStrideS_Border_fp+0x12e>
1c00e56c:	01c507b3          	add	a5,a0,t3
1c00e570:	85aa                	mv	a1,a0
1c00e572:	ca11                	beqz	a2,1c00e586 <KerAvgPoolNxNStrideS_Border_fp+0x12c>
1c00e574:	8f89                	sub	a5,a5,a0
1c00e576:	17f9                	addi	a5,a5,-2
1c00e578:	8385                	srli	a5,a5,0x1
1c00e57a:	0785                	addi	a5,a5,1
1c00e57c:	0047c0fb          	lp.setup	x1,a5,1c00e584 <KerAvgPoolNxNStrideS_Border_fp+0x12a>
1c00e580:	0025988b          	p.lh	a7,2(a1!)
1c00e584:	9746                	add	a4,a4,a7
1c00e586:	957e                	add	a0,a0,t6
1c00e588:	0001                	nop
1c00e58a:	03e707b3          	mul	a5,a4,t5
1c00e58e:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e592:	150797b3          	p.clip	a5,a5,16
1c00e596:	04fee7b3          	p.max	a5,t4,a5
1c00e59a:	00f95cab          	p.sh	a5,s9(s2!)
1c00e59e:	0385                	addi	t2,t2,1
1c00e5a0:	406282b3          	sub	t0,t0,t1
1c00e5a4:	fa9398e3          	bne	t2,s1,1c00e554 <KerAvgPoolNxNStrideS_Border_fp+0xfa>
1c00e5a8:	4842                	lw	a6,16(sp)
1c00e5aa:	4552                	lw	a0,20(sp)
1c00e5ac:	0c09                	addi	s8,s8,2
1c00e5ae:	99c2                	add	s3,s3,a6
1c00e5b0:	f8ac1fe3          	bne	s8,a0,1c00e54e <KerAvgPoolNxNStrideS_Border_fp+0xf4>
1c00e5b4:	4706                	lw	a4,64(sp)
1c00e5b6:	c369                	beqz	a4,1c00e678 <KerAvgPoolNxNStrideS_Border_fp+0x21e>
1c00e5b8:	4756                	lw	a4,84(sp)
1c00e5ba:	5872                	lw	a6,60(sp)
1c00e5bc:	4ff2                	lw	t6,28(sp)
1c00e5be:	00e307b3          	add	a5,t1,a4
1c00e5c2:	40f807b3          	sub	a5,a6,a5
1c00e5c6:	97fe                	add	a5,a5,t6
1c00e5c8:	c63e                	sw	a5,12(sp)
1c00e5ca:	0b6af763          	bleu	s6,s5,1c00e678 <KerAvgPoolNxNStrideS_Border_fp+0x21e>
1c00e5ce:	026a87b3          	mul	a5,s5,t1
1c00e5d2:	5732                	lw	a4,44(sp)
1c00e5d4:	485a                	lw	a6,148(sp)
1c00e5d6:	001d1e13          	slli	t3,s10,0x1
1c00e5da:	00131513          	slli	a0,t1,0x1
1c00e5de:	c82a                	sw	a0,16(sp)
1c00e5e0:	5562                	lw	a0,56(sp)
1c00e5e2:	ca6a                	sw	s10,20(sp)
1c00e5e4:	00141c13          	slli	s8,s0,0x1
1c00e5e8:	00161f93          	slli	t6,a2,0x1
1c00e5ec:	8f99                	sub	a5,a5,a4
1c00e5ee:	03a787b3          	mul	a5,a5,s10
1c00e5f2:	5702                	lw	a4,32(sp)
1c00e5f4:	8f99                	sub	a5,a5,a4
1c00e5f6:	475a                	lw	a4,148(sp)
1c00e5f8:	426807b3          	p.mac	a5,a6,t1
1c00e5fc:	428a8733          	p.mac	a4,s5,s0
1c00e600:	0786                	slli	a5,a5,0x1
1c00e602:	026e0bb3          	mul	s7,t3,t1
1c00e606:	0706                	slli	a4,a4,0x1
1c00e608:	00e50cb3          	add	s9,a0,a4
1c00e60c:	5742                	lw	a4,48(sp)
1c00e60e:	97ba                	add	a5,a5,a4
1c00e610:	8d3e                	mv	s10,a5
1c00e612:	42b2                	lw	t0,12(sp)
1c00e614:	896a                	mv	s2,s10
1c00e616:	89e6                	mv	s3,s9
1c00e618:	83d6                	mv	t2,s5
1c00e61a:	0456c833          	p.min	a6,a3,t0
1c00e61e:	4781                	li	a5,0
1c00e620:	02080763          	beqz	a6,1c00e64e <KerAvgPoolNxNStrideS_Border_fp+0x1f4>
1c00e624:	854a                	mv	a0,s2
1c00e626:	4701                	li	a4,0
1c00e628:	0108407b          	lp.setup	x0,a6,1c00e648 <KerAvgPoolNxNStrideS_Border_fp+0x1ee>
1c00e62c:	01f507b3          	add	a5,a0,t6
1c00e630:	85aa                	mv	a1,a0
1c00e632:	ca11                	beqz	a2,1c00e646 <KerAvgPoolNxNStrideS_Border_fp+0x1ec>
1c00e634:	8f89                	sub	a5,a5,a0
1c00e636:	17f9                	addi	a5,a5,-2
1c00e638:	8385                	srli	a5,a5,0x1
1c00e63a:	0785                	addi	a5,a5,1
1c00e63c:	0047c0fb          	lp.setup	x1,a5,1c00e644 <KerAvgPoolNxNStrideS_Border_fp+0x1ea>
1c00e640:	0025988b          	p.lh	a7,2(a1!)
1c00e644:	9746                	add	a4,a4,a7
1c00e646:	9572                	add	a0,a0,t3
1c00e648:	0001                	nop
1c00e64a:	03e707b3          	mul	a5,a4,t5
1c00e64e:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e652:	150797b3          	p.clip	a5,a5,16
1c00e656:	04fee7b3          	p.max	a5,t4,a5
1c00e65a:	00f9dc2b          	p.sh	a5,s8(s3!)
1c00e65e:	0385                	addi	t2,t2,1
1c00e660:	406282b3          	sub	t0,t0,t1
1c00e664:	995e                	add	s2,s2,s7
1c00e666:	fb639ae3          	bne	t2,s6,1c00e61a <KerAvgPoolNxNStrideS_Border_fp+0x1c0>
1c00e66a:	47c2                	lw	a5,16(sp)
1c00e66c:	0d85                	addi	s11,s11,1
1c00e66e:	0c89                	addi	s9,s9,2
1c00e670:	9d3e                	add	s10,s10,a5
1c00e672:	fb4de0e3          	bltu	s11,s4,1c00e612 <KerAvgPoolNxNStrideS_Border_fp+0x1b8>
1c00e676:	4d52                	lw	s10,20(sp)
1c00e678:	4846                	lw	a6,80(sp)
1c00e67a:	38080d63          	beqz	a6,1c00ea14 <KerAvgPoolNxNStrideS_Border_fp+0x5ba>
1c00e67e:	8ca6                	mv	s9,s1
1c00e680:	0b54fe63          	bleu	s5,s1,1c00e73c <KerAvgPoolNxNStrideS_Border_fp+0x2e2>
1c00e684:	4fb6                	lw	t6,76(sp)
1c00e686:	4716                	lw	a4,68(sp)
1c00e688:	41fd07b3          	sub	a5,s10,t6
1c00e68c:	97ba                	add	a5,a5,a4
1c00e68e:	c63e                	sw	a5,12(sp)
1c00e690:	47da                	lw	a5,148(sp)
1c00e692:	c3d5                	beqz	a5,1c00e736 <KerAvgPoolNxNStrideS_Border_fp+0x2dc>
1c00e694:	02648733          	mul	a4,s1,t1
1c00e698:	5fb2                	lw	t6,44(sp)
1c00e69a:	8bbe                	mv	s7,a5
1c00e69c:	5c42                	lw	s8,48(sp)
1c00e69e:	40f007b3          	neg	a5,a5
1c00e6a2:	001d1393          	slli	t2,s10,0x1
1c00e6a6:	0786                	slli	a5,a5,0x1
1c00e6a8:	d43e                	sw	a5,40(sp)
1c00e6aa:	55e2                	lw	a1,56(sp)
1c00e6ac:	00141813          	slli	a6,s0,0x1
1c00e6b0:	42848bb3          	p.mac	s7,s1,s0
1c00e6b4:	41f707b3          	sub	a5,a4,t6
1c00e6b8:	c842                	sw	a6,16(sp)
1c00e6ba:	8da6                	mv	s11,s1
1c00e6bc:	02730533          	mul	a0,t1,t2
1c00e6c0:	0b86                	slli	s7,s7,0x1
1c00e6c2:	9bae                	add	s7,s7,a1
1c00e6c4:	42778c33          	p.mac	s8,a5,t2
1c00e6c8:	ca2a                	sw	a0,20(sp)
1c00e6ca:	5722                	lw	a4,40(sp)
1c00e6cc:	5e02                	lw	t3,32(sp)
1c00e6ce:	4932                	lw	s2,12(sp)
1c00e6d0:	00eb89b3          	add	s3,s7,a4
1c00e6d4:	05264833          	p.min	a6,a2,s2
1c00e6d8:	44068163          	beqz	a3,1c00eb1a <KerAvgPoolNxNStrideS_Border_fp+0x6c0>
1c00e6dc:	41c808b3          	sub	a7,a6,t3
1c00e6e0:	0886                	slli	a7,a7,0x1
1c00e6e2:	8562                	mv	a0,s8
1c00e6e4:	4701                	li	a4,0
1c00e6e6:	85b6                	mv	a1,a3
1c00e6e8:	00f5c07b          	lp.setup	x0,a1,1c00e706 <KerAvgPoolNxNStrideS_Border_fp+0x2ac>
1c00e6ec:	010e7c63          	bleu	a6,t3,1c00e704 <KerAvgPoolNxNStrideS_Border_fp+0x2aa>
1c00e6f0:	ffe88793          	addi	a5,a7,-2
1c00e6f4:	8385                	srli	a5,a5,0x1
1c00e6f6:	8faa                	mv	t6,a0
1c00e6f8:	0785                	addi	a5,a5,1
1c00e6fa:	0047c0fb          	lp.setup	x1,a5,1c00e702 <KerAvgPoolNxNStrideS_Border_fp+0x2a8>
1c00e6fe:	002f928b          	p.lh	t0,2(t6!)
1c00e702:	9716                	add	a4,a4,t0
1c00e704:	951e                	add	a0,a0,t2
1c00e706:	0001                	nop
1c00e708:	03e707b3          	mul	a5,a4,t5
1c00e70c:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e710:	150797b3          	p.clip	a5,a5,16
1c00e714:	04fee7b3          	p.max	a5,t4,a5
1c00e718:	00f9912b          	p.sh	a5,2(s3!)
1c00e71c:	40690933          	sub	s2,s2,t1
1c00e720:	406e0e33          	sub	t3,t3,t1
1c00e724:	fb7998e3          	bne	s3,s7,1c00e6d4 <KerAvgPoolNxNStrideS_Border_fp+0x27a>
1c00e728:	47c2                	lw	a5,16(sp)
1c00e72a:	4852                	lw	a6,20(sp)
1c00e72c:	0d85                	addi	s11,s11,1
1c00e72e:	9bbe                	add	s7,s7,a5
1c00e730:	9c42                	add	s8,s8,a6
1c00e732:	f95d9ce3          	bne	s11,s5,1c00e6ca <KerAvgPoolNxNStrideS_Border_fp+0x270>
1c00e736:	47a6                	lw	a5,72(sp)
1c00e738:	2e079463          	bnez	a5,1c00ea20 <KerAvgPoolNxNStrideS_Border_fp+0x5c6>
1c00e73c:	5712                	lw	a4,36(sp)
1c00e73e:	1c070063          	beqz	a4,1c00e8fe <KerAvgPoolNxNStrideS_Border_fp+0x4a4>
1c00e742:	5872                	lw	a6,60(sp)
1c00e744:	5fd2                	lw	t6,52(sp)
1c00e746:	4772                	lw	a4,28(sp)
1c00e748:	41f807b3          	sub	a5,a6,t6
1c00e74c:	97ba                	add	a5,a5,a4
1c00e74e:	d23e                	sw	a5,36(sp)
1c00e750:	3c048f63          	beqz	s1,1c00eb2e <KerAvgPoolNxNStrideS_Border_fp+0x6d4>
1c00e754:	4fb6                	lw	t6,76(sp)
1c00e756:	4716                	lw	a4,68(sp)
1c00e758:	41fd07b3          	sub	a5,s10,t6
1c00e75c:	97ba                	add	a5,a5,a4
1c00e75e:	da3e                	sw	a5,52(sp)
1c00e760:	47da                	lw	a5,148(sp)
1c00e762:	cfcd                	beqz	a5,1c00e81c <KerAvgPoolNxNStrideS_Border_fp+0x3c2>
1c00e764:	5bb2                	lw	s7,44(sp)
1c00e766:	00179c93          	slli	s9,a5,0x1
1c00e76a:	5fe2                	lw	t6,56(sp)
1c00e76c:	40f007b3          	neg	a5,a5
1c00e770:	5712                	lw	a4,36(sp)
1c00e772:	0786                	slli	a5,a5,0x1
1c00e774:	00141813          	slli	a6,s0,0x1
1c00e778:	417005b3          	neg	a1,s7
1c00e77c:	c83e                	sw	a5,16(sp)
1c00e77e:	4781                	li	a5,0
1c00e780:	c642                	sw	a6,12(sp)
1c00e782:	ca22                	sw	s0,20(sp)
1c00e784:	d452                	sw	s4,40(sp)
1c00e786:	ced6                	sw	s5,92(sp)
1c00e788:	9cfe                	add	s9,s9,t6
1c00e78a:	001d1813          	slli	a6,s10,0x1
1c00e78e:	842e                	mv	s0,a1
1c00e790:	8a3a                	mv	s4,a4
1c00e792:	8abe                	mv	s5,a5
1c00e794:	5dc2                	lw	s11,48(sp)
1c00e796:	017407b3          	add	a5,s0,s7
1c00e79a:	4542                	lw	a0,16(sp)
1c00e79c:	43078db3          	p.mac	s11,a5,a6
1c00e7a0:	5f82                	lw	t6,32(sp)
1c00e7a2:	5952                	lw	s2,52(sp)
1c00e7a4:	019509b3          	add	s3,a0,s9
1c00e7a8:	0546cc33          	p.min	s8,a3,s4
1c00e7ac:	052648b3          	p.min	a7,a2,s2
1c00e7b0:	378bfd63          	bleu	s8,s7,1c00eb2a <KerAvgPoolNxNStrideS_Border_fp+0x6d0>
1c00e7b4:	41f88e33          	sub	t3,a7,t6
1c00e7b8:	0e06                	slli	t3,t3,0x1
1c00e7ba:	856e                	mv	a0,s11
1c00e7bc:	4701                	li	a4,0
1c00e7be:	417c05b3          	sub	a1,s8,s7
1c00e7c2:	00f5c07b          	lp.setup	x0,a1,1c00e7e0 <KerAvgPoolNxNStrideS_Border_fp+0x386>
1c00e7c6:	011ffc63          	bleu	a7,t6,1c00e7de <KerAvgPoolNxNStrideS_Border_fp+0x384>
1c00e7ca:	ffee0793          	addi	a5,t3,-2
1c00e7ce:	8385                	srli	a5,a5,0x1
1c00e7d0:	82aa                	mv	t0,a0
1c00e7d2:	0785                	addi	a5,a5,1
1c00e7d4:	0047c0fb          	lp.setup	x1,a5,1c00e7dc <KerAvgPoolNxNStrideS_Border_fp+0x382>
1c00e7d8:	0022938b          	p.lh	t2,2(t0!)
1c00e7dc:	971e                	add	a4,a4,t2
1c00e7de:	9542                	add	a0,a0,a6
1c00e7e0:	0001                	nop
1c00e7e2:	03e707b3          	mul	a5,a4,t5
1c00e7e6:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e7ea:	150797b3          	p.clip	a5,a5,16
1c00e7ee:	04fee7b3          	p.max	a5,t4,a5
1c00e7f2:	00f9912b          	p.sh	a5,2(s3!)
1c00e7f6:	40690933          	sub	s2,s2,t1
1c00e7fa:	406f8fb3          	sub	t6,t6,t1
1c00e7fe:	fb3c97e3          	bne	s9,s3,1c00e7ac <KerAvgPoolNxNStrideS_Border_fp+0x352>
1c00e802:	45b2                	lw	a1,12(sp)
1c00e804:	0a85                	addi	s5,s5,1
1c00e806:	406a0a33          	sub	s4,s4,t1
1c00e80a:	406b8bb3          	sub	s7,s7,t1
1c00e80e:	941a                	add	s0,s0,t1
1c00e810:	9cae                	add	s9,s9,a1
1c00e812:	f89a91e3          	bne	s5,s1,1c00e794 <KerAvgPoolNxNStrideS_Border_fp+0x33a>
1c00e816:	4452                	lw	s0,20(sp)
1c00e818:	5a22                	lw	s4,40(sp)
1c00e81a:	4af6                	lw	s5,92(sp)
1c00e81c:	4826                	lw	a6,72(sp)
1c00e81e:	30080863          	beqz	a6,1c00eb2e <KerAvgPoolNxNStrideS_Border_fp+0x6d4>
1c00e822:	4866                	lw	a6,88(sp)
1c00e824:	4f96                	lw	t6,68(sp)
1c00e826:	010307b3          	add	a5,t1,a6
1c00e82a:	40fd07b3          	sub	a5,s10,a5
1c00e82e:	97fe                	add	a5,a5,t6
1c00e830:	c83e                	sw	a5,16(sp)
1c00e832:	0c8a7663          	bleu	s0,s4,1c00e8fe <KerAvgPoolNxNStrideS_Border_fp+0x4a4>
1c00e836:	026a0733          	mul	a4,s4,t1
1c00e83a:	5fe2                	lw	t6,56(sp)
1c00e83c:	00141513          	slli	a0,s0,0x1
1c00e840:	5bb2                	lw	s7,44(sp)
1c00e842:	00af8cb3          	add	s9,t6,a0
1c00e846:	5f82                	lw	t6,32(sp)
1c00e848:	408a07b3          	sub	a5,s4,s0
1c00e84c:	0786                	slli	a5,a5,0x1
1c00e84e:	417005b3          	neg	a1,s7
1c00e852:	da3e                	sw	a5,52(sp)
1c00e854:	41f70733          	sub	a4,a4,t6
1c00e858:	4781                	li	a5,0
1c00e85a:	d422                	sw	s0,40(sp)
1c00e85c:	ced6                	sw	s5,92(sp)
1c00e85e:	5412                	lw	s0,36(sp)
1c00e860:	c62a                	sw	a0,12(sp)
1c00e862:	d252                	sw	s4,36(sp)
1c00e864:	00131d93          	slli	s11,t1,0x1
1c00e868:	001d1293          	slli	t0,s10,0x1
1c00e86c:	ca3a                	sw	a4,20(sp)
1c00e86e:	8a3e                	mv	s4,a5
1c00e870:	8aae                	mv	s5,a1
1c00e872:	43d2                	lw	t2,20(sp)
1c00e874:	017a87b3          	add	a5,s5,s7
1c00e878:	5552                	lw	a0,52(sp)
1c00e87a:	43a783b3          	p.mac	t2,a5,s10
1c00e87e:	5742                	lw	a4,48(sp)
1c00e880:	4942                	lw	s2,16(sp)
1c00e882:	019509b3          	add	s3,a0,s9
1c00e886:	0486cc33          	p.min	s8,a3,s0
1c00e88a:	0386                	slli	t2,t2,0x1
1c00e88c:	93ba                	add	t2,t2,a4
1c00e88e:	052648b3          	p.min	a7,a2,s2
1c00e892:	298bfa63          	bleu	s8,s7,1c00eb26 <KerAvgPoolNxNStrideS_Border_fp+0x6cc>
1c00e896:	00189e13          	slli	t3,a7,0x1
1c00e89a:	851e                	mv	a0,t2
1c00e89c:	4701                	li	a4,0
1c00e89e:	417c0833          	sub	a6,s8,s7
1c00e8a2:	0118407b          	lp.setup	x0,a6,1c00e8c4 <KerAvgPoolNxNStrideS_Border_fp+0x46a>
1c00e8a6:	00ae07b3          	add	a5,t3,a0
1c00e8aa:	85aa                	mv	a1,a0
1c00e8ac:	00088b63          	beqz	a7,1c00e8c2 <KerAvgPoolNxNStrideS_Border_fp+0x468>
1c00e8b0:	8f89                	sub	a5,a5,a0
1c00e8b2:	17f9                	addi	a5,a5,-2
1c00e8b4:	8385                	srli	a5,a5,0x1
1c00e8b6:	0785                	addi	a5,a5,1
1c00e8b8:	0047c0fb          	lp.setup	x1,a5,1c00e8c0 <KerAvgPoolNxNStrideS_Border_fp+0x466>
1c00e8bc:	00259f8b          	p.lh	t6,2(a1!)
1c00e8c0:	977e                	add	a4,a4,t6
1c00e8c2:	9516                	add	a0,a0,t0
1c00e8c4:	0001                	nop
1c00e8c6:	03e707b3          	mul	a5,a4,t5
1c00e8ca:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e8ce:	150797b3          	p.clip	a5,a5,16
1c00e8d2:	04fee7b3          	p.max	a5,t4,a5
1c00e8d6:	00f9912b          	p.sh	a5,2(s3!)
1c00e8da:	40690933          	sub	s2,s2,t1
1c00e8de:	93ee                	add	t2,t2,s11
1c00e8e0:	fb3c97e3          	bne	s9,s3,1c00e88e <KerAvgPoolNxNStrideS_Border_fp+0x434>
1c00e8e4:	47b2                	lw	a5,12(sp)
1c00e8e6:	0a05                	addi	s4,s4,1
1c00e8e8:	40640433          	sub	s0,s0,t1
1c00e8ec:	406b8bb3          	sub	s7,s7,t1
1c00e8f0:	9a9a                	add	s5,s5,t1
1c00e8f2:	9cbe                	add	s9,s9,a5
1c00e8f4:	f69a6fe3          	bltu	s4,s1,1c00e872 <KerAvgPoolNxNStrideS_Border_fp+0x418>
1c00e8f8:	5422                	lw	s0,40(sp)
1c00e8fa:	5a12                	lw	s4,36(sp)
1c00e8fc:	4af6                	lw	s5,92(sp)
1c00e8fe:	4806                	lw	a6,64(sp)
1c00e900:	0e080363          	beqz	a6,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00e904:	4fc6                	lw	t6,80(sp)
1c00e906:	220f9763          	bnez	t6,1c00eb34 <KerAvgPoolNxNStrideS_Border_fp+0x6da>
1c00e90a:	47a6                	lw	a5,72(sp)
1c00e90c:	cfe9                	beqz	a5,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00e90e:	4856                	lw	a6,84(sp)
1c00e910:	5ff2                	lw	t6,60(sp)
1c00e912:	4772                	lw	a4,28(sp)
1c00e914:	01030cb3          	add	s9,t1,a6
1c00e918:	419f8cb3          	sub	s9,t6,s9
1c00e91c:	ce56                	sw	s5,28(sp)
1c00e91e:	9cba                	add	s9,s9,a4
1c00e920:	0d6af363          	bleu	s6,s5,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00e924:	47e6                	lw	a5,88(sp)
1c00e926:	4f96                	lw	t6,68(sp)
1c00e928:	00f303b3          	add	t2,t1,a5
1c00e92c:	407d03b3          	sub	t2,s10,t2
1c00e930:	93fe                	add	t2,t2,t6
1c00e932:	0a8a7a63          	bleu	s0,s4,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00e936:	026a87b3          	mul	a5,s5,t1
1c00e93a:	5732                	lw	a4,44(sp)
1c00e93c:	8c22                	mv	s8,s0
1c00e93e:	001d1f93          	slli	t6,s10,0x1
1c00e942:	5542                	lw	a0,48(sp)
1c00e944:	408a04b3          	sub	s1,s4,s0
1c00e948:	00141913          	slli	s2,s0,0x1
1c00e94c:	0486                	slli	s1,s1,0x1
1c00e94e:	00131293          	slli	t0,t1,0x1
1c00e952:	026a0db3          	mul	s11,s4,t1
1c00e956:	8f99                	sub	a5,a5,a4
1c00e958:	5702                	lw	a4,32(sp)
1c00e95a:	40ed8db3          	sub	s11,s11,a4
1c00e95e:	43a78db3          	p.mac	s11,a5,s10
1c00e962:	57e2                	lw	a5,56(sp)
1c00e964:	428a8c33          	p.mac	s8,s5,s0
1c00e968:	0d86                	slli	s11,s11,0x1
1c00e96a:	9daa                	add	s11,s11,a0
1c00e96c:	026f8d33          	mul	s10,t6,t1
1c00e970:	0c06                	slli	s8,s8,0x1
1c00e972:	9c3e                	add	s8,s8,a5
1c00e974:	01848a33          	add	s4,s1,s8
1c00e978:	8aee                	mv	s5,s11
1c00e97a:	899e                	mv	s3,t2
1c00e97c:	0596cbb3          	p.min	s7,a3,s9
1c00e980:	053648b3          	p.min	a7,a2,s3
1c00e984:	280b8963          	beqz	s7,1c00ec16 <KerAvgPoolNxNStrideS_Border_fp+0x7bc>
1c00e988:	00189e13          	slli	t3,a7,0x1
1c00e98c:	8556                	mv	a0,s5
1c00e98e:	4701                	li	a4,0
1c00e990:	885e                	mv	a6,s7
1c00e992:	0118407b          	lp.setup	x0,a6,1c00e9b4 <KerAvgPoolNxNStrideS_Border_fp+0x55a>
1c00e996:	00ae07b3          	add	a5,t3,a0
1c00e99a:	85aa                	mv	a1,a0
1c00e99c:	00088b63          	beqz	a7,1c00e9b2 <KerAvgPoolNxNStrideS_Border_fp+0x558>
1c00e9a0:	8f89                	sub	a5,a5,a0
1c00e9a2:	17f9                	addi	a5,a5,-2
1c00e9a4:	8385                	srli	a5,a5,0x1
1c00e9a6:	0785                	addi	a5,a5,1
1c00e9a8:	0047c0fb          	lp.setup	x1,a5,1c00e9b0 <KerAvgPoolNxNStrideS_Border_fp+0x556>
1c00e9ac:	0025940b          	p.lh	s0,2(a1!)
1c00e9b0:	9722                	add	a4,a4,s0
1c00e9b2:	957e                	add	a0,a0,t6
1c00e9b4:	0001                	nop
1c00e9b6:	03e707b3          	mul	a5,a4,t5
1c00e9ba:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00e9be:	150797b3          	p.clip	a5,a5,16
1c00e9c2:	04fee7b3          	p.max	a5,t4,a5
1c00e9c6:	00fa112b          	p.sh	a5,2(s4!)
1c00e9ca:	406989b3          	sub	s3,s3,t1
1c00e9ce:	9a96                	add	s5,s5,t0
1c00e9d0:	fb4c18e3          	bne	s8,s4,1c00e980 <KerAvgPoolNxNStrideS_Border_fp+0x526>
1c00e9d4:	45f2                	lw	a1,28(sp)
1c00e9d6:	406c8cb3          	sub	s9,s9,t1
1c00e9da:	9c4a                	add	s8,s8,s2
1c00e9dc:	0585                	addi	a1,a1,1
1c00e9de:	ce2e                	sw	a1,28(sp)
1c00e9e0:	9dea                	add	s11,s11,s10
1c00e9e2:	f965e9e3          	bltu	a1,s6,1c00e974 <KerAvgPoolNxNStrideS_Border_fp+0x51a>
1c00e9e6:	443a                	lw	s0,140(sp)
1c00e9e8:	44aa                	lw	s1,136(sp)
1c00e9ea:	491a                	lw	s2,132(sp)
1c00e9ec:	498a                	lw	s3,128(sp)
1c00e9ee:	5a76                	lw	s4,124(sp)
1c00e9f0:	5ae6                	lw	s5,120(sp)
1c00e9f2:	5b56                	lw	s6,116(sp)
1c00e9f4:	5bc6                	lw	s7,112(sp)
1c00e9f6:	5c36                	lw	s8,108(sp)
1c00e9f8:	5ca6                	lw	s9,104(sp)
1c00e9fa:	5d16                	lw	s10,100(sp)
1c00e9fc:	5d86                	lw	s11,96(sp)
1c00e9fe:	6149                	addi	sp,sp,144
1c00ea00:	8082                	ret
1c00ea02:	4586                	lw	a1,64(sp)
1c00ea04:	c6058ae3          	beqz	a1,1c00e678 <KerAvgPoolNxNStrideS_Border_fp+0x21e>
1c00ea08:	4dda                	lw	s11,148(sp)
1c00ea0a:	bb4de7e3          	bltu	s11,s4,1c00e5b8 <KerAvgPoolNxNStrideS_Border_fp+0x15e>
1c00ea0e:	4846                	lw	a6,80(sp)
1c00ea10:	c60817e3          	bnez	a6,1c00e67e <KerAvgPoolNxNStrideS_Border_fp+0x224>
1c00ea14:	4fa6                	lw	t6,72(sp)
1c00ea16:	0e0f8e63          	beqz	t6,1c00eb12 <KerAvgPoolNxNStrideS_Border_fp+0x6b8>
1c00ea1a:	8ca6                	mv	s9,s1
1c00ea1c:	2154f163          	bleu	s5,s1,1c00ec1e <KerAvgPoolNxNStrideS_Border_fp+0x7c4>
1c00ea20:	4566                	lw	a0,88(sp)
1c00ea22:	4716                	lw	a4,68(sp)
1c00ea24:	00a307b3          	add	a5,t1,a0
1c00ea28:	40fd07b3          	sub	a5,s10,a5
1c00ea2c:	97ba                	add	a5,a5,a4
1c00ea2e:	ca3e                	sw	a5,20(sp)
1c00ea30:	0a8a7b63          	bleu	s0,s4,1c00eae6 <KerAvgPoolNxNStrideS_Border_fp+0x68c>
1c00ea34:	408a07b3          	sub	a5,s4,s0
1c00ea38:	0786                	slli	a5,a5,0x1
1c00ea3a:	c63e                	sw	a5,12(sp)
1c00ea3c:	026a07b3          	mul	a5,s4,t1
1c00ea40:	5702                	lw	a4,32(sp)
1c00ea42:	5fb2                	lw	t6,44(sp)
1c00ea44:	001d1293          	slli	t0,s10,0x1
1c00ea48:	00141813          	slli	a6,s0,0x1
1c00ea4c:	d442                	sw	a6,40(sp)
1c00ea4e:	00131c13          	slli	s8,t1,0x1
1c00ea52:	026485b3          	mul	a1,s1,t1
1c00ea56:	8f99                	sub	a5,a5,a4
1c00ea58:	8722                	mv	a4,s0
1c00ea5a:	42848733          	p.mac	a4,s1,s0
1c00ea5e:	41f585b3          	sub	a1,a1,t6
1c00ea62:	5fe2                	lw	t6,56(sp)
1c00ea64:	43a587b3          	p.mac	a5,a1,s10
1c00ea68:	0706                	slli	a4,a4,0x1
1c00ea6a:	00ef8bb3          	add	s7,t6,a4
1c00ea6e:	5742                	lw	a4,48(sp)
1c00ea70:	02530533          	mul	a0,t1,t0
1c00ea74:	0786                	slli	a5,a5,0x1
1c00ea76:	00f70db3          	add	s11,a4,a5
1c00ea7a:	c82a                	sw	a0,16(sp)
1c00ea7c:	47b2                	lw	a5,12(sp)
1c00ea7e:	43d2                	lw	t2,20(sp)
1c00ea80:	89ee                	mv	s3,s11
1c00ea82:	01778933          	add	s2,a5,s7
1c00ea86:	047648b3          	p.min	a7,a2,t2
1c00ea8a:	cad1                	beqz	a3,1c00eb1e <KerAvgPoolNxNStrideS_Border_fp+0x6c4>
1c00ea8c:	00189e13          	slli	t3,a7,0x1
1c00ea90:	854e                	mv	a0,s3
1c00ea92:	4701                	li	a4,0
1c00ea94:	8836                	mv	a6,a3
1c00ea96:	0118407b          	lp.setup	x0,a6,1c00eab8 <KerAvgPoolNxNStrideS_Border_fp+0x65e>
1c00ea9a:	00ae07b3          	add	a5,t3,a0
1c00ea9e:	85aa                	mv	a1,a0
1c00eaa0:	00088b63          	beqz	a7,1c00eab6 <KerAvgPoolNxNStrideS_Border_fp+0x65c>
1c00eaa4:	8f89                	sub	a5,a5,a0
1c00eaa6:	17f9                	addi	a5,a5,-2
1c00eaa8:	8385                	srli	a5,a5,0x1
1c00eaaa:	0785                	addi	a5,a5,1
1c00eaac:	0047c0fb          	lp.setup	x1,a5,1c00eab4 <KerAvgPoolNxNStrideS_Border_fp+0x65a>
1c00eab0:	00259f8b          	p.lh	t6,2(a1!)
1c00eab4:	977e                	add	a4,a4,t6
1c00eab6:	9516                	add	a0,a0,t0
1c00eab8:	0001                	nop
1c00eaba:	03e707b3          	mul	a5,a4,t5
1c00eabe:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00eac2:	150797b3          	p.clip	a5,a5,16
1c00eac6:	04fee7b3          	p.max	a5,t4,a5
1c00eaca:	00f9112b          	p.sh	a5,2(s2!)
1c00eace:	406383b3          	sub	t2,t2,t1
1c00ead2:	99e2                	add	s3,s3,s8
1c00ead4:	fb2b99e3          	bne	s7,s2,1c00ea86 <KerAvgPoolNxNStrideS_Border_fp+0x62c>
1c00ead8:	5822                	lw	a6,40(sp)
1c00eada:	4fc2                	lw	t6,16(sp)
1c00eadc:	0c85                	addi	s9,s9,1
1c00eade:	9bc2                	add	s7,s7,a6
1c00eae0:	9dfe                	add	s11,s11,t6
1c00eae2:	f95cede3          	bltu	s9,s5,1c00ea7c <KerAvgPoolNxNStrideS_Border_fp+0x622>
1c00eae6:	5712                	lw	a4,36(sp)
1c00eae8:	e0070be3          	beqz	a4,1c00e8fe <KerAvgPoolNxNStrideS_Border_fp+0x4a4>
1c00eaec:	47c6                	lw	a5,80(sp)
1c00eaee:	c4079ae3          	bnez	a5,1c00e742 <KerAvgPoolNxNStrideS_Border_fp+0x2e8>
1c00eaf2:	4726                	lw	a4,72(sp)
1c00eaf4:	ee0709e3          	beqz	a4,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00eaf8:	5872                	lw	a6,60(sp)
1c00eafa:	5fd2                	lw	t6,52(sp)
1c00eafc:	4772                	lw	a4,28(sp)
1c00eafe:	41f807b3          	sub	a5,a6,t6
1c00eb02:	97ba                	add	a5,a5,a4
1c00eb04:	d23e                	sw	a5,36(sp)
1c00eb06:	d0049ee3          	bnez	s1,1c00e822 <KerAvgPoolNxNStrideS_Border_fp+0x3c8>
1c00eb0a:	4806                	lw	a6,64(sp)
1c00eb0c:	e00811e3          	bnez	a6,1c00e90e <KerAvgPoolNxNStrideS_Border_fp+0x4b4>
1c00eb10:	bdd9                	j	1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00eb12:	5712                	lw	a4,36(sp)
1c00eb14:	de0705e3          	beqz	a4,1c00e8fe <KerAvgPoolNxNStrideS_Border_fp+0x4a4>
1c00eb18:	b5f9                	j	1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00eb1a:	4781                	li	a5,0
1c00eb1c:	bec5                	j	1c00e70c <KerAvgPoolNxNStrideS_Border_fp+0x2b2>
1c00eb1e:	4781                	li	a5,0
1c00eb20:	bf79                	j	1c00eabe <KerAvgPoolNxNStrideS_Border_fp+0x664>
1c00eb22:	4781                	li	a5,0
1c00eb24:	b4ad                	j	1c00e58e <KerAvgPoolNxNStrideS_Border_fp+0x134>
1c00eb26:	4781                	li	a5,0
1c00eb28:	b34d                	j	1c00e8ca <KerAvgPoolNxNStrideS_Border_fp+0x470>
1c00eb2a:	4781                	li	a5,0
1c00eb2c:	b96d                	j	1c00e7e6 <KerAvgPoolNxNStrideS_Border_fp+0x38c>
1c00eb2e:	4f86                	lw	t6,64(sp)
1c00eb30:	ea0f8be3          	beqz	t6,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00eb34:	4556                	lw	a0,84(sp)
1c00eb36:	55f2                	lw	a1,60(sp)
1c00eb38:	4772                	lw	a4,28(sp)
1c00eb3a:	00a30cb3          	add	s9,t1,a0
1c00eb3e:	41958cb3          	sub	s9,a1,s9
1c00eb42:	ce56                	sw	s5,28(sp)
1c00eb44:	9cba                	add	s9,s9,a4
1c00eb46:	eb6af0e3          	bleu	s6,s5,1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00eb4a:	4fb6                	lw	t6,76(sp)
1c00eb4c:	4716                	lw	a4,68(sp)
1c00eb4e:	41fd07b3          	sub	a5,s10,t6
1c00eb52:	97ba                	add	a5,a5,a4
1c00eb54:	d23e                	sw	a5,36(sp)
1c00eb56:	47da                	lw	a5,148(sp)
1c00eb58:	cbdd                	beqz	a5,1c00ec0e <KerAvgPoolNxNStrideS_Border_fp+0x7b4>
1c00eb5a:	883e                	mv	a6,a5
1c00eb5c:	026a87b3          	mul	a5,s5,t1
1c00eb60:	00141f93          	slli	t6,s0,0x1
1c00eb64:	41000733          	neg	a4,a6
1c00eb68:	0706                	slli	a4,a4,0x1
1c00eb6a:	de7e                	sw	t6,60(sp)
1c00eb6c:	5fb2                	lw	t6,44(sp)
1c00eb6e:	c0ba                	sw	a4,64(sp)
1c00eb70:	5c42                	lw	s8,48(sp)
1c00eb72:	8742                	mv	a4,a6
1c00eb74:	001d1393          	slli	t2,s10,0x1
1c00eb78:	428a8733          	p.mac	a4,s5,s0
1c00eb7c:	41f787b3          	sub	a5,a5,t6
1c00eb80:	5fe2                	lw	t6,56(sp)
1c00eb82:	c622                	sw	s0,12(sp)
1c00eb84:	8dd6                	mv	s11,s5
1c00eb86:	8466                	mv	s0,s9
1c00eb88:	02638533          	mul	a0,t2,t1
1c00eb8c:	0706                	slli	a4,a4,0x1
1c00eb8e:	00ef8bb3          	add	s7,t6,a4
1c00eb92:	42778c33          	p.mac	s8,a5,t2
1c00eb96:	cc2a                	sw	a0,24(sp)
1c00eb98:	4506                	lw	a0,64(sp)
1c00eb9a:	5e02                	lw	t3,32(sp)
1c00eb9c:	5492                	lw	s1,36(sp)
1c00eb9e:	01750933          	add	s2,a0,s7
1c00eba2:	0486c9b3          	p.min	s3,a3,s0
1c00eba6:	04964833          	p.min	a6,a2,s1
1c00ebaa:	06098863          	beqz	s3,1c00ec1a <KerAvgPoolNxNStrideS_Border_fp+0x7c0>
1c00ebae:	41c808b3          	sub	a7,a6,t3
1c00ebb2:	0886                	slli	a7,a7,0x1
1c00ebb4:	8562                	mv	a0,s8
1c00ebb6:	4701                	li	a4,0
1c00ebb8:	85ce                	mv	a1,s3
1c00ebba:	00f5c07b          	lp.setup	x0,a1,1c00ebd8 <KerAvgPoolNxNStrideS_Border_fp+0x77e>
1c00ebbe:	010e7c63          	bleu	a6,t3,1c00ebd6 <KerAvgPoolNxNStrideS_Border_fp+0x77c>
1c00ebc2:	ffe88793          	addi	a5,a7,-2
1c00ebc6:	8385                	srli	a5,a5,0x1
1c00ebc8:	8faa                	mv	t6,a0
1c00ebca:	0785                	addi	a5,a5,1
1c00ebcc:	0047c0fb          	lp.setup	x1,a5,1c00ebd4 <KerAvgPoolNxNStrideS_Border_fp+0x77a>
1c00ebd0:	002f928b          	p.lh	t0,2(t6!)
1c00ebd4:	9716                	add	a4,a4,t0
1c00ebd6:	951e                	add	a0,a0,t2
1c00ebd8:	0001                	nop
1c00ebda:	03e707b3          	mul	a5,a4,t5
1c00ebde:	2007e7db          	p.mac.zh.zl	a5,a5,zero,a6
1c00ebe2:	150797b3          	p.clip	a5,a5,16
1c00ebe6:	04fee7b3          	p.max	a5,t4,a5
1c00ebea:	00f9112b          	p.sh	a5,2(s2!)
1c00ebee:	406484b3          	sub	s1,s1,t1
1c00ebf2:	406e0e33          	sub	t3,t3,t1
1c00ebf6:	fb2b98e3          	bne	s7,s2,1c00eba6 <KerAvgPoolNxNStrideS_Border_fp+0x74c>
1c00ebfa:	55f2                	lw	a1,60(sp)
1c00ebfc:	4762                	lw	a4,24(sp)
1c00ebfe:	0d85                	addi	s11,s11,1
1c00ec00:	40640433          	sub	s0,s0,t1
1c00ec04:	9bae                	add	s7,s7,a1
1c00ec06:	9c3a                	add	s8,s8,a4
1c00ec08:	f96d98e3          	bne	s11,s6,1c00eb98 <KerAvgPoolNxNStrideS_Border_fp+0x73e>
1c00ec0c:	4432                	lw	s0,12(sp)
1c00ec0e:	4fa6                	lw	t6,72(sp)
1c00ec10:	d00f9ae3          	bnez	t6,1c00e924 <KerAvgPoolNxNStrideS_Border_fp+0x4ca>
1c00ec14:	bbc9                	j	1c00e9e6 <KerAvgPoolNxNStrideS_Border_fp+0x58c>
1c00ec16:	4781                	li	a5,0
1c00ec18:	b34d                	j	1c00e9ba <KerAvgPoolNxNStrideS_Border_fp+0x560>
1c00ec1a:	4781                	li	a5,0
1c00ec1c:	b7c9                	j	1c00ebde <KerAvgPoolNxNStrideS_Border_fp+0x784>
1c00ec1e:	5792                	lw	a5,36(sp)
1c00ec20:	ec079ce3          	bnez	a5,1c00eaf8 <KerAvgPoolNxNStrideS_Border_fp+0x69e>
1c00ec24:	b9e9                	j	1c00e8fe <KerAvgPoolNxNStrideS_Border_fp+0x4a4>

1c00ec26 <KerMaxPool2x2Stride2_fp>:
1c00ec26:	7139                	addi	sp,sp,-64
1c00ec28:	4326                	lw	t1,72(sp)
1c00ec2a:	d652                	sw	s4,44(sp)
1c00ec2c:	4a36                	lw	s4,76(sp)
1c00ec2e:	dc26                	sw	s1,56(sp)
1c00ec30:	d25a                	sw	s6,36(sp)
1c00ec32:	cc66                	sw	s9,24(sp)
1c00ec34:	78037b57          	pv.extract.b	s6,t1,0
1c00ec38:	7a037cd7          	pv.extract.b	s9,t1,1
1c00ec3c:	781374d7          	pv.extract.b	s1,t1,2
1c00ec40:	7a137357          	pv.extract.b	t1,t1,3
1c00ec44:	d05e                	sw	s7,32(sp)
1c00ec46:	ca6a                	sw	s10,20(sp)
1c00ec48:	de22                	sw	s0,60(sp)
1c00ec4a:	da4a                	sw	s2,52(sp)
1c00ec4c:	d84e                	sw	s3,48(sp)
1c00ec4e:	d456                	sw	s5,40(sp)
1c00ec50:	ce62                	sw	s8,28(sp)
1c00ec52:	c86e                	sw	s11,16(sp)
1c00ec54:	c61a                	sw	t1,12(sp)
1c00ec56:	780a7d57          	pv.extract.b	s10,s4,0
1c00ec5a:	04015383          	lhu	t2,64(sp)
1c00ec5e:	04415b83          	lhu	s7,68(sp)
1c00ec62:	05015f03          	lhu	t5,80(sp)
1c00ec66:	781a7a57          	pv.extract.b	s4,s4,2
1c00ec6a:	040b0763          	beqz	s6,1c00ecb8 <KerMaxPool2x2Stride2_fp+0x92>
1c00ec6e:	0573f563          	bleu	s7,t2,1c00ecb8 <KerMaxPool2x2Stride2_fp+0x92>
1c00ec72:	00139e13          	slli	t3,t2,0x1
1c00ec76:	414e0fb3          	sub	t6,t3,s4
1c00ec7a:	00159313          	slli	t1,a1,0x1
1c00ec7e:	8e7e                	mv	t3,t6
1c00ec80:	82aa                	mv	t0,a0
1c00ec82:	0f85                	addi	t6,t6,1
1c00ec84:	00171913          	slli	s2,a4,0x1
1c00ec88:	842a                	mv	s0,a0
1c00ec8a:	426f82b3          	p.mac	t0,t6,t1
1c00ec8e:	8fb6                	mv	t6,a3
1c00ec90:	00259993          	slli	s3,a1,0x2
1c00ec94:	407b8eb3          	sub	t4,s7,t2
1c00ec98:	426e0433          	p.mac	s0,t3,t1
1c00ec9c:	42790fb3          	p.mac	t6,s2,t2
1c00eca0:	00aec0fb          	lp.setup	x1,t4,1c00ecb4 <KerMaxPool2x2Stride2_fp+0x8e>
1c00eca4:	1134730b          	p.lh	t1,s3(s0!)
1c00eca8:	1132fe0b          	p.lh	t3,s3(t0!)
1c00ecac:	04036333          	p.max	t1,t1,zero
1c00ecb0:	05c36333          	p.max	t1,t1,t3
1c00ecb4:	006fd92b          	p.sh	t1,s2(t6!)
1c00ecb8:	c8b1                	beqz	s1,1c00ed0c <KerMaxPool2x2Stride2_fp+0xe6>
1c00ecba:	00179293          	slli	t0,a5,0x1
1c00ecbe:	41a28fb3          	sub	t6,t0,s10
1c00ecc2:	40f80333          	sub	t1,a6,a5
1c00ecc6:	0f86                	slli	t6,t6,0x1
1c00ecc8:	02030863          	beqz	t1,1c00ecf8 <KerMaxPool2x2Stride2_fp+0xd2>
1c00eccc:	00231e93          	slli	t4,t1,0x2
1c00ecd0:	1ef1                	addi	t4,t4,-4
1c00ecd2:	002ede93          	srli	t4,t4,0x2
1c00ecd6:	92b6                	add	t0,t0,a3
1c00ecd8:	9faa                	add	t6,t6,a0
1c00ecda:	0e85                	addi	t4,t4,1
1c00ecdc:	00cec0fb          	lp.setup	x1,t4,1c00ecf4 <KerMaxPool2x2Stride2_fp+0xce>
1c00ece0:	004fa30b          	p.lw	t1,4(t6!)
1c00ece4:	30036357          	pv.max.sci.h	t1,t1,0
1c00ece8:	78036e57          	pv.extract.h	t3,t1,0
1c00ecec:	7a036357          	pv.extract.h	t1,t1,1
1c00ecf0:	046e6333          	p.max	t1,t3,t1
1c00ecf4:	0062912b          	p.sh	t1,2(t0!)
1c00ecf8:	000b0863          	beqz	s6,1c00ed08 <KerMaxPool2x2Stride2_fp+0xe2>
1c00ecfc:	00051303          	lh	t1,0(a0)
1c00ed00:	04036333          	p.max	t1,t1,zero
1c00ed04:	00669023          	sh	t1,0(a3)
1c00ed08:	240c9163          	bnez	s9,1c00ef4a <KerMaxPool2x2Stride2_fp+0x324>
1c00ed0c:	1a0f0c63          	beqz	t5,1c00eec4 <KerMaxPool2x2Stride2_fp+0x29e>
1c00ed10:	0f73f963          	bleu	s7,t2,1c00ee02 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00ed14:	00179413          	slli	s0,a5,0x1
1c00ed18:	40f80c33          	sub	s8,a6,a5
1c00ed1c:	41a40433          	sub	s0,s0,s10
1c00ed20:	060c0c63          	beqz	s8,1c00ed98 <KerMaxPool2x2Stride2_fp+0x172>
1c00ed24:	00139313          	slli	t1,t2,0x1
1c00ed28:	41430e33          	sub	t3,t1,s4
1c00ed2c:	8372                	mv	t1,t3
1c00ed2e:	8922                	mv	s2,s0
1c00ed30:	0e05                	addi	t3,t3,1
1c00ed32:	84be                	mv	s1,a5
1c00ed34:	42b30933          	p.mac	s2,t1,a1
1c00ed38:	00259a93          	slli	s5,a1,0x2
1c00ed3c:	00171d93          	slli	s11,a4,0x1
1c00ed40:	0c0a                	slli	s8,s8,0x2
1c00ed42:	407b89b3          	sub	s3,s7,t2
1c00ed46:	42be0433          	p.mac	s0,t3,a1
1c00ed4a:	0906                	slli	s2,s2,0x1
1c00ed4c:	992a                	add	s2,s2,a0
1c00ed4e:	427704b3          	p.mac	s1,a4,t2
1c00ed52:	0406                	slli	s0,s0,0x1
1c00ed54:	942a                	add	s0,s0,a0
1c00ed56:	0486                	slli	s1,s1,0x1
1c00ed58:	94b6                	add	s1,s1,a3
1c00ed5a:	01e9c07b          	lp.setup	x0,s3,1c00ed96 <KerMaxPool2x2Stride2_fp+0x170>
1c00ed5e:	ffcc0e13          	addi	t3,s8,-4
1c00ed62:	002e5e13          	srli	t3,t3,0x2
1c00ed66:	8fa6                	mv	t6,s1
1c00ed68:	8f22                	mv	t5,s0
1c00ed6a:	8eca                	mv	t4,s2
1c00ed6c:	0e05                	addi	t3,t3,1
1c00ed6e:	010e40fb          	lp.setup	x1,t3,1c00ed8e <KerMaxPool2x2Stride2_fp+0x168>
1c00ed72:	004f230b          	p.lw	t1,4(t5!) # 10004 <__L1Cl+0x4>
1c00ed76:	004ea28b          	p.lw	t0,4(t4!)
1c00ed7a:	306282d7          	pv.max.h	t0,t0,t1
1c00ed7e:	7802e357          	pv.extract.h	t1,t0,0
1c00ed82:	7a02e2d7          	pv.extract.h	t0,t0,1
1c00ed86:	04536333          	p.max	t1,t1,t0
1c00ed8a:	04036333          	p.max	t1,t1,zero
1c00ed8e:	006f912b          	p.sh	t1,2(t6!)
1c00ed92:	9956                	add	s2,s2,s5
1c00ed94:	9456                	add	s0,s0,s5
1c00ed96:	94ee                	add	s1,s1,s11
1c00ed98:	060c8563          	beqz	s9,1c00ee02 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00ed9c:	00139313          	slli	t1,t2,0x1
1c00eda0:	80000eb7          	lui	t4,0x80000
1c00eda4:	fffece93          	not	t4,t4
1c00eda8:	00130e13          	addi	t3,t1,1
1c00edac:	0309                	addi	t1,t1,2
1c00edae:	414e0e33          	sub	t3,t3,s4
1c00edb2:	8476                	mv	s0,t4
1c00edb4:	41430a33          	sub	s4,t1,s4
1c00edb8:	8f76                	mv	t5,t4
1c00edba:	00138313          	addi	t1,t2,1
1c00edbe:	42be0433          	p.mac	s0,t3,a1
1c00edc2:	00259293          	slli	t0,a1,0x2
1c00edc6:	00171f93          	slli	t6,a4,0x1
1c00edca:	407b83b3          	sub	t2,s7,t2
1c00edce:	42ba0f33          	p.mac	t5,s4,a1
1c00edd2:	0406                	slli	s0,s0,0x1
1c00edd4:	942a                	add	s0,s0,a0
1c00edd6:	42e30eb3          	p.mac	t4,t1,a4
1c00edda:	0f06                	slli	t5,t5,0x1
1c00eddc:	9f2a                	add	t5,t5,a0
1c00edde:	0e86                	slli	t4,t4,0x1
1c00ede0:	9eb6                	add	t4,t4,a3
1c00ede2:	186be563          	bltu	s7,t1,1c00ef6c <KerMaxPool2x2Stride2_fp+0x346>
1c00ede6:	180b8363          	beqz	s7,1c00ef6c <KerMaxPool2x2Stride2_fp+0x346>
1c00edea:	00a3c0fb          	lp.setup	x1,t2,1c00edfe <KerMaxPool2x2Stride2_fp+0x1d8>
1c00edee:	1054730b          	p.lh	t1,t0(s0!)
1c00edf2:	105f7e0b          	p.lh	t3,t0(t5!)
1c00edf6:	04036333          	p.max	t1,t1,zero
1c00edfa:	05c36333          	p.max	t1,t1,t3
1c00edfe:	006edfab          	p.sh	t1,t6(t4!)
1c00ee02:	4332                	lw	t1,12(sp)
1c00ee04:	0a030263          	beqz	t1,1c00eea8 <KerMaxPool2x2Stride2_fp+0x282>
1c00ee08:	167d                	addi	a2,a2,-1
1c00ee0a:	02b60633          	mul	a2,a2,a1
1c00ee0e:	00179e13          	slli	t3,a5,0x1
1c00ee12:	40f80833          	sub	a6,a6,a5
1c00ee16:	9e32                	add	t3,t3,a2
1c00ee18:	41ae0d33          	sub	s10,t3,s10
1c00ee1c:	0d06                	slli	s10,s10,0x1
1c00ee1e:	02080f63          	beqz	a6,1c00ee5c <KerMaxPool2x2Stride2_fp+0x236>
1c00ee22:	fff88313          	addi	t1,a7,-1
1c00ee26:	42e307b3          	p.mac	a5,t1,a4
1c00ee2a:	080a                	slli	a6,a6,0x2
1c00ee2c:	ffc80313          	addi	t1,a6,-4
1c00ee30:	00235313          	srli	t1,t1,0x2
1c00ee34:	01a50e33          	add	t3,a0,s10
1c00ee38:	0305                	addi	t1,t1,1
1c00ee3a:	00179e93          	slli	t4,a5,0x1
1c00ee3e:	9eb6                	add	t4,t4,a3
1c00ee40:	00c340fb          	lp.setup	x1,t1,1c00ee58 <KerMaxPool2x2Stride2_fp+0x232>
1c00ee44:	004e278b          	p.lw	a5,4(t3!)
1c00ee48:	3007e7d7          	pv.max.sci.h	a5,a5,0
1c00ee4c:	7807e857          	pv.extract.h	a6,a5,0
1c00ee50:	7a07e7d7          	pv.extract.h	a5,a5,1
1c00ee54:	04f867b3          	p.max	a5,a6,a5
1c00ee58:	00fe912b          	p.sh	a5,2(t4!) # 80000002 <pulp__FC+0x80000003>
1c00ee5c:	020b0063          	beqz	s6,1c00ee7c <KerMaxPool2x2Stride2_fp+0x256>
1c00ee60:	fff88793          	addi	a5,a7,-1
1c00ee64:	02e787b3          	mul	a5,a5,a4
1c00ee68:	00161813          	slli	a6,a2,0x1
1c00ee6c:	982a                	add	a6,a6,a0
1c00ee6e:	00081803          	lh	a6,0(a6)
1c00ee72:	04086833          	p.max	a6,a6,zero
1c00ee76:	0786                	slli	a5,a5,0x1
1c00ee78:	0106d7a3          	p.sh	a6,a5(a3)
1c00ee7c:	020c8663          	beqz	s9,1c00eea8 <KerMaxPool2x2Stride2_fp+0x282>
1c00ee80:	800007b7          	lui	a5,0x80000
1c00ee84:	fff7c813          	not	a6,a5
1c00ee88:	87c2                	mv	a5,a6
1c00ee8a:	431707b3          	p.mac	a5,a4,a7
1c00ee8e:	873e                	mv	a4,a5
1c00ee90:	00c587b3          	add	a5,a1,a2
1c00ee94:	97c2                	add	a5,a5,a6
1c00ee96:	0786                	slli	a5,a5,0x1
1c00ee98:	953e                	add	a0,a0,a5
1c00ee9a:	00051783          	lh	a5,0(a0)
1c00ee9e:	0706                	slli	a4,a4,0x1
1c00eea0:	0407e7b3          	p.max	a5,a5,zero
1c00eea4:	00f6d723          	p.sh	a5,a4(a3)
1c00eea8:	5472                	lw	s0,60(sp)
1c00eeaa:	54e2                	lw	s1,56(sp)
1c00eeac:	5952                	lw	s2,52(sp)
1c00eeae:	59c2                	lw	s3,48(sp)
1c00eeb0:	5a32                	lw	s4,44(sp)
1c00eeb2:	5aa2                	lw	s5,40(sp)
1c00eeb4:	5b12                	lw	s6,36(sp)
1c00eeb6:	5b82                	lw	s7,32(sp)
1c00eeb8:	4c72                	lw	s8,28(sp)
1c00eeba:	4ce2                	lw	s9,24(sp)
1c00eebc:	4d52                	lw	s10,20(sp)
1c00eebe:	4dc2                	lw	s11,16(sp)
1c00eec0:	6121                	addi	sp,sp,64
1c00eec2:	8082                	ret
1c00eec4:	f373ffe3          	bleu	s7,t2,1c00ee02 <KerMaxPool2x2Stride2_fp+0x1dc>
1c00eec8:	00179413          	slli	s0,a5,0x1
1c00eecc:	40f80c33          	sub	s8,a6,a5
1c00eed0:	41a40433          	sub	s0,s0,s10
1c00eed4:	ec0c02e3          	beqz	s8,1c00ed98 <KerMaxPool2x2Stride2_fp+0x172>
1c00eed8:	00139313          	slli	t1,t2,0x1
1c00eedc:	41430e33          	sub	t3,t1,s4
1c00eee0:	8372                	mv	t1,t3
1c00eee2:	8922                	mv	s2,s0
1c00eee4:	0e05                	addi	t3,t3,1
1c00eee6:	84be                	mv	s1,a5
1c00eee8:	42b30933          	p.mac	s2,t1,a1
1c00eeec:	00259a93          	slli	s5,a1,0x2
1c00eef0:	00171d93          	slli	s11,a4,0x1
1c00eef4:	0c0a                	slli	s8,s8,0x2
1c00eef6:	407b89b3          	sub	s3,s7,t2
1c00eefa:	42be0433          	p.mac	s0,t3,a1
1c00eefe:	0906                	slli	s2,s2,0x1
1c00ef00:	992a                	add	s2,s2,a0
1c00ef02:	427704b3          	p.mac	s1,a4,t2
1c00ef06:	0406                	slli	s0,s0,0x1
1c00ef08:	942a                	add	s0,s0,a0
1c00ef0a:	0486                	slli	s1,s1,0x1
1c00ef0c:	94b6                	add	s1,s1,a3
1c00ef0e:	01c9c07b          	lp.setup	x0,s3,1c00ef46 <KerMaxPool2x2Stride2_fp+0x320>
1c00ef12:	ffcc0e13          	addi	t3,s8,-4
1c00ef16:	002e5e13          	srli	t3,t3,0x2
1c00ef1a:	8fa6                	mv	t6,s1
1c00ef1c:	8f22                	mv	t5,s0
1c00ef1e:	8eca                	mv	t4,s2
1c00ef20:	0e05                	addi	t3,t3,1
1c00ef22:	00ee40fb          	lp.setup	x1,t3,1c00ef3e <KerMaxPool2x2Stride2_fp+0x318>
1c00ef26:	004f228b          	p.lw	t0,4(t5!)
1c00ef2a:	004ea30b          	p.lw	t1,4(t4!)
1c00ef2e:	30530357          	pv.max.h	t1,t1,t0
1c00ef32:	780362d7          	pv.extract.h	t0,t1,0
1c00ef36:	7a036357          	pv.extract.h	t1,t1,1
1c00ef3a:	0462e333          	p.max	t1,t0,t1
1c00ef3e:	006f912b          	p.sh	t1,2(t6!)
1c00ef42:	9956                	add	s2,s2,s5
1c00ef44:	9456                	add	s0,s0,s5
1c00ef46:	94ee                	add	s1,s1,s11
1c00ef48:	bd81                	j	1c00ed98 <KerMaxPool2x2Stride2_fp+0x172>
1c00ef4a:	80000337          	lui	t1,0x80000
1c00ef4e:	fff34313          	not	t1,t1
1c00ef52:	00658e33          	add	t3,a1,t1
1c00ef56:	0e06                	slli	t3,t3,0x1
1c00ef58:	9e2a                	add	t3,t3,a0
1c00ef5a:	000e1e03          	lh	t3,0(t3)
1c00ef5e:	933a                	add	t1,t1,a4
1c00ef60:	0306                	slli	t1,t1,0x1
1c00ef62:	040e6e33          	p.max	t3,t3,zero
1c00ef66:	01c6d323          	p.sh	t3,t1(a3)
1c00ef6a:	b34d                	j	1c00ed0c <KerMaxPool2x2Stride2_fp+0xe6>
1c00ef6c:	4385                	li	t2,1
1c00ef6e:	bdb5                	j	1c00edea <KerMaxPool2x2Stride2_fp+0x1c4>

1c00ef70 <KerAvgPool2x2Stride2_fp>:
1c00ef70:	715d                	addi	sp,sp,-80
1c00ef72:	4366                	lw	t1,88(sp)
1c00ef74:	da5a                	sw	s6,52(sp)
1c00ef76:	06015f83          	lhu	t6,96(sp)
1c00ef7a:	4b76                	lw	s6,92(sp)
1c00ef7c:	d85e                	sw	s7,48(sp)
1c00ef7e:	d06e                	sw	s11,32(sp)
1c00ef80:	78037bd7          	pv.extract.b	s7,t1,0
1c00ef84:	7a037dd7          	pv.extract.b	s11,t1,1
1c00ef88:	78137f57          	pv.extract.b	t5,t1,2
1c00ef8c:	7a137357          	pv.extract.b	t1,t1,3
1c00ef90:	001fbf93          	seqz	t6,t6
1c00ef94:	ca1a                	sw	t1,20(sp)
1c00ef96:	780b7357          	pv.extract.b	t1,s6,0
1c00ef9a:	c2ca                	sw	s2,68(sp)
1c00ef9c:	d662                	sw	s8,44(sp)
1c00ef9e:	41f00fb3          	neg	t6,t6
1c00efa2:	c6a2                	sw	s0,76(sp)
1c00efa4:	c4a6                	sw	s1,72(sp)
1c00efa6:	c0ce                	sw	s3,64(sp)
1c00efa8:	de52                	sw	s4,60(sp)
1c00efaa:	dc56                	sw	s5,56(sp)
1c00efac:	d466                	sw	s9,40(sp)
1c00efae:	d26a                	sw	s10,36(sp)
1c00efb0:	ce32                	sw	a2,28(sp)
1c00efb2:	cc46                	sw	a7,24(sp)
1c00efb4:	c61a                	sw	t1,12(sp)
1c00efb6:	05015903          	lhu	s2,80(sp)
1c00efba:	05415c03          	lhu	s8,84(sp)
1c00efbe:	781b7b57          	pv.extract.b	s6,s6,2
1c00efc2:	fc0fbfb3          	p.bclr	t6,t6,30,0
1c00efc6:	260b8263          	beqz	s7,1c00f22a <KerAvgPool2x2Stride2_fp+0x2ba>
1c00efca:	27897063          	bleu	s8,s2,1c00f22a <KerAvgPool2x2Stride2_fp+0x2ba>
1c00efce:	00191d13          	slli	s10,s2,0x1
1c00efd2:	416d0333          	sub	t1,s10,s6
1c00efd6:	889a                	mv	a7,t1
1c00efd8:	00159613          	slli	a2,a1,0x1
1c00efdc:	0305                	addi	t1,t1,1
1c00efde:	8e2a                	mv	t3,a0
1c00efe0:	00171a93          	slli	s5,a4,0x1
1c00efe4:	42c30e33          	p.mac	t3,t1,a2
1c00efe8:	8336                	mv	t1,a3
1c00efea:	8eaa                	mv	t4,a0
1c00efec:	00259993          	slli	s3,a1,0x2
1c00eff0:	432a8333          	p.mac	t1,s5,s2
1c00eff4:	42c88eb3          	p.mac	t4,a7,a2
1c00eff8:	412c08b3          	sub	a7,s8,s2
1c00effc:	00a8c0fb          	lp.setup	x1,a7,1c00f010 <KerAvgPool2x2Stride2_fp+0xa0>
1c00f000:	113ef60b          	p.lh	a2,s3(t4!)
1c00f004:	113e728b          	p.lh	t0,s3(t3!)
1c00f008:	0456265b          	p.addn	a2,a2,t0,2
1c00f00c:	04cfe633          	p.max	a2,t6,a2
1c00f010:	00c35aab          	p.sh	a2,s5(t1!)
1c00f014:	060f0263          	beqz	t5,1c00f078 <KerAvgPool2x2Stride2_fp+0x108>
1c00f018:	4632                	lw	a2,12(sp)
1c00f01a:	00179e13          	slli	t3,a5,0x1
1c00f01e:	40ce08b3          	sub	a7,t3,a2
1c00f022:	40f80633          	sub	a2,a6,a5
1c00f026:	00189313          	slli	t1,a7,0x1
1c00f02a:	c605                	beqz	a2,1c00f052 <KerAvgPool2x2Stride2_fp+0xe2>
1c00f02c:	00261893          	slli	a7,a2,0x2
1c00f030:	18f1                	addi	a7,a7,-4
1c00f032:	0028d893          	srli	a7,a7,0x2
1c00f036:	9e36                	add	t3,t3,a3
1c00f038:	932a                	add	t1,t1,a0
1c00f03a:	0885                	addi	a7,a7,1
1c00f03c:	0098c0fb          	lp.setup	x1,a7,1c00f04e <KerAvgPool2x2Stride2_fp+0xde>
1c00f040:	0043260b          	p.lw	a2,4(t1!) # 80000004 <pulp__FC+0x80000005>
1c00f044:	9a066657          	pv.dotsp.sci.h	a2,a2,1
1c00f048:	8609                	srai	a2,a2,0x2
1c00f04a:	04cfe633          	p.max	a2,t6,a2
1c00f04e:	00ce112b          	p.sh	a2,2(t3!)
1c00f052:	000b8963          	beqz	s7,1c00f064 <KerAvgPool2x2Stride2_fp+0xf4>
1c00f056:	00051603          	lh	a2,0(a0)
1c00f05a:	8609                	srai	a2,a2,0x2
1c00f05c:	05f66633          	p.max	a2,a2,t6
1c00f060:	00c69023          	sh	a2,0(a3)
1c00f064:	1e0d9163          	bnez	s11,1c00f246 <KerAvgPool2x2Stride2_fp+0x2d6>
1c00f068:	0f897b63          	bleu	s8,s2,1c00f15e <KerAvgPool2x2Stride2_fp+0x1ee>
1c00f06c:	00171a93          	slli	s5,a4,0x1
1c00f070:	00259993          	slli	s3,a1,0x2
1c00f074:	00191d13          	slli	s10,s2,0x1
1c00f078:	001d0613          	addi	a2,s10,1
1c00f07c:	41660633          	sub	a2,a2,s6
1c00f080:	02b60633          	mul	a2,a2,a1
1c00f084:	4e32                	lw	t3,12(sp)
1c00f086:	00179893          	slli	a7,a5,0x1
1c00f08a:	416d0333          	sub	t1,s10,s6
1c00f08e:	41c888b3          	sub	a7,a7,t3
1c00f092:	8446                	mv	s0,a7
1c00f094:	83be                	mv	t2,a5
1c00f096:	40f80a33          	sub	s4,a6,a5
1c00f09a:	002a1c93          	slli	s9,s4,0x2
1c00f09e:	412c04b3          	sub	s1,s8,s2
1c00f0a2:	42b30433          	p.mac	s0,t1,a1
1c00f0a6:	c832                	sw	a2,16(sp)
1c00f0a8:	4342                	lw	t1,16(sp)
1c00f0aa:	00190613          	addi	a2,s2,1
1c00f0ae:	006882b3          	add	t0,a7,t1
1c00f0b2:	0286                	slli	t0,t0,0x1
1c00f0b4:	92aa                	add	t0,t0,a0
1c00f0b6:	432703b3          	p.mac	t2,a4,s2
1c00f0ba:	0406                	slli	s0,s0,0x1
1c00f0bc:	942a                	add	s0,s0,a0
1c00f0be:	0386                	slli	t2,t2,0x1
1c00f0c0:	93b6                	add	t2,t2,a3
1c00f0c2:	1acc6763          	bltu	s8,a2,1c00f270 <KerAvgPool2x2Stride2_fp+0x300>
1c00f0c6:	1a0c0563          	beqz	s8,1c00f270 <KerAvgPool2x2Stride2_fp+0x300>
1c00f0ca:	01d4c07b          	lp.setup	x0,s1,1c00f104 <KerAvgPool2x2Stride2_fp+0x194>
1c00f0ce:	020a0963          	beqz	s4,1c00f100 <KerAvgPool2x2Stride2_fp+0x190>
1c00f0d2:	ffcc8893          	addi	a7,s9,-4
1c00f0d6:	0028d893          	srli	a7,a7,0x2
1c00f0da:	8e9e                	mv	t4,t2
1c00f0dc:	8e16                	mv	t3,t0
1c00f0de:	8322                	mv	t1,s0
1c00f0e0:	0885                	addi	a7,a7,1
1c00f0e2:	00d8c0fb          	lp.setup	x1,a7,1c00f0fc <KerAvgPool2x2Stride2_fp+0x18c>
1c00f0e6:	0043260b          	p.lw	a2,4(t1!)
1c00f0ea:	004e2f0b          	p.lw	t5,4(t3!)
1c00f0ee:	9a066657          	pv.dotsp.sci.h	a2,a2,1
1c00f0f2:	ba0f6657          	pv.sdotsp.sci.h	a2,t5,1
1c00f0f6:	8609                	srai	a2,a2,0x2
1c00f0f8:	04cfe633          	p.max	a2,t6,a2
1c00f0fc:	00ce912b          	p.sh	a2,2(t4!)
1c00f100:	944e                	add	s0,s0,s3
1c00f102:	92ce                	add	t0,t0,s3
1c00f104:	93d6                	add	t2,t2,s5
1c00f106:	040d8c63          	beqz	s11,1c00f15e <KerAvgPool2x2Stride2_fp+0x1ee>
1c00f10a:	4342                	lw	t1,16(sp)
1c00f10c:	80000637          	lui	a2,0x80000
1c00f110:	fff64613          	not	a2,a2
1c00f114:	0d09                	addi	s10,s10,2
1c00f116:	00190893          	addi	a7,s2,1
1c00f11a:	8eb2                	mv	t4,a2
1c00f11c:	416d0b33          	sub	s6,s10,s6
1c00f120:	00c30e33          	add	t3,t1,a2
1c00f124:	42bb0eb3          	p.mac	t4,s6,a1
1c00f128:	0e06                	slli	t3,t3,0x1
1c00f12a:	9e2a                	add	t3,t3,a0
1c00f12c:	412c0933          	sub	s2,s8,s2
1c00f130:	42e88633          	p.mac	a2,a7,a4
1c00f134:	0e86                	slli	t4,t4,0x1
1c00f136:	9eaa                	add	t4,t4,a0
1c00f138:	00161313          	slli	t1,a2,0x1
1c00f13c:	9336                	add	t1,t1,a3
1c00f13e:	131c6763          	bltu	s8,a7,1c00f26c <KerAvgPool2x2Stride2_fp+0x2fc>
1c00f142:	120c0563          	beqz	s8,1c00f26c <KerAvgPool2x2Stride2_fp+0x2fc>
1c00f146:	00a940fb          	lp.setup	x1,s2,1c00f15a <KerAvgPool2x2Stride2_fp+0x1ea>
1c00f14a:	113e760b          	p.lh	a2,s3(t3!)
1c00f14e:	113ef88b          	p.lh	a7,s3(t4!)
1c00f152:	0516265b          	p.addn	a2,a2,a7,2
1c00f156:	04cfe633          	p.max	a2,t6,a2
1c00f15a:	00c35aab          	p.sh	a2,s5(t1!)
1c00f15e:	4652                	lw	a2,20(sp)
1c00f160:	c65d                	beqz	a2,1c00f20e <KerAvgPool2x2Stride2_fp+0x29e>
1c00f162:	4e72                	lw	t3,28(sp)
1c00f164:	4332                	lw	t1,12(sp)
1c00f166:	00179613          	slli	a2,a5,0x1
1c00f16a:	fffe0893          	addi	a7,t3,-1
1c00f16e:	02b888b3          	mul	a7,a7,a1
1c00f172:	40f80833          	sub	a6,a6,a5
1c00f176:	9646                	add	a2,a2,a7
1c00f178:	40660633          	sub	a2,a2,t1
1c00f17c:	00161313          	slli	t1,a2,0x1
1c00f180:	02080c63          	beqz	a6,1c00f1b8 <KerAvgPool2x2Stride2_fp+0x248>
1c00f184:	4e62                	lw	t3,24(sp)
1c00f186:	fffe0613          	addi	a2,t3,-1
1c00f18a:	42e607b3          	p.mac	a5,a2,a4
1c00f18e:	00281613          	slli	a2,a6,0x2
1c00f192:	1671                	addi	a2,a2,-4
1c00f194:	8209                	srli	a2,a2,0x2
1c00f196:	00650833          	add	a6,a0,t1
1c00f19a:	0605                	addi	a2,a2,1
1c00f19c:	00179313          	slli	t1,a5,0x1
1c00f1a0:	9336                	add	t1,t1,a3
1c00f1a2:	009640fb          	lp.setup	x1,a2,1c00f1b4 <KerAvgPool2x2Stride2_fp+0x244>
1c00f1a6:	0048278b          	p.lw	a5,4(a6!)
1c00f1aa:	9a07e7d7          	pv.dotsp.sci.h	a5,a5,1
1c00f1ae:	8789                	srai	a5,a5,0x2
1c00f1b0:	04ffe7b3          	p.max	a5,t6,a5
1c00f1b4:	00f3112b          	p.sh	a5,2(t1!)
1c00f1b8:	020b8263          	beqz	s7,1c00f1dc <KerAvgPool2x2Stride2_fp+0x26c>
1c00f1bc:	4362                	lw	t1,24(sp)
1c00f1be:	00189793          	slli	a5,a7,0x1
1c00f1c2:	97aa                	add	a5,a5,a0
1c00f1c4:	fff30613          	addi	a2,t1,-1
1c00f1c8:	02e60633          	mul	a2,a2,a4
1c00f1cc:	00079783          	lh	a5,0(a5) # 80000000 <pulp__FC+0x80000001>
1c00f1d0:	8789                	srai	a5,a5,0x2
1c00f1d2:	04ffe7b3          	p.max	a5,t6,a5
1c00f1d6:	0606                	slli	a2,a2,0x1
1c00f1d8:	00f6d623          	p.sh	a5,a2(a3)
1c00f1dc:	020d8963          	beqz	s11,1c00f20e <KerAvgPool2x2Stride2_fp+0x29e>
1c00f1e0:	800007b7          	lui	a5,0x80000
1c00f1e4:	4862                	lw	a6,24(sp)
1c00f1e6:	fff7c613          	not	a2,a5
1c00f1ea:	87b2                	mv	a5,a2
1c00f1ec:	430707b3          	p.mac	a5,a4,a6
1c00f1f0:	873e                	mv	a4,a5
1c00f1f2:	011587b3          	add	a5,a1,a7
1c00f1f6:	97b2                	add	a5,a5,a2
1c00f1f8:	0786                	slli	a5,a5,0x1
1c00f1fa:	953e                	add	a0,a0,a5
1c00f1fc:	00051783          	lh	a5,0(a0)
1c00f200:	8789                	srai	a5,a5,0x2
1c00f202:	04ffefb3          	p.max	t6,t6,a5
1c00f206:	00171793          	slli	a5,a4,0x1
1c00f20a:	01f6d7a3          	p.sh	t6,a5(a3)
1c00f20e:	4436                	lw	s0,76(sp)
1c00f210:	44a6                	lw	s1,72(sp)
1c00f212:	4916                	lw	s2,68(sp)
1c00f214:	4986                	lw	s3,64(sp)
1c00f216:	5a72                	lw	s4,60(sp)
1c00f218:	5ae2                	lw	s5,56(sp)
1c00f21a:	5b52                	lw	s6,52(sp)
1c00f21c:	5bc2                	lw	s7,48(sp)
1c00f21e:	5c32                	lw	s8,44(sp)
1c00f220:	5ca2                	lw	s9,40(sp)
1c00f222:	5d12                	lw	s10,36(sp)
1c00f224:	5d82                	lw	s11,32(sp)
1c00f226:	6161                	addi	sp,sp,80
1c00f228:	8082                	ret
1c00f22a:	e20f0fe3          	beqz	t5,1c00f068 <KerAvgPool2x2Stride2_fp+0xf8>
1c00f22e:	4632                	lw	a2,12(sp)
1c00f230:	00179e13          	slli	t3,a5,0x1
1c00f234:	40ce08b3          	sub	a7,t3,a2
1c00f238:	40f80633          	sub	a2,a6,a5
1c00f23c:	00189313          	slli	t1,a7,0x1
1c00f240:	de0616e3          	bnez	a2,1c00f02c <KerAvgPool2x2Stride2_fp+0xbc>
1c00f244:	b539                	j	1c00f052 <KerAvgPool2x2Stride2_fp+0xe2>
1c00f246:	80000637          	lui	a2,0x80000
1c00f24a:	fff64613          	not	a2,a2
1c00f24e:	00c588b3          	add	a7,a1,a2
1c00f252:	0886                	slli	a7,a7,0x1
1c00f254:	98aa                	add	a7,a7,a0
1c00f256:	00089883          	lh	a7,0(a7)
1c00f25a:	963a                	add	a2,a2,a4
1c00f25c:	0606                	slli	a2,a2,0x1
1c00f25e:	4028d893          	srai	a7,a7,0x2
1c00f262:	05f8e8b3          	p.max	a7,a7,t6
1c00f266:	0116d623          	p.sh	a7,a2(a3)
1c00f26a:	bbfd                	j	1c00f068 <KerAvgPool2x2Stride2_fp+0xf8>
1c00f26c:	4905                	li	s2,1
1c00f26e:	bde1                	j	1c00f146 <KerAvgPool2x2Stride2_fp+0x1d6>
1c00f270:	4485                	li	s1,1
1c00f272:	bda1                	j	1c00f0ca <KerAvgPool2x2Stride2_fp+0x15a>

1c00f274 <KerMaxPoolNxNStrideS_Body_fp.isra.5>:
1c00f274:	7139                	addi	sp,sp,-64
1c00f276:	4286                	lw	t0,64(sp)
1c00f278:	dc26                	sw	s1,56(sp)
1c00f27a:	da4a                	sw	s2,52(sp)
1c00f27c:	d456                	sw	s5,40(sp)
1c00f27e:	d05e                	sw	s7,32(sp)
1c00f280:	de22                	sw	s0,60(sp)
1c00f282:	d84e                	sw	s3,48(sp)
1c00f284:	d652                	sw	s4,44(sp)
1c00f286:	d25a                	sw	s6,36(sp)
1c00f288:	ce62                	sw	s8,28(sp)
1c00f28a:	cc66                	sw	s9,24(sp)
1c00f28c:	ca6a                	sw	s10,20(sp)
1c00f28e:	c86e                	sw	s11,16(sp)
1c00f290:	fc163e33          	p.bclr	t3,a2,30,1
1c00f294:	4ba6                	lw	s7,72(sp)
1c00f296:	44b6                	lw	s1,76(sp)
1c00f298:	4346                	lw	t1,80(sp)
1c00f29a:	4956                	lw	s2,84(sp)
1c00f29c:	8a96                	mv	s5,t0
1c00f29e:	160e0763          	beqz	t3,1c00f40c <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x198>
1c00f2a2:	fc16be33          	p.bclr	t3,a3,30,1
1c00f2a6:	160e0363          	beqz	t3,1c00f40c <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x198>
1c00f2aa:	4e16                	lw	t3,68(sp)
1c00f2ac:	15c2f263          	bleu	t3,t0,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f2b0:	4016da13          	srai	s4,a3,0x1
1c00f2b4:	40165f13          	srai	t5,a2,0x1
1c00f2b8:	129bfc63          	bleu	s1,s7,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f2bc:	02530433          	mul	s0,t1,t0
1c00f2c0:	800003b7          	lui	t2,0x80000
1c00f2c4:	fff3c393          	not	t2,t2
1c00f2c8:	40e383b3          	sub	t2,t2,a4
1c00f2cc:	fff7cb13          	not	s6,a5
1c00f2d0:	00181e13          	slli	t3,a6,0x1
1c00f2d4:	001f1f93          	slli	t6,t5,0x1
1c00f2d8:	40c00eb3          	neg	t4,a2
1c00f2dc:	40cf8fb3          	sub	t6,t6,a2
1c00f2e0:	00161c93          	slli	s9,a2,0x1
1c00f2e4:	026b8c33          	mul	s8,s7,t1
1c00f2e8:	40e40733          	sub	a4,s0,a4
1c00f2ec:	00189d13          	slli	s10,a7,0x1
1c00f2f0:	0e86                	slli	t4,t4,0x1
1c00f2f2:	0f86                	slli	t6,t6,0x1
1c00f2f4:	00131d93          	slli	s11,t1,0x1
1c00f2f8:	0e89                	addi	t4,t4,2
1c00f2fa:	0f89                	addi	t6,t6,2
1c00f2fc:	40fc09b3          	sub	s3,s8,a5
1c00f300:	008387b3          	add	a5,t2,s0
1c00f304:	83be                	mv	t2,a5
1c00f306:	00198293          	addi	t0,s3,1
1c00f30a:	97b2                	add	a5,a5,a2
1c00f30c:	9b62                	add	s6,s6,s8
1c00f30e:	430287b3          	p.mac	a5,t0,a6
1c00f312:	96da                	add	a3,a3,s6
1c00f314:	8456                	mv	s0,s5
1c00f316:	00281b13          	slli	s6,a6,0x2
1c00f31a:	430983b3          	p.mac	t2,s3,a6
1c00f31e:	0786                	slli	a5,a5,0x1
1c00f320:	97aa                	add	a5,a5,a0
1c00f322:	c03e                	sw	a5,0(sp)
1c00f324:	431b8433          	p.mac	s0,s7,a7
1c00f328:	961e                	add	a2,a2,t2
1c00f32a:	0606                	slli	a2,a2,0x1
1c00f32c:	962a                	add	a2,a2,a0
1c00f32e:	c232                	sw	a2,4(sp)
1c00f330:	43068733          	p.mac	a4,a3,a6
1c00f334:	00141893          	slli	a7,s0,0x1
1c00f338:	98ae                	add	a7,a7,a1
1c00f33a:	c446                	sw	a7,8(sp)
1c00f33c:	026e0e33          	mul	t3,t3,t1
1c00f340:	00171793          	slli	a5,a4,0x1
1c00f344:	97aa                	add	a5,a5,a0
1c00f346:	c63e                	sw	a5,12(sp)
1c00f348:	43b2                	lw	t2,12(sp)
1c00f34a:	4982                	lw	s3,0(sp)
1c00f34c:	4412                	lw	s0,4(sp)
1c00f34e:	4c22                	lw	s8,8(sp)
1c00f350:	82de                	mv	t0,s7
1c00f352:	86ca                	mv	a3,s2
1c00f354:	040a0b63          	beqz	s4,1c00f3aa <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x136>
1c00f358:	88ce                	mv	a7,s3
1c00f35a:	8822                	mv	a6,s0
1c00f35c:	86ca                	mv	a3,s2
1c00f35e:	8552                	mv	a0,s4
1c00f360:	0235407b          	lp.setup	x0,a0,1c00f3a6 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x132>
1c00f364:	020f0b63          	beqz	t5,1c00f39a <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x126>
1c00f368:	41df8733          	sub	a4,t6,t4
1c00f36c:	1771                	addi	a4,a4,-4
1c00f36e:	8309                	srli	a4,a4,0x2
1c00f370:	01d885b3          	add	a1,a7,t4
1c00f374:	01d80633          	add	a2,a6,t4
1c00f378:	0705                	addi	a4,a4,1
1c00f37a:	00e740fb          	lp.setup	x1,a4,1c00f396 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x122>
1c00f37e:	0045a30b          	p.lw	t1,4(a1!)
1c00f382:	0046278b          	p.lw	a5,4(a2!) # 80000004 <pulp__FC+0x80000005>
1c00f386:	306787d7          	pv.max.h	a5,a5,t1
1c00f38a:	7807e357          	pv.extract.h	t1,a5,0
1c00f38e:	7a07e7d7          	pv.extract.h	a5,a5,1
1c00f392:	04f367b3          	p.max	a5,t1,a5
1c00f396:	04f6e6b3          	p.max	a3,a3,a5
1c00f39a:	1168778b          	p.lh	a5,s6(a6!)
1c00f39e:	1168f70b          	p.lh	a4,s6(a7!)
1c00f3a2:	04f6e6b3          	p.max	a3,a3,a5
1c00f3a6:	04e6e6b3          	p.max	a3,a3,a4
1c00f3aa:	ffec8793          	addi	a5,s9,-2
1c00f3ae:	8385                	srli	a5,a5,0x1
1c00f3b0:	871e                	mv	a4,t2
1c00f3b2:	0785                	addi	a5,a5,1
1c00f3b4:	0047c0fb          	lp.setup	x1,a5,1c00f3bc <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x148>
1c00f3b8:	0027160b          	p.lh	a2,2(a4!)
1c00f3bc:	04c6e6b3          	p.max	a3,a3,a2
1c00f3c0:	00dc5d2b          	p.sh	a3,s10(s8!)
1c00f3c4:	0285                	addi	t0,t0,1
1c00f3c6:	9472                	add	s0,s0,t3
1c00f3c8:	99f2                	add	s3,s3,t3
1c00f3ca:	93f2                	add	t2,t2,t3
1c00f3cc:	f89293e3          	bne	t0,s1,1c00f352 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0xde>
1c00f3d0:	47a2                	lw	a5,8(sp)
1c00f3d2:	4412                	lw	s0,4(sp)
1c00f3d4:	0a85                	addi	s5,s5,1
1c00f3d6:	0789                	addi	a5,a5,2
1c00f3d8:	c43e                	sw	a5,8(sp)
1c00f3da:	4782                	lw	a5,0(sp)
1c00f3dc:	946e                	add	s0,s0,s11
1c00f3de:	c222                	sw	s0,4(sp)
1c00f3e0:	4432                	lw	s0,12(sp)
1c00f3e2:	97ee                	add	a5,a5,s11
1c00f3e4:	c03e                	sw	a5,0(sp)
1c00f3e6:	4796                	lw	a5,68(sp)
1c00f3e8:	946e                	add	s0,s0,s11
1c00f3ea:	c622                	sw	s0,12(sp)
1c00f3ec:	f4fa9ee3          	bne	s5,a5,1c00f348 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0xd4>
1c00f3f0:	5472                	lw	s0,60(sp)
1c00f3f2:	54e2                	lw	s1,56(sp)
1c00f3f4:	5952                	lw	s2,52(sp)
1c00f3f6:	59c2                	lw	s3,48(sp)
1c00f3f8:	5a32                	lw	s4,44(sp)
1c00f3fa:	5aa2                	lw	s5,40(sp)
1c00f3fc:	5b12                	lw	s6,36(sp)
1c00f3fe:	5b82                	lw	s7,32(sp)
1c00f400:	4c72                	lw	s8,28(sp)
1c00f402:	4ce2                	lw	s9,24(sp)
1c00f404:	4d52                	lw	s10,20(sp)
1c00f406:	4dc2                	lw	s11,16(sp)
1c00f408:	6121                	addi	sp,sp,64
1c00f40a:	8082                	ret
1c00f40c:	00d66e33          	or	t3,a2,a3
1c00f410:	fc1e3e33          	p.bclr	t3,t3,30,1
1c00f414:	080e0a63          	beqz	t3,1c00f4a8 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x234>
1c00f418:	4e16                	lw	t3,68(sp)
1c00f41a:	fdc2fbe3          	bleu	t3,t0,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f41e:	fc9bf9e3          	bleu	s1,s7,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f422:	02628b33          	mul	s6,t0,t1
1c00f426:	8472                	mv	s0,t3
1c00f428:	8c16                	mv	s8,t0
1c00f42a:	00181e93          	slli	t4,a6,0x1
1c00f42e:	00131f93          	slli	t6,t1,0x1
1c00f432:	00189393          	slli	t2,a7,0x1
1c00f436:	00161f13          	slli	t5,a2,0x1
1c00f43a:	026b8e33          	mul	t3,s7,t1
1c00f43e:	40eb0b33          	sub	s6,s6,a4
1c00f442:	40fe07b3          	sub	a5,t3,a5
1c00f446:	431b8c33          	p.mac	s8,s7,a7
1c00f44a:	43078b33          	p.mac	s6,a5,a6
1c00f44e:	0c06                	slli	s8,s8,0x1
1c00f450:	9c2e                	add	s8,s8,a1
1c00f452:	026e8333          	mul	t1,t4,t1
1c00f456:	0b06                	slli	s6,s6,0x1
1c00f458:	9b2a                	add	s6,s6,a0
1c00f45a:	8e5a                	mv	t3,s6
1c00f45c:	82e2                	mv	t0,s8
1c00f45e:	88de                	mv	a7,s7
1c00f460:	85ca                	mv	a1,s2
1c00f462:	c69d                	beqz	a3,1c00f490 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x21c>
1c00f464:	8872                	mv	a6,t3
1c00f466:	85ca                	mv	a1,s2
1c00f468:	89b6                	mv	s3,a3
1c00f46a:	0129c07b          	lp.setup	x0,s3,1c00f48e <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x21a>
1c00f46e:	01e807b3          	add	a5,a6,t5
1c00f472:	8742                	mv	a4,a6
1c00f474:	ce01                	beqz	a2,1c00f48c <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x218>
1c00f476:	410787b3          	sub	a5,a5,a6
1c00f47a:	17f9                	addi	a5,a5,-2
1c00f47c:	8385                	srli	a5,a5,0x1
1c00f47e:	0785                	addi	a5,a5,1
1c00f480:	0047c0fb          	lp.setup	x1,a5,1c00f488 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x214>
1c00f484:	0027150b          	p.lh	a0,2(a4!)
1c00f488:	04a5e5b3          	p.max	a1,a1,a0
1c00f48c:	9876                	add	a6,a6,t4
1c00f48e:	0001                	nop
1c00f490:	00b2d3ab          	p.sh	a1,t2(t0!)
1c00f494:	0885                	addi	a7,a7,1
1c00f496:	9e1a                	add	t3,t3,t1
1c00f498:	fc9894e3          	bne	a7,s1,1c00f460 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x1ec>
1c00f49c:	0a85                	addi	s5,s5,1
1c00f49e:	0c09                	addi	s8,s8,2
1c00f4a0:	9b7e                	add	s6,s6,t6
1c00f4a2:	fa8a9ce3          	bne	s5,s0,1c00f45a <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x1e6>
1c00f4a6:	b7a9                	j	1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f4a8:	4e16                	lw	t3,68(sp)
1c00f4aa:	f5c2f3e3          	bleu	t3,t0,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f4ae:	4016df93          	srai	t6,a3,0x1
1c00f4b2:	40165e13          	srai	t3,a2,0x1
1c00f4b6:	f29bfde3          	bleu	s1,s7,1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>
1c00f4ba:	026b8633          	mul	a2,s7,t1
1c00f4be:	8c16                	mv	s8,t0
1c00f4c0:	00181a13          	slli	s4,a6,0x1
1c00f4c4:	00131d13          	slli	s10,t1,0x1
1c00f4c8:	00189d93          	slli	s11,a7,0x1
1c00f4cc:	00281e93          	slli	t4,a6,0x2
1c00f4d0:	002e1f13          	slli	t5,t3,0x2
1c00f4d4:	026286b3          	mul	a3,t0,t1
1c00f4d8:	40f603b3          	sub	t2,a2,a5
1c00f4dc:	00138613          	addi	a2,t2,1 # 80000001 <pulp__FC+0x80000002>
1c00f4e0:	40e68733          	sub	a4,a3,a4
1c00f4e4:	8cba                	mv	s9,a4
1c00f4e6:	431b8c33          	p.mac	s8,s7,a7
1c00f4ea:	43038cb3          	p.mac	s9,t2,a6
1c00f4ee:	0c06                	slli	s8,s8,0x1
1c00f4f0:	9c2e                	add	s8,s8,a1
1c00f4f2:	43060733          	p.mac	a4,a2,a6
1c00f4f6:	0c86                	slli	s9,s9,0x1
1c00f4f8:	9caa                	add	s9,s9,a0
1c00f4fa:	026a0a33          	mul	s4,s4,t1
1c00f4fe:	00171b13          	slli	s6,a4,0x1
1c00f502:	9b2a                	add	s6,s6,a0
1c00f504:	845a                	mv	s0,s6
1c00f506:	83e6                	mv	t2,s9
1c00f508:	89e2                	mv	s3,s8
1c00f50a:	82de                	mv	t0,s7
1c00f50c:	85ca                	mv	a1,s2
1c00f50e:	040f8263          	beqz	t6,1c00f552 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x2de>
1c00f512:	88a2                	mv	a7,s0
1c00f514:	881e                	mv	a6,t2
1c00f516:	85ca                	mv	a1,s2
1c00f518:	857e                	mv	a0,t6
1c00f51a:	01b5407b          	lp.setup	x0,a0,1c00f550 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x2dc>
1c00f51e:	020e0863          	beqz	t3,1c00f54e <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x2da>
1c00f522:	ffcf0713          	addi	a4,t5,-4
1c00f526:	8309                	srli	a4,a4,0x2
1c00f528:	8646                	mv	a2,a7
1c00f52a:	86c2                	mv	a3,a6
1c00f52c:	0705                	addi	a4,a4,1
1c00f52e:	00e740fb          	lp.setup	x1,a4,1c00f54a <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x2d6>
1c00f532:	0046230b          	p.lw	t1,4(a2!)
1c00f536:	0046a78b          	p.lw	a5,4(a3!)
1c00f53a:	306787d7          	pv.max.h	a5,a5,t1
1c00f53e:	7807e357          	pv.extract.h	t1,a5,0
1c00f542:	7a07e7d7          	pv.extract.h	a5,a5,1
1c00f546:	04f367b3          	p.max	a5,t1,a5
1c00f54a:	04f5e5b3          	p.max	a1,a1,a5
1c00f54e:	9876                	add	a6,a6,t4
1c00f550:	98f6                	add	a7,a7,t4
1c00f552:	00b9ddab          	p.sh	a1,s11(s3!)
1c00f556:	0285                	addi	t0,t0,1
1c00f558:	93d2                	add	t2,t2,s4
1c00f55a:	9452                	add	s0,s0,s4
1c00f55c:	fa9298e3          	bne	t0,s1,1c00f50c <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x298>
1c00f560:	4796                	lw	a5,68(sp)
1c00f562:	0a85                	addi	s5,s5,1
1c00f564:	0c09                	addi	s8,s8,2
1c00f566:	9cea                	add	s9,s9,s10
1c00f568:	9b6a                	add	s6,s6,s10
1c00f56a:	f8fa9de3          	bne	s5,a5,1c00f504 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x290>
1c00f56e:	b549                	j	1c00f3f0 <KerMaxPoolNxNStrideS_Body_fp.isra.5+0x17c>

1c00f570 <KerAvgPoolNxNStrideS_Body_fp.isra.7>:
1c00f570:	02d60e33          	mul	t3,a2,a3
1c00f574:	7179                	addi	sp,sp,-48
1c00f576:	4296                	lw	t0,68(sp)
1c00f578:	6ec1                	lui	t4,0x10
1c00f57a:	d24a                	sw	s2,36(sp)
1c00f57c:	d622                	sw	s0,44(sp)
1c00f57e:	d426                	sw	s1,40(sp)
1c00f580:	d04e                	sw	s3,32(sp)
1c00f582:	ce52                	sw	s4,28(sp)
1c00f584:	cc56                	sw	s5,24(sp)
1c00f586:	ca5a                	sw	s6,20(sp)
1c00f588:	c85e                	sw	s7,16(sp)
1c00f58a:	c662                	sw	s8,12(sp)
1c00f58c:	03cece33          	div	t3,t4,t3
1c00f590:	5fd2                	lw	t6,52(sp)
1c00f592:	5f62                	lw	t5,56(sp)
1c00f594:	5372                	lw	t1,60(sp)
1c00f596:	4906                	lw	s2,64(sp)
1c00f598:	fc1633b3          	p.bclr	t2,a2,30,1
1c00f59c:	5ec2                	lw	t4,48(sp)
1c00f59e:	0c028963          	beqz	t0,1c00f670 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x100>
1c00f5a2:	22038063          	beqz	t2,1c00f7c2 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x252>
1c00f5a6:	0bfefa63          	bleu	t6,t4,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f5aa:	40165393          	srai	t2,a2,0x1
1c00f5ae:	0a6f7663          	bleu	t1,t5,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f5b2:	800004b7          	lui	s1,0x80000
1c00f5b6:	fff4c493          	not	s1,s1
1c00f5ba:	8c99                	sub	s1,s1,a4
1c00f5bc:	00139413          	slli	s0,t2,0x1
1c00f5c0:	00181a13          	slli	s4,a6,0x1
1c00f5c4:	40c002b3          	neg	t0,a2
1c00f5c8:	8c11                	sub	s0,s0,a2
1c00f5ca:	0286                	slli	t0,t0,0x1
1c00f5cc:	0406                	slli	s0,s0,0x1
1c00f5ce:	00191993          	slli	s3,s2,0x1
1c00f5d2:	00189a93          	slli	s5,a7,0x1
1c00f5d6:	0289                	addi	t0,t0,2
1c00f5d8:	0409                	addi	s0,s0,2
1c00f5da:	032f0733          	mul	a4,t5,s2
1c00f5de:	43d904b3          	p.mac	s1,s2,t4
1c00f5e2:	40f707b3          	sub	a5,a4,a5
1c00f5e6:	430784b3          	p.mac	s1,a5,a6
1c00f5ea:	87f6                	mv	a5,t4
1c00f5ec:	431f07b3          	p.mac	a5,t5,a7
1c00f5f0:	94b2                	add	s1,s1,a2
1c00f5f2:	0486                	slli	s1,s1,0x1
1c00f5f4:	94aa                	add	s1,s1,a0
1c00f5f6:	03490533          	mul	a0,s2,s4
1c00f5fa:	00179913          	slli	s2,a5,0x1
1c00f5fe:	992e                	add	s2,s2,a1
1c00f600:	8826                	mv	a6,s1
1c00f602:	88ca                	mv	a7,s2
1c00f604:	85fa                	mv	a1,t5
1c00f606:	4601                	li	a2,0
1c00f608:	ca95                	beqz	a3,1c00f63c <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xcc>
1c00f60a:	8c42                	mv	s8,a6
1c00f60c:	4601                	li	a2,0
1c00f60e:	8bb6                	mv	s7,a3
1c00f610:	013bc07b          	lp.setup	x0,s7,1c00f636 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xc6>
1c00f614:	00038f63          	beqz	t2,1c00f632 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xc2>
1c00f618:	405407b3          	sub	a5,s0,t0
1c00f61c:	17f1                	addi	a5,a5,-4
1c00f61e:	8389                	srli	a5,a5,0x2
1c00f620:	01828b33          	add	s6,t0,s8
1c00f624:	0785                	addi	a5,a5,1
1c00f626:	0047c0fb          	lp.setup	x1,a5,1c00f62e <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xbe>
1c00f62a:	004b270b          	p.lw	a4,4(s6!)
1c00f62e:	ba076657          	pv.sdotsp.sci.h	a2,a4,1
1c00f632:	114c778b          	p.lh	a5,s4(s8!)
1c00f636:	963e                	add	a2,a2,a5
1c00f638:	03c60633          	mul	a2,a2,t3
1c00f63c:	2006665b          	p.mac.zh.zl	a2,a2,zero,a6
1c00f640:	15062633          	p.clipu	a2,a2,16
1c00f644:	00c8daab          	p.sh	a2,s5(a7!)
1c00f648:	0585                	addi	a1,a1,1
1c00f64a:	982a                	add	a6,a6,a0
1c00f64c:	fa659de3          	bne	a1,t1,1c00f606 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x96>
1c00f650:	0e85                	addi	t4,t4,1
1c00f652:	0909                	addi	s2,s2,2
1c00f654:	94ce                	add	s1,s1,s3
1c00f656:	fbfe95e3          	bne	t4,t6,1c00f600 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x90>
1c00f65a:	5432                	lw	s0,44(sp)
1c00f65c:	54a2                	lw	s1,40(sp)
1c00f65e:	5912                	lw	s2,36(sp)
1c00f660:	5982                	lw	s3,32(sp)
1c00f662:	4a72                	lw	s4,28(sp)
1c00f664:	4ae2                	lw	s5,24(sp)
1c00f666:	4b52                	lw	s6,20(sp)
1c00f668:	4bc2                	lw	s7,16(sp)
1c00f66a:	4c32                	lw	s8,12(sp)
1c00f66c:	6145                	addi	sp,sp,48
1c00f66e:	8082                	ret
1c00f670:	0a038d63          	beqz	t2,1c00f72a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x1ba>
1c00f674:	fffef3e3          	bleu	t6,t4,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f678:	40165393          	srai	t2,a2,0x1
1c00f67c:	fc6f7fe3          	bleu	t1,t5,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f680:	800004b7          	lui	s1,0x80000
1c00f684:	fff4c493          	not	s1,s1
1c00f688:	8c99                	sub	s1,s1,a4
1c00f68a:	032f0733          	mul	a4,t5,s2
1c00f68e:	00139413          	slli	s0,t2,0x1
1c00f692:	00181a13          	slli	s4,a6,0x1
1c00f696:	40c002b3          	neg	t0,a2
1c00f69a:	8c11                	sub	s0,s0,a2
1c00f69c:	0286                	slli	t0,t0,0x1
1c00f69e:	0406                	slli	s0,s0,0x1
1c00f6a0:	00191993          	slli	s3,s2,0x1
1c00f6a4:	00189a93          	slli	s5,a7,0x1
1c00f6a8:	0289                	addi	t0,t0,2
1c00f6aa:	432e84b3          	p.mac	s1,t4,s2
1c00f6ae:	40f707b3          	sub	a5,a4,a5
1c00f6b2:	0409                	addi	s0,s0,2
1c00f6b4:	430784b3          	p.mac	s1,a5,a6
1c00f6b8:	87f6                	mv	a5,t4
1c00f6ba:	431f07b3          	p.mac	a5,t5,a7
1c00f6be:	94b2                	add	s1,s1,a2
1c00f6c0:	0486                	slli	s1,s1,0x1
1c00f6c2:	94aa                	add	s1,s1,a0
1c00f6c4:	03490533          	mul	a0,s2,s4
1c00f6c8:	00179913          	slli	s2,a5,0x1
1c00f6cc:	992e                	add	s2,s2,a1
1c00f6ce:	8826                	mv	a6,s1
1c00f6d0:	88ca                	mv	a7,s2
1c00f6d2:	85fa                	mv	a1,t5
1c00f6d4:	4601                	li	a2,0
1c00f6d6:	ca95                	beqz	a3,1c00f70a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x19a>
1c00f6d8:	8c42                	mv	s8,a6
1c00f6da:	4601                	li	a2,0
1c00f6dc:	8bb6                	mv	s7,a3
1c00f6de:	013bc07b          	lp.setup	x0,s7,1c00f704 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x194>
1c00f6e2:	00038f63          	beqz	t2,1c00f700 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x190>
1c00f6e6:	405407b3          	sub	a5,s0,t0
1c00f6ea:	17f1                	addi	a5,a5,-4
1c00f6ec:	8389                	srli	a5,a5,0x2
1c00f6ee:	01828b33          	add	s6,t0,s8
1c00f6f2:	0785                	addi	a5,a5,1
1c00f6f4:	0047c0fb          	lp.setup	x1,a5,1c00f6fc <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x18c>
1c00f6f8:	004b270b          	p.lw	a4,4(s6!)
1c00f6fc:	ba076657          	pv.sdotsp.sci.h	a2,a4,1
1c00f700:	114c778b          	p.lh	a5,s4(s8!)
1c00f704:	963e                	add	a2,a2,a5
1c00f706:	03c60633          	mul	a2,a2,t3
1c00f70a:	2006665b          	p.mac.zh.zl	a2,a2,zero,a6
1c00f70e:	15061633          	p.clip	a2,a2,16
1c00f712:	00c8daab          	p.sh	a2,s5(a7!)
1c00f716:	0585                	addi	a1,a1,1
1c00f718:	982a                	add	a6,a6,a0
1c00f71a:	fa659de3          	bne	a1,t1,1c00f6d4 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x164>
1c00f71e:	0e85                	addi	t4,t4,1
1c00f720:	0909                	addi	s2,s2,2
1c00f722:	94ce                	add	s1,s1,s3
1c00f724:	fbfe95e3          	bne	t4,t6,1c00f6ce <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x15e>
1c00f728:	bf0d                	j	1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f72a:	f3fef8e3          	bleu	t6,t4,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f72e:	40165393          	srai	t2,a2,0x1
1c00f732:	f26f74e3          	bleu	t1,t5,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f736:	032f0a33          	mul	s4,t5,s2
1c00f73a:	8af6                	mv	s5,t4
1c00f73c:	00181293          	slli	t0,a6,0x1
1c00f740:	00191493          	slli	s1,s2,0x1
1c00f744:	00189993          	slli	s3,a7,0x1
1c00f748:	00239413          	slli	s0,t2,0x2
1c00f74c:	032e8633          	mul	a2,t4,s2
1c00f750:	40fa0a33          	sub	s4,s4,a5
1c00f754:	40e607b3          	sub	a5,a2,a4
1c00f758:	431f0ab3          	p.mac	s5,t5,a7
1c00f75c:	430a07b3          	p.mac	a5,s4,a6
1c00f760:	0a86                	slli	s5,s5,0x1
1c00f762:	9aae                	add	s5,s5,a1
1c00f764:	03228933          	mul	s2,t0,s2
1c00f768:	0786                	slli	a5,a5,0x1
1c00f76a:	953e                	add	a0,a0,a5
1c00f76c:	88aa                	mv	a7,a0
1c00f76e:	8a56                	mv	s4,s5
1c00f770:	887a                	mv	a6,t5
1c00f772:	4601                	li	a2,0
1c00f774:	c69d                	beqz	a3,1c00f7a2 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x232>
1c00f776:	8bc6                	mv	s7,a7
1c00f778:	4601                	li	a2,0
1c00f77a:	8b36                	mv	s6,a3
1c00f77c:	010b407b          	lp.setup	x0,s6,1c00f79c <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x22c>
1c00f780:	00038d63          	beqz	t2,1c00f79a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x22a>
1c00f784:	ffc40793          	addi	a5,s0,-4
1c00f788:	8389                	srli	a5,a5,0x2
1c00f78a:	85de                	mv	a1,s7
1c00f78c:	0785                	addi	a5,a5,1
1c00f78e:	0047c0fb          	lp.setup	x1,a5,1c00f796 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x226>
1c00f792:	0045a70b          	p.lw	a4,4(a1!)
1c00f796:	ba076657          	pv.sdotsp.sci.h	a2,a4,1
1c00f79a:	9b96                	add	s7,s7,t0
1c00f79c:	0001                	nop
1c00f79e:	03c60633          	mul	a2,a2,t3
1c00f7a2:	2006665b          	p.mac.zh.zl	a2,a2,zero,a6
1c00f7a6:	15061633          	p.clip	a2,a2,16
1c00f7aa:	00ca59ab          	p.sh	a2,s3(s4!)
1c00f7ae:	0805                	addi	a6,a6,1
1c00f7b0:	98ca                	add	a7,a7,s2
1c00f7b2:	fc6810e3          	bne	a6,t1,1c00f772 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x202>
1c00f7b6:	0e85                	addi	t4,t4,1
1c00f7b8:	0a89                	addi	s5,s5,2
1c00f7ba:	9526                	add	a0,a0,s1
1c00f7bc:	fbfe98e3          	bne	t4,t6,1c00f76c <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x1fc>
1c00f7c0:	bd69                	j	1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f7c2:	e9fefce3          	bleu	t6,t4,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f7c6:	40165393          	srai	t2,a2,0x1
1c00f7ca:	e86f78e3          	bleu	t1,t5,1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>
1c00f7ce:	03e90a33          	mul	s4,s2,t5
1c00f7d2:	8af6                	mv	s5,t4
1c00f7d4:	00181293          	slli	t0,a6,0x1
1c00f7d8:	00191493          	slli	s1,s2,0x1
1c00f7dc:	00189993          	slli	s3,a7,0x1
1c00f7e0:	00239413          	slli	s0,t2,0x2
1c00f7e4:	03d90633          	mul	a2,s2,t4
1c00f7e8:	40fa0a33          	sub	s4,s4,a5
1c00f7ec:	40e607b3          	sub	a5,a2,a4
1c00f7f0:	431f0ab3          	p.mac	s5,t5,a7
1c00f7f4:	430a07b3          	p.mac	a5,s4,a6
1c00f7f8:	0a86                	slli	s5,s5,0x1
1c00f7fa:	9aae                	add	s5,s5,a1
1c00f7fc:	02590933          	mul	s2,s2,t0
1c00f800:	0786                	slli	a5,a5,0x1
1c00f802:	953e                	add	a0,a0,a5
1c00f804:	88aa                	mv	a7,a0
1c00f806:	8a56                	mv	s4,s5
1c00f808:	887a                	mv	a6,t5
1c00f80a:	4601                	li	a2,0
1c00f80c:	c69d                	beqz	a3,1c00f83a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x2ca>
1c00f80e:	8bc6                	mv	s7,a7
1c00f810:	4601                	li	a2,0
1c00f812:	8b36                	mv	s6,a3
1c00f814:	010b407b          	lp.setup	x0,s6,1c00f834 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x2c4>
1c00f818:	00038d63          	beqz	t2,1c00f832 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x2c2>
1c00f81c:	ffc40793          	addi	a5,s0,-4
1c00f820:	8389                	srli	a5,a5,0x2
1c00f822:	85de                	mv	a1,s7
1c00f824:	0785                	addi	a5,a5,1
1c00f826:	0047c0fb          	lp.setup	x1,a5,1c00f82e <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x2be>
1c00f82a:	0045a70b          	p.lw	a4,4(a1!)
1c00f82e:	ba076657          	pv.sdotsp.sci.h	a2,a4,1
1c00f832:	9b96                	add	s7,s7,t0
1c00f834:	0001                	nop
1c00f836:	03c60633          	mul	a2,a2,t3
1c00f83a:	2006665b          	p.mac.zh.zl	a2,a2,zero,a6
1c00f83e:	15062633          	p.clipu	a2,a2,16
1c00f842:	00ca59ab          	p.sh	a2,s3(s4!)
1c00f846:	0805                	addi	a6,a6,1
1c00f848:	98ca                	add	a7,a7,s2
1c00f84a:	fc6810e3          	bne	a6,t1,1c00f80a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x29a>
1c00f84e:	0e85                	addi	t4,t4,1
1c00f850:	0a89                	addi	s5,s5,2
1c00f852:	9526                	add	a0,a0,s1
1c00f854:	fbfe98e3          	bne	t4,t6,1c00f804 <KerAvgPoolNxNStrideS_Body_fp.isra.7+0x294>
1c00f858:	b509                	j	1c00f65a <KerAvgPoolNxNStrideS_Body_fp.isra.7+0xea>

1c00f85a <KerParPool2x2Stride2_fp>:

{
	unsigned int FS=2,S=2;
	short int * __restrict__ In = Arg->In;
	unsigned int W = Arg->W, H = Arg->H;
	unsigned int OutFeatures = Arg->OutFeatures;
1c00f85a:	00c55703          	lhu	a4,12(a0)
{
1c00f85e:	7159                	addi	sp,sp,-112
	short int * __restrict__ Out = Arg->Out;
	int PoolMax = ((Arg->Oper&0x2)==0);
	int ReLU = ((int)Arg->Oper&0x1);

	unsigned int CoreId = gap_coreid();
1c00f860:	f1402373          	csrr	t1,mhartid
{
1c00f864:	d4a2                	sw	s0,104(sp)
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00f866:	f8373433          	p.bclr	s0,a4,28,3
1c00f86a:	00375793          	srli	a5,a4,0x3
1c00f86e:	00803433          	snez	s0,s0
1c00f872:	943e                	add	s0,s0,a5
	unsigned int CoreId = gap_coreid();
1c00f874:	c8031333          	p.extractu	t1,t1,4,0
{
1c00f878:	d2a6                	sw	s1,100(sp)
1c00f87a:	d0ca                	sw	s2,96(sp)
1c00f87c:	cece                	sw	s3,92(sp)
1c00f87e:	ccd2                	sw	s4,88(sp)
1c00f880:	cad6                	sw	s5,84(sp)
1c00f882:	c6de                	sw	s7,76(sp)
1c00f884:	de6e                	sw	s11,60(sp)
1c00f886:	d686                	sw	ra,108(sp)
1c00f888:	c8da                	sw	s6,80(sp)
1c00f88a:	c4e2                	sw	s8,72(sp)
1c00f88c:	c2e6                	sw	s9,68(sp)
1c00f88e:	c0ea                	sw	s10,64(sp)
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
1c00f890:	02830db3          	mul	s11,t1,s0
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c00f894:	01452b03          	lw	s6,20(a0)

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f898:	00655603          	lhu	a2,6(a0)
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f89c:	00a55683          	lhu	a3,10(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f8a0:	780b79d7          	pv.extract.b	s3,s6,0
1c00f8a4:	ffe60793          	addi	a5,a2,-2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8a8:	964e                	add	a2,a2,s3
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8aa:	781b7957          	pv.extract.b	s2,s6,2
	return ((Pad+Stride-1)/Stride);
1c00f8ae:	00198813          	addi	a6,s3,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8b2:	ffe68493          	addi	s1,a3,-2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f8b6:	97ce                	add	a5,a5,s3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8b8:	01f65993          	srli	s3,a2,0x1f
	return ((Pad+Stride-1)/Stride);
1c00f8bc:	00190593          	addi	a1,s2,1
	int PoolMax = ((Arg->Oper&0x2)==0);
1c00f8c0:	01b54c03          	lbu	s8,27(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f8c4:	7a0b7e57          	pv.extract.b	t3,s6,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8c8:	94ca                	add	s1,s1,s2
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8ca:	02c9a9db          	p.addn	s3,s3,a2,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8ce:	7a1b78d7          	pv.extract.b	a7,s6,3
	unsigned int W = Arg->W, H = Arg->H;
1c00f8d2:	00855603          	lhu	a2,8(a0)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8d6:	96ca                	add	a3,a3,s2
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f8d8:	83c7a7db          	p.addun	a5,a5,t3,1
	return ((Pad+Stride-1)/Stride);
1c00f8dc:	01f85a93          	srli	s5,a6,0x1f
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8e0:	8314a4db          	p.addun	s1,s1,a7,1
	return ((Pad+Stride-1)/Stride);
1c00f8e4:	01f5da13          	srli	s4,a1,0x1f
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8e8:	01f6d913          	srli	s2,a3,0x1f
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00f8ec:	0785                	addi	a5,a5,1
	return ((Pad+Stride-1)/Stride);
1c00f8ee:	030aaadb          	p.addn	s5,s5,a6,1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00f8f2:	0485                	addi	s1,s1,1
	return ((Pad+Stride-1)/Stride);
1c00f8f4:	02ba2a5b          	p.addn	s4,s4,a1,1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00f8f8:	02d9295b          	p.addn	s2,s2,a3,1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00f8fc:	946e                	add	s0,s0,s11
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00f8fe:	0557cab3          	p.min	s5,a5,s5
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00f902:	0544ca33          	p.min	s4,s1,s4

	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00f906:	002c7693          	andi	a3,s8,2
	unsigned int W = Arg->W, H = Arg->H;
1c00f90a:	d032                	sw	a2,32(sp)
	short int * __restrict__ In = Arg->In;
1c00f90c:	00052e83          	lw	t4,0(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c00f910:	00455b83          	lhu	s7,4(a0)
	short int * __restrict__ Out = Arg->Out;
1c00f914:	01052e03          	lw	t3,16(a0)
1c00f918:	fc1c3c33          	p.bclr	s8,s8,30,1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00f91c:	04e44433          	p.min	s0,s0,a4
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00f920:	053ae9b3          	p.max	s3,s5,s3
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00f924:	052a6933          	p.max	s2,s4,s2
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00f928:	cad1                	beqz	a3,1c00f9bc <KerParPool2x2Stride2_fp+0x162>
	else	 for (unsigned int of=First; of<Last; of++) KerAvgPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00f92a:	068df463          	bleu	s0,s11,1c00f992 <KerParPool2x2Stride2_fp+0x138>
1c00f92e:	02cb8cb3          	mul	s9,s7,a2
1c00f932:	1004d633          	p.exthz	a2,s1
1c00f936:	10095933          	p.exthz	s2,s2
1c00f93a:	d64a                	sw	s2,44(sp)
1c00f93c:	8d72                	mv	s10,t3
1c00f93e:	8976                	mv	s2,t4
1c00f940:	1007d733          	p.exthz	a4,a5
1c00f944:	d23a                	sw	a4,36(sp)
1c00f946:	100adab3          	p.exthz	s5,s5
1c00f94a:	1009d9b3          	p.exthz	s3,s3
1c00f94e:	029784b3          	mul	s1,a5,s1
1c00f952:	0c86                	slli	s9,s9,0x1
1c00f954:	d432                	sw	a2,40(sp)
1c00f956:	100a5a33          	p.exthz	s4,s4
1c00f95a:	100c5c33          	p.exthz	s8,s8
1c00f95e:	0486                	slli	s1,s1,0x1
1c00f960:	439d8933          	p.mac	s2,s11,s9
1c00f964:	429d8d33          	p.mac	s10,s11,s1
1c00f968:	5732                	lw	a4,44(sp)
1c00f96a:	58a2                	lw	a7,40(sp)
1c00f96c:	5602                	lw	a2,32(sp)
1c00f96e:	c23a                	sw	a4,4(sp)
1c00f970:	5712                	lw	a4,36(sp)
1c00f972:	86ea                	mv	a3,s10
1c00f974:	854a                	mv	a0,s2
1c00f976:	c862                	sw	s8,16(sp)
1c00f978:	c65a                	sw	s6,12(sp)
1c00f97a:	c45a                	sw	s6,8(sp)
1c00f97c:	c052                	sw	s4,0(sp)
1c00f97e:	884e                	mv	a6,s3
1c00f980:	87d6                	mv	a5,s5
1c00f982:	85de                	mv	a1,s7
1c00f984:	0d85                	addi	s11,s11,1
1c00f986:	deaff0ef          	jal	ra,1c00ef70 <KerAvgPool2x2Stride2_fp>
1c00f98a:	9966                	add	s2,s2,s9
1c00f98c:	9d26                	add	s10,s10,s1
1c00f98e:	fdb41de3          	bne	s0,s11,1c00f968 <KerParPool2x2Stride2_fp+0x10e>
1c00f992:	002047b7          	lui	a5,0x204
1c00f996:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00f99a:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c00f99e:	50b6                	lw	ra,108(sp)
1c00f9a0:	5426                	lw	s0,104(sp)
1c00f9a2:	5496                	lw	s1,100(sp)
1c00f9a4:	5906                	lw	s2,96(sp)
1c00f9a6:	49f6                	lw	s3,92(sp)
1c00f9a8:	4a66                	lw	s4,88(sp)
1c00f9aa:	4ad6                	lw	s5,84(sp)
1c00f9ac:	4b46                	lw	s6,80(sp)
1c00f9ae:	4bb6                	lw	s7,76(sp)
1c00f9b0:	4c26                	lw	s8,72(sp)
1c00f9b2:	4c96                	lw	s9,68(sp)
1c00f9b4:	4d06                	lw	s10,64(sp)
1c00f9b6:	5df2                	lw	s11,60(sp)
1c00f9b8:	6165                	addi	sp,sp,112
1c00f9ba:	8082                	ret
	if (PoolMax) for (unsigned int of=First; of<Last; of++) KerMaxPool2x2Stride2_fp(In+of*W*H, W, H, Out+of*Wo*Ho, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, PadIn, PadIn, ReLU);
1c00f9bc:	fc8dfbe3          	bleu	s0,s11,1c00f992 <KerParPool2x2Stride2_fp+0x138>
1c00f9c0:	02cb8cb3          	mul	s9,s7,a2
1c00f9c4:	1004d733          	p.exthz	a4,s1
1c00f9c8:	10095933          	p.exthz	s2,s2
1c00f9cc:	d64a                	sw	s2,44(sp)
1c00f9ce:	8d72                	mv	s10,t3
1c00f9d0:	8976                	mv	s2,t4
1c00f9d2:	1007d633          	p.exthz	a2,a5
1c00f9d6:	d232                	sw	a2,36(sp)
1c00f9d8:	100adab3          	p.exthz	s5,s5
1c00f9dc:	1009d9b3          	p.exthz	s3,s3
1c00f9e0:	029784b3          	mul	s1,a5,s1
1c00f9e4:	0c86                	slli	s9,s9,0x1
1c00f9e6:	d43a                	sw	a4,40(sp)
1c00f9e8:	100a5a33          	p.exthz	s4,s4
1c00f9ec:	100c5c33          	p.exthz	s8,s8
1c00f9f0:	0486                	slli	s1,s1,0x1
1c00f9f2:	43bc8933          	p.mac	s2,s9,s11
1c00f9f6:	43b48d33          	p.mac	s10,s1,s11
1c00f9fa:	57b2                	lw	a5,44(sp)
1c00f9fc:	58a2                	lw	a7,40(sp)
1c00f9fe:	5712                	lw	a4,36(sp)
1c00fa00:	5602                	lw	a2,32(sp)
1c00fa02:	86ea                	mv	a3,s10
1c00fa04:	854a                	mv	a0,s2
1c00fa06:	c23e                	sw	a5,4(sp)
1c00fa08:	c862                	sw	s8,16(sp)
1c00fa0a:	c65a                	sw	s6,12(sp)
1c00fa0c:	c45a                	sw	s6,8(sp)
1c00fa0e:	c052                	sw	s4,0(sp)
1c00fa10:	884e                	mv	a6,s3
1c00fa12:	87d6                	mv	a5,s5
1c00fa14:	85de                	mv	a1,s7
1c00fa16:	0d85                	addi	s11,s11,1
1c00fa18:	a0eff0ef          	jal	ra,1c00ec26 <KerMaxPool2x2Stride2_fp>
1c00fa1c:	9966                	add	s2,s2,s9
1c00fa1e:	9d26                	add	s10,s10,s1
1c00fa20:	fdb41de3          	bne	s0,s11,1c00f9fa <KerParPool2x2Stride2_fp+0x1a0>
1c00fa24:	b7bd                	j	1c00f992 <KerParPool2x2Stride2_fp+0x138>

1c00fa26 <KerParPoolNxNStrideS_fp>:

void KerParPoolNxNStrideS_fp(KerReLUPool_fp_T *Arg)

{
1c00fa26:	7175                	addi	sp,sp,-144
1c00fa28:	c522                	sw	s0,136(sp)
1c00fa2a:	c326                	sw	s1,132(sp)
1c00fa2c:	c14a                	sw	s2,128(sp)
1c00fa2e:	dece                	sw	s3,124(sp)
1c00fa30:	dcd2                	sw	s4,120(sp)
1c00fa32:	dad6                	sw	s5,116(sp)
1c00fa34:	d6de                	sw	s7,108(sp)
1c00fa36:	d2e6                	sw	s9,100(sp)
1c00fa38:	d0ea                	sw	s10,96(sp)
1c00fa3a:	c706                	sw	ra,140(sp)
1c00fa3c:	d8da                	sw	s6,112(sp)
1c00fa3e:	d4e2                	sw	s8,104(sp)
1c00fa40:	ceee                	sw	s11,92(sp)
	unsigned int FS=Arg->M, S=Arg->S;
1c00fa42:	01854c03          	lbu	s8,24(a0)

	unsigned int CoreId = gap_coreid();
	unsigned int Chunk = ChunkSize(OutFeatures);
	unsigned int First = Chunk*CoreId;
	unsigned int Last = Min(First+Chunk, OutFeatures);
	v4s PadIn = Arg->Pad;
1c00fa46:	01452f03          	lw	t5,20(a0)
	int ReVal = ((int)ReLU)?0:0x80000000;

	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa4a:	00655683          	lhu	a3,6(a0)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa4e:	fffc0613          	addi	a2,s8,-1
1c00fa52:	01f65793          	srli	a5,a2,0x1f
	unsigned int FS=Arg->M, S=Arg->S;
1c00fa56:	01954b03          	lbu	s6,25(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa5a:	780f7357          	pv.extract.b	t1,t5,0
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa5e:	02c7a7db          	p.addn	a5,a5,a2,1
1c00fa62:	401c5593          	srai	a1,s8,0x1
1c00fa66:	40678433          	sub	s0,a5,t1
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa6a:	41830933          	sub	s2,t1,s8
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa6e:	942e                	add	s0,s0,a1
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa70:	9936                	add	s2,s2,a3
1c00fa72:	7a0f78d7          	pv.extract.b	a7,t5,1
	return ((Pad+Stride-1)/Stride);
1c00fa76:	01630a33          	add	s4,t1,s6
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa7a:	8e81                	sub	a3,a3,s0
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa7c:	9946                	add	s2,s2,a7
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa7e:	96da                	add	a3,a3,s6
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fa80:	03695933          	divu	s2,s2,s6
	return ((Pad+Stride-1)/Stride);
1c00fa84:	1a7d                	addi	s4,s4,-1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa86:	fff68413          	addi	s0,a3,-1
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00fa8a:	00a55703          	lhu	a4,10(a0)
1c00fa8e:	781f7bd7          	pv.extract.b	s7,t5,2
1c00fa92:	418b8633          	sub	a2,s7,s8
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa96:	417787b3          	sub	a5,a5,s7
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00fa9a:	963a                	add	a2,a2,a4
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fa9c:	97ae                	add	a5,a5,a1
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00fa9e:	7a1f7857          	pv.extract.b	a6,t5,3
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00faa2:	40f707b3          	sub	a5,a4,a5
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00faa6:	9642                	add	a2,a2,a6
	return ((Pad+Stride-1)/Stride);
1c00faa8:	017b0ab3          	add	s5,s6,s7
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00faac:	97da                	add	a5,a5,s6
	return ((Pad+Stride-1)/Stride);
1c00faae:	1afd                	addi	s5,s5,-1
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fab0:	fff78493          	addi	s1,a5,-1
	unsigned int OutFeatures = Arg->OutFeatures;
1c00fab4:	00c55703          	lhu	a4,12(a0)
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00fab8:	d41a                	sw	t1,40(sp)
	unsigned int CoreId = gap_coreid();
1c00faba:	f1402373          	csrr	t1,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00fabe:	f83739b3          	p.bclr	s3,a4,28,3
1c00fac2:	00375693          	srli	a3,a4,0x3
1c00fac6:	013039b3          	snez	s3,s3
1c00faca:	99b6                	add	s3,s3,a3
	unsigned int CoreId = gap_coreid();
1c00facc:	c8031333          	p.extractu	t1,t1,4,0
	int PoolMax = (((int)Arg->Oper&0x2)==0);
1c00fad0:	01b54783          	lbu	a5,27(a0)
	unsigned int W = Arg->W, H = Arg->H;
1c00fad4:	00455583          	lhu	a1,4(a0)
1c00fad8:	00855683          	lhu	a3,8(a0)
1c00fadc:	fc17bd33          	p.bclr	s10,a5,30,1
	int ReVal = ((int)ReLU)?0:0x80000000;
1c00fae0:	fffd0c93          	addi	s9,s10,-1
1c00fae4:	8b89                	andi	a5,a5,2
	unsigned int W = Arg->W, H = Arg->H;
1c00fae6:	d82e                	sw	a1,48(sp)
1c00fae8:	dc36                	sw	a3,56(sp)
	short int * __restrict__ In = Arg->In;
1c00faea:	00052283          	lw	t0,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c00faee:	01052f83          	lw	t6,16(a0)
	return ((Pad+Stride-1)/Stride);
1c00faf2:	036a4a33          	div	s4,s4,s6
	int Wo = (Arg->UsedW-FS+PadIn[0]+PadIn[1])/S + 1;
1c00faf6:	0905                	addi	s2,s2,1
	int ReVal = ((int)ReLU)?0:0x80000000;
1c00faf8:	fc0cbcb3          	p.bclr	s9,s9,30,0
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fafc:	03644433          	div	s0,s0,s6
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00fb00:	05494a33          	p.min	s4,s2,s4
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00fb04:	03665633          	divu	a2,a2,s6
	int Wo_F = Min(Wo, FirstDefinedOutput(FS, PadIn[0], S)), Wo_L = Max(Wo_F, LastDefinedOutput(Arg->UsedW, FS, PadIn[0], S));
1c00fb08:	048a6433          	p.max	s0,s4,s0
1c00fb0c:	da22                	sw	s0,52(sp)
	return ((Pad+Stride-1)/Stride);
1c00fb0e:	036acab3          	div	s5,s5,s6
	int Ho = (Arg->UsedH-FS+PadIn[2]+PadIn[3])/S + 1;
1c00fb12:	0605                	addi	a2,a2,1
1c00fb14:	d632                	sw	a2,44(sp)
	return ((DimIn - ((F-1)/2 - PadL + (F/2)) + Stride-1)/Stride);
1c00fb16:	0364c4b3          	div	s1,s1,s6
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00fb1a:	05564ab3          	p.min	s5,a2,s5
	unsigned int First = Chunk*CoreId;
1c00fb1e:	03330433          	mul	s0,t1,s3
	int Ho_F = Min(Ho, FirstDefinedOutput(FS, PadIn[2], S)), Ho_L = Max(Ho_F, LastDefinedOutput(Arg->UsedH, FS, PadIn[2], S));
1c00fb22:	049ae4b3          	p.max	s1,s5,s1
	unsigned int Last = Min(First+Chunk, OutFeatures);
1c00fb26:	99a2                	add	s3,s3,s0
1c00fb28:	04e9c9b3          	p.min	s3,s3,a4

	if (PoolMax) {
1c00fb2c:	c7d1                	beqz	a5,1c00fbb8 <KerParPoolNxNStrideS_fp+0x192>
		for (unsigned int of=First; of<Last; of++) {
			KerMaxPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
			if ((int) PadIn) KerMaxPoolNxNStrideS_Border_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn, PadIn, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
		}
	} else {
		for (unsigned int of=First; of<Last; of++) {
1c00fb2e:	07347063          	bleu	s3,s0,1c00fb8e <KerParPoolNxNStrideS_fp+0x168>
1c00fb32:	832e                	mv	t1,a1
1c00fb34:	55e2                	lw	a1,56(sp)
1c00fb36:	02b30db3          	mul	s11,t1,a1
1c00fb3a:	5332                	lw	t1,44(sp)
1c00fb3c:	026907b3          	mul	a5,s2,t1
1c00fb40:	0d86                	slli	s11,s11,0x1
1c00fb42:	0786                	slli	a5,a5,0x1
1c00fb44:	de3e                	sw	a5,60(sp)
1c00fb46:	140f1163          	bnez	t5,1c00fc88 <KerParPoolNxNStrideS_fp+0x262>
1c00fb4a:	8cfe                	mv	s9,t6
1c00fb4c:	42f40cb3          	p.mac	s9,s0,a5
1c00fb50:	d64a                	sw	s2,44(sp)
1c00fb52:	428d82b3          	p.mac	t0,s11,s0
1c00fb56:	8966                	mv	s2,s9
1c00fb58:	8ca6                	mv	s9,s1
1c00fb5a:	84a2                	mv	s1,s0
1c00fb5c:	8462                	mv	s0,s8
1c00fb5e:	8c16                	mv	s8,t0
			KerAvgPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReLU);
1c00fb60:	5352                	lw	t1,52(sp)
1c00fb62:	58b2                	lw	a7,44(sp)
1c00fb64:	5842                	lw	a6,48(sp)
1c00fb66:	5722                	lw	a4,40(sp)
1c00fb68:	85ca                	mv	a1,s2
1c00fb6a:	8562                	mv	a0,s8
1c00fb6c:	c21a                	sw	t1,4(sp)
	int ReLU = ((int)Arg->Oper&0x1);
1c00fb6e:	ca6a                	sw	s10,20(sp)
			KerAvgPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReLU);
1c00fb70:	c85a                	sw	s6,16(sp)
1c00fb72:	c666                	sw	s9,12(sp)
1c00fb74:	c456                	sw	s5,8(sp)
1c00fb76:	c052                	sw	s4,0(sp)
1c00fb78:	87de                	mv	a5,s7
1c00fb7a:	86a2                	mv	a3,s0
1c00fb7c:	8622                	mv	a2,s0
1c00fb7e:	9f3ff0ef          	jal	ra,1c00f570 <KerAvgPoolNxNStrideS_Body_fp.isra.7>
1c00fb82:	5372                	lw	t1,60(sp)
		for (unsigned int of=First; of<Last; of++) {
1c00fb84:	0485                	addi	s1,s1,1
1c00fb86:	9c6e                	add	s8,s8,s11
1c00fb88:	991a                	add	s2,s2,t1
1c00fb8a:	fc999be3          	bne	s3,s1,1c00fb60 <KerParPoolNxNStrideS_fp+0x13a>
1c00fb8e:	002047b7          	lui	a5,0x204
1c00fb92:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00fb96:	01c7e703          	p.elw	a4,28(a5)
			if ((int) PadIn) KerAvgPoolNxNStrideS_Border_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn, PadIn, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
		}
	}
	gap_waitbarrier(0);
}
1c00fb9a:	40ba                	lw	ra,140(sp)
1c00fb9c:	442a                	lw	s0,136(sp)
1c00fb9e:	449a                	lw	s1,132(sp)
1c00fba0:	490a                	lw	s2,128(sp)
1c00fba2:	59f6                	lw	s3,124(sp)
1c00fba4:	5a66                	lw	s4,120(sp)
1c00fba6:	5ad6                	lw	s5,116(sp)
1c00fba8:	5b46                	lw	s6,112(sp)
1c00fbaa:	5bb6                	lw	s7,108(sp)
1c00fbac:	5c26                	lw	s8,104(sp)
1c00fbae:	5c96                	lw	s9,100(sp)
1c00fbb0:	5d06                	lw	s10,96(sp)
1c00fbb2:	4df6                	lw	s11,92(sp)
1c00fbb4:	6149                	addi	sp,sp,144
1c00fbb6:	8082                	ret
		for (unsigned int of=First; of<Last; of++) {
1c00fbb8:	fd347be3          	bleu	s3,s0,1c00fb8e <KerParPoolNxNStrideS_fp+0x168>
1c00fbbc:	832e                	mv	t1,a1
1c00fbbe:	55e2                	lw	a1,56(sp)
1c00fbc0:	02b30db3          	mul	s11,t1,a1
1c00fbc4:	5332                	lw	t1,44(sp)
1c00fbc6:	02690d33          	mul	s10,s2,t1
1c00fbca:	0d86                	slli	s11,s11,0x1
1c00fbcc:	0d06                	slli	s10,s10,0x1
1c00fbce:	43b402b3          	p.mac	t0,s0,s11
1c00fbd2:	428d0fb3          	p.mac	t6,s10,s0
1c00fbd6:	040f1263          	bnez	t5,1c00fc1a <KerParPoolNxNStrideS_fp+0x1f4>
1c00fbda:	87a6                	mv	a5,s1
1c00fbdc:	d64e                	sw	s3,44(sp)
1c00fbde:	dc4a                	sw	s2,56(sp)
1c00fbe0:	84a2                	mv	s1,s0
1c00fbe2:	8996                	mv	s3,t0
1c00fbe4:	8462                	mv	s0,s8
1c00fbe6:	897e                	mv	s2,t6
1c00fbe8:	8c3e                	mv	s8,a5
			KerMaxPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
1c00fbea:	5352                	lw	t1,52(sp)
1c00fbec:	58e2                	lw	a7,56(sp)
1c00fbee:	5842                	lw	a6,48(sp)
1c00fbf0:	5722                	lw	a4,40(sp)
1c00fbf2:	85ca                	mv	a1,s2
1c00fbf4:	854e                	mv	a0,s3
1c00fbf6:	c21a                	sw	t1,4(sp)
1c00fbf8:	ca66                	sw	s9,20(sp)
1c00fbfa:	c85a                	sw	s6,16(sp)
1c00fbfc:	c662                	sw	s8,12(sp)
1c00fbfe:	c456                	sw	s5,8(sp)
1c00fc00:	c052                	sw	s4,0(sp)
1c00fc02:	87de                	mv	a5,s7
1c00fc04:	86a2                	mv	a3,s0
1c00fc06:	8622                	mv	a2,s0
1c00fc08:	e6cff0ef          	jal	ra,1c00f274 <KerMaxPoolNxNStrideS_Body_fp.isra.5>
		for (unsigned int of=First; of<Last; of++) {
1c00fc0c:	5332                	lw	t1,44(sp)
1c00fc0e:	0485                	addi	s1,s1,1
1c00fc10:	99ee                	add	s3,s3,s11
1c00fc12:	996a                	add	s2,s2,s10
1c00fc14:	fc649be3          	bne	s1,t1,1c00fbea <KerParPoolNxNStrideS_fp+0x1c4>
1c00fc18:	bf9d                	j	1c00fb8e <KerParPoolNxNStrideS_fp+0x168>
1c00fc1a:	de5e                	sw	s7,60(sp)
1c00fc1c:	c0ea                	sw	s10,64(sp)
1c00fc1e:	c2ee                	sw	s11,68(sp)
1c00fc20:	5d42                	lw	s10,48(sp)
1c00fc22:	8bfa                	mv	s7,t5
1c00fc24:	d84e                	sw	s3,48(sp)
1c00fc26:	8d96                	mv	s11,t0
1c00fc28:	89a6                	mv	s3,s1
1c00fc2a:	84fe                	mv	s1,t6
			KerMaxPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
1c00fc2c:	5352                	lw	t1,52(sp)
1c00fc2e:	57f2                	lw	a5,60(sp)
1c00fc30:	5722                	lw	a4,40(sp)
1c00fc32:	85a6                	mv	a1,s1
1c00fc34:	856e                	mv	a0,s11
1c00fc36:	88ca                	mv	a7,s2
1c00fc38:	886a                	mv	a6,s10
1c00fc3a:	86e2                	mv	a3,s8
1c00fc3c:	8662                	mv	a2,s8
1c00fc3e:	c21a                	sw	t1,4(sp)
1c00fc40:	ca66                	sw	s9,20(sp)
1c00fc42:	c85a                	sw	s6,16(sp)
1c00fc44:	c64e                	sw	s3,12(sp)
1c00fc46:	c456                	sw	s5,8(sp)
1c00fc48:	c052                	sw	s4,0(sp)
1c00fc4a:	e2aff0ef          	jal	ra,1c00f274 <KerMaxPoolNxNStrideS_Body_fp.isra.5>
			if ((int) PadIn) KerMaxPoolNxNStrideS_Border_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn, PadIn, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
1c00fc4e:	5332                	lw	t1,44(sp)
1c00fc50:	58e2                	lw	a7,56(sp)
1c00fc52:	85a6                	mv	a1,s1
1c00fc54:	c61a                	sw	t1,12(sp)
1c00fc56:	5352                	lw	t1,52(sp)
1c00fc58:	856e                	mv	a0,s11
1c00fc5a:	ce66                	sw	s9,28(sp)
1c00fc5c:	c41a                	sw	t1,8(sp)
1c00fc5e:	cc5a                	sw	s6,24(sp)
1c00fc60:	ca4e                	sw	s3,20(sp)
1c00fc62:	c856                	sw	s5,16(sp)
1c00fc64:	c252                	sw	s4,4(sp)
1c00fc66:	c04a                	sw	s2,0(sp)
1c00fc68:	886a                	mv	a6,s10
1c00fc6a:	87de                	mv	a5,s7
1c00fc6c:	875e                	mv	a4,s7
1c00fc6e:	86e2                	mv	a3,s8
1c00fc70:	8662                	mv	a2,s8
1c00fc72:	814fe0ef          	jal	ra,1c00dc86 <KerMaxPoolNxNStrideS_Border_fp>
1c00fc76:	4316                	lw	t1,68(sp)
		for (unsigned int of=First; of<Last; of++) {
1c00fc78:	0405                	addi	s0,s0,1
1c00fc7a:	9d9a                	add	s11,s11,t1
1c00fc7c:	4306                	lw	t1,64(sp)
1c00fc7e:	949a                	add	s1,s1,t1
1c00fc80:	5342                	lw	t1,48(sp)
1c00fc82:	fa8315e3          	bne	t1,s0,1c00fc2c <KerParPoolNxNStrideS_fp+0x206>
1c00fc86:	b721                	j	1c00fb8e <KerParPoolNxNStrideS_fp+0x168>
1c00fc88:	428d82b3          	p.mac	t0,s11,s0
1c00fc8c:	c4ea                	sw	s10,72(sp)
1c00fc8e:	5d52                	lw	s10,52(sp)
1c00fc90:	c0de                	sw	s7,64(sp)
1c00fc92:	c2e6                	sw	s9,68(sp)
1c00fc94:	5bc2                	lw	s7,48(sp)
1c00fc96:	c6ce                	sw	s3,76(sp)
1c00fc98:	d86e                	sw	s11,48(sp)
1c00fc9a:	8cfa                	mv	s9,t5
1c00fc9c:	42f40fb3          	p.mac	t6,s0,a5
1c00fca0:	8996                	mv	s3,t0
1c00fca2:	8dfe                	mv	s11,t6
	int ReLU = ((int)Arg->Oper&0x1);
1c00fca4:	4326                	lw	t1,72(sp)
			KerAvgPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReLU);
1c00fca6:	4786                	lw	a5,64(sp)
1c00fca8:	5722                	lw	a4,40(sp)
1c00fcaa:	85ee                	mv	a1,s11
1c00fcac:	854e                	mv	a0,s3
1c00fcae:	88ca                	mv	a7,s2
1c00fcb0:	885e                	mv	a6,s7
1c00fcb2:	86e2                	mv	a3,s8
1c00fcb4:	8662                	mv	a2,s8
	int ReLU = ((int)Arg->Oper&0x1);
1c00fcb6:	ca1a                	sw	t1,20(sp)
			KerAvgPoolNxNStrideS_Body_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn[0], PadIn[2], W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReLU);
1c00fcb8:	c85a                	sw	s6,16(sp)
1c00fcba:	c626                	sw	s1,12(sp)
1c00fcbc:	c456                	sw	s5,8(sp)
1c00fcbe:	c26a                	sw	s10,4(sp)
1c00fcc0:	c052                	sw	s4,0(sp)
1c00fcc2:	8afff0ef          	jal	ra,1c00f570 <KerAvgPoolNxNStrideS_Body_fp.isra.7>
			if ((int) PadIn) KerAvgPoolNxNStrideS_Border_fp(In+of*Wref*Href, Out+of*Wo*Ho, FS, FS, PadIn, PadIn, W, H, Wo, Wo_F, Wo_L, Ho, Ho_F, Ho_L, S, ReVal);
1c00fcc6:	4316                	lw	t1,68(sp)
1c00fcc8:	58e2                	lw	a7,56(sp)
1c00fcca:	85ee                	mv	a1,s11
1c00fccc:	ce1a                	sw	t1,28(sp)
1c00fcce:	5332                	lw	t1,44(sp)
1c00fcd0:	854e                	mv	a0,s3
1c00fcd2:	cc5a                	sw	s6,24(sp)
1c00fcd4:	c61a                	sw	t1,12(sp)
1c00fcd6:	ca26                	sw	s1,20(sp)
1c00fcd8:	c856                	sw	s5,16(sp)
1c00fcda:	c46a                	sw	s10,8(sp)
1c00fcdc:	c252                	sw	s4,4(sp)
1c00fcde:	c04a                	sw	s2,0(sp)
1c00fce0:	885e                	mv	a6,s7
1c00fce2:	87e6                	mv	a5,s9
1c00fce4:	8766                	mv	a4,s9
1c00fce6:	86e2                	mv	a3,s8
1c00fce8:	8662                	mv	a2,s8
1c00fcea:	f70fe0ef          	jal	ra,1c00e45a <KerAvgPoolNxNStrideS_Border_fp>
1c00fcee:	5342                	lw	t1,48(sp)
		for (unsigned int of=First; of<Last; of++) {
1c00fcf0:	0405                	addi	s0,s0,1
1c00fcf2:	999a                	add	s3,s3,t1
1c00fcf4:	5372                	lw	t1,60(sp)
1c00fcf6:	9d9a                	add	s11,s11,t1
1c00fcf8:	4336                	lw	t1,76(sp)
1c00fcfa:	fa8315e3          	bne	t1,s0,1c00fca4 <KerParPoolNxNStrideS_fp+0x27e>
1c00fcfe:	bd41                	j	1c00fb8e <KerParPoolNxNStrideS_fp+0x168>

1c00fd00 <KerParMatAdd_fp>:
	short int * __restrict__ Out	= Arg->Out;
	int W				= Arg->W;
	int H				= Arg->H;

	unsigned int CoreId = gap_coreid();
	unsigned int Chunk = ChunkSize(Arg->N);
1c00fd00:	01055303          	lhu	t1,16(a0)
	unsigned int CoreId = gap_coreid();
1c00fd04:	f1402773          	csrr	a4,mhartid
{
1c00fd08:	1141                	addi	sp,sp,-16
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00fd0a:	f83337b3          	p.bclr	a5,t1,28,3
1c00fd0e:	00f037b3          	snez	a5,a5
1c00fd12:	00335693          	srli	a3,t1,0x3
1c00fd16:	97b6                	add	a5,a5,a3
	unsigned int CoreId = gap_coreid();
1c00fd18:	c8071733          	p.extractu	a4,a4,4,0
	unsigned int First = Chunk*CoreId;
1c00fd1c:	02f70733          	mul	a4,a4,a5
{
1c00fd20:	c426                	sw	s1,8(sp)
1c00fd22:	c622                	sw	s0,12(sp)
1c00fd24:	c24a                	sw	s2,4(sp)
	short int * __restrict__ In1	= Arg->In1;
1c00fd26:	00052f83          	lw	t6,0(a0)
	short int * __restrict__ In2	= Arg->In2;
1c00fd2a:	00452f03          	lw	t5,4(a0)
	short int * __restrict__ Out	= Arg->Out;
1c00fd2e:	00852e83          	lw	t4,8(a0)
	int W				= Arg->W;
1c00fd32:	00c55483          	lhu	s1,12(a0)
	int H				= Arg->H;
1c00fd36:	00e55603          	lhu	a2,14(a0)
	unsigned int Last = Min(First+Chunk, Arg->N);
1c00fd3a:	97ba                	add	a5,a5,a4
1c00fd3c:	0467c7b3          	p.min	a5,a5,t1
	int i, j;

	for (i=First; i<Last; i++) {
1c00fd40:	08f77e63          	bleu	a5,a4,1c00fddc <KerParMatAdd_fp+0xdc>
1c00fd44:	02e486b3          	mul	a3,s1,a4
1c00fd48:	40e78333          	sub	t1,a5,a4
1c00fd4c:	4289                	li	t0,2
		short int * __restrict__ I1 = In1 + i*W*H;
		short int * __restrict__ I2 = In2 + i*W*H;
		short int * __restrict__ O  = Out + i*W*H;
		for (j=0; j<((W*H)/2); j++) {
1c00fd4e:	02c484b3          	mul	s1,s1,a2
1c00fd52:	02c687b3          	mul	a5,a3,a2
			O[2*j] = gap_clip(I1[2*j]+I2[2*j], 15); O[2*j+1] = gap_clip(I1[2*j+1]+I2[2*j+1], 15);
		}
		O[W*H-1] = gap_clip(I1[W*H-1] + I2[W*H-1], 15);
1c00fd56:	00149e13          	slli	t3,s1,0x1
1c00fd5a:	1e79                	addi	t3,t3,-2
		for (j=0; j<((W*H)/2); j++) {
1c00fd5c:	4014d393          	srai	t2,s1,0x1
1c00fd60:	00239413          	slli	s0,t2,0x2
1c00fd64:	0486                	slli	s1,s1,0x1
1c00fd66:	41c40433          	sub	s0,s0,t3
1c00fd6a:	41c282b3          	sub	t0,t0,t3
1c00fd6e:	0786                	slli	a5,a5,0x1
1c00fd70:	97f2                	add	a5,a5,t3
1c00fd72:	9fbe                	add	t6,t6,a5
1c00fd74:	9f3e                	add	t5,t5,a5
1c00fd76:	9ebe                	add	t4,t4,a5
1c00fd78:	0303407b          	lp.setup	x0,t1,1c00fdd8 <KerParMatAdd_fp+0xd8>
1c00fd7c:	04038763          	beqz	t2,1c00fdca <KerParMatAdd_fp+0xca>
1c00fd80:	008e0733          	add	a4,t3,s0
1c00fd84:	1771                	addi	a4,a4,-4
1c00fd86:	8309                	srli	a4,a4,0x2
1c00fd88:	41cf08b3          	sub	a7,t5,t3
1c00fd8c:	41ce8833          	sub	a6,t4,t3
1c00fd90:	01f28533          	add	a0,t0,t6
1c00fd94:	005f05b3          	add	a1,t5,t0
1c00fd98:	01d28633          	add	a2,t0,t4
1c00fd9c:	41cf86b3          	sub	a3,t6,t3
1c00fda0:	0705                	addi	a4,a4,1
1c00fda2:	012740fb          	lp.setup	x1,a4,1c00fdc6 <KerParMatAdd_fp+0xc6>
			O[2*j] = gap_clip(I1[2*j]+I2[2*j], 15); O[2*j+1] = gap_clip(I1[2*j+1]+I2[2*j+1], 15);
1c00fda6:	0048990b          	p.lh	s2,4(a7!)
1c00fdaa:	0046978b          	p.lh	a5,4(a3!)
1c00fdae:	97ca                	add	a5,a5,s2
1c00fdb0:	150797b3          	p.clip	a5,a5,16
1c00fdb4:	00f8122b          	p.sh	a5,4(a6!)
1c00fdb8:	0045178b          	p.lh	a5,4(a0!)
1c00fdbc:	0045990b          	p.lh	s2,4(a1!)
1c00fdc0:	97ca                	add	a5,a5,s2
1c00fdc2:	150797b3          	p.clip	a5,a5,16
1c00fdc6:	00f6122b          	p.sh	a5,4(a2!)
		O[W*H-1] = gap_clip(I1[W*H-1] + I2[W*H-1], 15);
1c00fdca:	109ff78b          	p.lh	a5,s1(t6!)
1c00fdce:	109f770b          	p.lh	a4,s1(t5!)
1c00fdd2:	97ba                	add	a5,a5,a4
1c00fdd4:	150797b3          	p.clip	a5,a5,16
1c00fdd8:	00fed4ab          	p.sh	a5,s1(t4!)
1c00fddc:	002047b7          	lui	a5,0x204
1c00fde0:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00fde4:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
}
1c00fde8:	4432                	lw	s0,12(sp)
1c00fdea:	44a2                	lw	s1,8(sp)
1c00fdec:	4912                	lw	s2,4(sp)
1c00fdee:	0141                	addi	sp,sp,16
1c00fdf0:	8082                	ret

1c00fdf2 <KerParMatAddDynAdjust_fp>:
	int In1_Q			= Arg->In1_Q;
	int In2_Q			= Arg->In2_Q;
	int Out_Q			= Arg->Out_Q;

	unsigned int CoreId = gap_coreid();
	unsigned int Chunk = ChunkSize(Arg->N);
1c00fdf2:	01055e03          	lhu	t3,16(a0)
{
1c00fdf6:	1101                	addi	sp,sp,-32
1c00fdf8:	cc26                	sw	s1,24(sp)
	int H				= Arg->H;
1c00fdfa:	00e55703          	lhu	a4,14(a0)
	int W				= Arg->W;
1c00fdfe:	00c55483          	lhu	s1,12(a0)
	unsigned int CoreId = gap_coreid();
1c00fe02:	f1402ff3          	csrr	t6,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c00fe06:	f83e37b3          	p.bclr	a5,t3,28,3
1c00fe0a:	003e5693          	srli	a3,t3,0x3
1c00fe0e:	00f037b3          	snez	a5,a5
1c00fe12:	97b6                	add	a5,a5,a3
	unsigned int First = Chunk*CoreId;
	unsigned int Last = Min(First+Chunk, Arg->N);
	int i, j;

	short int * __restrict__ I1, * __restrict__ I2;
	short int * __restrict__ O  = Out + First*W*H;
1c00fe14:	02e48833          	mul	a6,s1,a4
	unsigned int CoreId = gap_coreid();
1c00fe18:	c80f9fb3          	p.extractu	t6,t6,4,0
{
1c00fe1c:	ce22                	sw	s0,28(sp)
1c00fe1e:	ca4a                	sw	s2,20(sp)
1c00fe20:	c84e                	sw	s3,16(sp)
1c00fe22:	c652                	sw	s4,12(sp)
1c00fe24:	c456                	sw	s5,8(sp)
1c00fe26:	c25a                	sw	s6,4(sp)
1c00fe28:	c05e                	sw	s7,0(sp)
	int In1_Q			= Arg->In1_Q;
1c00fe2a:	01c54303          	lbu	t1,28(a0)
	unsigned int First = Chunk*CoreId;
1c00fe2e:	02ff8fb3          	mul	t6,t6,a5
	short int * __restrict__ O  = Out + First*W*H;
1c00fe32:	00181293          	slli	t0,a6,0x1
	int In2_Q			= Arg->In2_Q;
1c00fe36:	01d54883          	lbu	a7,29(a0)
	short int * __restrict__ In1	= Arg->In1;
1c00fe3a:	00052f03          	lw	t5,0(a0)
	short int * __restrict__ In2	= Arg->In2;
1c00fe3e:	00452e83          	lw	t4,4(a0)
	short int * __restrict__ Out	= Arg->Out;
1c00fe42:	00852383          	lw	t2,8(a0)
	int Out_Q			= Arg->Out_Q;
1c00fe46:	01e54403          	lbu	s0,30(a0)
	int LB				= Arg->LB;
1c00fe4a:	4954                	lw	a3,20(a0)
	int UB				= Arg->UB;
1c00fe4c:	4d10                	lw	a2,24(a0)
	int OffIn = Abs(In1_Q-In2_Q);
1c00fe4e:	41130733          	sub	a4,t1,a7
	short int * __restrict__ O  = Out + First*W*H;
1c00fe52:	03f28533          	mul	a0,t0,t6
	int OffOut = Out_Q-Min(In1_Q, In2_Q);
1c00fe56:	051345b3          	p.min	a1,t1,a7
	unsigned int Last = Min(First+Chunk, Arg->N);
1c00fe5a:	97fe                	add	a5,a5,t6
	int OffIn = Abs(In1_Q-In2_Q);
1c00fe5c:	04070733          	p.avg	a4,a4,zero
	int OffOut = Out_Q-Min(In1_Q, In2_Q);
1c00fe60:	40b405b3          	sub	a1,s0,a1
	unsigned int Last = Min(First+Chunk, Arg->N);
1c00fe64:	05c7c7b3          	p.min	a5,a5,t3
	short int * __restrict__ O  = Out + First*W*H;
1c00fe68:	93aa                	add	t2,t2,a0
1c00fe6a:	9f2a                	add	t5,t5,a0
1c00fe6c:	00ae82b3          	add	t0,t4,a0

	if (In1_Q<=In2_Q) {
1c00fe70:	0068d563          	ble	t1,a7,1c00fe7a <KerParMatAddDynAdjust_fp+0x88>
1c00fe74:	8516                	mv	a0,t0
		I1 = In2 + First*W*H; I2 = In1 + First*W*H;
	} else {
		I1 = In1 + First*W*H; I2 = In2 + First*W*H;
1c00fe76:	82fa                	mv	t0,t5
1c00fe78:	8f2a                	mv	t5,a0
	}
	if (OffOut==0) {
1c00fe7a:	e1e9                	bnez	a1,1c00ff3c <KerParMatAddDynAdjust_fp+0x14a>
		for (i=First; i<Last; i++) {
1c00fe7c:	0afff063          	bleu	a5,t6,1c00ff1c <KerParMatAddDynAdjust_fp+0x12a>
			for (j=0; j<((W*H)/2); j++) {
				O[2*j] = Min(Max((I1[2*j]>>OffIn)+I2[2*j], LB), UB); O[2*j+1] = Min(Max((I1[2*j+1]>>OffIn)+I2[2*j+1], LB), UB);
			}
			O[W*H-1] = Min(Max((I1[W*H-1]>>OffIn) + I2[W*H-1], LB), UB);
1c00fe80:	00181493          	slli	s1,a6,0x1
1c00fe84:	14f9                	addi	s1,s1,-2
			for (j=0; j<((W*H)/2); j++) {
1c00fe86:	40185413          	srai	s0,a6,0x1
1c00fe8a:	4989                	li	s3,2
			I1 += W*H; I2 += W*H; O += W*H;
1c00fe8c:	00248a13          	addi	s4,s1,2 # 80000002 <pulp__FC+0x80000003>
1c00fe90:	00928933          	add	s2,t0,s1
1c00fe94:	9f26                	add	t5,t5,s1
1c00fe96:	93a6                	add	t2,t2,s1
1c00fe98:	00241a93          	slli	s5,s0,0x2
1c00fe9c:	409989b3          	sub	s3,s3,s1
1c00fea0:	41f78fb3          	sub	t6,a5,t6
1c00fea4:	03afc07b          	lp.setup	x0,t6,1c00ff18 <KerParMatAddDynAdjust_fp+0x126>
			for (j=0; j<((W*H)/2); j++) {
1c00fea8:	cc21                	beqz	s0,1c00ff00 <KerParMatAddDynAdjust_fp+0x10e>
1c00feaa:	ffca8593          	addi	a1,s5,-4
1c00feae:	8189                	srli	a1,a1,0x2
1c00feb0:	8e96                	mv	t4,t0
1c00feb2:	409f0e33          	sub	t3,t5,s1
1c00feb6:	40938333          	sub	t1,t2,s1
1c00feba:	00228893          	addi	a7,t0,2
1c00febe:	01e98833          	add	a6,s3,t5
1c00fec2:	00798533          	add	a0,s3,t2
1c00fec6:	0585                	addi	a1,a1,1
1c00fec8:	01a5c0fb          	lp.setup	x1,a1,1c00fefc <KerParMatAddDynAdjust_fp+0x10a>
				O[2*j] = Min(Max((I1[2*j]>>OffIn)+I2[2*j], LB), UB); O[2*j+1] = Min(Max((I1[2*j+1]>>OffIn)+I2[2*j+1], LB), UB);
1c00fecc:	004e978b          	p.lh	a5,4(t4!) # 10004 <__L1Cl+0x4>
1c00fed0:	004e1b0b          	p.lh	s6,4(t3!)
1c00fed4:	40e7d7b3          	sra	a5,a5,a4
1c00fed8:	97da                	add	a5,a5,s6
1c00feda:	04d7e7b3          	p.max	a5,a5,a3
1c00fede:	04c7c7b3          	p.min	a5,a5,a2
1c00fee2:	00f3122b          	p.sh	a5,4(t1!)
1c00fee6:	0048978b          	p.lh	a5,4(a7!)
1c00feea:	00481b0b          	p.lh	s6,4(a6!)
1c00feee:	40e7d7b3          	sra	a5,a5,a4
1c00fef2:	97da                	add	a5,a5,s6
1c00fef4:	04d7e7b3          	p.max	a5,a5,a3
1c00fef8:	04c7c7b3          	p.min	a5,a5,a2
1c00fefc:	00f5122b          	p.sh	a5,4(a0!)
			O[W*H-1] = Min(Max((I1[W*H-1]>>OffIn) + I2[W*H-1], LB), UB);
1c00ff00:	1149778b          	p.lh	a5,s4(s2!)
1c00ff04:	114f758b          	p.lh	a1,s4(t5!)
			I1 += W*H; I2 += W*H; O += W*H;
1c00ff08:	92d2                	add	t0,t0,s4
			O[W*H-1] = Min(Max((I1[W*H-1]>>OffIn) + I2[W*H-1], LB), UB);
1c00ff0a:	40e7d7b3          	sra	a5,a5,a4
1c00ff0e:	97ae                	add	a5,a5,a1
1c00ff10:	04d7e7b3          	p.max	a5,a5,a3
1c00ff14:	04c7c7b3          	p.min	a5,a5,a2
1c00ff18:	00f3da2b          	p.sh	a5,s4(t2!)
1c00ff1c:	002047b7          	lui	a5,0x204
1c00ff20:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c00ff24:	01c7e703          	p.elw	a4,28(a5)
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])>>OffOut, LB), UB);
			I1 += W*H; I2 += W*H; O += W*H;
		}
	}
	gap_waitbarrier(0);
}
1c00ff28:	4472                	lw	s0,28(sp)
1c00ff2a:	44e2                	lw	s1,24(sp)
1c00ff2c:	4952                	lw	s2,20(sp)
1c00ff2e:	49c2                	lw	s3,16(sp)
1c00ff30:	4a32                	lw	s4,12(sp)
1c00ff32:	4aa2                	lw	s5,8(sp)
1c00ff34:	4b12                	lw	s6,4(sp)
1c00ff36:	4b82                	lw	s7,0(sp)
1c00ff38:	6105                	addi	sp,sp,32
1c00ff3a:	8082                	ret
	} else if (OffOut>0) {
1c00ff3c:	0ab05a63          	blez	a1,1c00fff0 <KerParMatAddDynAdjust_fp+0x1fe>
		for (i=First; i<Last; i++) {
1c00ff40:	fcfffee3          	bleu	a5,t6,1c00ff1c <KerParMatAddDynAdjust_fp+0x12a>
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])<<OffOut, LB), UB);
1c00ff44:	00181913          	slli	s2,a6,0x1
1c00ff48:	1979                	addi	s2,s2,-2
			for (j=0; j<((W*H)/2); j++) {
1c00ff4a:	40185493          	srai	s1,a6,0x1
1c00ff4e:	4a09                	li	s4,2
			I1 += W*H; I2 += W*H; O += W*H;
1c00ff50:	00290a93          	addi	s5,s2,2
1c00ff54:	012289b3          	add	s3,t0,s2
1c00ff58:	012f0433          	add	s0,t5,s2
1c00ff5c:	93ca                	add	t2,t2,s2
1c00ff5e:	00249b13          	slli	s6,s1,0x2
1c00ff62:	412a0a33          	sub	s4,s4,s2
1c00ff66:	41f78fb3          	sub	t6,a5,t6
1c00ff6a:	040fc07b          	lp.setup	x0,t6,1c00ffea <KerParMatAddDynAdjust_fp+0x1f8>
			for (j=0; j<((W*H)/2); j++) {
1c00ff6e:	c0a5                	beqz	s1,1c00ffce <KerParMatAddDynAdjust_fp+0x1dc>
1c00ff70:	ffcb0513          	addi	a0,s6,-4
1c00ff74:	8109                	srli	a0,a0,0x2
1c00ff76:	8f16                	mv	t5,t0
1c00ff78:	41240eb3          	sub	t4,s0,s2
1c00ff7c:	41238e33          	sub	t3,t2,s2
1c00ff80:	00228313          	addi	t1,t0,2
1c00ff84:	008a08b3          	add	a7,s4,s0
1c00ff88:	007a0833          	add	a6,s4,t2
1c00ff8c:	0505                	addi	a0,a0,1
1c00ff8e:	01e540fb          	lp.setup	x1,a0,1c00ffca <KerParMatAddDynAdjust_fp+0x1d8>
				O[2*j] = Min(Max(((I1[2*j]>>OffIn)+I2[2*j])<<OffOut, LB), UB); O[2*j+1] = Min(Max(((I1[2*j+1]>>OffIn)+I2[2*j+1])<<OffOut, LB), UB);
1c00ff92:	004f178b          	p.lh	a5,4(t5!)
1c00ff96:	004e9b8b          	p.lh	s7,4(t4!)
1c00ff9a:	40e7d7b3          	sra	a5,a5,a4
1c00ff9e:	97de                	add	a5,a5,s7
1c00ffa0:	00b797b3          	sll	a5,a5,a1
1c00ffa4:	04d7e7b3          	p.max	a5,a5,a3
1c00ffa8:	04c7c7b3          	p.min	a5,a5,a2
1c00ffac:	00fe122b          	p.sh	a5,4(t3!)
1c00ffb0:	0043178b          	p.lh	a5,4(t1!)
1c00ffb4:	00489b8b          	p.lh	s7,4(a7!)
1c00ffb8:	40e7d7b3          	sra	a5,a5,a4
1c00ffbc:	97de                	add	a5,a5,s7
1c00ffbe:	00b797b3          	sll	a5,a5,a1
1c00ffc2:	04d7e7b3          	p.max	a5,a5,a3
1c00ffc6:	04c7c7b3          	p.min	a5,a5,a2
1c00ffca:	00f8122b          	p.sh	a5,4(a6!)
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])<<OffOut, LB), UB);
1c00ffce:	1159f78b          	p.lh	a5,s5(s3!)
1c00ffd2:	1154750b          	p.lh	a0,s5(s0!)
			I1 += W*H; I2 += W*H; O += W*H;
1c00ffd6:	92d6                	add	t0,t0,s5
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])<<OffOut, LB), UB);
1c00ffd8:	40e7d7b3          	sra	a5,a5,a4
1c00ffdc:	97aa                	add	a5,a5,a0
1c00ffde:	00b797b3          	sll	a5,a5,a1
1c00ffe2:	04d7e7b3          	p.max	a5,a5,a3
1c00ffe6:	04c7c7b3          	p.min	a5,a5,a2
1c00ffea:	00f3daab          	p.sh	a5,s5(t2!)
1c00ffee:	b73d                	j	1c00ff1c <KerParMatAddDynAdjust_fp+0x12a>
		OffOut = Abs(OffOut);
1c00fff0:	040585b3          	p.avg	a1,a1,zero
		for (i=First; i<Last; i++) {
1c00fff4:	f2fff4e3          	bleu	a5,t6,1c00ff1c <KerParMatAddDynAdjust_fp+0x12a>
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])>>OffOut, LB), UB);
1c00fff8:	00181913          	slli	s2,a6,0x1
1c00fffc:	1979                	addi	s2,s2,-2
			for (j=0; j<((W*H)/2); j++) {
1c00fffe:	40185493          	srai	s1,a6,0x1
1c010002:	4409                	li	s0,2
			I1 += W*H; I2 += W*H; O += W*H;
1c010004:	00290a13          	addi	s4,s2,2
1c010008:	012289b3          	add	s3,t0,s2
1c01000c:	9f4a                	add	t5,t5,s2
1c01000e:	93ca                	add	t2,t2,s2
1c010010:	00249a93          	slli	s5,s1,0x2
1c010014:	41240433          	sub	s0,s0,s2
1c010018:	41f78fb3          	sub	t6,a5,t6
1c01001c:	03dfc07b          	lp.setup	x0,t6,1c010096 <KerParMatAddDynAdjust_fp+0x2a4>
			for (j=0; j<((W*H)/2); j++) {
1c010020:	ccb1                	beqz	s1,1c01007c <KerParMatAddDynAdjust_fp+0x28a>
1c010022:	ffca8513          	addi	a0,s5,-4
1c010026:	8109                	srli	a0,a0,0x2
1c010028:	8b16                	mv	s6,t0
1c01002a:	412f0eb3          	sub	t4,t5,s2
1c01002e:	41238e33          	sub	t3,t2,s2
1c010032:	00228313          	addi	t1,t0,2
1c010036:	01e408b3          	add	a7,s0,t5
1c01003a:	00740833          	add	a6,s0,t2
1c01003e:	0505                	addi	a0,a0,1
1c010040:	01c540fb          	lp.setup	x1,a0,1c010078 <KerParMatAddDynAdjust_fp+0x286>
				O[2*j] = Min(Max(((I1[2*j]>>OffIn)+I2[2*j])>>OffOut, LB), UB); O[2*j+1] = Min(Max(((I1[2*j+1]>>OffIn)+I2[2*j+1])>>OffOut, LB), UB);
1c010044:	004b178b          	p.lh	a5,4(s6!)
1c010048:	004e9b8b          	p.lh	s7,4(t4!)
1c01004c:	40e7d7b3          	sra	a5,a5,a4
1c010050:	40bba7db          	p.addnr	a5,s7,a1
1c010054:	04d7e7b3          	p.max	a5,a5,a3
1c010058:	04c7c7b3          	p.min	a5,a5,a2
1c01005c:	00fe122b          	p.sh	a5,4(t3!)
1c010060:	0043178b          	p.lh	a5,4(t1!)
1c010064:	00489b8b          	p.lh	s7,4(a7!)
1c010068:	40e7d7b3          	sra	a5,a5,a4
1c01006c:	40bba7db          	p.addnr	a5,s7,a1
1c010070:	04d7e7b3          	p.max	a5,a5,a3
1c010074:	04c7c7b3          	p.min	a5,a5,a2
1c010078:	00f8122b          	p.sh	a5,4(a6!)
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])>>OffOut, LB), UB);
1c01007c:	1149f78b          	p.lh	a5,s4(s3!)
1c010080:	114f750b          	p.lh	a0,s4(t5!)
			I1 += W*H; I2 += W*H; O += W*H;
1c010084:	92d2                	add	t0,t0,s4
			O[W*H-1] = Min(Max(((I1[W*H-1]>>OffIn) + I2[W*H-1])>>OffOut, LB), UB);
1c010086:	40e7d7b3          	sra	a5,a5,a4
1c01008a:	40b527db          	p.addnr	a5,a0,a1
1c01008e:	04d7e7b3          	p.max	a5,a5,a3
1c010092:	04c7c7b3          	p.min	a5,a5,a2
1c010096:	00f3da2b          	p.sh	a5,s4(t2!)
1c01009a:	b549                	j	1c00ff1c <KerParMatAddDynAdjust_fp+0x12a>

1c01009c <KerParSoftMax_fp>:
void KerParSoftMax_fp(KerSoftMax_fp_T *Arg)

{
	short int * __restrict__ In = Arg->In;
	short int * __restrict__ Out = Arg->Out;
	int N = Arg->N;
1c01009c:	00455883          	lhu	a7,4(a0)
{
1c0100a0:	7179                	addi	sp,sp,-48
1c0100a2:	d04e                	sw	s3,32(sp)
	unsigned Norm = Arg->Norm;
	static L1_CL_MEM int Reduct[8];
	int M, Sum, InvSum;
	unsigned int CoreId = gap_coreid();
1c0100a4:	f14029f3          	csrr	s3,mhartid
	Chunk = (X>>Log2Core) + ((X&(NCore-1))!=0);
1c0100a8:	f838b7b3          	p.bclr	a5,a7,28,3
1c0100ac:	0038d713          	srli	a4,a7,0x3
1c0100b0:	00f037b3          	snez	a5,a5
1c0100b4:	97ba                	add	a5,a5,a4
	unsigned int CoreId = gap_coreid();
1c0100b6:	c80999b3          	p.extractu	s3,s3,4,0
	unsigned int ChunkCell = ChunkSize(N);
	unsigned int First = CoreId*ChunkCell;
1c0100ba:	02f98e33          	mul	t3,s3,a5
{
1c0100be:	c26a                	sw	s10,4(sp)
1c0100c0:	d622                	sw	s0,44(sp)
1c0100c2:	d426                	sw	s1,40(sp)
1c0100c4:	d24a                	sw	s2,36(sp)
1c0100c6:	ce52                	sw	s4,28(sp)
1c0100c8:	cc56                	sw	s5,24(sp)
1c0100ca:	ca5a                	sw	s6,20(sp)
1c0100cc:	c85e                	sw	s7,16(sp)
1c0100ce:	c662                	sw	s8,12(sp)
	unsigned int Last  = Min(First+ChunkCell, N);
1c0100d0:	97f2                	add	a5,a5,t3
{
1c0100d2:	c466                	sw	s9,8(sp)
1c0100d4:	c06e                	sw	s11,0(sp)
	unsigned int Last  = Min(First+ChunkCell, N);
1c0100d6:	0517c8b3          	p.min	a7,a5,a7
	short int * __restrict__ In = Arg->In;
1c0100da:	00052283          	lw	t0,0(a0)
	short int * __restrict__ Out = Arg->Out;
1c0100de:	00852d03          	lw	s10,8(a0)
	unsigned Norm = Arg->Norm;
1c0100e2:	00655583          	lhu	a1,6(a0)
	unsigned int *Red = &Reduct[CoreId];

	/* Turns In into distribution */
	/* Find max */
	M = 0x80000000;
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c0100e6:	2d1e7163          	bleu	a7,t3,1c0103a8 <KerParSoftMax_fp+0x30c>
1c0100ea:	001e1f13          	slli	t5,t3,0x1
1c0100ee:	00189793          	slli	a5,a7,0x1
	M = 0x80000000;
1c0100f2:	41e787b3          	sub	a5,a5,t5
1c0100f6:	17f9                	addi	a5,a5,-2
1c0100f8:	8385                	srli	a5,a5,0x1
1c0100fa:	01e286b3          	add	a3,t0,t5
1c0100fe:	80000737          	lui	a4,0x80000
1c010102:	0785                	addi	a5,a5,1
1c010104:	0047c0fb          	lp.setup	x1,a5,1c01010c <KerParSoftMax_fp+0x70>
	for (int i=First; i<Last; i++) M = Max(M, In[i]);
1c010108:	0026960b          	p.lh	a2,2(a3!)
1c01010c:	04c76733          	p.max	a4,a4,a2
	Reduct[CoreId] = M;
1c010110:	10000fb7          	lui	t6,0x10000
1c010114:	020f8f93          	addi	t6,t6,32 # 10000020 <Reduct.16880>
1c010118:	00299b93          	slli	s7,s3,0x2
1c01011c:	002047b7          	lui	a5,0x204
1c010120:	00efeba3          	p.sw	a4,s7(t6)
1c010124:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c010128:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c01012c:	26099963          	bnez	s3,1c01039e <KerParSoftMax_fp+0x302>
		M = Reduct[0];
1c010130:	000fa783          	lw	a5,0(t6)
		for (int i=1; i<gap_ncore(); i++) M = Max(M, Reduct[i]);
1c010134:	004fa603          	lw	a2,4(t6)
1c010138:	008fa683          	lw	a3,8(t6)
1c01013c:	00cfa703          	lw	a4,12(t6)
1c010140:	010fa503          	lw	a0,16(t6)
1c010144:	04c7e7b3          	p.max	a5,a5,a2
1c010148:	04d7e7b3          	p.max	a5,a5,a3
1c01014c:	014fa603          	lw	a2,20(t6)
1c010150:	018fa683          	lw	a3,24(t6)
1c010154:	04e7e7b3          	p.max	a5,a5,a4
1c010158:	04a7e7b3          	p.max	a5,a5,a0
1c01015c:	01cfa703          	lw	a4,28(t6)
1c010160:	04c7e7b3          	p.max	a5,a5,a2
1c010164:	04d7e7b3          	p.max	a5,a5,a3
1c010168:	04e7e7b3          	p.max	a5,a5,a4
		//for (int i=1; i<8; i++) M = Max(M, Reduct[i]);
		Reduct[0] = M;
1c01016c:	00ffa023          	sw	a5,0(t6)
1c010170:	002047b7          	lui	a5,0x204
1c010174:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c010178:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	/* Computes Exp(In[i]-M) for all in and sum results.
	   Since we substract max from In[i] we always have exp(X) with X<=0 thus exp(X)<=1.0
	   By definition of softmax Sum is <= 1
	*/
	M = Reduct[0];
1c01017c:	000faa03          	lw	s4,0(t6)
	Sum = 0;
	for (int i=First; i<Last; i++) {
1c010180:	271e7363          	bleu	a7,t3,1c0103e6 <KerParSoftMax_fp+0x34a>
1c010184:	001e1f13          	slli	t5,t3,0x1
	FractX = (Y & 0x7FFF);
1c010188:	6aa1                	lui	s5,0x8
1c01018a:	44bd                	li	s1,15
1c01018c:	001e0793          	addi	a5,t3,1
1c010190:	92fa                	add	t0,t0,t5
1c010192:	8c8d                	sub	s1,s1,a1
1c010194:	9f6a                	add	t5,t5,s10
	M = 0x80000000;
1c010196:	4401                	li	s0,0
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c010198:	4c2d                	li	s8,11
	FractX = (Y & 0x7FFF);
1c01019a:	fffa8c93          	addi	s9,s5,-1 # 7fff <__rt_stack_size+0x77ff>
	if (!X) return 0x8000;
1c01019e:	41c88eb3          	sub	t4,a7,t3
1c0101a2:	24f8e063          	bltu	a7,a5,1c0103e2 <KerParSoftMax_fp+0x346>
1c0101a6:	22088e63          	beqz	a7,1c0103e2 <KerParSoftMax_fp+0x346>
		unsigned int Exp = Exp_fp_17_15((In[i]-M)<<(15-Norm));
1c0101aa:	0022978b          	p.lh	a5,2(t0!)
1c0101ae:	414787b3          	sub	a5,a5,s4
1c0101b2:	009797b3          	sll	a5,a5,s1
	if (!X) return 0x8000;
1c0101b6:	e3f1                	bnez	a5,1c01027a <KerParSoftMax_fp+0x1de>
1c0101b8:	9456                	add	s0,s0,s5
1c0101ba:	75e1                	lui	a1,0xffff8
		Out[i] = Exp; Sum += Exp;
1c0101bc:	00bf112b          	p.sh	a1,2(t5!)
	for (int i=First; i<Last; i++) {
1c0101c0:	1efd                	addi	t4,t4,-1
1c0101c2:	fe0e94e3          	bnez	t4,1c0101aa <KerParSoftMax_fp+0x10e>
1c0101c6:	002047b7          	lui	a5,0x204
	}
	Reduct[CoreId] = Sum;
1c0101ca:	008feba3          	p.sw	s0,s7(t6)
1c0101ce:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0101d2:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);
	if (CoreId==0) {
1c0101d6:	02099b63          	bnez	s3,1c01020c <KerParSoftMax_fp+0x170>
		Sum = 0;
		for (int i=0; i<gap_ncore(); i++) Sum += Reduct[i];
1c0101da:	000fa703          	lw	a4,0(t6)
1c0101de:	004fa783          	lw	a5,4(t6)
1c0101e2:	008fa603          	lw	a2,8(t6)
1c0101e6:	00cfa683          	lw	a3,12(t6)
1c0101ea:	97ba                	add	a5,a5,a4
1c0101ec:	010fa703          	lw	a4,16(t6)
1c0101f0:	97b2                	add	a5,a5,a2
1c0101f2:	014fa603          	lw	a2,20(t6)
1c0101f6:	97b6                	add	a5,a5,a3
1c0101f8:	018fa683          	lw	a3,24(t6)
1c0101fc:	97ba                	add	a5,a5,a4
1c0101fe:	01cfa703          	lw	a4,28(t6)
1c010202:	97b2                	add	a5,a5,a2
1c010204:	97b6                	add	a5,a5,a3
1c010206:	97ba                	add	a5,a5,a4
		//for (int i=0; i<8; i++) Sum += Reduct[i];
		Reduct[0] = Sum;
1c010208:	00ffa023          	sw	a5,0(t6)
1c01020c:	002047b7          	lui	a5,0x204
1c010210:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c010214:	01c7e703          	p.elw	a4,28(a5)
	}
	gap_waitbarrier(0);
	Sum = Reduct[0];
	InvSum = (FP2FIX(1.0, 15)<<15)/Sum;
1c010218:	3fff86b7          	lui	a3,0x3fff8
1c01021c:	000fa783          	lw	a5,0(t6)
1c010220:	02f6c6b3          	div	a3,a3,a5
	for (int i=First; i<Last; i++) Out[i] = Abs(gap_roundnorm_reg(Out[i]*InvSum, 15));
1c010224:	031e7763          	bleu	a7,t3,1c010252 <KerParSoftMax_fp+0x1b6>
1c010228:	0e06                	slli	t3,t3,0x1
1c01022a:	00189713          	slli	a4,a7,0x1
1c01022e:	41c70733          	sub	a4,a4,t3
1c010232:	1779                	addi	a4,a4,-2
1c010234:	8305                	srli	a4,a4,0x1
1c010236:	9d72                	add	s10,s10,t3
1c010238:	0705                	addi	a4,a4,1
1c01023a:	00a740fb          	lp.setup	x1,a4,1c01024e <KerParSoftMax_fp+0x1b2>
1c01023e:	000d1783          	lh	a5,0(s10)
1c010242:	02d787b3          	mul	a5,a5,a3
1c010246:	1e07e7db          	p.mac.zh.zl	a5,a5,zero,a5
1c01024a:	040787b3          	p.avg	a5,a5,zero
1c01024e:	00fd112b          	p.sh	a5,2(s10!)
1c010252:	002047b7          	lui	a5,0x204
1c010256:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c01025a:	01c7e703          	p.elw	a4,28(a5)
	gap_waitbarrier(0);

}
1c01025e:	5432                	lw	s0,44(sp)
1c010260:	54a2                	lw	s1,40(sp)
1c010262:	5912                	lw	s2,36(sp)
1c010264:	5982                	lw	s3,32(sp)
1c010266:	4a72                	lw	s4,28(sp)
1c010268:	4ae2                	lw	s5,24(sp)
1c01026a:	4b52                	lw	s6,20(sp)
1c01026c:	4bc2                	lw	s7,16(sp)
1c01026e:	4c32                	lw	s8,12(sp)
1c010270:	4ca2                	lw	s9,8(sp)
1c010272:	4d12                	lw	s10,4(sp)
1c010274:	4d82                	lw	s11,0(sp)
1c010276:	6145                	addi	sp,sp,48
1c010278:	8082                	ret
	Y = Abs(X);
1c01027a:	04078733          	p.avg	a4,a5,zero
	IntX = (Y >> 15);
1c01027e:	40f75693          	srai	a3,a4,0xf
	if (IntX >= (int) ARRAYSIZE (IntegerExpLUT)) {
1c010282:	02dc5163          	ble	a3,s8,1c0102a4 <KerParSoftMax_fp+0x208>
		if (Y==X) return 0x7FFFFFFF; else return 0;
1c010286:	4581                	li	a1,0
1c010288:	f2e79ae3          	bne	a5,a4,1c0101bc <KerParSoftMax_fp+0x120>
1c01028c:	800005b7          	lui	a1,0x80000
1c010290:	fff5c593          	not	a1,a1
1c010294:	942e                	add	s0,s0,a1
1c010296:	55fd                	li	a1,-1
		Out[i] = Exp; Sum += Exp;
1c010298:	00bf112b          	p.sh	a1,2(t5!)
	for (int i=First; i<Last; i++) {
1c01029c:	1efd                	addi	t4,t4,-1
1c01029e:	f00e96e3          	bnez	t4,1c0101aa <KerParSoftMax_fp+0x10e>
1c0102a2:	b715                	j	1c0101c6 <KerParSoftMax_fp+0x12a>
	FractX = (Y & 0x7FFF);
1c0102a4:	01977733          	and	a4,a4,s9
	if (gap_bitextractu(FractX, 1, 14)) {
1c0102a8:	01171613          	slli	a2,a4,0x11
1c0102ac:	00065563          	bgez	a2,1c0102b6 <KerParSoftMax_fp+0x21a>
		FractX -= 0x8000; IntX++;
1c0102b0:	41570733          	sub	a4,a4,s5
1c0102b4:	0685                	addi	a3,a3,1
	FractX_s = FractX; Z_s = FractX; Result = 0;
1c0102b6:	10074533          	p.exths	a0,a4
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0102ba:	9ea5465b          	p.mac.sl.zl	a2,a0,a0,a5
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0102be:	1c017837          	lui	a6,0x1c017
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0102c2:	00f71593          	slli	a1,a4,0xf
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0102c6:	0686                	slli	a3,a3,0x1
1c0102c8:	24080813          	addi	a6,a6,576 # 1c017240 <FractionExpLUT>
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0102cc:	40e58733          	sub	a4,a1,a4
	ScaledInt = IntegerExpLUT[IntX]; ScaledFract = FractionExpLUT[IntX];
1c0102d0:	00d805b3          	add	a1,a6,a3
1c0102d4:	0005d803          	lhu	a6,0(a1) # 80000000 <pulp__FC+0x80000001>
1c0102d8:	1c0175b7          	lui	a1,0x1c017
1c0102dc:	25858593          	addi	a1,a1,600 # 1c017258 <IntegerExpLUT>
1c0102e0:	96ae                	add	a3,a3,a1
1c0102e2:	0006d303          	lhu	t1,0(a3) # 3fff8000 <__l2_end+0x23fe03e4>
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0102e6:	100646b3          	p.exths	a3,a2
1c0102ea:	9ea6c95b          	p.mac.sl.zl	s2,a3,a0,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c0102ee:	06ba                	slli	a3,a3,0xe
1c0102f0:	9736                	add	a4,a4,a3
	if (Result && (X > 0x7FFFFFFF)) 
1c0102f2:	4581                	li	a1,0
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c0102f4:	10094933          	p.exths	s2,s2
1c0102f8:	9ea946db          	p.mac.sl.zl	a3,s2,a0,a5
1c0102fc:	1006c3b3          	p.exths	t2,a3
1c010300:	9ea3c65b          	p.mac.sl.zl	a2,t2,a0,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c010304:	00239693          	slli	a3,t2,0x2
1c010308:	969e                	add	a3,a3,t2
1c01030a:	068a                	slli	a3,a3,0x2
1c01030c:	969e                	add	a3,a3,t2
1c01030e:	00669393          	slli	t2,a3,0x6
1c010312:	93b6                	add	t2,t2,a3
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c010314:	10064633          	p.exths	a2,a2
1c010318:	9ea646db          	p.mac.sl.zl	a3,a2,a0,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c01031c:	00461b13          	slli	s6,a2,0x4
1c010320:	9b32                	add	s6,s6,a2
1c010322:	0b12                	slli	s6,s6,0x4
1c010324:	9b32                	add	s6,s6,a2
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c010326:	1006c6b3          	p.exths	a3,a3
1c01032a:	9ea6cddb          	p.mac.sl.zl	s11,a3,a0,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c01032e:	00169613          	slli	a2,a3,0x1
1c010332:	9636                	add	a2,a2,a3
1c010334:	060e                	slli	a2,a2,0x3
1c010336:	8e15                	sub	a2,a2,a3
1c010338:	6685                	lui	a3,0x1
1c01033a:	55568693          	addi	a3,a3,1365 # 1555 <__rt_stack_size+0xd55>
1c01033e:	0606                	slli	a2,a2,0x1
1c010340:	42d90733          	p.mac	a4,s2,a3
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c010344:	100dcdb3          	p.exths	s11,s11
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c010348:	003d9693          	slli	a3,s11,0x3
1c01034c:	41b686b3          	sub	a3,a3,s11
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c010350:	9eadcddb          	p.mac.sl.zl	s11,s11,a0,a5
		Result += Z_s*ExpCoeffLUT[i]; // gap_macs(Result, Z, ExpCoeffLUT[ i ]);
1c010354:	971e                	add	a4,a4,t2
1c010356:	975a                	add	a4,a4,s6
1c010358:	9732                	add	a4,a4,a2
1c01035a:	9736                	add	a4,a4,a3
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c01035c:	6641                	lui	a2,0x10
1c01035e:	167d                	addi	a2,a2,-1
		Z_s = gap_mulsRN(Z_s, FractX_s, 15);
1c010360:	100dcdb3          	p.exths	s11,s11
	Result = gap_roundnorm(Result, 15) + ExpCoeffLUT[0];
1c010364:	1fb7675b          	p.mac.zh.zl	a4,a4,s11,a5
1c010368:	9766                	add	a4,a4,s9
	Result = gap_muluRN(U_Res, ScaledFract, 15) + U_Res * ScaledInt;
1c01036a:	1f07485b          	p.mac.zl.zl	a6,a4,a6,a5
1c01036e:	8f71                	and	a4,a4,a2
1c010370:	42670833          	p.mac	a6,a4,t1
	if (Result && (X > 0x7FFFFFFF)) 
1c010374:	e40804e3          	beqz	a6,1c0101bc <KerParSoftMax_fp+0x120>
1c010378:	0007da63          	bgez	a5,1c01038c <KerParSoftMax_fp+0x2f0>
		Result = ((0x7FFFFFFF / Result) >> 1);      /* negative value */
1c01037c:	800006b7          	lui	a3,0x80000
1c010380:	fff6c693          	not	a3,a3
1c010384:	0306c833          	div	a6,a3,a6
1c010388:	40185813          	srai	a6,a6,0x1
1c01038c:	100845b3          	p.exths	a1,a6
		Out[i] = Exp; Sum += Exp;
1c010390:	00bf112b          	p.sh	a1,2(t5!)
1c010394:	9442                	add	s0,s0,a6
	for (int i=First; i<Last; i++) {
1c010396:	1efd                	addi	t4,t4,-1
1c010398:	e00e99e3          	bnez	t4,1c0101aa <KerParSoftMax_fp+0x10e>
1c01039c:	b52d                	j	1c0101c6 <KerParSoftMax_fp+0x12a>
1c01039e:	01c7e703          	p.elw	a4,28(a5)
	M = Reduct[0];
1c0103a2:	000faa03          	lw	s4,0(t6)
1c0103a6:	b3cd                	j	1c010188 <KerParSoftMax_fp+0xec>
	Reduct[CoreId] = M;
1c0103a8:	10000fb7          	lui	t6,0x10000
1c0103ac:	020f8f93          	addi	t6,t6,32 # 10000020 <Reduct.16880>
1c0103b0:	00299b93          	slli	s7,s3,0x2
1c0103b4:	800007b7          	lui	a5,0x80000
1c0103b8:	00ffeba3          	p.sw	a5,s7(t6)
1c0103bc:	002047b7          	lui	a5,0x204
1c0103c0:	017f8733          	add	a4,t6,s7
1c0103c4:	20078793          	addi	a5,a5,512 # 204200 <__L2+0x184200>
1c0103c8:	01c7e683          	p.elw	a3,28(a5)
	if (CoreId==0) {
1c0103cc:	d60982e3          	beqz	s3,1c010130 <KerParSoftMax_fp+0x94>
1c0103d0:	01c7e683          	p.elw	a3,28(a5)
	Reduct[CoreId] = Sum;
1c0103d4:	00072023          	sw	zero,0(a4) # 80000000 <pulp__FC+0x80000001>
1c0103d8:	01c7e703          	p.elw	a4,28(a5)
1c0103dc:	01c7e703          	p.elw	a4,28(a5)
1c0103e0:	bd8d                	j	1c010252 <KerParSoftMax_fp+0x1b6>
1c0103e2:	4e85                	li	t4,1
1c0103e4:	b3d9                	j	1c0101aa <KerParSoftMax_fp+0x10e>
1c0103e6:	000feba3          	p.sw	zero,s7(t6)
1c0103ea:	01c7e703          	p.elw	a4,28(a5)
1c0103ee:	b3f5                	j	1c0101da <KerParSoftMax_fp+0x13e>

1c0103f0 <pi_flash_open>:


int pi_flash_open(struct pi_device *device)
{
  struct pi_flash_conf *conf = (struct pi_flash_conf *)device->config;
  pi_flash_api_t *api = (pi_flash_api_t *)conf->api;
1c0103f0:	415c                	lw	a5,4(a0)
1c0103f2:	439c                	lw	a5,0(a5)
  device->api = (struct pi_device_api *)api;
  return api->open(device);
1c0103f4:	0007a303          	lw	t1,0(a5)
  device->api = (struct pi_device_api *)api;
1c0103f8:	c11c                	sw	a5,0(a0)
  return api->open(device);
1c0103fa:	8302                	jr	t1

1c0103fc <__flash_conf_init>:
}


void __flash_conf_init(struct pi_flash_conf *conf)
{
}
1c0103fc:	8082                	ret

1c0103fe <pi_task_wait_on.isra.3>:
{
  pi_task_t task;
  int result = pi_fs_copy_2d_async(file, index, buffer, size, stride, length, ext2loc, pi_task_block(&task));
  pi_task_wait_on(&task);
  return result;
}
1c0103fe:	1141                	addi	sp,sp,-16
1c010400:	c422                	sw	s0,8(sp)
1c010402:	c226                	sw	s1,4(sp)
1c010404:	c606                	sw	ra,12(sp)
1c010406:	c04a                	sw	s2,0(sp)
1c010408:	842a                	mv	s0,a0
1c01040a:	00040783          	lb	a5,0(s0)
1c01040e:	c799                	beqz	a5,1c01041c <pi_task_wait_on.isra.3+0x1e>
1c010410:	40b2                	lw	ra,12(sp)
1c010412:	4422                	lw	s0,8(sp)
1c010414:	4492                	lw	s1,4(sp)
1c010416:	4902                	lw	s2,0(sp)
1c010418:	0141                	addi	sp,sp,16
1c01041a:	8082                	ret
1c01041c:	30047973          	csrrci	s2,mstatus,8
1c010420:	4585                	li	a1,1
1c010422:	01c00513          	li	a0,28
1c010426:	517020ef          	jal	ra,1c01313c <__rt_event_execute>
1c01042a:	30091073          	csrw	mstatus,s2
1c01042e:	bff1                	j	1c01040a <pi_task_wait_on.isra.3+0xc>

1c010430 <pi_fs_conf_init>:
1c010430:	00052023          	sw	zero,0(a0)
1c010434:	00052423          	sw	zero,8(a0)
1c010438:	00050623          	sb	zero,12(a0)
1c01043c:	00052823          	sw	zero,16(a0)
1c010440:	8082                	ret

1c010442 <pi_fs_mount>:
1c010442:	4158                	lw	a4,4(a0)
1c010444:	4b1c                	lw	a5,16(a4)
1c010446:	eb89                	bnez	a5,1c010458 <pi_fs_mount+0x16>
1c010448:	431c                	lw	a5,0(a4)
1c01044a:	cb99                	beqz	a5,1c010460 <pi_fs_mount+0x1e>
1c01044c:	0017bf63          	p.bneimm	a5,1,1c01046a <pi_fs_mount+0x28>
1c010450:	1c0177b7          	lui	a5,0x1c017
1c010454:	57078793          	addi	a5,a5,1392 # 1c017570 <__pi_host_fs_api>
1c010458:	0007a303          	lw	t1,0(a5)
1c01045c:	c11c                	sw	a5,0(a0)
1c01045e:	8302                	jr	t1
1c010460:	1c0177b7          	lui	a5,0x1c017
1c010464:	54878793          	addi	a5,a5,1352 # 1c017548 <__pi_read_fs_api>
1c010468:	bfc5                	j	1c010458 <pi_fs_mount+0x16>
1c01046a:	557d                	li	a0,-1
1c01046c:	8082                	ret

1c01046e <pi_fs_unmount>:
1c01046e:	411c                	lw	a5,0(a0)
1c010470:	0047a303          	lw	t1,4(a5)
1c010474:	8302                	jr	t1

1c010476 <pi_fs_open>:
1c010476:	411c                	lw	a5,0(a0)
1c010478:	0087a303          	lw	t1,8(a5)
1c01047c:	8302                	jr	t1

1c01047e <pi_fs_close>:
1c01047e:	415c                	lw	a5,4(a0)
1c010480:	00c7a303          	lw	t1,12(a5)
1c010484:	8302                	jr	t1

1c010486 <pi_fs_read_async>:
1c010486:	415c                	lw	a5,4(a0)
1c010488:	0107a303          	lw	t1,16(a5)
1c01048c:	8302                	jr	t1

1c01048e <pi_fs_read>:
1c01048e:	7175                	addi	sp,sp,-144
1c010490:	4785                	li	a5,1
1c010492:	868a                	mv	a3,sp
1c010494:	c706                	sw	ra,140(sp)
1c010496:	c522                	sw	s0,136(sp)
1c010498:	cc3e                	sw	a5,24(sp)
1c01049a:	d43e                	sw	a5,40(sp)
1c01049c:	c202                	sw	zero,4(sp)
1c01049e:	00010a23          	sb	zero,20(sp)
1c0104a2:	37d5                	jal	1c010486 <pi_fs_read_async>
1c0104a4:	842a                	mv	s0,a0
1c0104a6:	0848                	addi	a0,sp,20
1c0104a8:	3f99                	jal	1c0103fe <pi_task_wait_on.isra.3>
1c0104aa:	8522                	mv	a0,s0
1c0104ac:	40ba                	lw	ra,140(sp)
1c0104ae:	442a                	lw	s0,136(sp)
1c0104b0:	6149                	addi	sp,sp,144
1c0104b2:	8082                	ret

1c0104b4 <pi_fs_write_async>:
1c0104b4:	415c                	lw	a5,4(a0)
1c0104b6:	0187a303          	lw	t1,24(a5)
1c0104ba:	8302                	jr	t1

1c0104bc <pi_fs_write>:
1c0104bc:	7175                	addi	sp,sp,-144
1c0104be:	4785                	li	a5,1
1c0104c0:	868a                	mv	a3,sp
1c0104c2:	c706                	sw	ra,140(sp)
1c0104c4:	c522                	sw	s0,136(sp)
1c0104c6:	cc3e                	sw	a5,24(sp)
1c0104c8:	d43e                	sw	a5,40(sp)
1c0104ca:	c202                	sw	zero,4(sp)
1c0104cc:	00010a23          	sb	zero,20(sp)
1c0104d0:	37d5                	jal	1c0104b4 <pi_fs_write_async>
1c0104d2:	842a                	mv	s0,a0
1c0104d4:	0848                	addi	a0,sp,20
1c0104d6:	3725                	jal	1c0103fe <pi_task_wait_on.isra.3>
1c0104d8:	8522                	mv	a0,s0
1c0104da:	40ba                	lw	ra,140(sp)
1c0104dc:	442a                	lw	s0,136(sp)
1c0104de:	6149                	addi	sp,sp,144
1c0104e0:	8082                	ret

1c0104e2 <pi_fs_copy_async>:
1c0104e2:	00452803          	lw	a6,4(a0)
1c0104e6:	02082303          	lw	t1,32(a6)
1c0104ea:	8302                	jr	t1

1c0104ec <pi_fs_seek>:

int32_t pi_fs_seek(pi_fs_file_t *file, unsigned int offset)
{
  return file->api->seek(file, offset);
1c0104ec:	415c                	lw	a5,4(a0)
1c0104ee:	01c7a303          	lw	t1,28(a5)
1c0104f2:	8302                	jr	t1

1c0104f4 <pi_flash_read_async>:
}

static inline void pi_flash_read_async(struct pi_device *device, uint32_t pi_flash_addr, void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->read_async(device, pi_flash_addr, data, size, task);
1c0104f4:	411c                	lw	a5,0(a0)
1c0104f6:	00c7a303          	lw	t1,12(a5)
1c0104fa:	8302                	jr	t1

1c0104fc <__pi_read_fs_write>:
    return block_size;
}

static int32_t __pi_read_fs_write(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *task)
{
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c0104fc:	411c                	lw	a5,0(a0)
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c0104fe:	01852803          	lw	a6,24(a0)
{
1c010502:	8736                	mv	a4,a3
    pi_read_fs_t *fs = (pi_read_fs_t *) _file->fs->data;
1c010504:	4794                	lw	a3,8(a5)
    unsigned int addr = file->addr + file->offset;
1c010506:	495c                	lw	a5,20(a0)
{
1c010508:	88ae                	mv	a7,a1
1c01050a:	1141                	addi	sp,sp,-16
    unsigned int addr = file->addr + file->offset;
1c01050c:	010785b3          	add	a1,a5,a6
    if(file->offset + size > file->fs_file.size)
1c010510:	00c52803          	lw	a6,12(a0)
{
1c010514:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c010516:	00c78333          	add	t1,a5,a2
1c01051a:	00687463          	bleu	t1,a6,1c010522 <__pi_read_fs_write+0x26>
    {
        real_size = file->fs_file.size - file->offset;
1c01051e:	40f80633          	sub	a2,a6,a5
    }
    file->offset += real_size;
1c010522:	97b2                	add	a5,a5,a2
1c010524:	c95c                	sw	a5,20(a0)
    
    pi_flash_program_async(fs->flash, addr, (void *) buffer, real_size, task);
1c010526:	4288                	lw	a0,0(a3)
}

static inline void pi_flash_program_async(struct pi_device *device, uint32_t pi_flash_addr, const void *data, uint32_t size, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  api->program_async(device, pi_flash_addr, data, size, task);
1c010528:	86b2                	mv	a3,a2
1c01052a:	8646                	mv	a2,a7
1c01052c:	411c                	lw	a5,0(a0)
1c01052e:	4b9c                	lw	a5,16(a5)
1c010530:	9782                	jalr	a5
    
    return 0;
}
1c010532:	40b2                	lw	ra,12(sp)
1c010534:	4501                	li	a0,0
1c010536:	0141                	addi	sp,sp,16
1c010538:	8082                	ret

1c01053a <__pi_read_fs_seek>:
static int32_t __pi_read_fs_seek(pi_fs_file_t *_file, unsigned int offset)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    //printf("[FS] File seek (file: %p, offset: 0x%x)\n", file, offset);
    
    if(offset < file->fs_file.size)
1c01053a:	455c                	lw	a5,12(a0)
1c01053c:	00f5f563          	bleu	a5,a1,1c010546 <__pi_read_fs_seek+0xc>
    {
        file->offset = offset;
1c010540:	c94c                	sw	a1,20(a0)
        return 0;
1c010542:	4501                	li	a0,0
1c010544:	8082                	ret
    }
    return -1;
1c010546:	557d                	li	a0,-1
}
1c010548:	8082                	ret

1c01054a <__pi_read_fs_direct_read_async>:
}

static int32_t __pi_read_fs_direct_read_async(pi_fs_file_t *_file, void *buffer, uint32_t size, pi_task_t *event)
{
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c01054a:	411c                	lw	a5,0(a0)
{
1c01054c:	1141                	addi	sp,sp,-16
1c01054e:	c422                	sw	s0,8(sp)
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c010550:	0087a803          	lw	a6,8(a5)
{
1c010554:	8432                	mv	s0,a2
    // Mask interrupt to update file current position and get information
    //int irq = pi_irq_disable();
    
    int real_size = size;
    unsigned int addr = file->addr + file->offset;
1c010556:	495c                	lw	a5,20(a0)
1c010558:	4d10                	lw	a2,24(a0)
{
1c01055a:	88ae                	mv	a7,a1
1c01055c:	8736                	mv	a4,a3
    unsigned int addr = file->addr + file->offset;
1c01055e:	00c785b3          	add	a1,a5,a2
    if(file->offset + size > file->fs_file.size)
1c010562:	4550                	lw	a2,12(a0)
{
1c010564:	c606                	sw	ra,12(sp)
    if(file->offset + size > file->fs_file.size)
1c010566:	008786b3          	add	a3,a5,s0
1c01056a:	00d67463          	bleu	a3,a2,1c010572 <__pi_read_fs_direct_read_async+0x28>
    {
        real_size = file->fs_file.size - file->offset;
1c01056e:	40f60433          	sub	s0,a2,a5
    }
    file->offset += real_size;
1c010572:	97a2                	add	a5,a5,s0
1c010574:	c95c                	sw	a5,20(a0)
    
    //pi_irq_restore(irq);
    
    pi_flash_read_async(fs->flash, addr, (void *) buffer, real_size, event);
1c010576:	00082503          	lw	a0,0(a6)
1c01057a:	86a2                	mv	a3,s0
1c01057c:	8646                	mv	a2,a7
1c01057e:	3f9d                	jal	1c0104f4 <pi_flash_read_async>
    
    return real_size;
}
1c010580:	8522                	mv	a0,s0
1c010582:	40b2                	lw	ra,12(sp)
1c010584:	4422                	lw	s0,8(sp)
1c010586:	0141                	addi	sp,sp,16
1c010588:	8082                	ret

1c01058a <__pi_read_fs_copy_async>:


static int32_t
__pi_read_fs_copy_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, int32_t ext2loc,
                        pi_task_t *task)
{
1c01058a:	882a                	mv	a6,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c01058c:	4108                	lw	a0,0(a0)
    return pi_flash_copy_async(fs->flash, file->addr + index, buffer, size, ext2loc, task);
1c01058e:	01882803          	lw	a6,24(a6)
1c010592:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_async(device, pi_flash_addr, buffer, size, ext2loc, task);
1c010594:	95c2                	add	a1,a1,a6
1c010596:	4108                	lw	a0,0(a0)
1c010598:	00052883          	lw	a7,0(a0)
1c01059c:	0288a303          	lw	t1,40(a7)
1c0105a0:	8302                	jr	t1

1c0105a2 <__pi_read_fs_copy_2d_async>:
}

static int32_t
__pi_read_fs_copy_2d_async(pi_fs_file_t *_file, uint32_t index, void *buffer, uint32_t size, uint32_t stride,
                           uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c0105a2:	832a                	mv	t1,a0
    pi_read_fs_file_t *file = (pi_read_fs_file_t *) _file;
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0105a4:	4108                	lw	a0,0(a0)
    return pi_flash_copy_2d_async(fs->flash, file->addr + index, buffer, size, stride, length, ext2loc, task);
1c0105a6:	01832e03          	lw	t3,24(t1)
1c0105aa:	4508                	lw	a0,8(a0)
}

static inline int pi_flash_copy_2d_async(struct pi_device *device, uint32_t pi_flash_addr, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int ext2loc, pi_task_t *task)
{
  pi_flash_api_t *api = (pi_flash_api_t *)device->api;
  return api->copy_2d_async(device, pi_flash_addr, buffer, size, stride, length, ext2loc, task);
1c0105ac:	95f2                	add	a1,a1,t3
1c0105ae:	4108                	lw	a0,0(a0)
1c0105b0:	00052303          	lw	t1,0(a0)
1c0105b4:	02c32303          	lw	t1,44(t1)
1c0105b8:	8302                	jr	t1

1c0105ba <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0105ba:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c0105be:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c0105c2:	00052023          	sw	zero,0(a0)
1c0105c6:	01c00713          	li	a4,28
  if (sched->first) {
1c0105ca:	c619                	beqz	a2,1c0105d8 <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c0105cc:	435c                	lw	a5,4(a4)
1c0105ce:	c388                	sw	a0,0(a5)
  sched->last = event;
1c0105d0:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c0105d2:	30069073          	csrw	mstatus,a3
}
1c0105d6:	8082                	ret
    sched->first = event;
1c0105d8:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0105dc:	bfd5                	j	1c0105d0 <rt_event_enqueue+0x16>

1c0105de <__pi_fs_free>:
    if(fs != NULL)
1c0105de:	c91d                	beqz	a0,1c010614 <__pi_fs_free+0x36>
{
1c0105e0:	1141                	addi	sp,sp,-16
1c0105e2:	c422                	sw	s0,8(sp)
1c0105e4:	842a                	mv	s0,a0
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0105e6:	09c52503          	lw	a0,156(a0)
{
1c0105ea:	c606                	sw	ra,12(sp)
        if(fs->pi_fs_info) pmsis_l2_malloc_free(fs->pi_fs_info, fs->pi_fs_l2->pi_fs_size);
1c0105ec:	c511                	beqz	a0,1c0105f8 <__pi_fs_free+0x1a>
1c0105ee:	09842783          	lw	a5,152(s0)
1c0105f2:	438c                	lw	a1,0(a5)
1c0105f4:	603020ef          	jal	ra,1c0133f6 <pi_l2_free>
        if(fs->pi_fs_l2) pmsis_l2_malloc_free(fs->pi_fs_l2, sizeof(pi_fs_l2_t));
1c0105f8:	09842503          	lw	a0,152(s0)
1c0105fc:	c501                	beqz	a0,1c010604 <__pi_fs_free+0x26>
1c0105fe:	45a1                	li	a1,8
1c010600:	5f7020ef          	jal	ra,1c0133f6 <pi_l2_free>
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c010604:	8522                	mv	a0,s0
}
1c010606:	4422                	lw	s0,8(sp)
1c010608:	40b2                	lw	ra,12(sp)
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c01060a:	1b800593          	li	a1,440
}
1c01060e:	0141                	addi	sp,sp,16
        pmsis_l2_malloc_free(fs, sizeof(pi_read_fs_t));
1c010610:	5e70206f          	j	1c0133f6 <pi_l2_free>
1c010614:	8082                	ret

1c010616 <__pi_read_fs_unmount>:
    __pi_fs_free(fs);
1c010616:	4508                	lw	a0,8(a0)
1c010618:	b7d9                	j	1c0105de <__pi_fs_free>

1c01061a <__pi_read_fs_open>:
{
1c01061a:	1101                	addi	sp,sp,-32
1c01061c:	ca26                	sw	s1,20(sp)
1c01061e:	c452                	sw	s4,8(sp)
1c010620:	c256                	sw	s5,4(sp)
1c010622:	ce06                	sw	ra,28(sp)
1c010624:	cc22                	sw	s0,24(sp)
1c010626:	c84a                	sw	s2,16(sp)
1c010628:	c64e                	sw	s3,12(sp)
1c01062a:	c05a                	sw	s6,0(sp)
1c01062c:	8a2a                	mv	s4,a0
1c01062e:	8aae                	mv	s5,a1
    pi_read_fs_t *fs = (pi_read_fs_t *) device->data;
1c010630:	4504                	lw	s1,8(a0)
    if(flags == PI_FS_FLAGS_WRITE)
1c010632:	08163f63          	p.bneimm	a2,1,1c0106d0 <__pi_read_fs_open+0xb6>
        if(fs->last_created_file)
1c010636:	12c4a783          	lw	a5,300(s1)
1c01063a:	c399                	beqz	a5,1c010640 <__pi_read_fs_open+0x26>
    return NULL;
1c01063c:	4501                	li	a0,0
1c01063e:	a8bd                	j	1c0106bc <__pi_read_fs_open+0xa2>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c010640:	0c000513          	li	a0,192
1c010644:	5a5020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c010648:	842a                	mv	s0,a0
        if(file == NULL) return NULL;
1c01064a:	d96d                	beqz	a0,1c01063c <__pi_read_fs_open+0x22>
        int str_len = strlen(file_name);
1c01064c:	8556                	mv	a0,s5
1c01064e:	186050ef          	jal	ra,1c0157d4 <strlen>
        int header_size = ((str_len + 7) & ~0x7) + 12;
1c010652:	00750913          	addi	s2,a0,7
1c010656:	c4093933          	p.bclr	s2,s2,2,0
1c01065a:	0931                	addi	s2,s2,12
        int str_len = strlen(file_name);
1c01065c:	89aa                	mv	s3,a0
        uint8_t *header = pmsis_l2_malloc(header_size);
1c01065e:	854a                	mv	a0,s2
1c010660:	589020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
        if(header == NULL)
1c010664:	e519                	bnez	a0,1c010672 <__pi_read_fs_open+0x58>
    pmsis_l2_malloc_free(file, sizeof(pi_read_fs_file_t));
1c010666:	0c000593          	li	a1,192
1c01066a:	8522                	mv	a0,s0
1c01066c:	58b020ef          	jal	ra,1c0133f6 <pi_l2_free>
1c010670:	b7f1                	j	1c01063c <__pi_read_fs_open+0x22>
        file->header = header;
1c010672:	0aa42a23          	sw	a0,180(s0)
        file->header_size = header_size;
1c010676:	0b242c23          	sw	s2,184(s0)
        memcpy(&file->header[12], file_name, str_len);
1c01067a:	864e                	mv	a2,s3
1c01067c:	85d6                	mv	a1,s5
1c01067e:	0531                	addi	a0,a0,12
1c010680:	17a050ef          	jal	ra,1c0157fa <memcpy>
        *(uint32_t *) &file->header[8] = str_len;
1c010684:	0b442783          	lw	a5,180(s0)
1c010688:	0137a423          	sw	s3,8(a5)
        file->addr = fs->free_flash_area + header_size;
1c01068c:	1284a783          	lw	a5,296(s1)
        file->fs_file.size = 0;
1c010690:	00042623          	sw	zero,12(s0)
        file->offset = 0;
1c010694:	00042a23          	sw	zero,20(s0)
        file->addr = fs->free_flash_area + header_size;
1c010698:	993e                	add	s2,s2,a5
        file->cache_addr = -1;
1c01069a:	57fd                	li	a5,-1
        file->addr = fs->free_flash_area + header_size;
1c01069c:	01242c23          	sw	s2,24(s0)
        file->cache_addr = -1;
1c0106a0:	0af42823          	sw	a5,176(s0)
        fs->last_created_file = file;
1c0106a4:	1284a623          	sw	s0,300(s1)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c0106a8:	000a2783          	lw	a5,0(s4)
    file->fs_file.fs_data = &fs->fs_data;
1c0106ac:	13048493          	addi	s1,s1,304
    file->fs_file.data = file;
1c0106b0:	c400                	sw	s0,8(s0)
    file->fs_file.api = (pi_fs_api_t *) device->api;
1c0106b2:	c05c                	sw	a5,4(s0)
    file->fs_file.fs = device;
1c0106b4:	01442023          	sw	s4,0(s0)
    file->fs_file.fs_data = &fs->fs_data;
1c0106b8:	c804                	sw	s1,16(s0)
    return &file->fs_file;
1c0106ba:	8522                	mv	a0,s0
}
1c0106bc:	40f2                	lw	ra,28(sp)
1c0106be:	4462                	lw	s0,24(sp)
1c0106c0:	44d2                	lw	s1,20(sp)
1c0106c2:	4942                	lw	s2,16(sp)
1c0106c4:	49b2                	lw	s3,12(sp)
1c0106c6:	4a22                	lw	s4,8(sp)
1c0106c8:	4a92                	lw	s5,4(sp)
1c0106ca:	4b02                	lw	s6,0(sp)
1c0106cc:	6105                	addi	sp,sp,32
1c0106ce:	8082                	ret
        unsigned int *pi_fs_info = fs->pi_fs_info;
1c0106d0:	09c4a783          	lw	a5,156(s1)
        for (i = 0; i < nb_comps; i++)
1c0106d4:	4981                	li	s3,0
        pi_fs_desc_t *desc = NULL;
1c0106d6:	4901                	li	s2,0
        int nb_comps = *pi_fs_info++;
1c0106d8:	0007ab03          	lw	s6,0(a5)
1c0106dc:	00478413          	addi	s0,a5,4
        for (i = 0; i < nb_comps; i++)
1c0106e0:	0569c163          	blt	s3,s6,1c010722 <__pi_read_fs_open+0x108>
        if(i == nb_comps) goto error;
1c0106e4:	f5698ce3          	beq	s3,s6,1c01063c <__pi_read_fs_open+0x22>
        file = pmsis_l2_malloc(sizeof(pi_read_fs_file_t));
1c0106e8:	0c000513          	li	a0,192
1c0106ec:	4fd020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c0106f0:	842a                	mv	s0,a0
        if(file == NULL) goto error;
1c0106f2:	d529                	beqz	a0,1c01063c <__pi_read_fs_open+0x22>
        file->cache = pmsis_l2_malloc(READ_FS_THRESHOLD_BLOCK_FULL);
1c0106f4:	08800513          	li	a0,136
1c0106f8:	4f1020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c0106fc:	0aa42623          	sw	a0,172(s0)
        if(file->cache == NULL) goto error1;
1c010700:	d13d                	beqz	a0,1c010666 <__pi_read_fs_open+0x4c>
        file->fs_file.size = desc->size;
1c010702:	00492783          	lw	a5,4(s2)
        file->addr = desc->addr + fs->partition_offset;
1c010706:	4498                	lw	a4,8(s1)
        file->header = NULL;
1c010708:	0a042a23          	sw	zero,180(s0)
        file->fs_file.size = desc->size;
1c01070c:	c45c                	sw	a5,12(s0)
        file->addr = desc->addr + fs->partition_offset;
1c01070e:	00092783          	lw	a5,0(s2)
        file->offset = 0;
1c010712:	00042a23          	sw	zero,20(s0)
        file->addr = desc->addr + fs->partition_offset;
1c010716:	97ba                	add	a5,a5,a4
1c010718:	cc1c                	sw	a5,24(s0)
        file->cache_addr = -1;
1c01071a:	57fd                	li	a5,-1
1c01071c:	0af42823          	sw	a5,176(s0)
1c010720:	b761                	j	1c0106a8 <__pi_read_fs_open+0x8e>
            if(strcmp(desc->name, file_name) == 0) break;
1c010722:	85d6                	mv	a1,s5
1c010724:	00c40513          	addi	a0,s0,12
1c010728:	078050ef          	jal	ra,1c0157a0 <strcmp>
1c01072c:	c901                	beqz	a0,1c01073c <__pi_read_fs_open+0x122>
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c01072e:	441c                	lw	a5,8(s0)
        for (i = 0; i < nb_comps; i++)
1c010730:	8922                	mv	s2,s0
1c010732:	0985                	addi	s3,s3,1
            pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c010734:	97a2                	add	a5,a5,s0
1c010736:	00c78413          	addi	s0,a5,12
1c01073a:	b75d                	j	1c0106e0 <__pi_read_fs_open+0xc6>
1c01073c:	8922                	mv	s2,s0
1c01073e:	b76d                	j	1c0106e8 <__pi_read_fs_open+0xce>

1c010740 <__pi_fs_mount_step>:
{
1c010740:	7179                	addi	sp,sp,-48
1c010742:	d226                	sw	s1,36(sp)
    switch (fs->mount_step)
1c010744:	09052483          	lw	s1,144(a0)
{
1c010748:	d422                	sw	s0,40(sp)
1c01074a:	d606                	sw	ra,44(sp)
1c01074c:	d04a                	sw	s2,32(sp)
    const pi_partition_table_t partition_table = NULL;
1c01074e:	ce02                	sw	zero,28(sp)
{
1c010750:	842a                	mv	s0,a0
    switch (fs->mount_step)
1c010752:	0834a563          	p.beqimm	s1,3,1c0107dc <__pi_fs_mount_step+0x9c>
1c010756:	0c44aa63          	p.beqimm	s1,4,1c01082a <__pi_fs_mount_step+0xea>
1c01075a:	0614bb63          	p.bneimm	s1,1,1c0107d0 <__pi_fs_mount_step+0x90>
            rc = pi_partition_table_load(fs->flash, &partition_table);
1c01075e:	4108                	lw	a0,0(a0)
1c010760:	086c                	addi	a1,sp,28
1c010762:	33c010ef          	jal	ra,1c011a9e <pi_partition_table_load>
            if(rc != PI_OK) goto error;
1c010766:	ed09                	bnez	a0,1c010780 <__pi_fs_mount_step+0x40>
            readfs_partition = pi_partition_find_first(partition_table, PI_PARTITION_TYPE_DATA,
1c010768:	4054                	lw	a3,4(s0)
1c01076a:	4572                	lw	a0,28(sp)
1c01076c:	08100613          	li	a2,129
1c010770:	4585                	li	a1,1
1c010772:	330010ef          	jal	ra,1c011aa2 <pi_partition_find_first>
1c010776:	892a                	mv	s2,a0
            if(readfs_partition == NULL)
1c010778:	e901                	bnez	a0,1c010788 <__pi_fs_mount_step+0x48>
                pi_partition_table_free(partition_table);
1c01077a:	4572                	lw	a0,28(sp)
1c01077c:	320010ef          	jal	ra,1c011a9c <pi_partition_table_free>
    fs->error = -1;
1c010780:	57fd                	li	a5,-1
1c010782:	12f42223          	sw	a5,292(s0)
1c010786:	a0d1                	j	1c01084a <__pi_fs_mount_step+0x10a>
            fs->partition_offset = pi_partition_get_flash_offset(readfs_partition);
1c010788:	30a010ef          	jal	ra,1c011a92 <pi_partition_get_flash_offset>

/// @cond IMPLEM

static inline pi_err_t pi_partition_close(const pi_partition_t *partition)
{
    pi_l2_free((pi_partition_t *) partition, sizeof(pi_partition_t));
1c01078c:	02800593          	li	a1,40
1c010790:	c408                	sw	a0,8(s0)
1c010792:	854a                	mv	a0,s2
1c010794:	463020ef          	jal	ra,1c0133f6 <pi_l2_free>
            pi_partition_table_free(partition_table);
1c010798:	4572                	lw	a0,28(sp)
1c01079a:	302010ef          	jal	ra,1c011a9c <pi_partition_table_free>
            fs->mount_step++;
1c01079e:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c0107a2:	4008                	lw	a0,0(s0)
1c0107a4:	440c                	lw	a1,8(s0)
            fs->mount_step++;
1c0107a6:	0789                	addi	a5,a5,2
1c0107a8:	08f42823          	sw	a5,144(s0)
            pi_flash_read_async(fs->flash, fs->partition_offset, &fs->pi_fs_l2->pi_fs_size, 8,
1c0107ac:	09842603          	lw	a2,152(s0)


struct pi_task *pi_task_callback(struct pi_task *task, void (*callback)(void*), void *arg)
{
  task->id = PI_TASK_CALLBACK_ID;
  task->arg[0] = (uint32_t)callback;
1c0107b0:	1c0107b7          	lui	a5,0x1c010
1c0107b4:	74078793          	addi	a5,a5,1856 # 1c010740 <__pi_fs_mount_step>
  task->id = PI_TASK_CALLBACK_ID;
1c0107b8:	02042223          	sw	zero,36(s0)
  task->arg[0] = (uint32_t)callback;
1c0107bc:	c81c                	sw	a5,16(s0)
  task->arg[1] = (uint32_t)arg;
1c0107be:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c0107c0:	d844                	sw	s1,52(s0)
  task->done = 0;
1c0107c2:	02040023          	sb	zero,32(s0)
1c0107c6:	00c40713          	addi	a4,s0,12
1c0107ca:	46a1                	li	a3,8
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c0107cc:	d29ff0ef          	jal	ra,1c0104f4 <pi_flash_read_async>
}
1c0107d0:	50b2                	lw	ra,44(sp)
1c0107d2:	5422                	lw	s0,40(sp)
1c0107d4:	5492                	lw	s1,36(sp)
1c0107d6:	5902                	lw	s2,32(sp)
1c0107d8:	6145                	addi	sp,sp,48
1c0107da:	8082                	ret
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c0107dc:	09852783          	lw	a5,152(a0)
            int pi_fs_offset = fs->partition_offset;
1c0107e0:	4504                	lw	s1,8(a0)
            int pi_fs_size = ((fs->pi_fs_l2->pi_fs_size + 7) & ~7);
1c0107e2:	4394                	lw	a3,0(a5)
1c0107e4:	069d                	addi	a3,a3,7
1c0107e6:	c406b6b3          	p.bclr	a3,a3,2,0
            fs->pi_fs_info = pmsis_l2_malloc(pi_fs_size);
1c0107ea:	8536                	mv	a0,a3
1c0107ec:	c636                	sw	a3,12(sp)
1c0107ee:	3fb020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c0107f2:	08a42e23          	sw	a0,156(s0)
1c0107f6:	862a                	mv	a2,a0
            if(fs->pi_fs_info == NULL)
1c0107f8:	46b2                	lw	a3,12(sp)
1c0107fa:	d159                	beqz	a0,1c010780 <__pi_fs_mount_step+0x40>
            fs->mount_step++;
1c0107fc:	09042783          	lw	a5,144(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c010800:	4008                	lw	a0,0(s0)
  task->id = PI_TASK_CALLBACK_ID;
1c010802:	02042223          	sw	zero,36(s0)
            fs->mount_step++;
1c010806:	0785                	addi	a5,a5,1
1c010808:	08f42823          	sw	a5,144(s0)
  task->arg[0] = (uint32_t)callback;
1c01080c:	1c0107b7          	lui	a5,0x1c010
1c010810:	74078793          	addi	a5,a5,1856 # 1c010740 <__pi_fs_mount_step>
1c010814:	c81c                	sw	a5,16(s0)
  task->implem.keep = 1;
1c010816:	4785                	li	a5,1
  task->arg[1] = (uint32_t)arg;
1c010818:	c840                	sw	s0,20(s0)
  task->implem.keep = 1;
1c01081a:	d85c                	sw	a5,52(s0)
1c01081c:	02040023          	sb	zero,32(s0)
            pi_flash_read_async(fs->flash, pi_fs_offset + 8, (void *) fs->pi_fs_info, pi_fs_size,
1c010820:	00c40713          	addi	a4,s0,12
1c010824:	00848593          	addi	a1,s1,8
1c010828:	b755                	j	1c0107cc <__pi_fs_mount_step+0x8c>
            unsigned int *pi_fs_info = fs->pi_fs_info;
1c01082a:	09c52703          	lw	a4,156(a0)
            for (i = 0; i < nb_comps; i++)
1c01082e:	4681                	li	a3,0
            int nb_comps = *pi_fs_info++;
1c010830:	00470793          	addi	a5,a4,4
1c010834:	430c                	lw	a1,0(a4)
            pi_fs_desc_t *desc = NULL;
1c010836:	4701                	li	a4,0
            for (i = 0; i < nb_comps; i++)
1c010838:	00b6ce63          	blt	a3,a1,1c010854 <__pi_fs_mount_step+0x114>
            if(desc == NULL)
1c01083c:	e31d                	bnez	a4,1c010862 <__pi_fs_mount_step+0x122>
                fs->free_flash_area = desc->addr + desc->size;
1c01083e:	12f42423          	sw	a5,296(s0)
            fs->last_created_file = NULL;
1c010842:	12042623          	sw	zero,300(s0)
            fs->error = 0;
1c010846:	12042223          	sw	zero,292(s0)
  rt_event_enqueue(task);
1c01084a:	08c42503          	lw	a0,140(s0)
1c01084e:	d6dff0ef          	jal	ra,1c0105ba <rt_event_enqueue>
1c010852:	bfbd                	j	1c0107d0 <__pi_fs_mount_step+0x90>
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c010854:	4790                	lw	a2,8(a5)
            for (i = 0; i < nb_comps; i++)
1c010856:	873e                	mv	a4,a5
1c010858:	0685                	addi	a3,a3,1
                pi_fs_info = (unsigned int *) ((unsigned int) pi_fs_info + sizeof(pi_fs_desc_t) + desc->path_size);
1c01085a:	963e                	add	a2,a2,a5
1c01085c:	00c60793          	addi	a5,a2,12 # 1000c <__L1Cl+0xc>
1c010860:	bfe1                	j	1c010838 <__pi_fs_mount_step+0xf8>
                fs->free_flash_area = desc->addr + desc->size;
1c010862:	431c                	lw	a5,0(a4)
1c010864:	4358                	lw	a4,4(a4)
1c010866:	97ba                	add	a5,a5,a4
1c010868:	bfd9                	j	1c01083e <__pi_fs_mount_step+0xfe>

1c01086a <__pi_read_fs_close>:
    if(file->header == NULL)
1c01086a:	0b452603          	lw	a2,180(a0)
{
1c01086e:	1141                	addi	sp,sp,-16
1c010870:	c422                	sw	s0,8(sp)
1c010872:	c606                	sw	ra,12(sp)
1c010874:	842a                	mv	s0,a0
    if(file->header == NULL)
1c010876:	ee19                	bnez	a2,1c010894 <__pi_read_fs_close+0x2a>
        pmsis_l2_malloc_free(file->cache, READ_FS_THRESHOLD_BLOCK_FULL);
1c010878:	0ac52503          	lw	a0,172(a0)
1c01087c:	08800593          	li	a1,136
        pi_l2_free((void *) file->header, file->header_size);
1c010880:	377020ef          	jal	ra,1c0133f6 <pi_l2_free>
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c010884:	8522                	mv	a0,s0
}
1c010886:	4422                	lw	s0,8(sp)
1c010888:	40b2                	lw	ra,12(sp)
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c01088a:	0c000593          	li	a1,192
}
1c01088e:	0141                	addi	sp,sp,16
        pi_l2_free((void *) file, sizeof(pi_read_fs_file_t));
1c010890:	3670206f          	j	1c0133f6 <pi_l2_free>
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c010894:	411c                	lw	a5,0(a0)
        *(uint32_t *) &file->header[0] = file->addr;
1c010896:	4d0c                	lw	a1,24(a0)
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c010898:	4558                	lw	a4,12(a0)
        pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c01089a:	479c                	lw	a5,8(a5)
  api->program(device, pi_flash_addr, data, size);
1c01089c:	0b842683          	lw	a3,184(s0)
        *(uint32_t *) &file->header[0] = file->addr;
1c0108a0:	c20c                	sw	a1,0(a2)
        pi_flash_program(fs->flash, file->addr - file->header_size, (void *) file->header, file->header_size);
1c0108a2:	4388                	lw	a0,0(a5)
1c0108a4:	8d95                	sub	a1,a1,a3
        *(uint32_t *) &file->header[4] = file->fs_file.size;
1c0108a6:	c258                	sw	a4,4(a2)
1c0108a8:	411c                	lw	a5,0(a0)
1c0108aa:	5bdc                	lw	a5,52(a5)
1c0108ac:	9782                	jalr	a5
        pi_l2_free((void *) file->header, file->header_size);
1c0108ae:	0b842583          	lw	a1,184(s0)
1c0108b2:	0b442503          	lw	a0,180(s0)
1c0108b6:	b7e9                	j	1c010880 <__pi_read_fs_close+0x16>

1c0108b8 <__pi_read_fs_mount>:
{
1c0108b8:	7175                	addi	sp,sp,-144
1c0108ba:	c326                	sw	s1,132(sp)
1c0108bc:	c14a                	sw	s2,128(sp)
1c0108be:	84aa                	mv	s1,a0
    struct pi_fs_conf *conf = (struct pi_fs_conf *) device->config;
1c0108c0:	00452903          	lw	s2,4(a0)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c0108c4:	1b800513          	li	a0,440
{
1c0108c8:	c522                	sw	s0,136(sp)
1c0108ca:	c706                	sw	ra,140(sp)
    pi_read_fs_t *fs = pmsis_l2_malloc(sizeof(pi_read_fs_t));
1c0108cc:	31d020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c0108d0:	842a                	mv	s0,a0
    if(fs == NULL) goto error;
1c0108d2:	e919                	bnez	a0,1c0108e8 <__pi_read_fs_mount+0x30>
    __pi_fs_free(fs);
1c0108d4:	8522                	mv	a0,s0
1c0108d6:	d09ff0ef          	jal	ra,1c0105de <__pi_fs_free>
    return -1;
1c0108da:	557d                	li	a0,-1
}
1c0108dc:	40ba                	lw	ra,140(sp)
1c0108de:	442a                	lw	s0,136(sp)
1c0108e0:	449a                	lw	s1,132(sp)
1c0108e2:	490a                	lw	s2,128(sp)
1c0108e4:	6149                	addi	sp,sp,144
1c0108e6:	8082                	ret
    fs->flash = conf->flash;
1c0108e8:	00492783          	lw	a5,4(s2)
    fs->pi_fs_l2 = NULL;
1c0108ec:	08052c23          	sw	zero,152(a0)
    fs->pi_fs_info = NULL;
1c0108f0:	08052e23          	sw	zero,156(a0)
    fs->flash = conf->flash;
1c0108f4:	c11c                	sw	a5,0(a0)
    fs->fs_data.cluster_reqs_first = NULL;
1c0108f6:	12052823          	sw	zero,304(a0)
    fs->pi_fs_l2 = pmsis_l2_malloc(sizeof(pi_fs_l2_t));
1c0108fa:	4521                	li	a0,8
1c0108fc:	2ed020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c010900:	08a42c23          	sw	a0,152(s0)
    if(fs->pi_fs_l2 == NULL) goto error;
1c010904:	d961                	beqz	a0,1c0108d4 <__pi_read_fs_mount+0x1c>
    fs->mount_step = 1;
1c010906:	4785                	li	a5,1
1c010908:	08f42823          	sw	a5,144(s0)
  task->id = PI_TASK_NONE_ID;
1c01090c:	cc3e                	sw	a5,24(sp)
  task->implem.keep = 1;
1c01090e:	d43e                	sw	a5,40(sp)
1c010910:	00010a23          	sb	zero,20(sp)
    fs->pending_event = pi_task_block(&task);
1c010914:	00010793          	mv	a5,sp
1c010918:	08f42623          	sw	a5,140(s0)
    fs->partition_name = conf->partition_name;
1c01091c:	00892783          	lw	a5,8(s2)
  task->arg[0] = (uint32_t)0;
1c010920:	c202                	sw	zero,4(sp)
    fs->pi_fs_info = NULL;
1c010922:	08042e23          	sw	zero,156(s0)
    fs->partition_name = conf->partition_name;
1c010926:	c05c                	sw	a5,4(s0)
    device->data = (void *) fs;
1c010928:	c480                	sw	s0,8(s1)
    __pi_fs_mount_step((void *) fs);
1c01092a:	8522                	mv	a0,s0
1c01092c:	e15ff0ef          	jal	ra,1c010740 <__pi_fs_mount_step>
  while(!task->done)
1c010930:	01410783          	lb	a5,20(sp)
1c010934:	c791                	beqz	a5,1c010940 <__pi_read_fs_mount+0x88>
    if(fs->error)
1c010936:	12442783          	lw	a5,292(s0)
1c01093a:	ffc9                	bnez	a5,1c0108d4 <__pi_read_fs_mount+0x1c>
    return 0;
1c01093c:	4501                	li	a0,0
1c01093e:	bf79                	j	1c0108dc <__pi_read_fs_mount+0x24>
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c010940:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c010944:	4585                	li	a1,1
1c010946:	01c00513          	li	a0,28
1c01094a:	7f2020ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c01094e:	30091073          	csrw	mstatus,s2
1c010952:	bff9                	j	1c010930 <__pi_read_fs_mount+0x78>

1c010954 <__pi_fs_read_cached>:
{
1c010954:	88ae                	mv	a7,a1
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c010956:	0b052583          	lw	a1,176(a0)
{
1c01095a:	1141                	addi	sp,sp,-16
1c01095c:	c226                	sw	s1,4(sp)
1c01095e:	c606                	sw	ra,12(sp)
1c010960:	c422                	sw	s0,8(sp)
1c010962:	84ba                	mv	s1,a4
1c010964:	0ac52803          	lw	a6,172(a0)
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c010968:	00b66f63          	bltu	a2,a1,1c010986 <__pi_fs_read_cached+0x32>
    if(size > READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7)) size = READ_FS_THRESHOLD_BLOCK_FULL - (addr & 0x7);
1c01096c:	f8363733          	p.bclr	a4,a2,28,3
1c010970:	08800413          	li	s0,136
1c010974:	8c19                	sub	s0,s0,a4
1c010976:	04d45433          	p.minu	s0,s0,a3
    if(addr < file->cache_addr || addr + size > file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c01097a:	008606b3          	add	a3,a2,s0
1c01097e:	08858713          	addi	a4,a1,136
1c010982:	02d77a63          	bleu	a3,a4,1c0109b6 <__pi_fs_read_cached+0x62>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c010986:	4118                	lw	a4,0(a0)
        file->cache_addr = addr & ~0x7;
1c010988:	c40635b3          	p.bclr	a1,a2,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c01098c:	08800693          	li	a3,136
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c010990:	00872883          	lw	a7,8(a4)
        file->cache_addr = addr & ~0x7;
1c010994:	0ab52823          	sw	a1,176(a0)
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c010998:	873e                	mv	a4,a5
1c01099a:	0008a503          	lw	a0,0(a7)
1c01099e:	8642                	mv	a2,a6
        return 0;
1c0109a0:	4401                	li	s0,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c0109a2:	b53ff0ef          	jal	ra,1c0104f4 <pi_flash_read_async>
        *pending = 1;
1c0109a6:	4785                	li	a5,1
1c0109a8:	c09c                	sw	a5,0(s1)
}
1c0109aa:	8522                	mv	a0,s0
1c0109ac:	40b2                	lw	ra,12(sp)
1c0109ae:	4422                	lw	s0,8(sp)
1c0109b0:	4492                	lw	s1,4(sp)
1c0109b2:	0141                	addi	sp,sp,16
1c0109b4:	8082                	ret
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c0109b6:	40b605b3          	sub	a1,a2,a1
1c0109ba:	95c2                	add	a1,a1,a6
1c0109bc:	8622                	mv	a2,s0
1c0109be:	8546                	mv	a0,a7
1c0109c0:	63b040ef          	jal	ra,1c0157fa <memcpy>
    return __pi_fs_read_from_cache(file, buffer, addr, size);
1c0109c4:	b7dd                	j	1c0109aa <__pi_fs_read_cached+0x56>

1c0109c6 <__pi_fs_read>:
{
1c0109c6:	7179                	addi	sp,sp,-48
1c0109c8:	d422                	sw	s0,40(sp)
1c0109ca:	d226                	sw	s1,36(sp)
1c0109cc:	d04a                	sw	s2,32(sp)
1c0109ce:	ca56                	sw	s5,20(sp)
1c0109d0:	c85a                	sw	s6,16(sp)
1c0109d2:	d606                	sw	ra,44(sp)
1c0109d4:	8b3e                	mv	s6,a5
1c0109d6:	ce4e                	sw	s3,28(sp)
1c0109d8:	cc52                	sw	s4,24(sp)
1c0109da:	c65e                	sw	s7,12(sp)
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c0109dc:	47c1                	li	a5,16
{
1c0109de:	892e                	mv	s2,a1
1c0109e0:	8432                	mv	s0,a2
1c0109e2:	84b6                	mv	s1,a3
1c0109e4:	8aba                	mv	s5,a4
    int use_cache = size <= READ_FS_THRESHOLD || (addr & 0x7) != (buffer & 0x7);
1c0109e6:	06d7d163          	ble	a3,a5,1c010a48 <__pi_fs_read+0x82>
1c0109ea:	00b647b3          	xor	a5,a2,a1
1c0109ee:	f837b7b3          	p.bclr	a5,a5,28,3
1c0109f2:	ebb9                	bnez	a5,1c010a48 <__pi_fs_read+0x82>
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c0109f4:	08800793          	li	a5,136
1c0109f8:	06d7d963          	ble	a3,a5,1c010a6a <__pi_fs_read+0xa4>
    pi_read_fs_t *fs = (pi_read_fs_t *) file->fs_file.fs->data;
1c0109fc:	411c                	lw	a5,0(a0)
1c0109fe:	0087ab83          	lw	s7,8(a5)
    int prefix_size = addr & 0x7;
1c010a02:	f83437b3          	p.bclr	a5,s0,28,3
    if(prefix_size)
1c010a06:	c39d                	beqz	a5,1c010a2c <__pi_fs_read+0x66>
        prefix_size = 4 - prefix_size;
1c010a08:	4991                	li	s3,4
1c010a0a:	40f989b3          	sub	s3,s3,a5
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c010a0e:	8756                	mv	a4,s5
1c010a10:	87da                	mv	a5,s6
1c010a12:	86ce                	mv	a3,s3
1c010a14:	8622                	mv	a2,s0
1c010a16:	85ca                	mv	a1,s2
1c010a18:	f3dff0ef          	jal	ra,1c010954 <__pi_fs_read_cached>
        if(*pending) return read_size;
1c010a1c:	000aa783          	lw	a5,0(s5)
        int read_size = __pi_fs_read_cached(file, buffer, addr, prefix_size, pending, event);
1c010a20:	8a2a                	mv	s4,a0
        if(*pending) return read_size;
1c010a22:	eba5                	bnez	a5,1c010a92 <__pi_fs_read+0xcc>
        addr += prefix_size;
1c010a24:	944e                	add	s0,s0,s3
        buffer += prefix_size;
1c010a26:	994e                	add	s2,s2,s3
        size -= prefix_size;
1c010a28:	413484b3          	sub	s1,s1,s3
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c010a2c:	000ba503          	lw	a0,0(s7)
    int block_size = size & ~0x7;
1c010a30:	c404ba33          	p.bclr	s4,s1,2,0
    pi_flash_read_async(fs->flash, addr, (void *) buffer, size, event);
1c010a34:	875a                	mv	a4,s6
1c010a36:	86d2                	mv	a3,s4
1c010a38:	864a                	mv	a2,s2
1c010a3a:	85a2                	mv	a1,s0
1c010a3c:	ab9ff0ef          	jal	ra,1c0104f4 <pi_flash_read_async>
    *pending = 1;
1c010a40:	4785                	li	a5,1
1c010a42:	00faa023          	sw	a5,0(s5)
    return block_size;
1c010a46:	a0b1                	j	1c010a92 <__pi_fs_read+0xcc>
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c010a48:	8622                	mv	a2,s0
}
1c010a4a:	5422                	lw	s0,40(sp)
1c010a4c:	50b2                	lw	ra,44(sp)
1c010a4e:	49f2                	lw	s3,28(sp)
1c010a50:	4a62                	lw	s4,24(sp)
1c010a52:	4bb2                	lw	s7,12(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c010a54:	87da                	mv	a5,s6
1c010a56:	8756                	mv	a4,s5
}
1c010a58:	4b42                	lw	s6,16(sp)
1c010a5a:	4ad2                	lw	s5,20(sp)
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c010a5c:	86a6                	mv	a3,s1
1c010a5e:	85ca                	mv	a1,s2
}
1c010a60:	5492                	lw	s1,36(sp)
1c010a62:	5902                	lw	s2,32(sp)
1c010a64:	6145                	addi	sp,sp,48
    if(use_cache) return __pi_fs_read_cached(file, buffer, addr, size, pending, event);
1c010a66:	eefff06f          	j	1c010954 <__pi_fs_read_cached>
       addr >= file->cache_addr &&
1c010a6a:	0b052583          	lw	a1,176(a0)
    if(size <= READ_FS_THRESHOLD_BLOCK_FULL &&
1c010a6e:	f8b667e3          	bltu	a2,a1,1c0109fc <__pi_fs_read+0x36>
       addr + size < file->cache_addr + READ_FS_THRESHOLD_BLOCK_FULL)
1c010a72:	00c687b3          	add	a5,a3,a2
1c010a76:	08858713          	addi	a4,a1,136
       addr >= file->cache_addr &&
1c010a7a:	f8e7f1e3          	bleu	a4,a5,1c0109fc <__pi_fs_read+0x36>
    memcpy((void *) buffer, &file->cache[addr - file->cache_addr], size);
1c010a7e:	40b60433          	sub	s0,a2,a1
1c010a82:	0ac52583          	lw	a1,172(a0)
1c010a86:	8636                	mv	a2,a3
1c010a88:	854a                	mv	a0,s2
1c010a8a:	95a2                	add	a1,a1,s0
1c010a8c:	56f040ef          	jal	ra,1c0157fa <memcpy>
        return __pi_fs_read_from_cache(file, buffer, addr, size);
1c010a90:	8a26                	mv	s4,s1
}
1c010a92:	50b2                	lw	ra,44(sp)
1c010a94:	5422                	lw	s0,40(sp)
1c010a96:	8552                	mv	a0,s4
1c010a98:	5492                	lw	s1,36(sp)
1c010a9a:	5902                	lw	s2,32(sp)
1c010a9c:	49f2                	lw	s3,28(sp)
1c010a9e:	4a62                	lw	s4,24(sp)
1c010aa0:	4ad2                	lw	s5,20(sp)
1c010aa2:	4b42                	lw	s6,16(sp)
1c010aa4:	4bb2                	lw	s7,12(sp)
1c010aa6:	6145                	addi	sp,sp,48
1c010aa8:	8082                	ret

1c010aaa <__pi_read_fs_try_read>:
    if(file->pending_size == 0)
1c010aaa:	0a852683          	lw	a3,168(a0)
{
1c010aae:	7179                	addi	sp,sp,-48
1c010ab0:	d422                	sw	s0,40(sp)
1c010ab2:	d606                	sw	ra,44(sp)
1c010ab4:	d226                	sw	s1,36(sp)
1c010ab6:	d04a                	sw	s2,32(sp)
1c010ab8:	ce4e                	sw	s3,28(sp)
    int pending = 0;
1c010aba:	c602                	sw	zero,12(sp)
{
1c010abc:	842a                	mv	s0,a0
    if(file->pending_size == 0)
1c010abe:	ee99                	bnez	a3,1c010adc <__pi_read_fs_try_read+0x32>
            file->pending_event->implem.data[0] = file->first_read_size;
1c010ac0:	501c                	lw	a5,32(s0)
1c010ac2:	0bc42703          	lw	a4,188(s0)
1c010ac6:	df98                	sw	a4,56(a5)
  rt_event_enqueue(task);
1c010ac8:	5008                	lw	a0,32(s0)
1c010aca:	af1ff0ef          	jal	ra,1c0105ba <rt_event_enqueue>
}
1c010ace:	50b2                	lw	ra,44(sp)
1c010ad0:	5422                	lw	s0,40(sp)
1c010ad2:	5492                	lw	s1,36(sp)
1c010ad4:	5902                	lw	s2,32(sp)
1c010ad6:	49f2                	lw	s3,28(sp)
1c010ad8:	6145                	addi	sp,sp,48
1c010ada:	8082                	ret
  task->arg[0] = (uint32_t)callback;
1c010adc:	1c0114b7          	lui	s1,0x1c011
1c010ae0:	aaa48493          	addi	s1,s1,-1366 # 1c010aaa <__pi_read_fs_try_read>
  task->id = PI_TASK_CALLBACK_ID;
1c010ae4:	02052e23          	sw	zero,60(a0)
  task->arg[0] = (uint32_t)callback;
1c010ae8:	d504                	sw	s1,40(a0)
    int size = __pi_fs_read(
1c010aea:	4d50                	lw	a2,28(a0)
1c010aec:	0a452583          	lw	a1,164(a0)
  task->arg[1] = (uint32_t)arg;
1c010af0:	d448                	sw	a0,44(s0)
            pi_task_callback(&file->step_event, __pi_read_fs_try_read, (void *) file)
1c010af2:	02450913          	addi	s2,a0,36
  task->implem.keep = 1;
1c010af6:	4985                	li	s3,1
    int size = __pi_fs_read(
1c010af8:	87ca                	mv	a5,s2
1c010afa:	05352623          	sw	s3,76(a0)
  task->done = 0;
1c010afe:	02050c23          	sb	zero,56(a0)
1c010b02:	0078                	addi	a4,sp,12
1c010b04:	ec3ff0ef          	jal	ra,1c0109c6 <__pi_fs_read>
    file->pending_addr += size;
1c010b08:	4c5c                	lw	a5,28(s0)
1c010b0a:	97aa                	add	a5,a5,a0
1c010b0c:	cc5c                	sw	a5,28(s0)
    file->pending_buffer += size;
1c010b0e:	0a442783          	lw	a5,164(s0)
1c010b12:	97aa                	add	a5,a5,a0
1c010b14:	0af42223          	sw	a5,164(s0)
    file->pending_size -= size;
1c010b18:	0a842783          	lw	a5,168(s0)
1c010b1c:	40a78533          	sub	a0,a5,a0
    if(!pending)
1c010b20:	47b2                	lw	a5,12(sp)
    file->pending_size -= size;
1c010b22:	0aa42423          	sw	a0,168(s0)
    if(!pending)
1c010b26:	f7c5                	bnez	a5,1c010ace <__pi_read_fs_try_read+0x24>
        if(file->pending_size == 0)
1c010b28:	dd41                	beqz	a0,1c010ac0 <__pi_read_fs_try_read+0x16>
  task->id = PI_TASK_CALLBACK_ID;
1c010b2a:	02042e23          	sw	zero,60(s0)
  task->arg[0] = (uint32_t)callback;
1c010b2e:	d404                	sw	s1,40(s0)
  task->arg[1] = (uint32_t)arg;
1c010b30:	d440                	sw	s0,44(s0)
  task->implem.keep = 1;
1c010b32:	05342623          	sw	s3,76(s0)
1c010b36:	02040c23          	sb	zero,56(s0)
  rt_event_enqueue(task);
1c010b3a:	854a                	mv	a0,s2
1c010b3c:	b779                	j	1c010aca <__pi_read_fs_try_read+0x20>

1c010b3e <__pi_read_fs_read_async>:
    if(file->offset + size > file->fs_file.size)
1c010b3e:	495c                	lw	a5,20(a0)
1c010b40:	4558                	lw	a4,12(a0)
{
1c010b42:	1101                	addi	sp,sp,-32
1c010b44:	ce06                	sw	ra,28(sp)
    if(file->offset + size > file->fs_file.size)
1c010b46:	00c78833          	add	a6,a5,a2
1c010b4a:	01077463          	bleu	a6,a4,1c010b52 <__pi_read_fs_read_async+0x14>
        real_size = file->fs_file.size - file->offset;
1c010b4e:	40f70633          	sub	a2,a4,a5
    file->first_read_size = real_size;
1c010b52:	0ac52e23          	sw	a2,188(a0)
1c010b56:	00068a23          	sb	zero,20(a3) # 80000014 <pulp__FC+0x80000015>
    file->pending_addr = file->addr + file->offset;
1c010b5a:	495c                	lw	a5,20(a0)
1c010b5c:	4d18                	lw	a4,24(a0)
    file->pending_size = real_size;
1c010b5e:	0ac52423          	sw	a2,168(a0)
    file->pending_event = event;
1c010b62:	d114                	sw	a3,32(a0)
    file->pending_addr = file->addr + file->offset;
1c010b64:	973e                	add	a4,a4,a5
    file->offset += real_size;
1c010b66:	97b2                	add	a5,a5,a2
    file->pending_buffer = (unsigned int) buffer;
1c010b68:	0ab52223          	sw	a1,164(a0)
    file->pending_addr = file->addr + file->offset;
1c010b6c:	cd58                	sw	a4,28(a0)
    file->offset += real_size;
1c010b6e:	c95c                	sw	a5,20(a0)
    __pi_read_fs_try_read((void *) file);
1c010b70:	c632                	sw	a2,12(sp)
1c010b72:	f39ff0ef          	jal	ra,1c010aaa <__pi_read_fs_try_read>
}
1c010b76:	4632                	lw	a2,12(sp)
1c010b78:	40f2                	lw	ra,28(sp)
1c010b7a:	8532                	mv	a0,a2
1c010b7c:	6105                	addi	sp,sp,32
1c010b7e:	8082                	ret

1c010b80 <__pi_host_fs_mount>:
  int fd;
} pi_host_fs_file_t;

static int32_t __pi_host_fs_mount(struct pi_device *device)
{
  bsp_fs_data.cluster_reqs_first = NULL;
1c010b80:	1c0187b7          	lui	a5,0x1c018
1c010b84:	8207aa23          	sw	zero,-1996(a5) # 1c017834 <bsp_fs_data>
  return 0;
}
1c010b88:	4501                	li	a0,0
1c010b8a:	8082                	ret

1c010b8c <__pi_host_fs_unmount>:

static void __pi_host_fs_unmount(struct pi_device *device)
{
}
1c010b8c:	8082                	ret

1c010b8e <rt_event_enqueue>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c010b8e:	300476f3          	csrrci	a3,mstatus,8
  if (sched->first) {
1c010b92:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
  event->next = NULL;
1c010b96:	00052023          	sw	zero,0(a0)
1c010b9a:	01c00713          	li	a4,28
  if (sched->first) {
1c010b9e:	c619                	beqz	a2,1c010bac <rt_event_enqueue+0x1e>
    sched->last->next = event;
1c010ba0:	435c                	lw	a5,4(a4)
1c010ba2:	c388                	sw	a0,0(a5)
  sched->last = event;
1c010ba4:	c348                	sw	a0,4(a4)
  __builtin_pulp_spr_write(reg, val);
1c010ba6:	30069073          	csrw	mstatus,a3
}
1c010baa:	8082                	ret
    sched->first = event;
1c010bac:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c010bb0:	bfd5                	j	1c010ba4 <rt_event_enqueue+0x16>

1c010bb2 <__pi_host_fs_seek>:
}

static int32_t __pi_host_fs_seek(pi_fs_file_t *arg, unsigned int offset)
{
  pi_host_fs_file_t *file = (pi_host_fs_file_t *)arg;
  return semihost_seek(file->fd, offset);
1c010bb2:	4948                	lw	a0,20(a0)
1c010bb4:	4b70106f          	j	1c01286a <semihost_seek>

1c010bb8 <__pi_host_fs_copy_2d_async>:
  else
    return __pi_host_fs_write_async(arg, buffer, size, task);
}

static int32_t __pi_host_fs_copy_2d_async(pi_fs_file_t *file, uint32_t index, void *buffer, uint32_t size, uint32_t stride, uint32_t length, int32_t ext2loc, pi_task_t *task)
{
1c010bb8:	7179                	addi	sp,sp,-48
1c010bba:	d422                	sw	s0,40(sp)
1c010bbc:	d226                	sw	s1,36(sp)
1c010bbe:	d04a                	sw	s2,32(sp)
1c010bc0:	ce4e                	sw	s3,28(sp)
1c010bc2:	cc52                	sw	s4,24(sp)
1c010bc4:	ca56                	sw	s5,20(sp)
1c010bc6:	c85a                	sw	s6,16(sp)
1c010bc8:	c65e                	sw	s7,12(sp)
1c010bca:	c462                	sw	s8,8(sp)
1c010bcc:	d606                	sw	ra,44(sp)
1c010bce:	89aa                	mv	s3,a0
1c010bd0:	8a2e                	mv	s4,a1
1c010bd2:	84b2                	mv	s1,a2
1c010bd4:	8b36                	mv	s6,a3
1c010bd6:	8bba                	mv	s7,a4
1c010bd8:	843e                	mv	s0,a5
1c010bda:	8c42                	mv	s8,a6
1c010bdc:	8ac6                	mv	s5,a7
  unsigned int chunk;
  for (chunk=0; chunk<size; chunk+=length)
1c010bde:	4901                	li	s2,0
1c010be0:	03696263          	bltu	s2,s6,1c010c04 <__pi_host_fs_copy_2d_async+0x4c>
1c010be4:	8556                	mv	a0,s5
1c010be6:	fa9ff0ef          	jal	ra,1c010b8e <rt_event_enqueue>

    buffer = ((char *)buffer) + length;
    index += stride;
  }
  pi_task_push(task);
  return 0;
1c010bea:	4501                	li	a0,0

error:
  pi_task_push(task);
  return -1;
}
1c010bec:	50b2                	lw	ra,44(sp)
1c010bee:	5422                	lw	s0,40(sp)
1c010bf0:	5492                	lw	s1,36(sp)
1c010bf2:	5902                	lw	s2,32(sp)
1c010bf4:	49f2                	lw	s3,28(sp)
1c010bf6:	4a62                	lw	s4,24(sp)
1c010bf8:	4ad2                	lw	s5,20(sp)
1c010bfa:	4b42                	lw	s6,16(sp)
1c010bfc:	4bb2                	lw	s7,12(sp)
1c010bfe:	4c22                	lw	s8,8(sp)
1c010c00:	6145                	addi	sp,sp,48
1c010c02:	8082                	ret
    if (__pi_host_fs_seek(file, index))
1c010c04:	85d2                	mv	a1,s4
1c010c06:	854e                	mv	a0,s3
1c010c08:	05645433          	p.minu	s0,s0,s6
1c010c0c:	fa7ff0ef          	jal	ra,1c010bb2 <__pi_host_fs_seek>
1c010c10:	e10d                	bnez	a0,1c010c32 <__pi_host_fs_copy_2d_async+0x7a>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c010c12:	8622                	mv	a2,s0
1c010c14:	85a6                	mv	a1,s1
1c010c16:	854e                	mv	a0,s3
    if (ext2loc)
1c010c18:	000c0a63          	beqz	s8,1c010c2c <__pi_host_fs_copy_2d_async+0x74>
      if (pi_fs_read(file, buffer, length) != (int)length)
1c010c1c:	873ff0ef          	jal	ra,1c01048e <pi_fs_read>
1c010c20:	00851963          	bne	a0,s0,1c010c32 <__pi_host_fs_copy_2d_async+0x7a>
    buffer = ((char *)buffer) + length;
1c010c24:	94a2                	add	s1,s1,s0
    index += stride;
1c010c26:	9a5e                	add	s4,s4,s7
  for (chunk=0; chunk<size; chunk+=length)
1c010c28:	9922                	add	s2,s2,s0
1c010c2a:	bf5d                	j	1c010be0 <__pi_host_fs_copy_2d_async+0x28>
      if (pi_fs_write(file, buffer, length) != (int)length)
1c010c2c:	891ff0ef          	jal	ra,1c0104bc <pi_fs_write>
1c010c30:	bfc5                	j	1c010c20 <__pi_host_fs_copy_2d_async+0x68>
1c010c32:	8556                	mv	a0,s5
1c010c34:	f5bff0ef          	jal	ra,1c010b8e <rt_event_enqueue>
  return -1;
1c010c38:	557d                	li	a0,-1
1c010c3a:	bf4d                	j	1c010bec <__pi_host_fs_copy_2d_async+0x34>

1c010c3c <__pi_host_fs_write_async>:
  int result = size - semihost_write(file->fd, buffer, size);
1c010c3c:	4948                	lw	a0,20(a0)
{
1c010c3e:	1101                	addi	sp,sp,-32
1c010c40:	ce06                	sw	ra,28(sp)
1c010c42:	cc22                	sw	s0,24(sp)
1c010c44:	ca26                	sw	s1,20(sp)
  int result = size - semihost_write(file->fd, buffer, size);
1c010c46:	c636                	sw	a3,12(sp)
{
1c010c48:	84b2                	mv	s1,a2
  int result = size - semihost_write(file->fd, buffer, size);
1c010c4a:	403010ef          	jal	ra,1c01284c <semihost_write>
1c010c4e:	46b2                	lw	a3,12(sp)
1c010c50:	842a                	mv	s0,a0
1c010c52:	8536                	mv	a0,a3
1c010c54:	f3bff0ef          	jal	ra,1c010b8e <rt_event_enqueue>
}
1c010c58:	40848533          	sub	a0,s1,s0
1c010c5c:	40f2                	lw	ra,28(sp)
1c010c5e:	4462                	lw	s0,24(sp)
1c010c60:	44d2                	lw	s1,20(sp)
1c010c62:	6105                	addi	sp,sp,32
1c010c64:	8082                	ret

1c010c66 <__pi_host_fs_read_async>:
  int result = size - semihost_read(file->fd, buffer, size);
1c010c66:	4948                	lw	a0,20(a0)
{
1c010c68:	1101                	addi	sp,sp,-32
1c010c6a:	ce06                	sw	ra,28(sp)
1c010c6c:	cc22                	sw	s0,24(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c010c6e:	c636                	sw	a3,12(sp)
{
1c010c70:	8432                	mv	s0,a2
  int result = size - semihost_read(file->fd, buffer, size);
1c010c72:	3bd010ef          	jal	ra,1c01282e <semihost_read>
  task->implem.data[0] = result;
1c010c76:	46b2                	lw	a3,12(sp)
  int result = size - semihost_read(file->fd, buffer, size);
1c010c78:	8c09                	sub	s0,s0,a0
  task->implem.data[0] = result;
1c010c7a:	de80                	sw	s0,56(a3)
1c010c7c:	8536                	mv	a0,a3
1c010c7e:	f11ff0ef          	jal	ra,1c010b8e <rt_event_enqueue>
}
1c010c82:	8522                	mv	a0,s0
1c010c84:	40f2                	lw	ra,28(sp)
1c010c86:	4462                	lw	s0,24(sp)
1c010c88:	6105                	addi	sp,sp,32
1c010c8a:	8082                	ret

1c010c8c <__pi_host_fs_copy_async>:
{
1c010c8c:	1101                	addi	sp,sp,-32
1c010c8e:	cc22                	sw	s0,24(sp)
1c010c90:	ca26                	sw	s1,20(sp)
  if (__pi_host_fs_seek(arg, index))
1c010c92:	c636                	sw	a3,12(sp)
{
1c010c94:	84b2                	mv	s1,a2
  if (__pi_host_fs_seek(arg, index))
1c010c96:	c43a                	sw	a4,8(sp)
{
1c010c98:	ce06                	sw	ra,28(sp)
1c010c9a:	842a                	mv	s0,a0
  if (__pi_host_fs_seek(arg, index))
1c010c9c:	c23e                	sw	a5,4(sp)
1c010c9e:	f15ff0ef          	jal	ra,1c010bb2 <__pi_host_fs_seek>
1c010ca2:	4632                	lw	a2,12(sp)
1c010ca4:	4692                	lw	a3,4(sp)
1c010ca6:	4722                	lw	a4,8(sp)
1c010ca8:	e105                	bnez	a0,1c010cc8 <__pi_host_fs_copy_async+0x3c>
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c010caa:	85a6                	mv	a1,s1
1c010cac:	8522                	mv	a0,s0
  if (ext2loc)
1c010cae:	c719                	beqz	a4,1c010cbc <__pi_host_fs_copy_async+0x30>
}
1c010cb0:	4462                	lw	s0,24(sp)
1c010cb2:	40f2                	lw	ra,28(sp)
1c010cb4:	44d2                	lw	s1,20(sp)
1c010cb6:	6105                	addi	sp,sp,32
    return __pi_host_fs_read_async(arg, buffer, size, task);
1c010cb8:	fafff06f          	j	1c010c66 <__pi_host_fs_read_async>
}
1c010cbc:	4462                	lw	s0,24(sp)
1c010cbe:	40f2                	lw	ra,28(sp)
1c010cc0:	44d2                	lw	s1,20(sp)
1c010cc2:	6105                	addi	sp,sp,32
    return __pi_host_fs_write_async(arg, buffer, size, task);
1c010cc4:	f79ff06f          	j	1c010c3c <__pi_host_fs_write_async>
}
1c010cc8:	40f2                	lw	ra,28(sp)
1c010cca:	4462                	lw	s0,24(sp)
1c010ccc:	44d2                	lw	s1,20(sp)
1c010cce:	557d                	li	a0,-1
1c010cd0:	6105                	addi	sp,sp,32
1c010cd2:	8082                	ret

1c010cd4 <__pi_host_fs_direct_read_async>:
1c010cd4:	f93ff06f          	j	1c010c66 <__pi_host_fs_read_async>

1c010cd8 <__pi_host_fs_close>:
{
1c010cd8:	1141                	addi	sp,sp,-16
1c010cda:	c422                	sw	s0,8(sp)
1c010cdc:	842a                	mv	s0,a0
  semihost_close(file->fd);
1c010cde:	4948                	lw	a0,20(a0)
{
1c010ce0:	c606                	sw	ra,12(sp)
  semihost_close(file->fd);
1c010ce2:	345010ef          	jal	ra,1c012826 <semihost_close>
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c010ce6:	8522                	mv	a0,s0
}
1c010ce8:	4422                	lw	s0,8(sp)
1c010cea:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c010cec:	45e1                	li	a1,24
}
1c010cee:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(file, sizeof(pi_host_fs_file_t));
1c010cf0:	7060206f          	j	1c0133f6 <pi_l2_free>

1c010cf4 <__pi_host_fs_open>:
{
1c010cf4:	1101                	addi	sp,sp,-32
1c010cf6:	ca26                	sw	s1,20(sp)
1c010cf8:	84aa                	mv	s1,a0
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c010cfa:	4561                	li	a0,24
{
1c010cfc:	c84a                	sw	s2,16(sp)
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c010cfe:	c632                	sw	a2,12(sp)
{
1c010d00:	ce06                	sw	ra,28(sp)
1c010d02:	cc22                	sw	s0,24(sp)
1c010d04:	892e                	mv	s2,a1
  pi_host_fs_file_t *file = pmsis_l2_malloc(sizeof(pi_host_fs_file_t));
1c010d06:	6e2020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
  if (file == NULL) goto error;
1c010d0a:	4632                	lw	a2,12(sp)
1c010d0c:	e909                	bnez	a0,1c010d1e <__pi_host_fs_open+0x2a>
  return NULL;
1c010d0e:	4401                	li	s0,0
}
1c010d10:	8522                	mv	a0,s0
1c010d12:	40f2                	lw	ra,28(sp)
1c010d14:	4462                	lw	s0,24(sp)
1c010d16:	44d2                	lw	s1,20(sp)
1c010d18:	4942                	lw	s2,16(sp)
1c010d1a:	6105                	addi	sp,sp,32
1c010d1c:	8082                	ret
  file->header.fs = device;
1c010d1e:	c104                	sw	s1,0(a0)
1c010d20:	842a                	mv	s0,a0
  file->fd = semihost_open(file_name, flags == PI_FS_FLAGS_WRITE ? 6 : flags == PI_FS_FLAGS_APPEND ? 8 : 0);
1c010d22:	4599                	li	a1,6
1c010d24:	00162663          	p.beqimm	a2,1,1c010d30 <__pi_host_fs_open+0x3c>
1c010d28:	45a1                	li	a1,8
1c010d2a:	00262363          	p.beqimm	a2,2,1c010d30 <__pi_host_fs_open+0x3c>
1c010d2e:	4581                	li	a1,0
1c010d30:	854a                	mv	a0,s2
1c010d32:	2c9010ef          	jal	ra,1c0127fa <semihost_open>
1c010d36:	c848                	sw	a0,20(s0)
  if (file->fd == -1)
1c010d38:	fdf52be3          	p.beqimm	a0,-1,1c010d0e <__pi_host_fs_open+0x1a>
  file->header.api = (pi_fs_api_t *)device->api;
1c010d3c:	409c                	lw	a5,0(s1)
  file->header.data = file;
1c010d3e:	c400                	sw	s0,8(s0)
  file->header.fs = device;
1c010d40:	c004                	sw	s1,0(s0)
  file->header.api = (pi_fs_api_t *)device->api;
1c010d42:	c05c                	sw	a5,4(s0)
  file->header.fs_data = &bsp_fs_data;
1c010d44:	1c0187b7          	lui	a5,0x1c018
1c010d48:	83478793          	addi	a5,a5,-1996 # 1c017834 <bsp_fs_data>
1c010d4c:	c81c                	sw	a5,16(s0)
  return (pi_fs_file_t *)file;
1c010d4e:	b7c9                	j	1c010d10 <__pi_host_fs_open+0x1c>

1c010d50 <__rt_event_enqueue>:

    // Wait wakeup time
    pi_time_wait_us(300);

    // Don't know why on RTL, the flash model needs a SW reset
    hyperflash_set_reg_exec(hyperflash, 0x000<<1, 0xF0);
1c010d50:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c010d54:	00052023          	sw	zero,0(a0)
1c010d58:	01c00713          	li	a4,28
1c010d5c:	c689                	beqz	a3,1c010d66 <__rt_event_enqueue+0x16>
1c010d5e:	435c                	lw	a5,4(a4)
1c010d60:	c388                	sw	a0,0(a5)
1c010d62:	c348                	sw	a0,4(a4)
1c010d64:	8082                	ret
1c010d66:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c010d6a:	bfe5                	j	1c010d62 <__rt_event_enqueue+0x12>

1c010d6c <hyperflash_ioctl>:
1c010d6c:	e589                	bnez	a1,1c010d76 <hyperflash_ioctl+0xa>
1c010d6e:	000407b7          	lui	a5,0x40
1c010d72:	c21c                	sw	a5,0(a2)
1c010d74:	c25c                	sw	a5,4(a2)
1c010d76:	4501                	li	a0,0
1c010d78:	8082                	ret

1c010d7a <hyperflash_set_reg_exec>:
1c010d7a:	00c51623          	sh	a2,12(a0)
1c010d7e:	4689                	li	a3,2
1c010d80:	00c50613          	addi	a2,a0,12
1c010d84:	20b0306f          	j	1c01478e <pi_hyper_write>

1c010d88 <hyperflash_stall_task>:
1c010d88:	30047373          	csrrci	t1,mstatus,8
1c010d8c:	01852e03          	lw	t3,24(a0)
1c010d90:	020e0763          	beqz	t3,1c010dbe <hyperflash_stall_task+0x36>
1c010d94:	dd90                	sw	a2,56(a1)
1c010d96:	ddd4                	sw	a3,60(a1)
1c010d98:	c1b8                	sw	a4,64(a1)
1c010d9a:	c1fc                	sw	a5,68(a1)
1c010d9c:	0505a423          	sw	a6,72(a1)
1c010da0:	0515a623          	sw	a7,76(a1)
1c010da4:	491c                	lw	a5,16(a0)
1c010da6:	cb91                	beqz	a5,1c010dba <hyperflash_stall_task+0x32>
1c010da8:	495c                	lw	a5,20(a0)
1c010daa:	cfcc                	sw	a1,28(a5)
1c010dac:	c94c                	sw	a1,20(a0)
1c010dae:	0005ae23          	sw	zero,28(a1)
1c010db2:	30031073          	csrw	mstatus,t1
1c010db6:	4505                	li	a0,1
1c010db8:	8082                	ret
1c010dba:	c90c                	sw	a1,16(a0)
1c010dbc:	bfc5                	j	1c010dac <hyperflash_stall_task+0x24>
1c010dbe:	cd0c                	sw	a1,24(a0)
1c010dc0:	30031073          	csrw	mstatus,t1
1c010dc4:	4501                	li	a0,0
1c010dc6:	8082                	ret

1c010dc8 <hyperflash_read_2d_async>:
1c010dc8:	1101                	addi	sp,sp,-32
1c010dca:	cc22                	sw	s0,24(sp)
1c010dcc:	4500                	lw	s0,8(a0)
1c010dce:	ca26                	sw	s1,20(sp)
1c010dd0:	84ae                	mv	s1,a1
1c010dd2:	c84a                	sw	s2,16(sp)
1c010dd4:	c64e                	sw	s3,12(sp)
1c010dd6:	c452                	sw	s4,8(sp)
1c010dd8:	c256                	sw	s5,4(sp)
1c010dda:	c05a                	sw	s6,0(sp)
1c010ddc:	8932                	mv	s2,a2
1c010dde:	8b2a                	mv	s6,a0
1c010de0:	89b6                	mv	s3,a3
1c010de2:	8a3a                	mv	s4,a4
1c010de4:	8abe                	mv	s5,a5
1c010de6:	85c2                	mv	a1,a6
1c010de8:	88be                	mv	a7,a5
1c010dea:	883a                	mv	a6,a4
1c010dec:	87b6                	mv	a5,a3
1c010dee:	8732                	mv	a4,a2
1c010df0:	86a6                	mv	a3,s1
1c010df2:	4619                	li	a2,6
1c010df4:	8522                	mv	a0,s0
1c010df6:	ce06                	sw	ra,28(sp)
1c010df8:	f91ff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c010dfc:	e129                	bnez	a0,1c010e3e <hyperflash_read_2d_async+0x76>
1c010dfe:	1c0117b7          	lui	a5,0x1c011
1c010e02:	05478793          	addi	a5,a5,84 # 1c011054 <hyperflash_handle_pending_task>
1c010e06:	02040e23          	sb	zero,60(s0)
1c010e0a:	d45c                	sw	a5,44(s0)
1c010e0c:	4785                	li	a5,1
1c010e0e:	03642823          	sw	s6,48(s0)
1c010e12:	c83c                	sw	a5,80(s0)
1c010e14:	04042023          	sw	zero,64(s0)
1c010e18:	02840813          	addi	a6,s0,40
1c010e1c:	8522                	mv	a0,s0
1c010e1e:	4462                	lw	s0,24(sp)
1c010e20:	40f2                	lw	ra,28(sp)
1c010e22:	4b02                	lw	s6,0(sp)
1c010e24:	87d6                	mv	a5,s5
1c010e26:	8752                	mv	a4,s4
1c010e28:	4a92                	lw	s5,4(sp)
1c010e2a:	4a22                	lw	s4,8(sp)
1c010e2c:	86ce                	mv	a3,s3
1c010e2e:	864a                	mv	a2,s2
1c010e30:	49b2                	lw	s3,12(sp)
1c010e32:	4942                	lw	s2,16(sp)
1c010e34:	85a6                	mv	a1,s1
1c010e36:	44d2                	lw	s1,20(sp)
1c010e38:	6105                	addi	sp,sp,32
1c010e3a:	4fd0306f          	j	1c014b36 <pi_hyper_read_2d_async>
1c010e3e:	40f2                	lw	ra,28(sp)
1c010e40:	4462                	lw	s0,24(sp)
1c010e42:	44d2                	lw	s1,20(sp)
1c010e44:	4942                	lw	s2,16(sp)
1c010e46:	49b2                	lw	s3,12(sp)
1c010e48:	4a22                	lw	s4,8(sp)
1c010e4a:	4a92                	lw	s5,4(sp)
1c010e4c:	4b02                	lw	s6,0(sp)
1c010e4e:	6105                	addi	sp,sp,32
1c010e50:	8082                	ret

1c010e52 <hyperflash_copy_2d_async>:
1c010e52:	00080b63          	beqz	a6,1c010e68 <hyperflash_copy_2d_async+0x16>
1c010e56:	1141                	addi	sp,sp,-16
1c010e58:	8846                	mv	a6,a7
1c010e5a:	c606                	sw	ra,12(sp)
1c010e5c:	f6dff0ef          	jal	ra,1c010dc8 <hyperflash_read_2d_async>
1c010e60:	40b2                	lw	ra,12(sp)
1c010e62:	4501                	li	a0,0
1c010e64:	0141                	addi	sp,sp,16
1c010e66:	8082                	ret
1c010e68:	557d                	li	a0,-1
1c010e6a:	8082                	ret

1c010e6c <hyperflash_erase_sector_async>:
1c010e6c:	1101                	addi	sp,sp,-32
1c010e6e:	cc22                	sw	s0,24(sp)
1c010e70:	4500                	lw	s0,8(a0)
1c010e72:	c64e                	sw	s3,12(sp)
1c010e74:	89ae                	mv	s3,a1
1c010e76:	c84a                	sw	s2,16(sp)
1c010e78:	85b2                	mv	a1,a2
1c010e7a:	892a                	mv	s2,a0
1c010e7c:	4881                	li	a7,0
1c010e7e:	4801                	li	a6,0
1c010e80:	4781                	li	a5,0
1c010e82:	4701                	li	a4,0
1c010e84:	86ce                	mv	a3,s3
1c010e86:	4609                	li	a2,2
1c010e88:	8522                	mv	a0,s0
1c010e8a:	ce06                	sw	ra,28(sp)
1c010e8c:	ca26                	sw	s1,20(sp)
1c010e8e:	efbff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c010e92:	e549                	bnez	a0,1c010f1c <hyperflash_erase_sector_async+0xb0>
1c010e94:	6485                	lui	s1,0x1
1c010e96:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c010e9a:	8522                	mv	a0,s0
1c010e9c:	0aa00613          	li	a2,170
1c010ea0:	edbff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010ea4:	8522                	mv	a0,s0
1c010ea6:	05500613          	li	a2,85
1c010eaa:	55400593          	li	a1,1364
1c010eae:	ecdff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010eb2:	aaa48593          	addi	a1,s1,-1366
1c010eb6:	8522                	mv	a0,s0
1c010eb8:	08000613          	li	a2,128
1c010ebc:	ebfff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010ec0:	aaa48593          	addi	a1,s1,-1366
1c010ec4:	8522                	mv	a0,s0
1c010ec6:	0aa00613          	li	a2,170
1c010eca:	eb1ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010ece:	8522                	mv	a0,s0
1c010ed0:	05500613          	li	a2,85
1c010ed4:	55400593          	li	a1,1364
1c010ed8:	ea3ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010edc:	85ce                	mv	a1,s3
1c010ede:	8522                	mv	a0,s0
1c010ee0:	03000613          	li	a2,48
1c010ee4:	e97ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010ee8:	1c0117b7          	lui	a5,0x1c011
1c010eec:	68878793          	addi	a5,a5,1672 # 1c011688 <hyperflash_check_erase>
1c010ef0:	02040e23          	sb	zero,60(s0)
1c010ef4:	d45c                	sw	a5,44(s0)
1c010ef6:	4785                	li	a5,1
1c010ef8:	03242823          	sw	s2,48(s0)
1c010efc:	04042023          	sw	zero,64(s0)
1c010f00:	c83c                	sw	a5,80(s0)
1c010f02:	02840513          	addi	a0,s0,40
1c010f06:	4462                	lw	s0,24(sp)
1c010f08:	40f2                	lw	ra,28(sp)
1c010f0a:	44d2                	lw	s1,20(sp)
1c010f0c:	4942                	lw	s2,16(sp)
1c010f0e:	49b2                	lw	s3,12(sp)
1c010f10:	6589                	lui	a1,0x2
1c010f12:	71058593          	addi	a1,a1,1808 # 2710 <__rt_stack_size+0x1f10>
1c010f16:	6105                	addi	sp,sp,32
1c010f18:	2e20206f          	j	1c0131fa <pi_task_push_delayed_us>
1c010f1c:	40f2                	lw	ra,28(sp)
1c010f1e:	4462                	lw	s0,24(sp)
1c010f20:	44d2                	lw	s1,20(sp)
1c010f22:	4942                	lw	s2,16(sp)
1c010f24:	49b2                	lw	s3,12(sp)
1c010f26:	6105                	addi	sp,sp,32
1c010f28:	8082                	ret

1c010f2a <hyperflash_erase_chip_async>:
1c010f2a:	1141                	addi	sp,sp,-16
1c010f2c:	c422                	sw	s0,8(sp)
1c010f2e:	4500                	lw	s0,8(a0)
1c010f30:	c04a                	sw	s2,0(sp)
1c010f32:	4881                	li	a7,0
1c010f34:	892a                	mv	s2,a0
1c010f36:	4801                	li	a6,0
1c010f38:	4781                	li	a5,0
1c010f3a:	4701                	li	a4,0
1c010f3c:	4681                	li	a3,0
1c010f3e:	4605                	li	a2,1
1c010f40:	8522                	mv	a0,s0
1c010f42:	c606                	sw	ra,12(sp)
1c010f44:	c226                	sw	s1,4(sp)
1c010f46:	e43ff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c010f4a:	e541                	bnez	a0,1c010fd2 <hyperflash_erase_chip_async+0xa8>
1c010f4c:	6485                	lui	s1,0x1
1c010f4e:	aaa48593          	addi	a1,s1,-1366 # aaa <__rt_stack_size+0x2aa>
1c010f52:	8522                	mv	a0,s0
1c010f54:	0aa00613          	li	a2,170
1c010f58:	e23ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010f5c:	8522                	mv	a0,s0
1c010f5e:	05500613          	li	a2,85
1c010f62:	55400593          	li	a1,1364
1c010f66:	e15ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010f6a:	aaa48593          	addi	a1,s1,-1366
1c010f6e:	8522                	mv	a0,s0
1c010f70:	08000613          	li	a2,128
1c010f74:	e07ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010f78:	aaa48593          	addi	a1,s1,-1366
1c010f7c:	8522                	mv	a0,s0
1c010f7e:	0aa00613          	li	a2,170
1c010f82:	df9ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010f86:	8522                	mv	a0,s0
1c010f88:	05500613          	li	a2,85
1c010f8c:	55400593          	li	a1,1364
1c010f90:	debff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010f94:	aaa48593          	addi	a1,s1,-1366
1c010f98:	8522                	mv	a0,s0
1c010f9a:	4641                	li	a2,16
1c010f9c:	ddfff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c010fa0:	1c0117b7          	lui	a5,0x1c011
1c010fa4:	68878793          	addi	a5,a5,1672 # 1c011688 <hyperflash_check_erase>
1c010fa8:	02040e23          	sb	zero,60(s0)
1c010fac:	d45c                	sw	a5,44(s0)
1c010fae:	4785                	li	a5,1
1c010fb0:	03242823          	sw	s2,48(s0)
1c010fb4:	04042023          	sw	zero,64(s0)
1c010fb8:	c83c                	sw	a5,80(s0)
1c010fba:	02840513          	addi	a0,s0,40
1c010fbe:	4422                	lw	s0,8(sp)
1c010fc0:	40b2                	lw	ra,12(sp)
1c010fc2:	4492                	lw	s1,4(sp)
1c010fc4:	4902                	lw	s2,0(sp)
1c010fc6:	65e1                	lui	a1,0x18
1c010fc8:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c010fcc:	0141                	addi	sp,sp,16
1c010fce:	22c0206f          	j	1c0131fa <pi_task_push_delayed_us>
1c010fd2:	40b2                	lw	ra,12(sp)
1c010fd4:	4422                	lw	s0,8(sp)
1c010fd6:	4492                	lw	s1,4(sp)
1c010fd8:	4902                	lw	s2,0(sp)
1c010fda:	0141                	addi	sp,sp,16
1c010fdc:	8082                	ret

1c010fde <hyperflash_read_async>:
1c010fde:	1101                	addi	sp,sp,-32
1c010fe0:	cc22                	sw	s0,24(sp)
1c010fe2:	4500                	lw	s0,8(a0)
1c010fe4:	ca26                	sw	s1,20(sp)
1c010fe6:	84ae                	mv	s1,a1
1c010fe8:	c84a                	sw	s2,16(sp)
1c010fea:	c64e                	sw	s3,12(sp)
1c010fec:	c452                	sw	s4,8(sp)
1c010fee:	8932                	mv	s2,a2
1c010ff0:	8a2a                	mv	s4,a0
1c010ff2:	89b6                	mv	s3,a3
1c010ff4:	85ba                	mv	a1,a4
1c010ff6:	87b6                	mv	a5,a3
1c010ff8:	8732                	mv	a4,a2
1c010ffa:	4881                	li	a7,0
1c010ffc:	4801                	li	a6,0
1c010ffe:	86a6                	mv	a3,s1
1c011000:	4615                	li	a2,5
1c011002:	8522                	mv	a0,s0
1c011004:	ce06                	sw	ra,28(sp)
1c011006:	d83ff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c01100a:	ed0d                	bnez	a0,1c011044 <hyperflash_read_async+0x66>
1c01100c:	1c0117b7          	lui	a5,0x1c011
1c011010:	05478793          	addi	a5,a5,84 # 1c011054 <hyperflash_handle_pending_task>
1c011014:	02040e23          	sb	zero,60(s0)
1c011018:	d45c                	sw	a5,44(s0)
1c01101a:	4785                	li	a5,1
1c01101c:	03442823          	sw	s4,48(s0)
1c011020:	04042023          	sw	zero,64(s0)
1c011024:	c83c                	sw	a5,80(s0)
1c011026:	02840713          	addi	a4,s0,40
1c01102a:	8522                	mv	a0,s0
1c01102c:	4462                	lw	s0,24(sp)
1c01102e:	40f2                	lw	ra,28(sp)
1c011030:	4a22                	lw	s4,8(sp)
1c011032:	86ce                	mv	a3,s3
1c011034:	864a                	mv	a2,s2
1c011036:	49b2                	lw	s3,12(sp)
1c011038:	4942                	lw	s2,16(sp)
1c01103a:	85a6                	mv	a1,s1
1c01103c:	44d2                	lw	s1,20(sp)
1c01103e:	6105                	addi	sp,sp,32
1c011040:	6fe0306f          	j	1c01473e <pi_hyper_read_async>
1c011044:	40f2                	lw	ra,28(sp)
1c011046:	4462                	lw	s0,24(sp)
1c011048:	44d2                	lw	s1,20(sp)
1c01104a:	4942                	lw	s2,16(sp)
1c01104c:	49b2                	lw	s3,12(sp)
1c01104e:	4a22                	lw	s4,8(sp)
1c011050:	6105                	addi	sp,sp,32
1c011052:	8082                	ret

1c011054 <hyperflash_handle_pending_task>:
1c011054:	1101                	addi	sp,sp,-32
1c011056:	ca26                	sw	s1,20(sp)
1c011058:	4504                	lw	s1,8(a0)
1c01105a:	cc22                	sw	s0,24(sp)
1c01105c:	842a                	mv	s0,a0
1c01105e:	ce06                	sw	ra,28(sp)
1c011060:	c84a                	sw	s2,16(sp)
1c011062:	c64e                	sw	s3,12(sp)
1c011064:	30047973          	csrrci	s2,mstatus,8
1c011068:	4c88                	lw	a0,24(s1)
1c01106a:	300479f3          	csrrci	s3,mstatus,8
1c01106e:	ce3ff0ef          	jal	ra,1c010d50 <__rt_event_enqueue>
1c011072:	30099073          	csrw	mstatus,s3
1c011076:	4898                	lw	a4,16(s1)
1c011078:	0004ac23          	sw	zero,24(s1)
1c01107c:	c319                	beqz	a4,1c011082 <hyperflash_handle_pending_task+0x2e>
1c01107e:	4f5c                	lw	a5,28(a4)
1c011080:	c89c                	sw	a5,16(s1)
1c011082:	30091073          	csrw	mstatus,s2
1c011086:	c379                	beqz	a4,1c01114c <hyperflash_handle_pending_task+0xf8>
1c011088:	5f1c                	lw	a5,56(a4)
1c01108a:	ef81                	bnez	a5,1c0110a2 <hyperflash_handle_pending_task+0x4e>
1c01108c:	8522                	mv	a0,s0
1c01108e:	4462                	lw	s0,24(sp)
1c011090:	40f2                	lw	ra,28(sp)
1c011092:	44d2                	lw	s1,20(sp)
1c011094:	4942                	lw	s2,16(sp)
1c011096:	49b2                	lw	s3,12(sp)
1c011098:	4374                	lw	a3,68(a4)
1c01109a:	4330                	lw	a2,64(a4)
1c01109c:	5f4c                	lw	a1,60(a4)
1c01109e:	6105                	addi	sp,sp,32
1c0110a0:	a40d                	j	1c0112c2 <hyperflash_program_async>
1c0110a2:	0017bc63          	p.bneimm	a5,1,1c0110ba <hyperflash_handle_pending_task+0x66>
1c0110a6:	8522                	mv	a0,s0
1c0110a8:	4462                	lw	s0,24(sp)
1c0110aa:	40f2                	lw	ra,28(sp)
1c0110ac:	44d2                	lw	s1,20(sp)
1c0110ae:	4942                	lw	s2,16(sp)
1c0110b0:	49b2                	lw	s3,12(sp)
1c0110b2:	85ba                	mv	a1,a4
1c0110b4:	6105                	addi	sp,sp,32
1c0110b6:	e75ff06f          	j	1c010f2a <hyperflash_erase_chip_async>
1c0110ba:	0027bd63          	p.bneimm	a5,2,1c0110d4 <hyperflash_handle_pending_task+0x80>
1c0110be:	8522                	mv	a0,s0
1c0110c0:	4462                	lw	s0,24(sp)
1c0110c2:	40f2                	lw	ra,28(sp)
1c0110c4:	44d2                	lw	s1,20(sp)
1c0110c6:	4942                	lw	s2,16(sp)
1c0110c8:	49b2                	lw	s3,12(sp)
1c0110ca:	5f4c                	lw	a1,60(a4)
1c0110cc:	863a                	mv	a2,a4
1c0110ce:	6105                	addi	sp,sp,32
1c0110d0:	d9dff06f          	j	1c010e6c <hyperflash_erase_sector_async>
1c0110d4:	0037bd63          	p.bneimm	a5,3,1c0110ee <hyperflash_handle_pending_task+0x9a>
1c0110d8:	8522                	mv	a0,s0
1c0110da:	4462                	lw	s0,24(sp)
1c0110dc:	40f2                	lw	ra,28(sp)
1c0110de:	44d2                	lw	s1,20(sp)
1c0110e0:	4942                	lw	s2,16(sp)
1c0110e2:	49b2                	lw	s3,12(sp)
1c0110e4:	4330                	lw	a2,64(a4)
1c0110e6:	5f4c                	lw	a1,60(a4)
1c0110e8:	86ba                	mv	a3,a4
1c0110ea:	6105                	addi	sp,sp,32
1c0110ec:	a0f9                	j	1c0111ba <hyperflash_reg_set_async>
1c0110ee:	0047bd63          	p.bneimm	a5,4,1c011108 <hyperflash_handle_pending_task+0xb4>
1c0110f2:	8522                	mv	a0,s0
1c0110f4:	4462                	lw	s0,24(sp)
1c0110f6:	40f2                	lw	ra,28(sp)
1c0110f8:	44d2                	lw	s1,20(sp)
1c0110fa:	4942                	lw	s2,16(sp)
1c0110fc:	49b2                	lw	s3,12(sp)
1c0110fe:	4330                	lw	a2,64(a4)
1c011100:	5f4c                	lw	a1,60(a4)
1c011102:	86ba                	mv	a3,a4
1c011104:	6105                	addi	sp,sp,32
1c011106:	a891                	j	1c01115a <hyperflash_reg_get_async>
1c011108:	0057be63          	p.bneimm	a5,5,1c011124 <hyperflash_handle_pending_task+0xd0>
1c01110c:	8522                	mv	a0,s0
1c01110e:	4462                	lw	s0,24(sp)
1c011110:	40f2                	lw	ra,28(sp)
1c011112:	44d2                	lw	s1,20(sp)
1c011114:	4942                	lw	s2,16(sp)
1c011116:	49b2                	lw	s3,12(sp)
1c011118:	4374                	lw	a3,68(a4)
1c01111a:	4330                	lw	a2,64(a4)
1c01111c:	5f4c                	lw	a1,60(a4)
1c01111e:	6105                	addi	sp,sp,32
1c011120:	ebfff06f          	j	1c010fde <hyperflash_read_async>
1c011124:	0267b463          	p.bneimm	a5,6,1c01114c <hyperflash_handle_pending_task+0xf8>
1c011128:	883a                	mv	a6,a4
1c01112a:	8522                	mv	a0,s0
1c01112c:	4462                	lw	s0,24(sp)
1c01112e:	477c                	lw	a5,76(a4)
1c011130:	40f2                	lw	ra,28(sp)
1c011132:	44d2                	lw	s1,20(sp)
1c011134:	4942                	lw	s2,16(sp)
1c011136:	49b2                	lw	s3,12(sp)
1c011138:	4738                	lw	a4,72(a4)
1c01113a:	04482683          	lw	a3,68(a6)
1c01113e:	04082603          	lw	a2,64(a6)
1c011142:	03c82583          	lw	a1,60(a6)
1c011146:	6105                	addi	sp,sp,32
1c011148:	c81ff06f          	j	1c010dc8 <hyperflash_read_2d_async>
1c01114c:	40f2                	lw	ra,28(sp)
1c01114e:	4462                	lw	s0,24(sp)
1c011150:	44d2                	lw	s1,20(sp)
1c011152:	4942                	lw	s2,16(sp)
1c011154:	49b2                	lw	s3,12(sp)
1c011156:	6105                	addi	sp,sp,32
1c011158:	8082                	ret

1c01115a <hyperflash_reg_get_async>:
1c01115a:	1101                	addi	sp,sp,-32
1c01115c:	cc22                	sw	s0,24(sp)
1c01115e:	4500                	lw	s0,8(a0)
1c011160:	c64e                	sw	s3,12(sp)
1c011162:	89ae                	mv	s3,a1
1c011164:	ca26                	sw	s1,20(sp)
1c011166:	c84a                	sw	s2,16(sp)
1c011168:	84aa                	mv	s1,a0
1c01116a:	8932                	mv	s2,a2
1c01116c:	85b6                	mv	a1,a3
1c01116e:	8732                	mv	a4,a2
1c011170:	4881                	li	a7,0
1c011172:	4801                	li	a6,0
1c011174:	4781                	li	a5,0
1c011176:	86ce                	mv	a3,s3
1c011178:	4611                	li	a2,4
1c01117a:	8522                	mv	a0,s0
1c01117c:	ce06                	sw	ra,28(sp)
1c01117e:	c0bff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c011182:	e50d                	bnez	a0,1c0111ac <hyperflash_reg_get_async+0x52>
1c011184:	8522                	mv	a0,s0
1c011186:	00c40613          	addi	a2,s0,12
1c01118a:	85ce                	mv	a1,s3
1c01118c:	4691                	li	a3,4
1c01118e:	5c6030ef          	jal	ra,1c014754 <pi_hyper_read>
1c011192:	00c45783          	lhu	a5,12(s0)
1c011196:	4462                	lw	s0,24(sp)
1c011198:	40f2                	lw	ra,28(sp)
1c01119a:	00f91023          	sh	a5,0(s2)
1c01119e:	49b2                	lw	s3,12(sp)
1c0111a0:	4942                	lw	s2,16(sp)
1c0111a2:	8526                	mv	a0,s1
1c0111a4:	44d2                	lw	s1,20(sp)
1c0111a6:	6105                	addi	sp,sp,32
1c0111a8:	eadff06f          	j	1c011054 <hyperflash_handle_pending_task>
1c0111ac:	40f2                	lw	ra,28(sp)
1c0111ae:	4462                	lw	s0,24(sp)
1c0111b0:	44d2                	lw	s1,20(sp)
1c0111b2:	4942                	lw	s2,16(sp)
1c0111b4:	49b2                	lw	s3,12(sp)
1c0111b6:	6105                	addi	sp,sp,32
1c0111b8:	8082                	ret

1c0111ba <hyperflash_reg_set_async>:
1c0111ba:	1101                	addi	sp,sp,-32
1c0111bc:	ca26                	sw	s1,20(sp)
1c0111be:	4504                	lw	s1,8(a0)
1c0111c0:	c84a                	sw	s2,16(sp)
1c0111c2:	892e                	mv	s2,a1
1c0111c4:	cc22                	sw	s0,24(sp)
1c0111c6:	c64e                	sw	s3,12(sp)
1c0111c8:	842a                	mv	s0,a0
1c0111ca:	89b2                	mv	s3,a2
1c0111cc:	85b6                	mv	a1,a3
1c0111ce:	8732                	mv	a4,a2
1c0111d0:	4881                	li	a7,0
1c0111d2:	4801                	li	a6,0
1c0111d4:	4781                	li	a5,0
1c0111d6:	86ca                	mv	a3,s2
1c0111d8:	460d                	li	a2,3
1c0111da:	8526                	mv	a0,s1
1c0111dc:	ce06                	sw	ra,28(sp)
1c0111de:	babff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c0111e2:	e105                	bnez	a0,1c011202 <hyperflash_reg_set_async+0x48>
1c0111e4:	0009d603          	lhu	a2,0(s3)
1c0111e8:	8526                	mv	a0,s1
1c0111ea:	85ca                	mv	a1,s2
1c0111ec:	b8fff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c0111f0:	8522                	mv	a0,s0
1c0111f2:	4462                	lw	s0,24(sp)
1c0111f4:	40f2                	lw	ra,28(sp)
1c0111f6:	44d2                	lw	s1,20(sp)
1c0111f8:	4942                	lw	s2,16(sp)
1c0111fa:	49b2                	lw	s3,12(sp)
1c0111fc:	6105                	addi	sp,sp,32
1c0111fe:	e57ff06f          	j	1c011054 <hyperflash_handle_pending_task>
1c011202:	40f2                	lw	ra,28(sp)
1c011204:	4462                	lw	s0,24(sp)
1c011206:	44d2                	lw	s1,20(sp)
1c011208:	4942                	lw	s2,16(sp)
1c01120a:	49b2                	lw	s3,12(sp)
1c01120c:	6105                	addi	sp,sp,32
1c01120e:	8082                	ret

1c011210 <hyperflash_program_resume>:
1c011210:	1101                	addi	sp,sp,-32
1c011212:	cc22                	sw	s0,24(sp)
1c011214:	4500                	lw	s0,8(a0)
1c011216:	ce06                	sw	ra,28(sp)
1c011218:	ca26                	sw	s1,20(sp)
1c01121a:	13042683          	lw	a3,304(s0)
1c01121e:	c84a                	sw	s2,16(sp)
1c011220:	ea81                	bnez	a3,1c011230 <hyperflash_program_resume+0x20>
1c011222:	4462                	lw	s0,24(sp)
1c011224:	40f2                	lw	ra,28(sp)
1c011226:	44d2                	lw	s1,20(sp)
1c011228:	4942                	lw	s2,16(sp)
1c01122a:	6105                	addi	sp,sp,32
1c01122c:	e29ff06f          	j	1c011054 <hyperflash_handle_pending_task>
1c011230:	12842783          	lw	a5,296(s0)
1c011234:	6905                	lui	s2,0x1
1c011236:	84aa                	mv	s1,a0
1c011238:	ec97b733          	p.bclr	a4,a5,22,9
1c01123c:	20000793          	li	a5,512
1c011240:	8f99                	sub	a5,a5,a4
1c011242:	04f6d6b3          	p.minu	a3,a3,a5
1c011246:	aaa90593          	addi	a1,s2,-1366 # aaa <__rt_stack_size+0x2aa>
1c01124a:	8522                	mv	a0,s0
1c01124c:	0aa00613          	li	a2,170
1c011250:	c636                	sw	a3,12(sp)
1c011252:	b29ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c011256:	8522                	mv	a0,s0
1c011258:	05500613          	li	a2,85
1c01125c:	55400593          	li	a1,1364
1c011260:	b1bff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c011264:	aaa90593          	addi	a1,s2,-1366
1c011268:	8522                	mv	a0,s0
1c01126a:	0a000613          	li	a2,160
1c01126e:	b0dff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c011272:	46b2                	lw	a3,12(sp)
1c011274:	12842583          	lw	a1,296(s0)
1c011278:	12c42603          	lw	a2,300(s0)
1c01127c:	02040e23          	sb	zero,60(s0)
1c011280:	00d587b3          	add	a5,a1,a3
1c011284:	12f42423          	sw	a5,296(s0)
1c011288:	00d607b3          	add	a5,a2,a3
1c01128c:	12f42623          	sw	a5,300(s0)
1c011290:	13042783          	lw	a5,304(s0)
1c011294:	d804                	sw	s1,48(s0)
1c011296:	04042023          	sw	zero,64(s0)
1c01129a:	8f95                	sub	a5,a5,a3
1c01129c:	12f42823          	sw	a5,304(s0)
1c0112a0:	1c0117b7          	lui	a5,0x1c011
1c0112a4:	6dc78793          	addi	a5,a5,1756 # 1c0116dc <hyperflash_check_program>
1c0112a8:	d45c                	sw	a5,44(s0)
1c0112aa:	4785                	li	a5,1
1c0112ac:	c83c                	sw	a5,80(s0)
1c0112ae:	02840713          	addi	a4,s0,40
1c0112b2:	8522                	mv	a0,s0
1c0112b4:	4462                	lw	s0,24(sp)
1c0112b6:	40f2                	lw	ra,28(sp)
1c0112b8:	44d2                	lw	s1,20(sp)
1c0112ba:	4942                	lw	s2,16(sp)
1c0112bc:	6105                	addi	sp,sp,32
1c0112be:	4b80306f          	j	1c014776 <pi_hyper_write_async>

1c0112c2 <hyperflash_program_async>:
1c0112c2:	1101                	addi	sp,sp,-32
1c0112c4:	cc22                	sw	s0,24(sp)
1c0112c6:	4500                	lw	s0,8(a0)
1c0112c8:	c452                	sw	s4,8(sp)
1c0112ca:	8a2e                	mv	s4,a1
1c0112cc:	ca26                	sw	s1,20(sp)
1c0112ce:	c84a                	sw	s2,16(sp)
1c0112d0:	c64e                	sw	s3,12(sp)
1c0112d2:	84aa                	mv	s1,a0
1c0112d4:	89b2                	mv	s3,a2
1c0112d6:	8936                	mv	s2,a3
1c0112d8:	85ba                	mv	a1,a4
1c0112da:	87b6                	mv	a5,a3
1c0112dc:	8732                	mv	a4,a2
1c0112de:	4881                	li	a7,0
1c0112e0:	4801                	li	a6,0
1c0112e2:	86d2                	mv	a3,s4
1c0112e4:	4601                	li	a2,0
1c0112e6:	8522                	mv	a0,s0
1c0112e8:	ce06                	sw	ra,28(sp)
1c0112ea:	a9fff0ef          	jal	ra,1c010d88 <hyperflash_stall_task>
1c0112ee:	e10d                	bnez	a0,1c011310 <hyperflash_program_async+0x4e>
1c0112f0:	13442423          	sw	s4,296(s0)
1c0112f4:	13342623          	sw	s3,300(s0)
1c0112f8:	13242823          	sw	s2,304(s0)
1c0112fc:	4462                	lw	s0,24(sp)
1c0112fe:	40f2                	lw	ra,28(sp)
1c011300:	4942                	lw	s2,16(sp)
1c011302:	49b2                	lw	s3,12(sp)
1c011304:	4a22                	lw	s4,8(sp)
1c011306:	8526                	mv	a0,s1
1c011308:	44d2                	lw	s1,20(sp)
1c01130a:	6105                	addi	sp,sp,32
1c01130c:	f05ff06f          	j	1c011210 <hyperflash_program_resume>
1c011310:	40f2                	lw	ra,28(sp)
1c011312:	4462                	lw	s0,24(sp)
1c011314:	44d2                	lw	s1,20(sp)
1c011316:	4942                	lw	s2,16(sp)
1c011318:	49b2                	lw	s3,12(sp)
1c01131a:	4a22                	lw	s4,8(sp)
1c01131c:	6105                	addi	sp,sp,32
1c01131e:	8082                	ret

1c011320 <hyperflash_copy_async>:
1c011320:	1141                	addi	sp,sp,-16
1c011322:	c606                	sw	ra,12(sp)
1c011324:	eb01                	bnez	a4,1c011334 <hyperflash_copy_async+0x14>
1c011326:	873e                	mv	a4,a5
1c011328:	f9bff0ef          	jal	ra,1c0112c2 <hyperflash_program_async>
1c01132c:	40b2                	lw	ra,12(sp)
1c01132e:	4501                	li	a0,0
1c011330:	0141                	addi	sp,sp,16
1c011332:	8082                	ret
1c011334:	873e                	mv	a4,a5
1c011336:	ca9ff0ef          	jal	ra,1c010fde <hyperflash_read_async>
1c01133a:	bfcd                	j	1c01132c <hyperflash_copy_async+0xc>

1c01133c <hyperflash_close>:
1c01133c:	1141                	addi	sp,sp,-16
1c01133e:	c422                	sw	s0,8(sp)
1c011340:	4500                	lw	s0,8(a0)
1c011342:	c606                	sw	ra,12(sp)
1c011344:	8522                	mv	a0,s0
1c011346:	264030ef          	jal	ra,1c0145aa <pi_hyper_close>
1c01134a:	8522                	mv	a0,s0
1c01134c:	4422                	lw	s0,8(sp)
1c01134e:	40b2                	lw	ra,12(sp)
1c011350:	13c00593          	li	a1,316
1c011354:	0141                	addi	sp,sp,16
1c011356:	0a00206f          	j	1c0133f6 <pi_l2_free>

1c01135a <hyperflash_open>:
1c01135a:	7179                	addi	sp,sp,-48
1c01135c:	d226                	sw	s1,36(sp)
1c01135e:	d04a                	sw	s2,32(sp)
1c011360:	84aa                	mv	s1,a0
1c011362:	00452903          	lw	s2,4(a0)
1c011366:	13c00513          	li	a0,316
1c01136a:	d606                	sw	ra,44(sp)
1c01136c:	d422                	sw	s0,40(sp)
1c01136e:	07a020ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c011372:	c535                	beqz	a0,1c0113de <hyperflash_open+0x84>
1c011374:	c488                	sw	a0,8(s1)
1c011376:	842a                	mv	s0,a0
1c011378:	854a                	mv	a0,s2
1c01137a:	57c010ef          	jal	ra,1c0128f6 <bsp_hyperflash_open>
1c01137e:	84aa                	mv	s1,a0
1c011380:	e921                	bnez	a0,1c0113d0 <hyperflash_open+0x76>
1c011382:	4671                	li	a2,28
1c011384:	4581                	li	a1,0
1c011386:	0048                	addi	a0,sp,4
1c011388:	462040ef          	jal	ra,1c0157ea <memset>
1c01138c:	0048                	addi	a0,sp,4
1c01138e:	0ac030ef          	jal	ra,1c01443a <pi_hyper_conf_init>
1c011392:	00492783          	lw	a5,4(s2)
1c011396:	8522                	mv	a0,s0
1c011398:	004c                	addi	a1,sp,4
1c01139a:	00f10423          	sb	a5,8(sp)
1c01139e:	00892783          	lw	a5,8(s2)
1c0113a2:	c802                	sw	zero,16(sp)
1c0113a4:	c63e                	sw	a5,12(sp)
1c0113a6:	716010ef          	jal	ra,1c012abc <pi_open_from_conf>
1c0113aa:	8522                	mv	a0,s0
1c0113ac:	09e030ef          	jal	ra,1c01444a <pi_hyper_open>
1c0113b0:	e105                	bnez	a0,1c0113d0 <hyperflash_open+0x76>
1c0113b2:	00042c23          	sw	zero,24(s0)
1c0113b6:	00042823          	sw	zero,16(s0)
1c0113ba:	02042223          	sw	zero,36(s0)
1c0113be:	00042e23          	sw	zero,28(s0)
1c0113c2:	50b2                	lw	ra,44(sp)
1c0113c4:	5422                	lw	s0,40(sp)
1c0113c6:	8526                	mv	a0,s1
1c0113c8:	5902                	lw	s2,32(sp)
1c0113ca:	5492                	lw	s1,36(sp)
1c0113cc:	6145                	addi	sp,sp,48
1c0113ce:	8082                	ret
1c0113d0:	13c00593          	li	a1,316
1c0113d4:	8522                	mv	a0,s0
1c0113d6:	020020ef          	jal	ra,1c0133f6 <pi_l2_free>
1c0113da:	54f9                	li	s1,-2
1c0113dc:	b7dd                	j	1c0113c2 <hyperflash_open+0x68>
1c0113de:	54fd                	li	s1,-1
1c0113e0:	b7cd                	j	1c0113c2 <hyperflash_open+0x68>

1c0113e2 <pi_task_wait_on.isra.3>:
1c0113e2:	1141                	addi	sp,sp,-16
1c0113e4:	c422                	sw	s0,8(sp)
1c0113e6:	c226                	sw	s1,4(sp)
1c0113e8:	c606                	sw	ra,12(sp)
1c0113ea:	c04a                	sw	s2,0(sp)
1c0113ec:	842a                	mv	s0,a0
1c0113ee:	00040783          	lb	a5,0(s0)
1c0113f2:	c799                	beqz	a5,1c011400 <pi_task_wait_on.isra.3+0x1e>
1c0113f4:	40b2                	lw	ra,12(sp)
1c0113f6:	4422                	lw	s0,8(sp)
1c0113f8:	4492                	lw	s1,4(sp)
1c0113fa:	4902                	lw	s2,0(sp)
1c0113fc:	0141                	addi	sp,sp,16
1c0113fe:	8082                	ret
1c011400:	30047973          	csrrci	s2,mstatus,8
1c011404:	4585                	li	a1,1
1c011406:	01c00513          	li	a0,28
1c01140a:	533010ef          	jal	ra,1c01313c <__rt_event_execute>
1c01140e:	30091073          	csrw	mstatus,s2
1c011412:	bff1                	j	1c0113ee <pi_task_wait_on.isra.3+0xc>

1c011414 <hyperflash_copy_2d>:
1c011414:	7175                	addi	sp,sp,-144
1c011416:	4885                	li	a7,1
1c011418:	c706                	sw	ra,140(sp)
1c01141a:	cc46                	sw	a7,24(sp)
1c01141c:	c202                	sw	zero,4(sp)
1c01141e:	d446                	sw	a7,40(sp)
1c011420:	00010a23          	sb	zero,20(sp)
1c011424:	00080c63          	beqz	a6,1c01143c <hyperflash_copy_2d+0x28>
1c011428:	880a                	mv	a6,sp
1c01142a:	99fff0ef          	jal	ra,1c010dc8 <hyperflash_read_2d_async>
1c01142e:	0848                	addi	a0,sp,20
1c011430:	fb3ff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c011434:	4501                	li	a0,0
1c011436:	40ba                	lw	ra,140(sp)
1c011438:	6149                	addi	sp,sp,144
1c01143a:	8082                	ret
1c01143c:	557d                	li	a0,-1
1c01143e:	bfe5                	j	1c011436 <hyperflash_copy_2d+0x22>

1c011440 <hyperflash_erase_sector>:
1c011440:	7175                	addi	sp,sp,-144
1c011442:	4785                	li	a5,1
1c011444:	860a                	mv	a2,sp
1c011446:	c706                	sw	ra,140(sp)
1c011448:	cc3e                	sw	a5,24(sp)
1c01144a:	d43e                	sw	a5,40(sp)
1c01144c:	c202                	sw	zero,4(sp)
1c01144e:	00010a23          	sb	zero,20(sp)
1c011452:	a1bff0ef          	jal	ra,1c010e6c <hyperflash_erase_sector_async>
1c011456:	0848                	addi	a0,sp,20
1c011458:	f8bff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c01145c:	40ba                	lw	ra,140(sp)
1c01145e:	4501                	li	a0,0
1c011460:	6149                	addi	sp,sp,144
1c011462:	8082                	ret

1c011464 <hyperflash_erase_chip>:
1c011464:	7175                	addi	sp,sp,-144
1c011466:	4785                	li	a5,1
1c011468:	858a                	mv	a1,sp
1c01146a:	c706                	sw	ra,140(sp)
1c01146c:	cc3e                	sw	a5,24(sp)
1c01146e:	d43e                	sw	a5,40(sp)
1c011470:	c202                	sw	zero,4(sp)
1c011472:	00010a23          	sb	zero,20(sp)
1c011476:	ab5ff0ef          	jal	ra,1c010f2a <hyperflash_erase_chip_async>
1c01147a:	0848                	addi	a0,sp,20
1c01147c:	f67ff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c011480:	40ba                	lw	ra,140(sp)
1c011482:	4501                	li	a0,0
1c011484:	6149                	addi	sp,sp,144
1c011486:	8082                	ret

1c011488 <hyperflash_read>:
1c011488:	7175                	addi	sp,sp,-144
1c01148a:	4785                	li	a5,1
1c01148c:	870a                	mv	a4,sp
1c01148e:	c706                	sw	ra,140(sp)
1c011490:	cc3e                	sw	a5,24(sp)
1c011492:	d43e                	sw	a5,40(sp)
1c011494:	c202                	sw	zero,4(sp)
1c011496:	00010a23          	sb	zero,20(sp)
1c01149a:	b45ff0ef          	jal	ra,1c010fde <hyperflash_read_async>
1c01149e:	0848                	addi	a0,sp,20
1c0114a0:	f43ff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c0114a4:	40ba                	lw	ra,140(sp)
1c0114a6:	4501                	li	a0,0
1c0114a8:	6149                	addi	sp,sp,144
1c0114aa:	8082                	ret

1c0114ac <hyperflash_reg_get>:
1c0114ac:	7175                	addi	sp,sp,-144
1c0114ae:	4785                	li	a5,1
1c0114b0:	868a                	mv	a3,sp
1c0114b2:	c706                	sw	ra,140(sp)
1c0114b4:	cc3e                	sw	a5,24(sp)
1c0114b6:	d43e                	sw	a5,40(sp)
1c0114b8:	c202                	sw	zero,4(sp)
1c0114ba:	00010a23          	sb	zero,20(sp)
1c0114be:	c9dff0ef          	jal	ra,1c01115a <hyperflash_reg_get_async>
1c0114c2:	0848                	addi	a0,sp,20
1c0114c4:	f1fff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c0114c8:	40ba                	lw	ra,140(sp)
1c0114ca:	4501                	li	a0,0
1c0114cc:	6149                	addi	sp,sp,144
1c0114ce:	8082                	ret

1c0114d0 <hyperflash_reg_set>:
1c0114d0:	7175                	addi	sp,sp,-144
1c0114d2:	4785                	li	a5,1
1c0114d4:	868a                	mv	a3,sp
1c0114d6:	c706                	sw	ra,140(sp)
1c0114d8:	cc3e                	sw	a5,24(sp)
1c0114da:	d43e                	sw	a5,40(sp)
1c0114dc:	c202                	sw	zero,4(sp)
1c0114de:	00010a23          	sb	zero,20(sp)
1c0114e2:	cd9ff0ef          	jal	ra,1c0111ba <hyperflash_reg_set_async>
1c0114e6:	0848                	addi	a0,sp,20
1c0114e8:	efbff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c0114ec:	40ba                	lw	ra,140(sp)
1c0114ee:	4501                	li	a0,0
1c0114f0:	6149                	addi	sp,sp,144
1c0114f2:	8082                	ret

1c0114f4 <hyperflash_program>:
1c0114f4:	7175                	addi	sp,sp,-144
1c0114f6:	4785                	li	a5,1
1c0114f8:	870a                	mv	a4,sp
1c0114fa:	c706                	sw	ra,140(sp)
1c0114fc:	cc3e                	sw	a5,24(sp)
1c0114fe:	d43e                	sw	a5,40(sp)
1c011500:	c202                	sw	zero,4(sp)
1c011502:	00010a23          	sb	zero,20(sp)
1c011506:	dbdff0ef          	jal	ra,1c0112c2 <hyperflash_program_async>
1c01150a:	0848                	addi	a0,sp,20
1c01150c:	ed7ff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c011510:	40ba                	lw	ra,140(sp)
1c011512:	4501                	li	a0,0
1c011514:	6149                	addi	sp,sp,144
1c011516:	8082                	ret

1c011518 <hyperflash_copy>:
1c011518:	7175                	addi	sp,sp,-144
1c01151a:	4785                	li	a5,1
1c01151c:	cc3e                	sw	a5,24(sp)
1c01151e:	d43e                	sw	a5,40(sp)
1c011520:	878a                	mv	a5,sp
1c011522:	c522                	sw	s0,136(sp)
1c011524:	c706                	sw	ra,140(sp)
1c011526:	c202                	sw	zero,4(sp)
1c011528:	00010a23          	sb	zero,20(sp)
1c01152c:	df5ff0ef          	jal	ra,1c011320 <hyperflash_copy_async>
1c011530:	547d                	li	s0,-1
1c011532:	e509                	bnez	a0,1c01153c <hyperflash_copy+0x24>
1c011534:	842a                	mv	s0,a0
1c011536:	0848                	addi	a0,sp,20
1c011538:	eabff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c01153c:	8522                	mv	a0,s0
1c01153e:	40ba                	lw	ra,140(sp)
1c011540:	442a                	lw	s0,136(sp)
1c011542:	6149                	addi	sp,sp,144
1c011544:	8082                	ret

1c011546 <hyperflash_erase_resume>:
1c011546:	1101                	addi	sp,sp,-32
1c011548:	cc22                	sw	s0,24(sp)
1c01154a:	4500                	lw	s0,8(a0)
1c01154c:	ca26                	sw	s1,20(sp)
1c01154e:	c84a                	sw	s2,16(sp)
1c011550:	13842483          	lw	s1,312(s0)
1c011554:	ce06                	sw	ra,28(sp)
1c011556:	c64e                	sw	s3,12(sp)
1c011558:	892a                	mv	s2,a0
1c01155a:	ec8d                	bnez	s1,1c011594 <hyperflash_erase_resume+0x4e>
1c01155c:	300474f3          	csrrci	s1,mstatus,8
1c011560:	5048                	lw	a0,36(s0)
1c011562:	300479f3          	csrrci	s3,mstatus,8
1c011566:	feaff0ef          	jal	ra,1c010d50 <__rt_event_enqueue>
1c01156a:	30099073          	csrw	mstatus,s3
1c01156e:	4c54                	lw	a3,28(s0)
1c011570:	02042223          	sw	zero,36(s0)
1c011574:	c299                	beqz	a3,1c01157a <hyperflash_erase_resume+0x34>
1c011576:	4edc                	lw	a5,28(a3)
1c011578:	cc5c                	sw	a5,28(s0)
1c01157a:	30049073          	csrw	mstatus,s1
1c01157e:	c2b5                	beqz	a3,1c0115e2 <hyperflash_erase_resume+0x9c>
1c011580:	4462                	lw	s0,24(sp)
1c011582:	40f2                	lw	ra,28(sp)
1c011584:	44d2                	lw	s1,20(sp)
1c011586:	49b2                	lw	s3,12(sp)
1c011588:	42b0                	lw	a2,64(a3)
1c01158a:	5ecc                	lw	a1,60(a3)
1c01158c:	854a                	mv	a0,s2
1c01158e:	4942                	lw	s2,16(sp)
1c011590:	6105                	addi	sp,sp,32
1c011592:	a8b9                	j	1c0115f0 <hyperflash_erase_async>
1c011594:	13442583          	lw	a1,308(s0)
1c011598:	000407b7          	lui	a5,0x40
1c01159c:	0c042023          	sw	zero,192(s0)
1c0115a0:	db25b733          	p.bclr	a4,a1,13,18
1c0115a4:	8f99                	sub	a5,a5,a4
1c0115a6:	04f4d4b3          	p.minu	s1,s1,a5
1c0115aa:	1c0117b7          	lui	a5,0x1c011
1c0115ae:	54678793          	addi	a5,a5,1350 # 1c011546 <hyperflash_erase_resume>
1c0115b2:	0af42623          	sw	a5,172(s0)
1c0115b6:	4785                	li	a5,1
1c0115b8:	0cf42823          	sw	a5,208(s0)
1c0115bc:	0aa42823          	sw	a0,176(s0)
1c0115c0:	0a040e23          	sb	zero,188(s0)
1c0115c4:	0a840613          	addi	a2,s0,168
1c0115c8:	8a5ff0ef          	jal	ra,1c010e6c <hyperflash_erase_sector_async>
1c0115cc:	13442783          	lw	a5,308(s0)
1c0115d0:	97a6                	add	a5,a5,s1
1c0115d2:	12f42a23          	sw	a5,308(s0)
1c0115d6:	13842783          	lw	a5,312(s0)
1c0115da:	409784b3          	sub	s1,a5,s1
1c0115de:	12942c23          	sw	s1,312(s0)
1c0115e2:	40f2                	lw	ra,28(sp)
1c0115e4:	4462                	lw	s0,24(sp)
1c0115e6:	44d2                	lw	s1,20(sp)
1c0115e8:	4942                	lw	s2,16(sp)
1c0115ea:	49b2                	lw	s3,12(sp)
1c0115ec:	6105                	addi	sp,sp,32
1c0115ee:	8082                	ret

1c0115f0 <hyperflash_erase_async>:
1c0115f0:	451c                	lw	a5,8(a0)
1c0115f2:	30047773          	csrrci	a4,mstatus,8
1c0115f6:	0247a803          	lw	a6,36(a5)
1c0115fa:	02080463          	beqz	a6,1c011622 <hyperflash_erase_async+0x32>
1c0115fe:	450d                	li	a0,3
1c011600:	de88                	sw	a0,56(a3)
1c011602:	decc                	sw	a1,60(a3)
1c011604:	c2b0                	sw	a2,64(a3)
1c011606:	0406a223          	sw	zero,68(a3)
1c01160a:	4fd0                	lw	a2,28(a5)
1c01160c:	ca09                	beqz	a2,1c01161e <hyperflash_erase_async+0x2e>
1c01160e:	5390                	lw	a2,32(a5)
1c011610:	ce54                	sw	a3,28(a2)
1c011612:	d394                	sw	a3,32(a5)
1c011614:	0006ae23          	sw	zero,28(a3)
1c011618:	30071073          	csrw	mstatus,a4
1c01161c:	8082                	ret
1c01161e:	cfd4                	sw	a3,28(a5)
1c011620:	bfcd                	j	1c011612 <hyperflash_erase_async+0x22>
1c011622:	d3d4                	sw	a3,36(a5)
1c011624:	30071073          	csrw	mstatus,a4
1c011628:	12b7aa23          	sw	a1,308(a5)
1c01162c:	12c7ac23          	sw	a2,312(a5)
1c011630:	f17ff06f          	j	1c011546 <hyperflash_erase_resume>

1c011634 <hyperflash_erase>:
1c011634:	7175                	addi	sp,sp,-144
1c011636:	4785                	li	a5,1
1c011638:	868a                	mv	a3,sp
1c01163a:	c706                	sw	ra,140(sp)
1c01163c:	cc3e                	sw	a5,24(sp)
1c01163e:	d43e                	sw	a5,40(sp)
1c011640:	c202                	sw	zero,4(sp)
1c011642:	00010a23          	sb	zero,20(sp)
1c011646:	fabff0ef          	jal	ra,1c0115f0 <hyperflash_erase_async>
1c01164a:	0848                	addi	a0,sp,20
1c01164c:	d97ff0ef          	jal	ra,1c0113e2 <pi_task_wait_on.isra.3>
1c011650:	40ba                	lw	ra,140(sp)
1c011652:	4501                	li	a0,0
1c011654:	6149                	addi	sp,sp,144
1c011656:	8082                	ret

1c011658 <hyperflash_get_status_reg>:
1c011658:	6585                	lui	a1,0x1
1c01165a:	1141                	addi	sp,sp,-16
1c01165c:	07000613          	li	a2,112
1c011660:	aaa58593          	addi	a1,a1,-1366 # aaa <__rt_stack_size+0x2aa>
1c011664:	c606                	sw	ra,12(sp)
1c011666:	c422                	sw	s0,8(sp)
1c011668:	842a                	mv	s0,a0
1c01166a:	f10ff0ef          	jal	ra,1c010d7a <hyperflash_set_reg_exec>
1c01166e:	8522                	mv	a0,s0
1c011670:	00c40613          	addi	a2,s0,12
1c011674:	4691                	li	a3,4
1c011676:	4581                	li	a1,0
1c011678:	0dc030ef          	jal	ra,1c014754 <pi_hyper_read>
1c01167c:	00c45503          	lhu	a0,12(s0)
1c011680:	40b2                	lw	ra,12(sp)
1c011682:	4422                	lw	s0,8(sp)
1c011684:	0141                	addi	sp,sp,16
1c011686:	8082                	ret

1c011688 <hyperflash_check_erase>:
1c011688:	1141                	addi	sp,sp,-16
1c01168a:	c422                	sw	s0,8(sp)
1c01168c:	4500                	lw	s0,8(a0)
1c01168e:	c226                	sw	s1,4(sp)
1c011690:	84aa                	mv	s1,a0
1c011692:	8522                	mv	a0,s0
1c011694:	c606                	sw	ra,12(sp)
1c011696:	fc3ff0ef          	jal	ra,1c011658 <hyperflash_get_status_reg>
1c01169a:	c0751533          	p.extractu	a0,a0,0,7
1c01169e:	e905                	bnez	a0,1c0116ce <hyperflash_check_erase+0x46>
1c0116a0:	1c0117b7          	lui	a5,0x1c011
1c0116a4:	68878793          	addi	a5,a5,1672 # 1c011688 <hyperflash_check_erase>
1c0116a8:	02040e23          	sb	zero,60(s0)
1c0116ac:	d45c                	sw	a5,44(s0)
1c0116ae:	4785                	li	a5,1
1c0116b0:	d804                	sw	s1,48(s0)
1c0116b2:	04042023          	sw	zero,64(s0)
1c0116b6:	c83c                	sw	a5,80(s0)
1c0116b8:	02840513          	addi	a0,s0,40
1c0116bc:	4422                	lw	s0,8(sp)
1c0116be:	40b2                	lw	ra,12(sp)
1c0116c0:	4492                	lw	s1,4(sp)
1c0116c2:	65e1                	lui	a1,0x18
1c0116c4:	6a058593          	addi	a1,a1,1696 # 186a0 <__L1Cl+0x86a0>
1c0116c8:	0141                	addi	sp,sp,16
1c0116ca:	3310106f          	j	1c0131fa <pi_task_push_delayed_us>
1c0116ce:	4422                	lw	s0,8(sp)
1c0116d0:	40b2                	lw	ra,12(sp)
1c0116d2:	8526                	mv	a0,s1
1c0116d4:	4492                	lw	s1,4(sp)
1c0116d6:	0141                	addi	sp,sp,16
1c0116d8:	97dff06f          	j	1c011054 <hyperflash_handle_pending_task>

1c0116dc <hyperflash_check_program>:
1c0116dc:	1141                	addi	sp,sp,-16
1c0116de:	c422                	sw	s0,8(sp)
1c0116e0:	4500                	lw	s0,8(a0)
1c0116e2:	c226                	sw	s1,4(sp)
1c0116e4:	84aa                	mv	s1,a0
1c0116e6:	8522                	mv	a0,s0
1c0116e8:	c606                	sw	ra,12(sp)
1c0116ea:	f6fff0ef          	jal	ra,1c011658 <hyperflash_get_status_reg>
1c0116ee:	08057513          	andi	a0,a0,128
1c0116f2:	e51d                	bnez	a0,1c011720 <hyperflash_check_program+0x44>
1c0116f4:	1c0117b7          	lui	a5,0x1c011
1c0116f8:	6dc78793          	addi	a5,a5,1756 # 1c0116dc <hyperflash_check_program>
1c0116fc:	02040e23          	sb	zero,60(s0)
1c011700:	d45c                	sw	a5,44(s0)
1c011702:	4785                	li	a5,1
1c011704:	d804                	sw	s1,48(s0)
1c011706:	04042023          	sw	zero,64(s0)
1c01170a:	c83c                	sw	a5,80(s0)
1c01170c:	02840513          	addi	a0,s0,40
1c011710:	4422                	lw	s0,8(sp)
1c011712:	40b2                	lw	ra,12(sp)
1c011714:	4492                	lw	s1,4(sp)
1c011716:	0fa00593          	li	a1,250
1c01171a:	0141                	addi	sp,sp,16
1c01171c:	2df0106f          	j	1c0131fa <pi_task_push_delayed_us>
1c011720:	4422                	lw	s0,8(sp)
1c011722:	40b2                	lw	ra,12(sp)
1c011724:	8526                	mv	a0,s1
1c011726:	4492                	lw	s1,4(sp)
1c011728:	0141                	addi	sp,sp,16
1c01172a:	ae7ff06f          	j	1c011210 <hyperflash_program_resume>

1c01172e <pi_hyperflash_conf_init>:
};



void pi_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
1c01172e:	1141                	addi	sp,sp,-16
  conf->flash.api = &hyperflash_api;
1c011730:	1c0177b7          	lui	a5,0x1c017
{
1c011734:	c606                	sw	ra,12(sp)
1c011736:	c422                	sw	s0,8(sp)
  conf->flash.api = &hyperflash_api;
1c011738:	59878793          	addi	a5,a5,1432 # 1c017598 <hyperflash_api>
1c01173c:	c11c                	sw	a5,0(a0)
{
1c01173e:	842a                	mv	s0,a0
#if defined(__GAP9__)
  conf->flash.aes_conf.enabled = 0;
  conf->flash.aes_conf.qk_en = 0;
#endif
  bsp_hyperflash_conf_init(conf);
1c011740:	1ac010ef          	jal	ra,1c0128ec <bsp_hyperflash_conf_init>
  __flash_conf_init(&conf->flash);
1c011744:	8522                	mv	a0,s0
1c011746:	cb7fe0ef          	jal	ra,1c0103fc <__flash_conf_init>
  conf->xip_en = 0;
}
1c01174a:	40b2                	lw	ra,12(sp)
  conf->xip_en = 0;
1c01174c:	00042623          	sw	zero,12(s0)
}
1c011750:	4422                	lw	s0,8(sp)
1c011752:	0141                	addi	sp,sp,16
1c011754:	8082                	ret

1c011756 <hyperram_alloc>:

int hyperram_alloc(struct pi_device *device, uint32_t *addr, uint32_t size)
{
  void *chunk;
  hyperram_t *hyperram = (hyperram_t *)device->data;
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c011756:	4508                	lw	a0,8(a0)
{
1c011758:	1101                	addi	sp,sp,-32
1c01175a:	cc22                	sw	s0,24(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c01175c:	0531                	addi	a0,a0,12
{
1c01175e:	842e                	mv	s0,a1
1c011760:	85b2                	mv	a1,a2
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c011762:	0070                	addi	a2,sp,12
{
1c011764:	ce06                	sw	ra,28(sp)
  int err = extern_alloc(&hyperram->alloc, size, &chunk);
1c011766:	2489                	jal	1c0119a8 <extern_alloc>
  *addr = (uint32_t)chunk;
1c011768:	47b2                	lw	a5,12(sp)
  return err;
}
1c01176a:	40f2                	lw	ra,28(sp)
  *addr = (uint32_t)chunk;
1c01176c:	c01c                	sw	a5,0(s0)
}
1c01176e:	4462                	lw	s0,24(sp)
1c011770:	6105                	addi	sp,sp,32
1c011772:	8082                	ret

1c011774 <hyperram_free>:


int hyperram_free(struct pi_device *device, uint32_t addr, uint32_t size)
{
  hyperram_t *hyperram = (hyperram_t *)device->data;
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c011774:	4508                	lw	a0,8(a0)
{
1c011776:	87b2                	mv	a5,a2
  return extern_free(&hyperram->alloc, size, (void *)addr);
1c011778:	862e                	mv	a2,a1
1c01177a:	0531                	addi	a0,a0,12
1c01177c:	85be                	mv	a1,a5
1c01177e:	a461                	j	1c011a06 <extern_free>

1c011780 <hyperram_copy_2d_async>:
{
1c011780:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c011782:	00080563          	beqz	a6,1c01178c <hyperram_copy_2d_async+0xc>
    pi_hyper_read_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c011786:	8846                	mv	a6,a7
1c011788:	3ae0306f          	j	1c014b36 <pi_hyper_read_2d_async>
    pi_hyper_write_2d_async(&hyperram->hyper_device, addr, data, size, stride, length, task);
1c01178c:	8846                	mv	a6,a7
1c01178e:	3c00306f          	j	1c014b4e <pi_hyper_write_2d_async>

1c011792 <hyperram_copy_async>:
{
1c011792:	4508                	lw	a0,8(a0)
  if (ext2loc)
1c011794:	c701                	beqz	a4,1c01179c <hyperram_copy_async+0xa>
    pi_hyper_read_async(&hyperram->hyper_device, addr, data, size, task);
1c011796:	873e                	mv	a4,a5
1c011798:	7a70206f          	j	1c01473e <pi_hyper_read_async>
    pi_hyper_write_async(&hyperram->hyper_device, addr, data, size, task);
1c01179c:	873e                	mv	a4,a5
1c01179e:	7d90206f          	j	1c014776 <pi_hyper_write_async>

1c0117a2 <hyperram_close>:
{
1c0117a2:	1141                	addi	sp,sp,-16
1c0117a4:	c422                	sw	s0,8(sp)
  hyperram_t *hyperram = (hyperram_t *)device->data;
1c0117a6:	4500                	lw	s0,8(a0)
{
1c0117a8:	c606                	sw	ra,12(sp)
  pi_hyper_close(&hyperram->hyper_device);
1c0117aa:	8522                	mv	a0,s0
1c0117ac:	5ff020ef          	jal	ra,1c0145aa <pi_hyper_close>
  extern_alloc_deinit(&hyperram->alloc);
1c0117b0:	00c40513          	addi	a0,s0,12
1c0117b4:	22f5                	jal	1c0119a0 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c0117b6:	8522                	mv	a0,s0
}
1c0117b8:	4422                	lw	s0,8(sp)
1c0117ba:	40b2                	lw	ra,12(sp)
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c0117bc:	45d1                	li	a1,20
}
1c0117be:	0141                	addi	sp,sp,16
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c0117c0:	4370106f          	j	1c0133f6 <pi_l2_free>

1c0117c4 <hyperram_open>:
{
1c0117c4:	7139                	addi	sp,sp,-64
1c0117c6:	da26                	sw	s1,52(sp)
1c0117c8:	d84a                	sw	s2,48(sp)
  struct pi_hyperram_conf *conf = (struct pi_hyperram_conf *)device->config;
1c0117ca:	4144                	lw	s1,4(a0)
{
1c0117cc:	892a                	mv	s2,a0
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c0117ce:	4551                	li	a0,20
{
1c0117d0:	de06                	sw	ra,60(sp)
1c0117d2:	dc22                	sw	s0,56(sp)
1c0117d4:	d64e                	sw	s3,44(sp)
  hyperram_t *hyperram = (hyperram_t *)pmsis_l2_malloc(sizeof(hyperram_t));
1c0117d6:	413010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
  if (hyperram == NULL)
1c0117da:	cd2d                	beqz	a0,1c011854 <hyperram_open+0x90>
  if (conf->reserve_addr_0)
1c0117dc:	509c                	lw	a5,32(s1)
  device->data = (void *)hyperram;
1c0117de:	00a92423          	sw	a0,8(s2)
1c0117e2:	842a                	mv	s0,a0
  int size = conf->ram_size;
1c0117e4:	4c90                	lw	a2,24(s1)
  uint32_t start_addr = 0;
1c0117e6:	4581                	li	a1,0
  if (conf->reserve_addr_0)
1c0117e8:	c399                	beqz	a5,1c0117ee <hyperram_open+0x2a>
    size -= 4;
1c0117ea:	1671                	addi	a2,a2,-4
    start_addr = 4;
1c0117ec:	4591                	li	a1,4
  if (extern_alloc_init(&hyperram->alloc, (void *)start_addr, size))
1c0117ee:	00c40993          	addi	s3,s0,12
1c0117f2:	854e                	mv	a0,s3
1c0117f4:	2aa9                	jal	1c01194e <extern_alloc_init>
1c0117f6:	e901                	bnez	a0,1c011806 <hyperram_open+0x42>
  if (bsp_hyperram_open(conf))
1c0117f8:	8526                	mv	a0,s1
1c0117fa:	0e2010ef          	jal	ra,1c0128dc <bsp_hyperram_open>
1c0117fe:	892a                	mv	s2,a0
1c011800:	c909                	beqz	a0,1c011812 <hyperram_open+0x4e>
  extern_alloc_deinit(&hyperram->alloc);
1c011802:	854e                	mv	a0,s3
1c011804:	2a71                	jal	1c0119a0 <extern_alloc_deinit>
  pmsis_l2_malloc_free(hyperram, sizeof(hyperram_t));
1c011806:	45d1                	li	a1,20
1c011808:	8522                	mv	a0,s0
1c01180a:	3ed010ef          	jal	ra,1c0133f6 <pi_l2_free>
  return -2;
1c01180e:	5979                	li	s2,-2
1c011810:	a815                	j	1c011844 <hyperram_open+0x80>
  pi_hyper_conf_init(&hyper_conf);
1c011812:	0048                	addi	a0,sp,4
1c011814:	427020ef          	jal	ra,1c01443a <pi_hyper_conf_init>
  hyper_conf.burst_length = 4000;
1c011818:	6785                	lui	a5,0x1
1c01181a:	fa078793          	addi	a5,a5,-96 # fa0 <__rt_stack_size+0x7a0>
1c01181e:	cc3e                	sw	a5,24(sp)
  hyper_conf.id = conf->hyper_itf;
1c011820:	40dc                	lw	a5,4(s1)
1c011822:	00f10423          	sb	a5,8(sp)
  hyper_conf.cs = conf->hyper_cs;
1c011826:	449c                	lw	a5,8(s1)
1c011828:	c63e                	sw	a5,12(sp)
  hyper_conf.type = PI_HYPER_TYPE_RAM;
1c01182a:	4785                	li	a5,1
1c01182c:	c83e                	sw	a5,16(sp)
  if (conf->baudrate)
1c01182e:	4cdc                	lw	a5,28(s1)
1c011830:	c391                	beqz	a5,1c011834 <hyperram_open+0x70>
      hyper_conf.baudrate = conf->baudrate;
1c011832:	ca3e                	sw	a5,20(sp)
  pi_open_from_conf(&hyperram->hyper_device, &hyper_conf);
1c011834:	8522                	mv	a0,s0
1c011836:	004c                	addi	a1,sp,4
1c011838:	284010ef          	jal	ra,1c012abc <pi_open_from_conf>
  int32_t error = pi_hyper_open(&hyperram->hyper_device);
1c01183c:	8522                	mv	a0,s0
1c01183e:	40d020ef          	jal	ra,1c01444a <pi_hyper_open>
  if (error)
1c011842:	f161                	bnez	a0,1c011802 <hyperram_open+0x3e>
}
1c011844:	50f2                	lw	ra,60(sp)
1c011846:	5462                	lw	s0,56(sp)
1c011848:	854a                	mv	a0,s2
1c01184a:	54d2                	lw	s1,52(sp)
1c01184c:	5942                	lw	s2,48(sp)
1c01184e:	59b2                	lw	s3,44(sp)
1c011850:	6121                	addi	sp,sp,64
1c011852:	8082                	ret
      return -1;
1c011854:	597d                	li	s2,-1
1c011856:	b7fd                	j	1c011844 <hyperram_open+0x80>

1c011858 <pi_hyperram_conf_init>:
};


void pi_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram.api = &hyperram_api;
1c011858:	1c017737          	lui	a4,0x1c017
1c01185c:	5ec70713          	addi	a4,a4,1516 # 1c0175ec <hyperram_api>
1c011860:	c118                	sw	a4,0(a0)
  conf->ram.aes_conf.enabled = 0;
  conf->ram.aes_conf.qk_en = 0;
#endif
  conf->baudrate = 0;
  conf->xip_en = 0;
  conf->reserve_addr_0 = 1;
1c011862:	4705                	li	a4,1
  conf->baudrate = 0;
1c011864:	00052e23          	sw	zero,28(a0)
  conf->xip_en = 0;
1c011868:	00052823          	sw	zero,16(a0)
  conf->reserve_addr_0 = 1;
1c01186c:	d118                	sw	a4,32(a0)
  bsp_hyperram_conf_init(conf);
1c01186e:	0560106f          	j	1c0128c4 <bsp_hyperram_conf_init>

1c011872 <__pi_ram_cluster_req>:
}


void __pi_ram_conf_init(struct pi_ram_conf *conf)
{
}
1c011872:	832a                	mv	t1,a0
1c011874:	09f34783          	lbu	a5,159(t1)
1c011878:	1c012e37          	lui	t3,0x1c012
1c01187c:	4108                	lw	a0,0(a0)
1c01187e:	00832583          	lw	a1,8(t1)
1c011882:	00432603          	lw	a2,4(t1)
1c011886:	00c32683          	lw	a3,12(t1)
1c01188a:	09e34803          	lbu	a6,158(t1)
1c01188e:	01830893          	addi	a7,t1,24
1c011892:	8e2e0e13          	addi	t3,t3,-1822 # 1c0118e2 <__pi_ram_cluster_req_done>
1c011896:	c78d                	beqz	a5,1c0118c0 <__pi_ram_cluster_req+0x4e>
1c011898:	01c32e23          	sw	t3,28(t1)
1c01189c:	02030623          	sb	zero,44(t1)
1c0118a0:	4e05                	li	t3,1
1c0118a2:	01032703          	lw	a4,16(t1)
1c0118a6:	01432783          	lw	a5,20(t1)
1c0118aa:	02032823          	sw	zero,48(t1)
1c0118ae:	02632023          	sw	t1,32(t1)
1c0118b2:	05c32023          	sw	t3,64(t1)
1c0118b6:	00052303          	lw	t1,0(a0)
1c0118ba:	00c32303          	lw	t1,12(t1)
1c0118be:	8302                	jr	t1
1c0118c0:	4785                	li	a5,1
1c0118c2:	02030623          	sb	zero,44(t1)
1c0118c6:	04f32023          	sw	a5,64(t1)
1c0118ca:	411c                	lw	a5,0(a0)
1c0118cc:	02032823          	sw	zero,48(t1)
1c0118d0:	01c32e23          	sw	t3,28(t1)
1c0118d4:	02632023          	sw	t1,32(t1)
1c0118d8:	0087a303          	lw	t1,8(a5)
1c0118dc:	8742                	mv	a4,a6
1c0118de:	87c6                	mv	a5,a7
1c0118e0:	8302                	jr	t1

1c0118e2 <__pi_ram_cluster_req_done>:
1c0118e2:	09d54783          	lbu	a5,157(a0)
1c0118e6:	4705                	li	a4,1
1c0118e8:	08e50e23          	sb	a4,156(a0)
1c0118ec:	04078793          	addi	a5,a5,64
1c0118f0:	00201737          	lui	a4,0x201
1c0118f4:	07da                	slli	a5,a5,0x16
1c0118f6:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c0118fa:	0007e723          	p.sw	zero,a4(a5)
1c0118fe:	8082                	ret

1c011900 <pi_ram_open>:
1c011900:	415c                	lw	a5,4(a0)
1c011902:	439c                	lw	a5,0(a5)
1c011904:	0007a303          	lw	t1,0(a5)
1c011908:	c11c                	sw	a5,0(a0)
1c01190a:	8302                	jr	t1

1c01190c <pi_cl_ram_copy>:
                 uint32_t pi_ram_addr, void *addr, uint32_t size, int ext2loc, pi_cl_ram_req_t *req)
{
    req->device = device;
    req->addr = addr;
    req->pi_ram_addr = pi_ram_addr;
    req->size = size;
1c01190c:	c7d4                	sw	a3,12(a5)
    req->cid = pi_cluster_id();
    req->done = 0;
    req->ext2loc = ext2loc;
1c01190e:	08e78f23          	sb	a4,158(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c011912:	014026f3          	csrr	a3,uhartid
  task->arg[0] = (uint32_t)callback;
1c011916:	1c012737          	lui	a4,0x1c012
  return (hart_id >> 5) & 0x3f;
1c01191a:	8695                	srai	a3,a3,0x5
1c01191c:	87270713          	addi	a4,a4,-1934 # 1c011872 <__pi_ram_cluster_req>
1c011920:	f266b6b3          	p.bclr	a3,a3,25,6
1c011924:	cfd8                	sw	a4,28(a5)
  task->implem.keep = 1;
1c011926:	4705                	li	a4,1
    req->device = device;
1c011928:	c388                	sw	a0,0(a5)
    req->addr = addr;
1c01192a:	c3d0                	sw	a2,4(a5)
    req->pi_ram_addr = pi_ram_addr;
1c01192c:	c78c                	sw	a1,8(a5)
    req->cid = pi_cluster_id();
1c01192e:	08d78ea3          	sb	a3,157(a5)
    req->done = 0;
1c011932:	08078e23          	sb	zero,156(a5)
    req->is_2d = 0;
1c011936:	08078fa3          	sb	zero,159(a5)
  task->id = PI_TASK_CALLBACK_ID;
1c01193a:	0207a823          	sw	zero,48(a5)
  task->arg[1] = (uint32_t)arg;
1c01193e:	d39c                	sw	a5,32(a5)
  task->implem.keep = 1;
1c011940:	c3b8                	sw	a4,64(a5)
  task->done = 0;
1c011942:	02078623          	sb	zero,44(a5)
    pi_task_callback(&req->event, __pi_ram_cluster_req, (void *) req);
    pi_cl_send_task_to_fc(&(req->event));
1c011946:	01878513          	addi	a0,a5,24
1c01194a:	0b30106f          	j	1c0131fc <pi_cl_send_task_to_fc>

1c01194e <extern_alloc_init>:
  }
  printf("=============================================\n");
}

int extern_alloc_init(extern_alloc_t *a, void *addr, int size)
{
1c01194e:	1101                	addi	sp,sp,-32
1c011950:	ca26                	sw	s1,20(sp)
1c011952:	ce06                	sw	ra,28(sp)
1c011954:	cc22                	sw	s0,24(sp)
1c011956:	84aa                	mv	s1,a0
  if (size)
1c011958:	ce1d                	beqz	a2,1c011996 <extern_alloc_init+0x48>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c01195a:	4531                	li	a0,12
  {
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c01195c:	00758413          	addi	s0,a1,7
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c011960:	c62e                	sw	a1,12(sp)
1c011962:	c432                	sw	a2,8(sp)
1c011964:	285010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
    unsigned int staaddr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c011968:	c4043433          	p.bclr	s0,s0,2,0
    alloc_chunk_extern_t *chunk = __alloc_chunk();
    if (chunk == NULL) return -1;
1c01196c:	45b2                	lw	a1,12(sp)
1c01196e:	4622                	lw	a2,8(sp)
1c011970:	c515                	beqz	a0,1c01199c <extern_alloc_init+0x4e>
    size = size - (staaddr - (unsigned int)addr);
1c011972:	95b2                	add	a1,a1,a2
1c011974:	8d81                	sub	a1,a1,s0
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c011976:	4601                	li	a2,0
    if (size > 0) {
1c011978:	00b05963          	blez	a1,1c01198a <extern_alloc_init+0x3c>
      a->first_free = chunk;
1c01197c:	c088                	sw	a0,0(s1)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c01197e:	c405b5b3          	p.bclr	a1,a1,2,0
1c011982:	c10c                	sw	a1,0(a0)
      chunk->next = NULL;
1c011984:	00052223          	sw	zero,4(a0)
      chunk->addr = staaddr;
1c011988:	c500                	sw	s0,8(a0)
}
1c01198a:	40f2                	lw	ra,28(sp)
1c01198c:	4462                	lw	s0,24(sp)
1c01198e:	44d2                	lw	s1,20(sp)
1c011990:	8532                	mv	a0,a2
1c011992:	6105                	addi	sp,sp,32
1c011994:	8082                	ret
    a->first_free = NULL;
1c011996:	00052023          	sw	zero,0(a0)
1c01199a:	bfc5                	j	1c01198a <extern_alloc_init+0x3c>
    if (chunk == NULL) return -1;
1c01199c:	567d                	li	a2,-1
1c01199e:	b7f5                	j	1c01198a <extern_alloc_init+0x3c>

1c0119a0 <extern_alloc_deinit>:
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c0119a0:	4108                	lw	a0,0(a0)
1c0119a2:	45b1                	li	a1,12
1c0119a4:	2530106f          	j	1c0133f6 <pi_l2_free>

1c0119a8 <extern_alloc>:



int extern_alloc(extern_alloc_t *a, int size, void **chunk)
{
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c0119a8:	411c                	lw	a5,0(a0)

  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c0119aa:	059d                	addi	a1,a1,7
1c0119ac:	c405b5b3          	p.bclr	a1,a1,2,0
  alloc_chunk_extern_t *pt = a->first_free, *prev = 0;
1c0119b0:	4681                	li	a3,0

  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c0119b2:	c7b1                	beqz	a5,1c0119fe <extern_alloc+0x56>
1c0119b4:	4398                	lw	a4,0(a5)
1c0119b6:	02b74863          	blt	a4,a1,1c0119e6 <extern_alloc+0x3e>
{
1c0119ba:	1141                	addi	sp,sp,-16
1c0119bc:	c226                	sw	s1,4(sp)
1c0119be:	c606                	sw	ra,12(sp)
1c0119c0:	c422                	sw	s0,8(sp)
1c0119c2:	4784                	lw	s1,8(a5)

  if (pt) {
    if (pt->size == size) {
1c0119c4:	02b71663          	bne	a4,a1,1c0119f0 <extern_alloc+0x48>
1c0119c8:	43d8                	lw	a4,4(a5)
      // Special case where the whole block disappears
      // This special case is interesting to support when we allocate aligned pages, to limit fragmentation
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c0119ca:	c28d                	beqz	a3,1c0119ec <extern_alloc+0x44>
1c0119cc:	c2d8                	sw	a4,4(a3)
1c0119ce:	8432                	mv	s0,a2
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c0119d0:	45b1                	li	a1,12
1c0119d2:	853e                	mv	a0,a5
1c0119d4:	223010ef          	jal	ra,1c0133f6 <pi_l2_free>
      void *addr = (void *)pt->addr;
      __free_chunk(pt);
      *chunk = addr;
1c0119d8:	c004                	sw	s1,0(s0)
  } else {
    //warning("Not enough memory to allocate\n");
    *chunk = (void *)0xffffffff;
    return -1;
  }
}
1c0119da:	40b2                	lw	ra,12(sp)
1c0119dc:	4422                	lw	s0,8(sp)
1c0119de:	4492                	lw	s1,4(sp)
      return 0;
1c0119e0:	4501                	li	a0,0
}
1c0119e2:	0141                	addi	sp,sp,16
1c0119e4:	8082                	ret
  while (pt && (pt->size < size)) { prev = pt; pt = pt->next; }
1c0119e6:	86be                	mv	a3,a5
1c0119e8:	43dc                	lw	a5,4(a5)
1c0119ea:	b7e1                	j	1c0119b2 <extern_alloc+0xa>
      if (prev) prev->next = pt->next; else a->first_free = pt->next;
1c0119ec:	c118                	sw	a4,0(a0)
1c0119ee:	b7c5                	j	1c0119ce <extern_alloc+0x26>
      pt->size = pt->size - size;
1c0119f0:	40b706b3          	sub	a3,a4,a1
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c0119f4:	9726                	add	a4,a4,s1
      pt->size = pt->size - size;
1c0119f6:	c394                	sw	a3,0(a5)
      void *result = (void *)((char *)pt->addr + pt->size - size);
1c0119f8:	8f0d                	sub	a4,a4,a1
      *chunk = result;
1c0119fa:	c218                	sw	a4,0(a2)
1c0119fc:	bff9                	j	1c0119da <extern_alloc+0x32>
    *chunk = (void *)0xffffffff;
1c0119fe:	57fd                	li	a5,-1
1c011a00:	c21c                	sw	a5,0(a2)
    return -1;
1c011a02:	557d                	li	a0,-1
}
1c011a04:	8082                	ret

1c011a06 <extern_free>:
  return 0;
}

int __attribute__((noinline)) extern_free(extern_alloc_t *a, int size, void *addr)

{
1c011a06:	7179                	addi	sp,sp,-48
1c011a08:	d422                	sw	s0,40(sp)
  alloc_chunk_extern_t *chunk;
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c011a0a:	4100                	lw	s0,0(a0)
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c011a0c:	059d                	addi	a1,a1,7
{
1c011a0e:	d226                	sw	s1,36(sp)
1c011a10:	d04a                	sw	s2,32(sp)
1c011a12:	ce4e                	sw	s3,28(sp)
1c011a14:	d606                	sw	ra,44(sp)
1c011a16:	89aa                	mv	s3,a0
  size = ALIGN_UP(size, MIN_CHUNK_SIZE);
1c011a18:	c405b933          	p.bclr	s2,a1,2,0
  alloc_chunk_extern_t *next = a->first_free, *prev = 0;
1c011a1c:	4481                	li	s1,0

  while (next && next->addr < (unsigned int)addr) {
1c011a1e:	c439                	beqz	s0,1c011a6c <extern_free+0x66>
1c011a20:	441c                	lw	a5,8(s0)
1c011a22:	04c7e263          	bltu	a5,a2,1c011a66 <extern_free+0x60>
    prev = next; next = next->next; 
  }

  if (next && ((char *)addr + size) == (char *)next->addr) {
1c011a26:	01260733          	add	a4,a2,s2
1c011a2a:	04f71163          	bne	a4,a5,1c011a6c <extern_free+0x66>
    /* Coalesce with next */
    next->size = size + next->size;
1c011a2e:	400c                	lw	a1,0(s0)
    next->addr = (unsigned int)addr;
1c011a30:	c410                	sw	a2,8(s0)
    next->size = size + next->size;
1c011a32:	992e                	add	s2,s2,a1
1c011a34:	01242023          	sw	s2,0(s0)
    chunk->size = size;
    chunk->next = next;
    chunk->addr = (unsigned int)addr;
  }

  if (prev) {
1c011a38:	c8b1                	beqz	s1,1c011a8c <extern_free+0x86>
    if (((char *)prev->addr + prev->size) == (char *)addr) {
1c011a3a:	4094                	lw	a3,0(s1)
1c011a3c:	4498                	lw	a4,8(s1)
1c011a3e:	9736                	add	a4,a4,a3
1c011a40:	04e61463          	bne	a2,a4,1c011a88 <extern_free+0x82>
      /* Coalesce with previous */
      prev->size += chunk->size;
1c011a44:	401c                	lw	a5,0(s0)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c011a46:	45b1                	li	a1,12
1c011a48:	8522                	mv	a0,s0
      prev->size += chunk->size;
1c011a4a:	97b6                	add	a5,a5,a3
1c011a4c:	c09c                	sw	a5,0(s1)
      prev->next = chunk->next;
1c011a4e:	405c                	lw	a5,4(s0)
1c011a50:	c0dc                	sw	a5,4(s1)
  pmsis_l2_malloc_free((void *)pt, sizeof(alloc_chunk_extern_t));
1c011a52:	1a5010ef          	jal	ra,1c0133f6 <pi_l2_free>
    }
  } else {
    a->first_free = chunk;
  }

  return 0;
1c011a56:	4501                	li	a0,0
}
1c011a58:	50b2                	lw	ra,44(sp)
1c011a5a:	5422                	lw	s0,40(sp)
1c011a5c:	5492                	lw	s1,36(sp)
1c011a5e:	5902                	lw	s2,32(sp)
1c011a60:	49f2                	lw	s3,28(sp)
1c011a62:	6145                	addi	sp,sp,48
1c011a64:	8082                	ret
    prev = next; next = next->next; 
1c011a66:	84a2                	mv	s1,s0
1c011a68:	4040                	lw	s0,4(s0)
1c011a6a:	bf55                	j	1c011a1e <extern_free+0x18>
  return (alloc_chunk_extern_t *)pmsis_l2_malloc(sizeof(alloc_chunk_extern_t));
1c011a6c:	4531                	li	a0,12
1c011a6e:	c632                	sw	a2,12(sp)
1c011a70:	179010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c011a74:	87aa                	mv	a5,a0
    if (chunk == NULL) return -1;
1c011a76:	4632                	lw	a2,12(sp)
1c011a78:	557d                	li	a0,-1
1c011a7a:	dff9                	beqz	a5,1c011a58 <extern_free+0x52>
    chunk->next = next;
1c011a7c:	c3c0                	sw	s0,4(a5)
    chunk->size = size;
1c011a7e:	0127a023          	sw	s2,0(a5)
    chunk->addr = (unsigned int)addr;
1c011a82:	c790                	sw	a2,8(a5)
1c011a84:	843e                	mv	s0,a5
1c011a86:	bf4d                	j	1c011a38 <extern_free+0x32>
      prev->next = chunk;
1c011a88:	c0c0                	sw	s0,4(s1)
1c011a8a:	b7f1                	j	1c011a56 <extern_free+0x50>
    a->first_free = chunk;
1c011a8c:	0089a023          	sw	s0,0(s3)
1c011a90:	b7d9                	j	1c011a56 <extern_free+0x50>

1c011a92 <pi_partition_get_flash_offset>:
        return 0;
}

uint32_t pi_partition_get_flash_offset(const pi_partition_t *partition)
{
    if(partition)
1c011a92:	c119                	beqz	a0,1c011a98 <pi_partition_get_flash_offset+0x6>
        return partition->offset;
1c011a94:	4548                	lw	a0,12(a0)
1c011a96:	8082                	ret
    else
        return UINT32_MAX;
1c011a98:	557d                	li	a0,-1
}
1c011a9a:	8082                	ret

1c011a9c <pi_partition_table_free>:

void pi_partition_table_free(pi_partition_table_t table)
{
    flash_partition_table_free((flash_partition_table_t *) table);
1c011a9c:	aaf1                	j	1c011c78 <flash_partition_table_free>

1c011a9e <pi_partition_table_load>:

pi_err_t pi_partition_table_load(pi_device_t *flash, const pi_partition_table_t *table)
{
    pi_err_t rc;
    
    rc = flash_partition_table_load(flash, (const flash_partition_table_t **) table, NULL);
1c011a9e:	4601                	li	a2,0
1c011aa0:	a8d1                	j	1c011b74 <flash_partition_table_load>

1c011aa2 <pi_partition_find_first>:

const pi_partition_t *
pi_partition_find_first(const pi_partition_table_t table, const pi_partition_type_t type,
                        const pi_partition_subtype_t subtype,
                        const char *label)
{
1c011aa2:	1141                	addi	sp,sp,-16
1c011aa4:	c226                	sw	s1,4(sp)
1c011aa6:	c606                	sw	ra,12(sp)
1c011aa8:	c422                	sw	s0,8(sp)
1c011aaa:	84aa                	mv	s1,a0
    pi_partition_t *partition;
    const flash_partition_info_t *info;
    
    info = flash_partition_find_first((const flash_partition_table_t *) table, type, subtype, label);
1c011aac:	2ac5                	jal	1c011c9c <flash_partition_find_first>
    if(info == NULL)
1c011aae:	c539                	beqz	a0,1c011afc <pi_partition_find_first+0x5a>
1c011ab0:	842a                	mv	s0,a0
        return NULL;
    
    partition = pi_l2_malloc(sizeof(pi_partition_t));
1c011ab2:	02800513          	li	a0,40
1c011ab6:	133010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
    partition->type = info->type;
1c011aba:	00244783          	lbu	a5,2(s0)
    partition->subtype = info->subtype;
    partition->size = info->pos.size;
    partition->offset = info->pos.offset;
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c011abe:	4098                	lw	a4,0(s1)
    partition->type = info->type;
1c011ac0:	c15c                	sw	a5,4(a0)
    partition->subtype = info->subtype;
1c011ac2:	00344783          	lbu	a5,3(s0)
1c011ac6:	c51c                	sw	a5,8(a0)
    partition->size = info->pos.size;
1c011ac8:	441c                	lw	a5,8(s0)
1c011aca:	c91c                	sw	a5,16(a0)
    partition->offset = info->pos.offset;
1c011acc:	405c                	lw	a5,4(s0)
1c011ace:	c55c                	sw	a5,12(a0)
    partition->flash = ((const flash_partition_table_t *)table)->flash;
1c011ad0:	87aa                	mv	a5,a0
1c011ad2:	00e7aa2b          	p.sw	a4,20(a5!)
    memcpy(partition->label, info->label, 16);
1c011ad6:	4458                	lw	a4,12(s0)
1c011ad8:	c398                	sw	a4,0(a5)
1c011ada:	481c                	lw	a5,16(s0)
1c011adc:	cd1c                	sw	a5,24(a0)
1c011ade:	485c                	lw	a5,20(s0)
1c011ae0:	cd5c                	sw	a5,28(a0)
1c011ae2:	4c1c                	lw	a5,24(s0)
    partition->label[16] = 0;
1c011ae4:	02050223          	sb	zero,36(a0)
    partition->encrypted = false;
1c011ae8:	020502a3          	sb	zero,37(a0)
    memcpy(partition->label, info->label, 16);
1c011aec:	d11c                	sw	a5,32(a0)
    partition->read_only = false;
1c011aee:	02050323          	sb	zero,38(a0)
    
    return (const pi_partition_t *) partition;
}
1c011af2:	40b2                	lw	ra,12(sp)
1c011af4:	4422                	lw	s0,8(sp)
1c011af6:	4492                	lw	s1,4(sp)
1c011af8:	0141                	addi	sp,sp,16
1c011afa:	8082                	ret
        return NULL;
1c011afc:	4501                	li	a0,0
1c011afe:	bfd5                	j	1c011af2 <pi_partition_find_first+0x50>

1c011b00 <flash_partition_table_verify>:

pi_err_t flash_partition_table_verify(const flash_partition_table_t *table)
{
    const flash_partition_info_t *part;
    const flash_partition_table_header_t *header = &table->header;
    const flash_partition_info_t *partition_table = table->partitions;
1c011b00:	514c                	lw	a1,36(a0)
    MD5_CTX context;
    uint8_t digest[16];

    // Check magic number for each partition
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c011b02:	00754683          	lbu	a3,7(a0)
1c011b06:	4781                	li	a5,0
1c011b08:	872e                	mv	a4,a1
    {
        part = partition_table + num_parts;
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c011b0a:	1ba00613          	li	a2,442
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c011b0e:	04f69663          	bne	a3,a5,1c011b5a <flash_partition_table_verify+0x5a>
        {
            return PI_ERR_INVALID_STATE;
        }
    }

    if (header->crc_flags)
1c011b12:	00854783          	lbu	a5,8(a0)
1c011b16:	cfa9                	beqz	a5,1c011b70 <flash_partition_table_verify+0x70>
{
1c011b18:	7155                	addi	sp,sp,-208
1c011b1a:	c5a2                	sw	s0,200(sp)
1c011b1c:	842a                	mv	s0,a0
    {
        MD5_Init(&context);
1c011b1e:	1028                	addi	a0,sp,40
{
1c011b20:	c786                	sw	ra,204(sp)
        MD5_Init(&context);
1c011b22:	c62e                	sw	a1,12(sp)
1c011b24:	2bb000ef          	jal	ra,1c0125de <MD5_Init>
        MD5_Update(&context, (unsigned char *) partition_table,
                   header->nbr_of_entries * sizeof(flash_partition_info_t));
1c011b28:	00744603          	lbu	a2,7(s0)
        MD5_Update(&context, (unsigned char *) partition_table,
1c011b2c:	45b2                	lw	a1,12(sp)
1c011b2e:	1028                	addi	a0,sp,40
1c011b30:	0616                	slli	a2,a2,0x5
1c011b32:	2df000ef          	jal	ra,1c012610 <MD5_Update>
        MD5_Final(digest, &context);
1c011b36:	102c                	addi	a1,sp,40
1c011b38:	0828                	addi	a0,sp,24
1c011b3a:	373000ef          	jal	ra,1c0126ac <MD5_Final>

        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c011b3e:	4641                	li	a2,16
1c011b40:	082c                	addi	a1,sp,24
1c011b42:	01440513          	addi	a0,s0,20
1c011b46:	46f030ef          	jal	ra,1c0157b4 <strncmp>
        {
            return PI_ERR_INVALID_CRC;
1c011b4a:	47a1                	li	a5,8
        if (strncmp((const char *) header->md5, (const char *) digest, sizeof(digest)))
1c011b4c:	e111                	bnez	a0,1c011b50 <flash_partition_table_verify+0x50>
        }
    }

    return PI_OK;
1c011b4e:	4781                	li	a5,0
}
1c011b50:	40be                	lw	ra,204(sp)
1c011b52:	442e                	lw	s0,200(sp)
1c011b54:	853e                	mv	a0,a5
1c011b56:	6169                	addi	sp,sp,208
1c011b58:	8082                	ret
        if (part->magic_bytes != PI_PARTITION_MAGIC)
1c011b5a:	0207580b          	p.lhu	a6,32(a4!)
1c011b5e:	00c81663          	bne	a6,a2,1c011b6a <flash_partition_table_verify+0x6a>
    for (uint8_t num_parts = 0; num_parts < header->nbr_of_entries; num_parts++)
1c011b62:	0785                	addi	a5,a5,1
1c011b64:	0ff7f793          	andi	a5,a5,255
1c011b68:	b75d                	j	1c011b0e <flash_partition_table_verify+0xe>
            return PI_ERR_INVALID_STATE;
1c011b6a:	478d                	li	a5,3
}
1c011b6c:	853e                	mv	a0,a5
1c011b6e:	8082                	ret
    return PI_OK;
1c011b70:	4781                	li	a5,0
1c011b72:	bfed                	j	1c011b6c <flash_partition_table_verify+0x6c>

1c011b74 <flash_partition_table_load>:

pi_err_t flash_partition_table_load(pi_device_t *flash, const flash_partition_table_t **partition_table,
                                    uint8_t *nbr_of_entries)
{
1c011b74:	1101                	addi	sp,sp,-32
1c011b76:	ca26                	sw	s1,20(sp)
1c011b78:	ce06                	sw	ra,28(sp)
1c011b7a:	cc22                	sw	s0,24(sp)
1c011b7c:	c84a                	sw	s2,16(sp)
1c011b7e:	c64e                	sw	s3,12(sp)
1c011b80:	c452                	sw	s4,8(sp)
1c011b82:	c256                	sw	s5,4(sp)
    flash_partition_info_t *partitions = NULL;

    if(partition_table == NULL)
    {
        PARTITION_TRACE_ERR("Table argument is NULL");
        return PI_ERR_INVALID_ARG;
1c011b84:	4489                	li	s1,2
    if(partition_table == NULL)
1c011b86:	c9e1                	beqz	a1,1c011c56 <flash_partition_table_load+0xe2>
1c011b88:	892a                	mv	s2,a0
    }

// Alloc table containing header
    table = pi_l2_malloc(sizeof(*table));
1c011b8a:	02800513          	li	a0,40
1c011b8e:	89b2                	mv	s3,a2
1c011b90:	8aae                	mv	s5,a1
1c011b92:	057010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c011b96:	842a                	mv	s0,a0
    if(table == NULL)
    {
        PARTITION_TRACE_ERR("Unable to allocate partition table in L2.");
        rc = PI_ERR_L2_NO_MEM;
1c011b98:	20100493          	li	s1,513
    if(table == NULL)
1c011b9c:	cd4d                	beqz	a0,1c011c56 <flash_partition_table_load+0xe2>
        goto mount_error;
    }

    table_offset_l2 = pi_l2_malloc(sizeof(*table_offset_l2));
1c011b9e:	4511                	li	a0,4
1c011ba0:	049010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c011ba4:	84aa                	mv	s1,a0
    if(table_offset_l2 == NULL)
1c011ba6:	c171                	beqz	a0,1c011c6a <flash_partition_table_load+0xf6>
  api->read(device, pi_flash_addr, data, size);
1c011ba8:	00092783          	lw	a5,0(s2)
1c011bac:	862a                	mv	a2,a0
1c011bae:	4581                	li	a1,0
1c011bb0:	5b9c                	lw	a5,48(a5)
1c011bb2:	4691                	li	a3,4
1c011bb4:	854a                	mv	a0,s2
1c011bb6:	9782                	jalr	a5
        rc = PI_ERR_L2_NO_MEM;
        goto mount_error;
    }

    pi_flash_read(flash, 0, table_offset_l2, 4);
    if(*table_offset_l2 == 0)
1c011bb8:	0004aa03          	lw	s4,0(s1)

    return PI_OK;

    mount_error:
    if(table_offset_l2)
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c011bbc:	4591                	li	a1,4
1c011bbe:	8526                	mv	a0,s1
    if(*table_offset_l2 == 0)
1c011bc0:	0a0a0863          	beqz	s4,1c011c70 <flash_partition_table_load+0xfc>
    pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c011bc4:	033010ef          	jal	ra,1c0133f6 <pi_l2_free>
1c011bc8:	00092783          	lw	a5,0(s2)
1c011bcc:	02000693          	li	a3,32
1c011bd0:	00440613          	addi	a2,s0,4
1c011bd4:	5b9c                	lw	a5,48(a5)
1c011bd6:	85d2                	mv	a1,s4
1c011bd8:	854a                	mv	a0,s2
1c011bda:	9782                	jalr	a5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c011bdc:	00445703          	lhu	a4,4(s0)
1c011be0:	2ba00793          	li	a5,698
        rc = PI_ERR_NOT_FOUND;
1c011be4:	4495                	li	s1,5
    if(table->header.magic_bytes != PI_PARTITION_TABLE_HEADER_MAGIC)
1c011be6:	04f71763          	bne	a4,a5,1c011c34 <flash_partition_table_load+0xc0>
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c011bea:	00644783          	lbu	a5,6(s0)
        rc = PI_ERR_INVALID_VERSION;
1c011bee:	44a5                	li	s1,9
    if(table->header.format_version != PI_PARTITION_TABLE_FORMAT_VERSION)
1c011bf0:	0417b263          	p.bneimm	a5,1,1c011c34 <flash_partition_table_load+0xc0>
    table->partitions = pi_l2_malloc(sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c011bf4:	00744503          	lbu	a0,7(s0)
1c011bf8:	0516                	slli	a0,a0,0x5
1c011bfa:	7ee010ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c011bfe:	d048                	sw	a0,36(s0)
1c011c00:	862a                	mv	a2,a0
    if(table->partitions == NULL)
1c011c02:	c525                	beqz	a0,1c011c6a <flash_partition_table_load+0xf6>
1c011c04:	00092783          	lw	a5,0(s2)
                  sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c011c08:	00744683          	lbu	a3,7(s0)
1c011c0c:	020a0593          	addi	a1,s4,32
1c011c10:	5b9c                	lw	a5,48(a5)
1c011c12:	0696                	slli	a3,a3,0x5
1c011c14:	854a                	mv	a0,s2
1c011c16:	9782                	jalr	a5
    if(table->header.crc_flags)
1c011c18:	00844783          	lbu	a5,8(s0)
1c011c1c:	c395                	beqz	a5,1c011c40 <flash_partition_table_load+0xcc>
        rc = flash_partition_table_verify(table);
1c011c1e:	8522                	mv	a0,s0
1c011c20:	ee1ff0ef          	jal	ra,1c011b00 <flash_partition_table_verify>
1c011c24:	84aa                	mv	s1,a0
        if(rc != PI_OK)
1c011c26:	cd09                	beqz	a0,1c011c40 <flash_partition_table_load+0xcc>
            pi_l2_free(table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c011c28:	00744583          	lbu	a1,7(s0)
1c011c2c:	5048                	lw	a0,36(s0)
1c011c2e:	0596                	slli	a1,a1,0x5
1c011c30:	7c6010ef          	jal	ra,1c0133f6 <pi_l2_free>
    if(table)
        pi_l2_free(table, sizeof(*table));
1c011c34:	02800593          	li	a1,40
1c011c38:	8522                	mv	a0,s0
1c011c3a:	7bc010ef          	jal	ra,1c0133f6 <pi_l2_free>
1c011c3e:	a821                	j	1c011c56 <flash_partition_table_load+0xe2>
    table->flash = flash;
1c011c40:	01242023          	sw	s2,0(s0)
    *partition_table = table;
1c011c44:	008aa023          	sw	s0,0(s5)
    return PI_OK;
1c011c48:	4481                	li	s1,0
    if(nbr_of_entries)
1c011c4a:	00098663          	beqz	s3,1c011c56 <flash_partition_table_load+0xe2>
        *nbr_of_entries = table->header.nbr_of_entries;
1c011c4e:	00744783          	lbu	a5,7(s0)
1c011c52:	00f98023          	sb	a5,0(s3)
    return rc;
}
1c011c56:	40f2                	lw	ra,28(sp)
1c011c58:	4462                	lw	s0,24(sp)
1c011c5a:	8526                	mv	a0,s1
1c011c5c:	4942                	lw	s2,16(sp)
1c011c5e:	44d2                	lw	s1,20(sp)
1c011c60:	49b2                	lw	s3,12(sp)
1c011c62:	4a22                	lw	s4,8(sp)
1c011c64:	4a92                	lw	s5,4(sp)
1c011c66:	6105                	addi	sp,sp,32
1c011c68:	8082                	ret
        rc = PI_ERR_L2_NO_MEM;
1c011c6a:	20100493          	li	s1,513
1c011c6e:	b7d9                	j	1c011c34 <flash_partition_table_load+0xc0>
        pi_l2_free(table_offset_l2, sizeof(*table_offset_l2));
1c011c70:	786010ef          	jal	ra,1c0133f6 <pi_l2_free>
        rc = PI_ERR_NOT_FOUND;
1c011c74:	4495                	li	s1,5
1c011c76:	bf7d                	j	1c011c34 <flash_partition_table_load+0xc0>

1c011c78 <flash_partition_table_free>:

void flash_partition_table_free(const flash_partition_table_t *table)
{
1c011c78:	1141                	addi	sp,sp,-16
1c011c7a:	c422                	sw	s0,8(sp)
1c011c7c:	c606                	sw	ra,12(sp)
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c011c7e:	00754583          	lbu	a1,7(a0)
{
1c011c82:	842a                	mv	s0,a0
    pi_l2_free((void *) table->partitions, sizeof(flash_partition_info_t) * table->header.nbr_of_entries);
1c011c84:	5148                	lw	a0,36(a0)
1c011c86:	0596                	slli	a1,a1,0x5
1c011c88:	76e010ef          	jal	ra,1c0133f6 <pi_l2_free>
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c011c8c:	8522                	mv	a0,s0
}
1c011c8e:	4422                	lw	s0,8(sp)
1c011c90:	40b2                	lw	ra,12(sp)
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c011c92:	02800593          	li	a1,40
}
1c011c96:	0141                	addi	sp,sp,16
    pi_l2_free((void *) table, sizeof(flash_partition_table_t));
1c011c98:	75e0106f          	j	1c0133f6 <pi_l2_free>

1c011c9c <flash_partition_find_first>:


const flash_partition_info_t *flash_partition_find_first(const flash_partition_table_t *table, pi_partition_type_t type,
                                                         pi_partition_subtype_t subtype, const char *label)
{
1c011c9c:	7179                	addi	sp,sp,-48
1c011c9e:	d226                	sw	s1,36(sp)
1c011ca0:	d04a                	sw	s2,32(sp)
1c011ca2:	cc52                	sw	s4,24(sp)
1c011ca4:	ca56                	sw	s5,20(sp)
1c011ca6:	d606                	sw	ra,44(sp)
1c011ca8:	d422                	sw	s0,40(sp)
1c011caa:	ce4e                	sw	s3,28(sp)
    const flash_partition_info_t *part = NULL;

    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c011cac:	00754983          	lbu	s3,7(a0)
{
1c011cb0:	892a                	mv	s2,a0
1c011cb2:	8a2e                	mv	s4,a1
1c011cb4:	8ab2                	mv	s5,a2
    for (uint8_t i = 0; i < table->header.nbr_of_entries; i++)
1c011cb6:	4481                	li	s1,0
1c011cb8:	0ff4f793          	andi	a5,s1,255
1c011cbc:	0137ed63          	bltu	a5,s3,1c011cd6 <flash_partition_find_first+0x3a>
        if(label == NULL)
            return part;
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
            return part;
    }
    return NULL;
1c011cc0:	4401                	li	s0,0
}
1c011cc2:	8522                	mv	a0,s0
1c011cc4:	50b2                	lw	ra,44(sp)
1c011cc6:	5422                	lw	s0,40(sp)
1c011cc8:	5492                	lw	s1,36(sp)
1c011cca:	5902                	lw	s2,32(sp)
1c011ccc:	49f2                	lw	s3,28(sp)
1c011cce:	4a62                	lw	s4,24(sp)
1c011cd0:	4ad2                	lw	s5,20(sp)
1c011cd2:	6145                	addi	sp,sp,48
1c011cd4:	8082                	ret
        part = table->partitions + i;
1c011cd6:	02492783          	lw	a5,36(s2)
1c011cda:	00549413          	slli	s0,s1,0x5
1c011cde:	943e                	add	s0,s0,a5
        if(part->type != type || part->subtype != subtype)
1c011ce0:	00244783          	lbu	a5,2(s0)
1c011ce4:	03479063          	bne	a5,s4,1c011d04 <flash_partition_find_first+0x68>
1c011ce8:	00344783          	lbu	a5,3(s0)
1c011cec:	01579c63          	bne	a5,s5,1c011d04 <flash_partition_find_first+0x68>
        if(label == NULL)
1c011cf0:	dae9                	beqz	a3,1c011cc2 <flash_partition_find_first+0x26>
        if(strncmp(label, (char *) &part->label, PI_PARTITION_LABEL_LENGTH) == 0)
1c011cf2:	8536                	mv	a0,a3
1c011cf4:	4641                	li	a2,16
1c011cf6:	00c40593          	addi	a1,s0,12
1c011cfa:	c636                	sw	a3,12(sp)
1c011cfc:	2b9030ef          	jal	ra,1c0157b4 <strncmp>
1c011d00:	46b2                	lw	a3,12(sp)
1c011d02:	d161                	beqz	a0,1c011cc2 <flash_partition_find_first+0x26>
1c011d04:	0485                	addi	s1,s1,1
1c011d06:	bf4d                	j	1c011cb8 <flash_partition_find_first+0x1c>

1c011d08 <body>:
/*
 * This processes one or more 64-byte data blocks, but does NOT update the bit
 * counters.  There are no alignment requirements.
 */
static const void *body(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c011d08:	715d                	addi	sp,sp,-80
	MD5_u32plus a, b, c, d;
	MD5_u32plus saved_a, saved_b, saved_c, saved_d;

	ptr = (const unsigned char *)data;

	a = ctx->a;
1c011d0a:	00852283          	lw	t0,8(a0)
1c011d0e:	fc060613          	addi	a2,a2,-64
{
1c011d12:	de52                	sw	s4,60(sp)
1c011d14:	dc56                	sw	s5,56(sp)
1c011d16:	8219                	srli	a2,a2,0x6
	b = ctx->b;
1c011d18:	00c52803          	lw	a6,12(a0)
	c = ctx->c;
1c011d1c:	01052a03          	lw	s4,16(a0)
	d = ctx->d;
1c011d20:	01452a83          	lw	s5,20(a0)
1c011d24:	0605                	addi	a2,a2,1
{
1c011d26:	c6a2                	sw	s0,76(sp)
1c011d28:	c4a6                	sw	s1,72(sp)
1c011d2a:	c2ca                	sw	s2,68(sp)
1c011d2c:	c0ce                	sw	s3,64(sp)
1c011d2e:	da5a                	sw	s6,52(sp)
1c011d30:	d85e                	sw	s7,48(sp)
1c011d32:	d662                	sw	s8,44(sp)
1c011d34:	d466                	sw	s9,40(sp)
1c011d36:	d26a                	sw	s10,36(sp)
1c011d38:	d06e                	sw	s11,32(sp)
1c011d3a:	87aa                	mv	a5,a0
	a = ctx->a;
1c011d3c:	cc16                	sw	t0,24(sp)
1c011d3e:	ce32                	sw	a2,28(sp)
1c011d40:	4362                	lw	t1,24(sp)
		saved_b = b;
		saved_c = c;
		saved_d = d;

/* Round 1 */
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c011d42:	0005a983          	lw	s3,0(a1)
1c011d46:	d76aa537          	lui	a0,0xd76aa
1c011d4a:	47850513          	addi	a0,a0,1144 # d76aa478 <pulp__FC+0xd76aa479>
1c011d4e:	00a30733          	add	a4,t1,a0
1c011d52:	013706b3          	add	a3,a4,s3
1c011d56:	015a4733          	xor	a4,s4,s5
1c011d5a:	01077733          	and	a4,a4,a6
1c011d5e:	0537ac23          	sw	s3,88(a5)
1c011d62:	01574733          	xor	a4,a4,s5
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c011d66:	41d0                	lw	a2,4(a1)
		STEP(F, a, b, c, d, SET(0), 0xd76aa478, 7)
1c011d68:	9736                	add	a4,a4,a3
1c011d6a:	e8c7b6b7          	lui	a3,0xe8c7b
1c011d6e:	4365                	li	t1,25
1c011d70:	75668693          	addi	a3,a3,1878 # e8c7b756 <pulp__FC+0xe8c7b757>
1c011d74:	00da8e33          	add	t3,s5,a3
1c011d78:	08675733          	p.ror	a4,a4,t1
1c011d7c:	9742                	add	a4,a4,a6
1c011d7e:	00ce06b3          	add	a3,t3,a2
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c011d82:	01484e33          	xor	t3,a6,s4
1c011d86:	cff0                	sw	a2,92(a5)
1c011d88:	00ee7e33          	and	t3,t3,a4
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011d8c:	0085a883          	lw	a7,8(a1)
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c011d90:	014e4e33          	xor	t3,t3,s4
1c011d94:	24207bb7          	lui	s7,0x24207
1c011d98:	4d51                	li	s10,20
1c011d9a:	9e36                	add	t3,t3,a3
1c011d9c:	0dbb8b93          	addi	s7,s7,219 # 242070db <__l2_end+0x81ef4bf>
1c011da0:	017a0533          	add	a0,s4,s7
1c011da4:	09ae5e33          	p.ror	t3,t3,s10
1c011da8:	9e3a                	add	t3,t3,a4
1c011daa:	011506b3          	add	a3,a0,a7
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011dae:	00e84533          	xor	a0,a6,a4
1c011db2:	0717a023          	sw	a7,96(a5)
1c011db6:	01c57533          	and	a0,a0,t3
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c011dba:	00c5a283          	lw	t0,12(a1)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011dbe:	01054533          	xor	a0,a0,a6
1c011dc2:	c1bddc37          	lui	s8,0xc1bdd
1c011dc6:	4cbd                	li	s9,15
1c011dc8:	9536                	add	a0,a0,a3
1c011dca:	eeec0c13          	addi	s8,s8,-274 # c1bdceee <pulp__FC+0xc1bdceef>
		STEP(F, d, a, b, c, SET(1), 0xe8c7b756, 12)
1c011dce:	c432                	sw	a2,8(sp)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011dd0:	09955533          	p.ror	a0,a0,s9
1c011dd4:	01880633          	add	a2,a6,s8
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c011dd8:	0657a223          	sw	t0,100(a5)
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011ddc:	9572                	add	a0,a0,t3
1c011dde:	005606b3          	add	a3,a2,t0
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c011de2:	01c74633          	xor	a2,a4,t3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c011de6:	0105ad83          	lw	s11,16(a1)
		STEP(F, b, c, d, a, SET(3), 0xc1bdceee, 22)
1c011dea:	8e69                	and	a2,a2,a0
1c011dec:	8e39                	xor	a2,a2,a4
1c011dee:	f57c1eb7          	lui	t4,0xf57c1
1c011df2:	4c29                	li	s8,10
1c011df4:	9636                	add	a2,a2,a3
1c011df6:	fafe8e93          	addi	t4,t4,-81 # f57c0faf <pulp__FC+0xf57c0fb0>
1c011dfa:	01dd86b3          	add	a3,s11,t4
1c011dfe:	09865633          	p.ror	a2,a2,s8
1c011e02:	962a                	add	a2,a2,a0
1c011e04:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c011e06:	00ae46b3          	xor	a3,t3,a0
1c011e0a:	07b7a423          	sw	s11,104(a5)
1c011e0e:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c011e10:	49c0                	lw	s0,20(a1)
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c011e12:	01c6c6b3          	xor	a3,a3,t3
1c011e16:	9736                	add	a4,a4,a3
1c011e18:	4787c6b7          	lui	a3,0x4787c
1c011e1c:	62a68693          	addi	a3,a3,1578 # 4787c62a <__l2_end+0x2b864a0e>
1c011e20:	00d40fb3          	add	t6,s0,a3
1c011e24:	08675733          	p.ror	a4,a4,t1
1c011e28:	9732                	add	a4,a4,a2
1c011e2a:	9e7e                	add	t3,t3,t6
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c011e2c:	00c54fb3          	xor	t6,a0,a2
1c011e30:	00efffb3          	and	t6,t6,a4
1c011e34:	d7e0                	sw	s0,108(a5)
1c011e36:	00afcfb3          	xor	t6,t6,a0
1c011e3a:	9ff2                	add	t6,t6,t3
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e3c:	0185ae03          	lw	t3,24(a1)
1c011e40:	a8304bb7          	lui	s7,0xa8304
1c011e44:	613b8b93          	addi	s7,s7,1555 # a8304613 <pulp__FC+0xa8304614>
		STEP(F, c, d, a, b, SET(2), 0x242070db, 17)
1c011e48:	c646                	sw	a7,12(sp)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c011e4a:	09afdfb3          	p.ror	t6,t6,s10
1c011e4e:	017e08b3          	add	a7,t3,s7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e52:	07c7a823          	sw	t3,112(a5)
		STEP(F, d, a, b, c, SET(5), 0x4787c62a, 12)
1c011e56:	9fba                	add	t6,t6,a4
1c011e58:	9546                	add	a0,a0,a7
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e5a:	00e648b3          	xor	a7,a2,a4
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c011e5e:	01c5a903          	lw	s2,28(a1)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e62:	01f8f8b3          	and	a7,a7,t6
		STEP(F, a, b, c, d, SET(4), 0xf57c0faf, 7)
1c011e66:	c86e                	sw	s11,16(sp)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e68:	00c8c8b3          	xor	a7,a7,a2
1c011e6c:	fd469db7          	lui	s11,0xfd469
1c011e70:	98aa                	add	a7,a7,a0
1c011e72:	501d8d93          	addi	s11,s11,1281 # fd469501 <pulp__FC+0xfd469502>
1c011e76:	01b906b3          	add	a3,s2,s11
1c011e7a:	0998d8b3          	p.ror	a7,a7,s9
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c011e7e:	0727aa23          	sw	s2,116(a5)
		STEP(F, c, d, a, b, SET(6), 0xa8304613, 17)
1c011e82:	98fe                	add	a7,a7,t6
1c011e84:	9636                	add	a2,a2,a3
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c011e86:	01f746b3          	xor	a3,a4,t6
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c011e8a:	0205af03          	lw	t5,32(a1)
		STEP(F, b, c, d, a, SET(7), 0xfd469501, 22)
1c011e8e:	0116f6b3          	and	a3,a3,a7
1c011e92:	8eb9                	xor	a3,a3,a4
1c011e94:	6980aeb7          	lui	t4,0x6980a
1c011e98:	9636                	add	a2,a2,a3
1c011e9a:	8d8e8e93          	addi	t4,t4,-1832 # 698098d8 <__l2_end+0x4d7f1cbc>
1c011e9e:	01df06b3          	add	a3,t5,t4
1c011ea2:	09865633          	p.ror	a2,a2,s8
1c011ea6:	9646                	add	a2,a2,a7
1c011ea8:	9736                	add	a4,a4,a3
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c011eaa:	011fc6b3          	xor	a3,t6,a7
1c011eae:	07e7ac23          	sw	t5,120(a5)
1c011eb2:	8ef1                	and	a3,a3,a2
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c011eb4:	51c8                	lw	a0,36(a1)
		STEP(F, a, b, c, d, SET(8), 0x698098d8, 7)
1c011eb6:	01f6c6b3          	xor	a3,a3,t6
1c011eba:	96ba                	add	a3,a3,a4
1c011ebc:	8b44f737          	lui	a4,0x8b44f
1c011ec0:	7af70713          	addi	a4,a4,1967 # 8b44f7af <pulp__FC+0x8b44f7b0>
1c011ec4:	00e504b3          	add	s1,a0,a4
1c011ec8:	0866d6b3          	p.ror	a3,a3,t1
1c011ecc:	96b2                	add	a3,a3,a2
1c011ece:	9fa6                	add	t6,t6,s1
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c011ed0:	00c8c4b3          	xor	s1,a7,a2
1c011ed4:	8cf5                	and	s1,s1,a3
1c011ed6:	dfe8                	sw	a0,124(a5)
1c011ed8:	0114c4b3          	xor	s1,s1,a7
1c011edc:	94fe                	add	s1,s1,t6
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c011ede:	0285af83          	lw	t6,40(a1)
1c011ee2:	7bd9                	lui	s7,0xffff6
1c011ee4:	bb1b8b93          	addi	s7,s7,-1103 # ffff5bb1 <pulp__FC+0xffff5bb2>
1c011ee8:	017f8eb3          	add	t4,t6,s7
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c011eec:	09a4d4b3          	p.ror	s1,s1,s10
1c011ef0:	94b6                	add	s1,s1,a3
1c011ef2:	98f6                	add	a7,a7,t4
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c011ef4:	00d64eb3          	xor	t4,a2,a3
1c011ef8:	009efeb3          	and	t4,t4,s1
1c011efc:	09f7a023          	sw	t6,128(a5)
1c011f00:	00ceceb3          	xor	t4,t4,a2
1c011f04:	9ec6                	add	t4,t4,a7
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c011f06:	02c5a883          	lw	a7,44(a1)
1c011f0a:	895cddb7          	lui	s11,0x895cd
1c011f0e:	7bed8d93          	addi	s11,s11,1982 # 895cd7be <pulp__FC+0x895cd7bf>
		STEP(F, d, a, b, c, SET(9), 0x8b44f7af, 12)
1c011f12:	ca2a                	sw	a0,20(sp)
		STEP(F, c, d, a, b, SET(10), 0xffff5bb1, 17)
1c011f14:	099edeb3          	p.ror	t4,t4,s9
1c011f18:	01b88533          	add	a0,a7,s11
1c011f1c:	9ea6                	add	t4,t4,s1
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c011f1e:	0917a223          	sw	a7,132(a5)
1c011f22:	962a                	add	a2,a2,a0
1c011f24:	0096c533          	xor	a0,a3,s1
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c011f28:	0305a383          	lw	t2,48(a1)
		STEP(F, b, c, d, a, SET(11), 0x895cd7be, 22)
1c011f2c:	01d57533          	and	a0,a0,t4
1c011f30:	8d35                	xor	a0,a0,a3
1c011f32:	6b901737          	lui	a4,0x6b901
1c011f36:	9532                	add	a0,a0,a2
1c011f38:	12270713          	addi	a4,a4,290 # 6b901122 <__l2_end+0x4f8e9506>
1c011f3c:	00e38633          	add	a2,t2,a4
1c011f40:	09855533          	p.ror	a0,a0,s8
1c011f44:	9576                	add	a0,a0,t4
1c011f46:	96b2                	add	a3,a3,a2
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c011f48:	01d4c633          	xor	a2,s1,t4
1c011f4c:	8e69                	and	a2,a2,a0
1c011f4e:	8e25                	xor	a2,a2,s1
1c011f50:	0877a423          	sw	t2,136(a5)
1c011f54:	96b2                	add	a3,a3,a2
1c011f56:	0866d6b3          	p.ror	a3,a3,t1
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c011f5a:	0345a303          	lw	t1,52(a1)
1c011f5e:	fd987db7          	lui	s11,0xfd987
1c011f62:	193d8d93          	addi	s11,s11,403 # fd987193 <pulp__FC+0xfd987194>
1c011f66:	01b30bb3          	add	s7,t1,s11
		STEP(F, a, b, c, d, SET(12), 0x6b901122, 7)
1c011f6a:	00d50733          	add	a4,a0,a3
1c011f6e:	94de                	add	s1,s1,s7
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c011f70:	00aecbb3          	xor	s7,t4,a0
1c011f74:	00ebfbb3          	and	s7,s7,a4
1c011f78:	01dbcbb3          	xor	s7,s7,t4
1c011f7c:	94de                	add	s1,s1,s7
1c011f7e:	0867a623          	sw	t1,140(a5)
1c011f82:	09a4dbb3          	p.ror	s7,s1,s10
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c011f86:	5d84                	lw	s1,56(a1)
1c011f88:	a6794637          	lui	a2,0xa6794
1c011f8c:	38e60613          	addi	a2,a2,910 # a679438e <pulp__FC+0xa679438f>
1c011f90:	00c48b33          	add	s6,s1,a2
		STEP(F, d, a, b, c, SET(13), 0xfd987193, 12)
1c011f94:	9bba                	add	s7,s7,a4
1c011f96:	9eda                	add	t4,t4,s6
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c011f98:	00e54b33          	xor	s6,a0,a4
1c011f9c:	017b7b33          	and	s6,s6,s7
1c011fa0:	00ab4b33          	xor	s6,s6,a0
1c011fa4:	0897a823          	sw	s1,144(a5)
1c011fa8:	9eda                	add	t4,t4,s6
1c011faa:	099edb33          	p.ror	s6,t4,s9
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c011fae:	03c5ae83          	lw	t4,60(a1)
1c011fb2:	49b416b7          	lui	a3,0x49b41
1c011fb6:	82168693          	addi	a3,a3,-2015 # 49b40821 <__l2_end+0x2db28c05>
1c011fba:	00de8633          	add	a2,t4,a3
		STEP(F, c, d, a, b, SET(14), 0xa679438e, 17)
1c011fbe:	9b5e                	add	s6,s6,s7
1c011fc0:	9532                	add	a0,a0,a2
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c011fc2:	01774633          	xor	a2,a4,s7
1c011fc6:	01667633          	and	a2,a2,s6
1c011fca:	8e39                	xor	a2,a2,a4
1c011fcc:	9532                	add	a0,a0,a2
1c011fce:	09855633          	p.ror	a2,a0,s8
1c011fd2:	4c22                	lw	s8,8(sp)
1c011fd4:	f61e2d37          	lui	s10,0xf61e2
1c011fd8:	562d0d13          	addi	s10,s10,1378 # f61e2562 <pulp__FC+0xf61e2563>
1c011fdc:	965a                	add	a2,a2,s6
1c011fde:	01ac06b3          	add	a3,s8,s10
1c011fe2:	9736                	add	a4,a4,a3

/* Round 2 */
		STEP(G, a, b, c, d, GET(1), 0xf61e2562, 5)
1c011fe4:	00cb46b3          	xor	a3,s6,a2
1c011fe8:	0176f6b3          	and	a3,a3,s7
1c011fec:	0166c6b3          	xor	a3,a3,s6
1c011ff0:	4ded                	li	s11,27
1c011ff2:	96ba                	add	a3,a3,a4
1c011ff4:	c040b537          	lui	a0,0xc040b
1c011ff8:	09b6d6b3          	p.ror	a3,a3,s11
1c011ffc:	34050513          	addi	a0,a0,832 # c040b340 <pulp__FC+0xc040b341>
1c012000:	96b2                	add	a3,a3,a2
1c012002:	00ae0733          	add	a4,t3,a0
1c012006:	9bba                	add	s7,s7,a4
		STEP(G, d, a, b, c, GET(6), 0xc040b340, 9)
1c012008:	00d64733          	xor	a4,a2,a3
1c01200c:	01677733          	and	a4,a4,s6
1c012010:	8f31                	xor	a4,a4,a2
1c012012:	4d5d                	li	s10,23
1c012014:	975e                	add	a4,a4,s7
1c012016:	265e6bb7          	lui	s7,0x265e6
1c01201a:	09a75733          	p.ror	a4,a4,s10
1c01201e:	a51b8b93          	addi	s7,s7,-1455 # 265e5a51 <__l2_end+0xa5cde35>
1c012022:	9736                	add	a4,a4,a3
1c012024:	01788533          	add	a0,a7,s7
1c012028:	955a                	add	a0,a0,s6
		STEP(G, c, d, a, b, GET(11), 0x265e5a51, 14)
1c01202a:	00e6cb33          	xor	s6,a3,a4
1c01202e:	00cb7b33          	and	s6,s6,a2
1c012032:	00db4b33          	xor	s6,s6,a3
1c012036:	4cc9                	li	s9,18
1c012038:	9b2a                	add	s6,s6,a0
1c01203a:	e9b6cc37          	lui	s8,0xe9b6c
1c01203e:	099b5b33          	p.ror	s6,s6,s9
1c012042:	7aac0c13          	addi	s8,s8,1962 # e9b6c7aa <pulp__FC+0xe9b6c7ab>
1c012046:	9b3a                	add	s6,s6,a4
1c012048:	01898533          	add	a0,s3,s8
1c01204c:	962a                	add	a2,a2,a0
		STEP(G, b, c, d, a, GET(0), 0xe9b6c7aa, 20)
1c01204e:	01674533          	xor	a0,a4,s6
1c012052:	8d75                	and	a0,a0,a3
1c012054:	8d39                	xor	a0,a0,a4
1c012056:	4c31                	li	s8,12
1c012058:	9532                	add	a0,a0,a2
1c01205a:	d62f1bb7          	lui	s7,0xd62f1
1c01205e:	09855533          	p.ror	a0,a0,s8
1c012062:	05db8b93          	addi	s7,s7,93 # d62f105d <pulp__FC+0xd62f105e>
1c012066:	955a                	add	a0,a0,s6
1c012068:	01740633          	add	a2,s0,s7
1c01206c:	96b2                	add	a3,a3,a2
		STEP(G, a, b, c, d, GET(5), 0xd62f105d, 5)
1c01206e:	00ab4633          	xor	a2,s6,a0
1c012072:	8e79                	and	a2,a2,a4
1c012074:	01664633          	xor	a2,a2,s6
1c012078:	96b2                	add	a3,a3,a2
1c01207a:	02441bb7          	lui	s7,0x2441
1c01207e:	09b6d6b3          	p.ror	a3,a3,s11
1c012082:	453b8b93          	addi	s7,s7,1107 # 2441453 <__L2+0x23c1453>
1c012086:	96aa                	add	a3,a3,a0
1c012088:	017f8633          	add	a2,t6,s7
1c01208c:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(10), 0x02441453, 9)
1c01208e:	00d54633          	xor	a2,a0,a3
1c012092:	01667633          	and	a2,a2,s6
1c012096:	8e29                	xor	a2,a2,a0
1c012098:	9732                	add	a4,a4,a2
1c01209a:	d8a1ebb7          	lui	s7,0xd8a1e
1c01209e:	09a75733          	p.ror	a4,a4,s10
1c0120a2:	681b8b93          	addi	s7,s7,1665 # d8a1e681 <pulp__FC+0xd8a1e682>
1c0120a6:	9736                	add	a4,a4,a3
1c0120a8:	017e8633          	add	a2,t4,s7
1c0120ac:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(15), 0xd8a1e681, 14)
1c0120ae:	00e6c633          	xor	a2,a3,a4
1c0120b2:	8e69                	and	a2,a2,a0
1c0120b4:	8e35                	xor	a2,a2,a3
1c0120b6:	4bc2                	lw	s7,16(sp)
1c0120b8:	9b32                	add	s6,s6,a2
1c0120ba:	e7d40637          	lui	a2,0xe7d40
1c0120be:	099b5b33          	p.ror	s6,s6,s9
1c0120c2:	bc860613          	addi	a2,a2,-1080 # e7d3fbc8 <pulp__FC+0xe7d3fbc9>
1c0120c6:	9b3a                	add	s6,s6,a4
1c0120c8:	965e                	add	a2,a2,s7
1c0120ca:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(4), 0xe7d3fbc8, 20)
1c0120cc:	01674633          	xor	a2,a4,s6
1c0120d0:	8e75                	and	a2,a2,a3
1c0120d2:	8e39                	xor	a2,a2,a4
1c0120d4:	9532                	add	a0,a0,a2
1c0120d6:	4652                	lw	a2,20(sp)
1c0120d8:	21e1dbb7          	lui	s7,0x21e1d
1c0120dc:	09855533          	p.ror	a0,a0,s8
1c0120e0:	de6b8b93          	addi	s7,s7,-538 # 21e1cde6 <__l2_end+0x5e051ca>
1c0120e4:	955a                	add	a0,a0,s6
1c0120e6:	9bb2                	add	s7,s7,a2
1c0120e8:	96de                	add	a3,a3,s7
		STEP(G, a, b, c, d, GET(9), 0x21e1cde6, 5)
1c0120ea:	00ab4bb3          	xor	s7,s6,a0
1c0120ee:	00ebfbb3          	and	s7,s7,a4
1c0120f2:	016bcbb3          	xor	s7,s7,s6
1c0120f6:	9bb6                	add	s7,s7,a3
1c0120f8:	c3370637          	lui	a2,0xc3370
1c0120fc:	09bbdbb3          	p.ror	s7,s7,s11
1c012100:	7d660613          	addi	a2,a2,2006 # c33707d6 <pulp__FC+0xc33707d7>
1c012104:	9baa                	add	s7,s7,a0
1c012106:	9626                	add	a2,a2,s1
1c012108:	9732                	add	a4,a4,a2
		STEP(G, d, a, b, c, GET(14), 0xc33707d6, 9)
1c01210a:	01754633          	xor	a2,a0,s7
1c01210e:	01667633          	and	a2,a2,s6
1c012112:	8e29                	xor	a2,a2,a0
1c012114:	963a                	add	a2,a2,a4
1c012116:	f4d51737          	lui	a4,0xf4d51
1c01211a:	09a65633          	p.ror	a2,a2,s10
1c01211e:	d8770713          	addi	a4,a4,-633 # f4d50d87 <pulp__FC+0xf4d50d88>
1c012122:	965e                	add	a2,a2,s7
1c012124:	9716                	add	a4,a4,t0
1c012126:	9b3a                	add	s6,s6,a4
		STEP(G, c, d, a, b, GET(3), 0xf4d50d87, 14)
1c012128:	00cbc733          	xor	a4,s7,a2
1c01212c:	8f69                	and	a4,a4,a0
1c01212e:	01774733          	xor	a4,a4,s7
1c012132:	9b3a                	add	s6,s6,a4
1c012134:	455a1737          	lui	a4,0x455a1
1c012138:	099b5b33          	p.ror	s6,s6,s9
1c01213c:	4ed70713          	addi	a4,a4,1261 # 455a14ed <__l2_end+0x295898d1>
1c012140:	9b32                	add	s6,s6,a2
1c012142:	977a                	add	a4,a4,t5
1c012144:	953a                	add	a0,a0,a4
		STEP(G, b, c, d, a, GET(8), 0x455a14ed, 20)
1c012146:	01664733          	xor	a4,a2,s6
1c01214a:	01777733          	and	a4,a4,s7
1c01214e:	8f31                	xor	a4,a4,a2
1c012150:	953a                	add	a0,a0,a4
1c012152:	a9e3f6b7          	lui	a3,0xa9e3f
1c012156:	09855533          	p.ror	a0,a0,s8
1c01215a:	90568693          	addi	a3,a3,-1787 # a9e3e905 <pulp__FC+0xa9e3e906>
1c01215e:	955a                	add	a0,a0,s6
1c012160:	969a                	add	a3,a3,t1
1c012162:	9bb6                	add	s7,s7,a3
		STEP(G, a, b, c, d, GET(13), 0xa9e3e905, 5)
1c012164:	00ab46b3          	xor	a3,s6,a0
1c012168:	8ef1                	and	a3,a3,a2
1c01216a:	0166c6b3          	xor	a3,a3,s6
1c01216e:	9bb6                	add	s7,s7,a3
1c012170:	09bbd6b3          	p.ror	a3,s7,s11
1c012174:	4bb2                	lw	s7,12(sp)
1c012176:	fcefa737          	lui	a4,0xfcefa
1c01217a:	3f870713          	addi	a4,a4,1016 # fcefa3f8 <pulp__FC+0xfcefa3f9>
1c01217e:	96aa                	add	a3,a3,a0
1c012180:	975e                	add	a4,a4,s7
1c012182:	963a                	add	a2,a2,a4
		STEP(G, d, a, b, c, GET(2), 0xfcefa3f8, 9)
1c012184:	00d54733          	xor	a4,a0,a3
1c012188:	01677733          	and	a4,a4,s6
1c01218c:	8f29                	xor	a4,a4,a0
1c01218e:	963a                	add	a2,a2,a4
1c012190:	09a65733          	p.ror	a4,a2,s10
1c012194:	676f0637          	lui	a2,0x676f0
1c012198:	2d960613          	addi	a2,a2,729 # 676f02d9 <__l2_end+0x4b6d86bd>
1c01219c:	9736                	add	a4,a4,a3
1c01219e:	964a                	add	a2,a2,s2
1c0121a0:	9b32                	add	s6,s6,a2
		STEP(G, c, d, a, b, GET(7), 0x676f02d9, 14)
1c0121a2:	00e6c633          	xor	a2,a3,a4
1c0121a6:	8e69                	and	a2,a2,a0
1c0121a8:	8e35                	xor	a2,a2,a3
1c0121aa:	9b32                	add	s6,s6,a2
1c0121ac:	8d2a5637          	lui	a2,0x8d2a5
1c0121b0:	099b5b33          	p.ror	s6,s6,s9
1c0121b4:	c8a60613          	addi	a2,a2,-886 # 8d2a4c8a <pulp__FC+0x8d2a4c8b>
1c0121b8:	9b3a                	add	s6,s6,a4
1c0121ba:	961e                	add	a2,a2,t2
1c0121bc:	9532                	add	a0,a0,a2
		STEP(G, b, c, d, a, GET(12), 0x8d2a4c8a, 20)
1c0121be:	01674633          	xor	a2,a4,s6
1c0121c2:	8e75                	and	a2,a2,a3
1c0121c4:	8e39                	xor	a2,a2,a4
1c0121c6:	9532                	add	a0,a0,a2
1c0121c8:	09855533          	p.ror	a0,a0,s8
1c0121cc:	fffa4637          	lui	a2,0xfffa4
1c0121d0:	955a                	add	a0,a0,s6
1c0121d2:	94260613          	addi	a2,a2,-1726 # fffa3942 <pulp__FC+0xfffa3943>

/* Round 3 */
		STEP(H, a, b, c, d, GET(5), 0xfffa3942, 4)
1c0121d6:	00ab4bb3          	xor	s7,s6,a0
1c0121da:	9622                	add	a2,a2,s0
1c0121dc:	96b2                	add	a3,a3,a2
1c0121de:	00ebc633          	xor	a2,s7,a4
1c0121e2:	4cf1                	li	s9,28
1c0121e4:	96b2                	add	a3,a3,a2
1c0121e6:	8771f637          	lui	a2,0x8771f
1c0121ea:	0996d6b3          	p.ror	a3,a3,s9
1c0121ee:	68160613          	addi	a2,a2,1665 # 8771f681 <pulp__FC+0x8771f682>
1c0121f2:	96aa                	add	a3,a3,a0
1c0121f4:	967a                	add	a2,a2,t5
1c0121f6:	9732                	add	a4,a4,a2
		STEP(H2, d, a, b, c, GET(8), 0x8771f681, 11)
1c0121f8:	00dbc633          	xor	a2,s7,a3
1c0121fc:	4c55                	li	s8,21
1c0121fe:	963a                	add	a2,a2,a4
1c012200:	09865633          	p.ror	a2,a2,s8
1c012204:	6d9d6737          	lui	a4,0x6d9d6
1c012208:	9636                	add	a2,a2,a3
1c01220a:	12270713          	addi	a4,a4,290 # 6d9d6122 <__l2_end+0x519be506>
		STEP(H, c, d, a, b, GET(11), 0x6d9d6122, 16)
1c01220e:	00c6cd33          	xor	s10,a3,a2
1c012212:	9746                	add	a4,a4,a7
1c012214:	975a                	add	a4,a4,s6
1c012216:	00ad4b33          	xor	s6,s10,a0
1c01221a:	4bc1                	li	s7,16
1c01221c:	975a                	add	a4,a4,s6
1c01221e:	fde54b37          	lui	s6,0xfde54
1c012222:	09775733          	p.ror	a4,a4,s7
1c012226:	80cb0b13          	addi	s6,s6,-2036 # fde5380c <pulp__FC+0xfde5380d>
1c01222a:	9732                	add	a4,a4,a2
1c01222c:	9b26                	add	s6,s6,s1
		STEP(H2, b, c, d, a, GET(14), 0xfde5380c, 23)
1c01222e:	00ed4d33          	xor	s10,s10,a4
1c012232:	955a                	add	a0,a0,s6
1c012234:	956a                	add	a0,a0,s10
1c012236:	4b25                	li	s6,9
1c012238:	09655533          	p.ror	a0,a0,s6
1c01223c:	953a                	add	a0,a0,a4
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c01223e:	00a74d33          	xor	s10,a4,a0
1c012242:	4da2                	lw	s11,8(sp)
1c012244:	c06a                	sw	s10,0(sp)
1c012246:	a4befd37          	lui	s10,0xa4bef
1c01224a:	a44d0d13          	addi	s10,s10,-1468 # a4beea44 <pulp__FC+0xa4beea45>
1c01224e:	9dea                	add	s11,s11,s10
1c012250:	96ee                	add	a3,a3,s11
1c012252:	4d82                	lw	s11,0(sp)
		STEP(F, b, c, d, a, SET(15), 0x49b40821, 22)
1c012254:	09d7aa23          	sw	t4,148(a5)
		a += saved_a;
		b += saved_b;
		c += saved_c;
		d += saved_d;

		ptr += 64;
1c012258:	04058593          	addi	a1,a1,64
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c01225c:	00cdcd33          	xor	s10,s11,a2
1c012260:	96ea                	add	a3,a3,s10
1c012262:	4d42                	lw	s10,16(sp)
1c012264:	4bdeddb7          	lui	s11,0x4bded
1c012268:	fa9d8d93          	addi	s11,s11,-87 # 4bdecfa9 <__l2_end+0x2fdd538d>
1c01226c:	9d6e                	add	s10,s10,s11
1c01226e:	966a                	add	a2,a2,s10
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c012270:	4d02                	lw	s10,0(sp)
		STEP(H, a, b, c, d, GET(1), 0xa4beea44, 4)
1c012272:	0996d6b3          	p.ror	a3,a3,s9
1c012276:	96aa                	add	a3,a3,a0
		STEP(H2, d, a, b, c, GET(4), 0x4bdecfa9, 11)
1c012278:	00dd4db3          	xor	s11,s10,a3
1c01227c:	966e                	add	a2,a2,s11
1c01227e:	09865633          	p.ror	a2,a2,s8
1c012282:	f6bb5db7          	lui	s11,0xf6bb5
1c012286:	9636                	add	a2,a2,a3
1c012288:	b60d8d93          	addi	s11,s11,-1184 # f6bb4b60 <pulp__FC+0xf6bb4b61>
		STEP(H, c, d, a, b, GET(7), 0xf6bb4b60, 16)
1c01228c:	00c6cd33          	xor	s10,a3,a2
1c012290:	9dca                	add	s11,s11,s2
1c012292:	976e                	add	a4,a4,s11
1c012294:	00ad4db3          	xor	s11,s10,a0
1c012298:	976e                	add	a4,a4,s11
1c01229a:	bebfcdb7          	lui	s11,0xbebfc
1c01229e:	09775733          	p.ror	a4,a4,s7
1c0122a2:	c70d8d93          	addi	s11,s11,-912 # bebfbc70 <pulp__FC+0xbebfbc71>
1c0122a6:	9732                	add	a4,a4,a2
1c0122a8:	9dfe                	add	s11,s11,t6
		STEP(H2, b, c, d, a, GET(10), 0xbebfbc70, 23)
1c0122aa:	00ed4d33          	xor	s10,s10,a4
1c0122ae:	956e                	add	a0,a0,s11
1c0122b0:	956a                	add	a0,a0,s10
1c0122b2:	09655533          	p.ror	a0,a0,s6
1c0122b6:	289b8d37          	lui	s10,0x289b8
1c0122ba:	953a                	add	a0,a0,a4
1c0122bc:	ec6d0d13          	addi	s10,s10,-314 # 289b7ec6 <__l2_end+0xc9a02aa>
		STEP(H, a, b, c, d, GET(13), 0x289b7ec6, 4)
1c0122c0:	00a74db3          	xor	s11,a4,a0
1c0122c4:	9d1a                	add	s10,s10,t1
1c0122c6:	96ea                	add	a3,a3,s10
1c0122c8:	00cdcd33          	xor	s10,s11,a2
1c0122cc:	9d36                	add	s10,s10,a3
1c0122ce:	eaa126b7          	lui	a3,0xeaa12
1c0122d2:	099d5d33          	p.ror	s10,s10,s9
1c0122d6:	7fa68693          	addi	a3,a3,2042 # eaa127fa <pulp__FC+0xeaa127fb>
1c0122da:	9d2a                	add	s10,s10,a0
1c0122dc:	96ce                	add	a3,a3,s3
		STEP(H2, d, a, b, c, GET(0), 0xeaa127fa, 11)
1c0122de:	01adcdb3          	xor	s11,s11,s10
1c0122e2:	9636                	add	a2,a2,a3
1c0122e4:	966e                	add	a2,a2,s11
1c0122e6:	09865633          	p.ror	a2,a2,s8
1c0122ea:	d4ef3db7          	lui	s11,0xd4ef3
1c0122ee:	966a                	add	a2,a2,s10
1c0122f0:	085d8d93          	addi	s11,s11,133 # d4ef3085 <pulp__FC+0xd4ef3086>
		STEP(H, c, d, a, b, GET(3), 0xd4ef3085, 16)
1c0122f4:	00cd46b3          	xor	a3,s10,a2
1c0122f8:	9d96                	add	s11,s11,t0
1c0122fa:	976e                	add	a4,a4,s11
1c0122fc:	00a6cdb3          	xor	s11,a3,a0
1c012300:	9dba                	add	s11,s11,a4
1c012302:	04882737          	lui	a4,0x4882
1c012306:	097dddb3          	p.ror	s11,s11,s7
1c01230a:	d0570713          	addi	a4,a4,-763 # 4881d05 <__L2+0x4801d05>
1c01230e:	9db2                	add	s11,s11,a2
1c012310:	9772                	add	a4,a4,t3
1c012312:	953a                	add	a0,a0,a4
		STEP(H2, b, c, d, a, GET(6), 0x04881d05, 23)
1c012314:	01b6c6b3          	xor	a3,a3,s11
1c012318:	96aa                	add	a3,a3,a0
1c01231a:	0966d6b3          	p.ror	a3,a3,s6
1c01231e:	96ee                	add	a3,a3,s11
		STEP(H, a, b, c, d, GET(9), 0xd9d4d039, 4)
1c012320:	00ddc533          	xor	a0,s11,a3
1c012324:	4752                	lw	a4,20(sp)
1c012326:	c02a                	sw	a0,0(sp)
1c012328:	d9d4d537          	lui	a0,0xd9d4d
1c01232c:	03950513          	addi	a0,a0,57 # d9d4d039 <pulp__FC+0xd9d4d03a>
1c012330:	972a                	add	a4,a4,a0
1c012332:	9d3a                	add	s10,s10,a4
1c012334:	4702                	lw	a4,0(sp)
1c012336:	00c74533          	xor	a0,a4,a2
1c01233a:	9d2a                	add	s10,s10,a0
1c01233c:	e6dba537          	lui	a0,0xe6dba
1c012340:	099d5cb3          	p.ror	s9,s10,s9
1c012344:	9e550513          	addi	a0,a0,-1563 # e6db99e5 <pulp__FC+0xe6db99e6>
1c012348:	9cb6                	add	s9,s9,a3
1c01234a:	951e                	add	a0,a0,t2
		STEP(H2, d, a, b, c, GET(12), 0xe6db99e5, 11)
1c01234c:	01974733          	xor	a4,a4,s9
1c012350:	962a                	add	a2,a2,a0
1c012352:	963a                	add	a2,a2,a4
1c012354:	09865c33          	p.ror	s8,a2,s8
1c012358:	1fa28737          	lui	a4,0x1fa28
1c01235c:	9c66                	add	s8,s8,s9
1c01235e:	cf870713          	addi	a4,a4,-776 # 1fa27cf8 <__l2_end+0x3a100dc>
		STEP(H, c, d, a, b, GET(15), 0x1fa27cf8, 16)
1c012362:	018ccd33          	xor	s10,s9,s8
1c012366:	9776                	add	a4,a4,t4
1c012368:	9dba                	add	s11,s11,a4
1c01236a:	00dd4733          	xor	a4,s10,a3
1c01236e:	9dba                	add	s11,s11,a4
1c012370:	097ddbb3          	p.ror	s7,s11,s7
1c012374:	4db2                	lw	s11,12(sp)
1c012376:	c4ac5737          	lui	a4,0xc4ac5
1c01237a:	66570713          	addi	a4,a4,1637 # c4ac5665 <pulp__FC+0xc4ac5666>
1c01237e:	9be2                	add	s7,s7,s8
1c012380:	976e                	add	a4,a4,s11
		STEP(H2, b, c, d, a, GET(2), 0xc4ac5665, 23)
1c012382:	017d4d33          	xor	s10,s10,s7
1c012386:	96ba                	add	a3,a3,a4
1c012388:	f4292737          	lui	a4,0xf4292
1c01238c:	96ea                	add	a3,a3,s10
1c01238e:	24470713          	addi	a4,a4,580 # f4292244 <pulp__FC+0xf4292245>
1c012392:	0966db33          	p.ror	s6,a3,s6
1c012396:	99ba                	add	s3,s3,a4
1c012398:	9b5e                	add	s6,s6,s7
1c01239a:	99e6                	add	s3,s3,s9
		STEP(I, a, b, c, d, GET(0), 0xf4292244, 6)
1c01239c:	fffc4c93          	not	s9,s8
1c0123a0:	016cecb3          	or	s9,s9,s6
1c0123a4:	017cccb3          	xor	s9,s9,s7
1c0123a8:	432b0737          	lui	a4,0x432b0
1c0123ac:	4669                	li	a2,26
1c0123ae:	f9770713          	addi	a4,a4,-105 # 432aff97 <__l2_end+0x2729837b>
1c0123b2:	9cce                	add	s9,s9,s3
1c0123b4:	08ccdcb3          	p.ror	s9,s9,a2
1c0123b8:	993a                	add	s2,s2,a4
1c0123ba:	9cda                	add	s9,s9,s6
1c0123bc:	9962                	add	s2,s2,s8
		STEP(I, d, a, b, c, GET(7), 0x432aff97, 10)
1c0123be:	fffbcc13          	not	s8,s7
1c0123c2:	019c6c33          	or	s8,s8,s9
1c0123c6:	016c4c33          	xor	s8,s8,s6
1c0123ca:	ab942737          	lui	a4,0xab942
1c0123ce:	4559                	li	a0,22
1c0123d0:	9c4a                	add	s8,s8,s2
1c0123d2:	3a770713          	addi	a4,a4,935 # ab9423a7 <pulp__FC+0xab9423a8>
1c0123d6:	08ac5c33          	p.ror	s8,s8,a0
1c0123da:	94ba                	add	s1,s1,a4
1c0123dc:	9c66                	add	s8,s8,s9
1c0123de:	94de                	add	s1,s1,s7
		STEP(I, c, d, a, b, GET(14), 0xab9423a7, 15)
1c0123e0:	fffb4b93          	not	s7,s6
1c0123e4:	018bebb3          	or	s7,s7,s8
1c0123e8:	019bcbb3          	xor	s7,s7,s9
1c0123ec:	fc93a737          	lui	a4,0xfc93a
1c0123f0:	4945                	li	s2,17
1c0123f2:	9ba6                	add	s7,s7,s1
1c0123f4:	03970713          	addi	a4,a4,57 # fc93a039 <pulp__FC+0xfc93a03a>
1c0123f8:	9722                	add	a4,a4,s0
1c0123fa:	092bdbb3          	p.ror	s7,s7,s2
1c0123fe:	9be2                	add	s7,s7,s8
1c012400:	9b3a                	add	s6,s6,a4
		STEP(I, b, c, d, a, GET(5), 0xfc93a039, 21)
1c012402:	fffcc713          	not	a4,s9
1c012406:	01776733          	or	a4,a4,s7
1c01240a:	01874733          	xor	a4,a4,s8
1c01240e:	46ad                	li	a3,11
1c012410:	975a                	add	a4,a4,s6
1c012412:	08d75733          	p.ror	a4,a4,a3
1c012416:	655b6437          	lui	s0,0x655b6
1c01241a:	975e                	add	a4,a4,s7
1c01241c:	9c340413          	addi	s0,s0,-1597 # 655b59c3 <__l2_end+0x4959dda7>
		STEP(I, a, b, c, d, GET(12), 0x655b59c3, 6)
1c012420:	fffc4493          	not	s1,s8
1c012424:	93a2                	add	t2,t2,s0
1c012426:	8cd9                	or	s1,s1,a4
1c012428:	9c9e                	add	s9,s9,t2
1c01242a:	0174c4b3          	xor	s1,s1,s7
1c01242e:	9ca6                	add	s9,s9,s1
1c012430:	08ccdcb3          	p.ror	s9,s9,a2
1c012434:	8f0cd3b7          	lui	t2,0x8f0cd
1c012438:	9cba                	add	s9,s9,a4
1c01243a:	c9238393          	addi	t2,t2,-878 # 8f0ccc92 <pulp__FC+0x8f0ccc93>
		STEP(I, d, a, b, c, GET(3), 0x8f0ccc92, 10)
1c01243e:	fffbc413          	not	s0,s7
1c012442:	929e                	add	t0,t0,t2
1c012444:	01946433          	or	s0,s0,s9
1c012448:	9c16                	add	s8,s8,t0
1c01244a:	8c39                	xor	s0,s0,a4
1c01244c:	9c22                	add	s8,s8,s0
1c01244e:	08ac5c33          	p.ror	s8,s8,a0
1c012452:	ffeff2b7          	lui	t0,0xffeff
1c012456:	9c66                	add	s8,s8,s9
1c012458:	47d28293          	addi	t0,t0,1149 # ffeff47d <pulp__FC+0xffeff47e>
		STEP(I, c, d, a, b, GET(10), 0xffeff47d, 15)
1c01245c:	fff74393          	not	t2,a4
1c012460:	9f96                	add	t6,t6,t0
1c012462:	0183e3b3          	or	t2,t2,s8
1c012466:	9bfe                	add	s7,s7,t6
1c012468:	0193c3b3          	xor	t2,t2,s9
1c01246c:	42a2                	lw	t0,8(sp)
1c01246e:	9b9e                	add	s7,s7,t2
1c012470:	85846fb7          	lui	t6,0x85846
1c012474:	092bdbb3          	p.ror	s7,s7,s2
1c012478:	dd1f8f93          	addi	t6,t6,-559 # 85845dd1 <pulp__FC+0x85845dd2>
1c01247c:	9be2                	add	s7,s7,s8
1c01247e:	9f96                	add	t6,t6,t0
		STEP(I, b, c, d, a, GET(1), 0x85845dd1, 21)
1c012480:	fffcc293          	not	t0,s9
1c012484:	0172e2b3          	or	t0,t0,s7
1c012488:	0182c2b3          	xor	t0,t0,s8
1c01248c:	977e                	add	a4,a4,t6
1c01248e:	9716                	add	a4,a4,t0
1c012490:	08d75733          	p.ror	a4,a4,a3
1c012494:	6fa88fb7          	lui	t6,0x6fa88
1c012498:	975e                	add	a4,a4,s7
1c01249a:	e4ff8f93          	addi	t6,t6,-433 # 6fa87e4f <__l2_end+0x53a70233>
		STEP(I, a, b, c, d, GET(8), 0x6fa87e4f, 6)
1c01249e:	fffc4293          	not	t0,s8
1c0124a2:	9f7e                	add	t5,t5,t6
1c0124a4:	00e2e2b3          	or	t0,t0,a4
1c0124a8:	9cfa                	add	s9,s9,t5
1c0124aa:	0172c2b3          	xor	t0,t0,s7
1c0124ae:	9c96                	add	s9,s9,t0
1c0124b0:	08ccdcb3          	p.ror	s9,s9,a2
1c0124b4:	fe2cef37          	lui	t5,0xfe2ce
1c0124b8:	9cba                	add	s9,s9,a4
1c0124ba:	6e0f0f13          	addi	t5,t5,1760 # fe2ce6e0 <pulp__FC+0xfe2ce6e1>
		STEP(I, d, a, b, c, GET(15), 0xfe2ce6e0, 10)
1c0124be:	fffbcf93          	not	t6,s7
1c0124c2:	9efa                	add	t4,t4,t5
1c0124c4:	019fefb3          	or	t6,t6,s9
1c0124c8:	9c76                	add	s8,s8,t4
1c0124ca:	00efcfb3          	xor	t6,t6,a4
1c0124ce:	9c7e                	add	s8,s8,t6
1c0124d0:	08ac5c33          	p.ror	s8,s8,a0
1c0124d4:	a3014eb7          	lui	t4,0xa3014
1c0124d8:	9c66                	add	s8,s8,s9
1c0124da:	314e8e93          	addi	t4,t4,788 # a3014314 <pulp__FC+0xa3014315>
		STEP(I, c, d, a, b, GET(6), 0xa3014314, 15)
1c0124de:	fff74f13          	not	t5,a4
1c0124e2:	9e76                	add	t3,t3,t4
1c0124e4:	018f6f33          	or	t5,t5,s8
1c0124e8:	9bf2                	add	s7,s7,t3
1c0124ea:	019f4f33          	xor	t5,t5,s9
1c0124ee:	9bfa                	add	s7,s7,t5
1c0124f0:	092bdbb3          	p.ror	s7,s7,s2
1c0124f4:	4e081e37          	lui	t3,0x4e081
1c0124f8:	9be2                	add	s7,s7,s8
1c0124fa:	1a1e0e13          	addi	t3,t3,417 # 4e0811a1 <__l2_end+0x32069585>
		STEP(I, b, c, d, a, GET(13), 0x4e0811a1, 21)
1c0124fe:	fffcce93          	not	t4,s9
1c012502:	9372                	add	t1,t1,t3
1c012504:	017eeeb3          	or	t4,t4,s7
1c012508:	018eceb3          	xor	t4,t4,s8
1c01250c:	971a                	add	a4,a4,t1
1c01250e:	9776                	add	a4,a4,t4
1c012510:	4d42                	lw	s10,16(sp)
1c012512:	08d75733          	p.ror	a4,a4,a3
1c012516:	f7538337          	lui	t1,0xf7538
1c01251a:	975e                	add	a4,a4,s7
		STEP(I, a, b, c, d, GET(4), 0xf7537e82, 6)
1c01251c:	fffc4e13          	not	t3,s8
1c012520:	e8230313          	addi	t1,t1,-382 # f7537e82 <pulp__FC+0xf7537e83>
1c012524:	936a                	add	t1,t1,s10
1c012526:	00ee6e33          	or	t3,t3,a4
1c01252a:	017e4e33          	xor	t3,t3,s7
1c01252e:	9c9a                	add	s9,s9,t1
1c012530:	9cf2                	add	s9,s9,t3
1c012532:	08ccd633          	p.ror	a2,s9,a2
1c012536:	bd3af337          	lui	t1,0xbd3af
1c01253a:	963a                	add	a2,a2,a4
1c01253c:	23530313          	addi	t1,t1,565 # bd3af235 <pulp__FC+0xbd3af236>
		STEP(I, d, a, b, c, GET(11), 0xbd3af235, 10)
1c012540:	fffbce13          	not	t3,s7
1c012544:	989a                	add	a7,a7,t1
1c012546:	00ce6e33          	or	t3,t3,a2
1c01254a:	00ee4e33          	xor	t3,t3,a4
1c01254e:	9c46                	add	s8,s8,a7
1c012550:	9c72                	add	s8,s8,t3
1c012552:	08ac5533          	p.ror	a0,s8,a0
1c012556:	2ad7d8b7          	lui	a7,0x2ad7d
1c01255a:	9532                	add	a0,a0,a2
		STEP(I, c, d, a, b, GET(2), 0x2ad7d2bb, 15)
1c01255c:	fff74313          	not	t1,a4
1c012560:	2bb88893          	addi	a7,a7,699 # 2ad7d2bb <__l2_end+0xed6569f>
1c012564:	98ee                	add	a7,a7,s11
1c012566:	00a36333          	or	t1,t1,a0
1c01256a:	9bc6                	add	s7,s7,a7
1c01256c:	00c34333          	xor	t1,t1,a2
1c012570:	9b9a                	add	s7,s7,t1
1c012572:	4dd2                	lw	s11,20(sp)
1c012574:	092bd933          	p.ror	s2,s7,s2
1c012578:	eb86d8b7          	lui	a7,0xeb86d
1c01257c:	992a                	add	s2,s2,a0
1c01257e:	39188893          	addi	a7,a7,913 # eb86d391 <pulp__FC+0xeb86d392>
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c012582:	fff64313          	not	t1,a2
		a += saved_a;
1c012586:	4e62                	lw	t3,24(sp)
	} while (size -= 64);
1c012588:	4ef2                	lw	t4,28(sp)
1c01258a:	98ee                	add	a7,a7,s11
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c01258c:	01236333          	or	t1,t1,s2
1c012590:	9746                	add	a4,a4,a7
1c012592:	00a34333          	xor	t1,t1,a0
1c012596:	971a                	add	a4,a4,t1
1c012598:	08d75733          	p.ror	a4,a4,a3
		a += saved_a;
1c01259c:	9e32                	add	t3,t3,a2
	} while (size -= 64);
1c01259e:	1efd                	addi	t4,t4,-1
		STEP(I, b, c, d, a, GET(9), 0xeb86d391, 21)
1c0125a0:	974a                	add	a4,a4,s2
		a += saved_a;
1c0125a2:	cc72                	sw	t3,24(sp)
	} while (size -= 64);
1c0125a4:	ce76                	sw	t4,28(sp)
		b += saved_b;
1c0125a6:	983a                	add	a6,a6,a4
		c += saved_c;
1c0125a8:	9a4a                	add	s4,s4,s2
		d += saved_d;
1c0125aa:	9aaa                	add	s5,s5,a0
	} while (size -= 64);
1c0125ac:	f80e9a63          	bnez	t4,1c011d40 <body+0x38>
	ctx->b = b;
	ctx->c = c;
	ctx->d = d;

	return ptr;
}
1c0125b0:	4436                	lw	s0,76(sp)
	ctx->c = c;
1c0125b2:	0147a823          	sw	s4,16(a5)
	ctx->d = d;
1c0125b6:	0157aa23          	sw	s5,20(a5)
	ctx->a = a;
1c0125ba:	01c7a423          	sw	t3,8(a5)
	ctx->b = b;
1c0125be:	0107a623          	sw	a6,12(a5)
}
1c0125c2:	44a6                	lw	s1,72(sp)
1c0125c4:	4916                	lw	s2,68(sp)
1c0125c6:	4986                	lw	s3,64(sp)
1c0125c8:	5a72                	lw	s4,60(sp)
1c0125ca:	5ae2                	lw	s5,56(sp)
1c0125cc:	5b52                	lw	s6,52(sp)
1c0125ce:	5bc2                	lw	s7,48(sp)
1c0125d0:	5c32                	lw	s8,44(sp)
1c0125d2:	5ca2                	lw	s9,40(sp)
1c0125d4:	5d12                	lw	s10,36(sp)
1c0125d6:	5d82                	lw	s11,32(sp)
1c0125d8:	852e                	mv	a0,a1
1c0125da:	6161                	addi	sp,sp,80
1c0125dc:	8082                	ret

1c0125de <MD5_Init>:

void MD5_Init(MD5_CTX *ctx)
{
	ctx->a = 0x67452301;
1c0125de:	674527b7          	lui	a5,0x67452
1c0125e2:	30178793          	addi	a5,a5,769 # 67452301 <__l2_end+0x4b43a6e5>
1c0125e6:	c51c                	sw	a5,8(a0)
	ctx->b = 0xefcdab89;
1c0125e8:	efcdb7b7          	lui	a5,0xefcdb
1c0125ec:	b8978793          	addi	a5,a5,-1143 # efcdab89 <pulp__FC+0xefcdab8a>
1c0125f0:	c55c                	sw	a5,12(a0)
	ctx->c = 0x98badcfe;
1c0125f2:	98bae7b7          	lui	a5,0x98bae
1c0125f6:	cfe78793          	addi	a5,a5,-770 # 98badcfe <pulp__FC+0x98badcff>
1c0125fa:	c91c                	sw	a5,16(a0)
	ctx->d = 0x10325476;
1c0125fc:	103257b7          	lui	a5,0x10325
1c012600:	47678793          	addi	a5,a5,1142 # 10325476 <__l1_end+0x325412>
1c012604:	c95c                	sw	a5,20(a0)

	ctx->lo = 0;
1c012606:	00052023          	sw	zero,0(a0)
	ctx->hi = 0;
1c01260a:	00052223          	sw	zero,4(a0)
}
1c01260e:	8082                	ret

1c012610 <MD5_Update>:

void MD5_Update(MD5_CTX *ctx, const void *data, unsigned long size)
{
1c012610:	1101                	addi	sp,sp,-32
1c012612:	cc22                	sw	s0,24(sp)
1c012614:	842a                	mv	s0,a0
	MD5_u32plus saved_lo;
	unsigned long used, available;

	saved_lo = ctx->lo;
1c012616:	4108                	lw	a0,0(a0)
{
1c012618:	ca26                	sw	s1,20(sp)
1c01261a:	c84a                	sw	s2,16(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c01261c:	00c507b3          	add	a5,a0,a2
{
1c012620:	ce06                	sw	ra,28(sp)
1c012622:	c64e                	sw	s3,12(sp)
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c012624:	c5d7b7b3          	p.bclr	a5,a5,2,29
1c012628:	c01c                	sw	a5,0(s0)
{
1c01262a:	892e                	mv	s2,a1
1c01262c:	84b2                	mv	s1,a2
	if ((ctx->lo = (saved_lo + size) & 0x1fffffff) < saved_lo)
1c01262e:	00a7f563          	bleu	a0,a5,1c012638 <MD5_Update+0x28>
		ctx->hi++;
1c012632:	405c                	lw	a5,4(s0)
1c012634:	0785                	addi	a5,a5,1
1c012636:	c05c                	sw	a5,4(s0)
	ctx->hi += size >> 29;
1c012638:	4058                	lw	a4,4(s0)
1c01263a:	01d4d793          	srli	a5,s1,0x1d

	used = saved_lo & 0x3f;
1c01263e:	f2653533          	p.bclr	a0,a0,25,6
	ctx->hi += size >> 29;
1c012642:	97ba                	add	a5,a5,a4
1c012644:	c05c                	sw	a5,4(s0)

	if (used) {
1c012646:	c129                	beqz	a0,1c012688 <MD5_Update+0x78>
		available = 64 - used;
1c012648:	04000993          	li	s3,64
1c01264c:	40a989b3          	sub	s3,s3,a0
1c012650:	0561                	addi	a0,a0,24
1c012652:	9522                	add	a0,a0,s0

		if (size < available) {
1c012654:	0134fc63          	bleu	s3,s1,1c01266c <MD5_Update+0x5c>
			memcpy(&ctx->buffer[used], data, size);
1c012658:	8626                	mv	a2,s1
1c01265a:	85ca                	mv	a1,s2
		data = body(ctx, data, size & ~(unsigned long)0x3f);
		size &= 0x3f;
	}

	memcpy(ctx->buffer, data, size);
}
1c01265c:	4462                	lw	s0,24(sp)
1c01265e:	40f2                	lw	ra,28(sp)
1c012660:	44d2                	lw	s1,20(sp)
1c012662:	4942                	lw	s2,16(sp)
1c012664:	49b2                	lw	s3,12(sp)
1c012666:	6105                	addi	sp,sp,32
	memcpy(ctx->buffer, data, size);
1c012668:	1920306f          	j	1c0157fa <memcpy>
		memcpy(&ctx->buffer[used], data, available);
1c01266c:	85ca                	mv	a1,s2
1c01266e:	864e                	mv	a2,s3
1c012670:	18a030ef          	jal	ra,1c0157fa <memcpy>
		body(ctx, ctx->buffer, 64);
1c012674:	04000613          	li	a2,64
1c012678:	01840593          	addi	a1,s0,24
1c01267c:	8522                	mv	a0,s0
		data = (const unsigned char *)data + available;
1c01267e:	994e                	add	s2,s2,s3
		size -= available;
1c012680:	413484b3          	sub	s1,s1,s3
		body(ctx, ctx->buffer, 64);
1c012684:	e84ff0ef          	jal	ra,1c011d08 <body>
	if (size >= 64) {
1c012688:	03f00793          	li	a5,63
1c01268c:	0097fb63          	bleu	s1,a5,1c0126a2 <MD5_Update+0x92>
		data = body(ctx, data, size & ~(unsigned long)0x3f);
1c012690:	ca04b633          	p.bclr	a2,s1,5,0
1c012694:	85ca                	mv	a1,s2
1c012696:	8522                	mv	a0,s0
1c012698:	e70ff0ef          	jal	ra,1c011d08 <body>
1c01269c:	892a                	mv	s2,a0
		size &= 0x3f;
1c01269e:	f264b4b3          	p.bclr	s1,s1,25,6
	memcpy(ctx->buffer, data, size);
1c0126a2:	8626                	mv	a2,s1
1c0126a4:	85ca                	mv	a1,s2
1c0126a6:	01840513          	addi	a0,s0,24
1c0126aa:	bf4d                	j	1c01265c <MD5_Update+0x4c>

1c0126ac <MD5_Final>:
	(dst)[1] = (unsigned char)((src) >> 8); \
	(dst)[2] = (unsigned char)((src) >> 16); \
	(dst)[3] = (unsigned char)((src) >> 24);

void MD5_Final(unsigned char *result, MD5_CTX *ctx)
{
1c0126ac:	1141                	addi	sp,sp,-16
1c0126ae:	c226                	sw	s1,4(sp)
1c0126b0:	84aa                	mv	s1,a0
	unsigned long used, available;

	used = ctx->lo & 0x3f;
1c0126b2:	4188                	lw	a0,0(a1)
{
1c0126b4:	c422                	sw	s0,8(sp)
1c0126b6:	c04a                	sw	s2,0(sp)
	used = ctx->lo & 0x3f;
1c0126b8:	f2653533          	p.bclr	a0,a0,25,6

	ctx->buffer[used++] = 0x80;
1c0126bc:	00a58733          	add	a4,a1,a0
{
1c0126c0:	c606                	sw	ra,12(sp)
	ctx->buffer[used++] = 0x80;
1c0126c2:	00150793          	addi	a5,a0,1
1c0126c6:	f8000693          	li	a3,-128

	available = 64 - used;
1c0126ca:	04000613          	li	a2,64
	ctx->buffer[used++] = 0x80;
1c0126ce:	00d70c23          	sb	a3,24(a4)
	available = 64 - used;
1c0126d2:	8e1d                	sub	a2,a2,a5

	if (available < 8) {
1c0126d4:	471d                	li	a4,7
{
1c0126d6:	842e                	mv	s0,a1
1c0126d8:	01858913          	addi	s2,a1,24
	if (available < 8) {
1c0126dc:	02c76063          	bltu	a4,a2,1c0126fc <MD5_Final+0x50>
		memset(&ctx->buffer[used], 0, available);
1c0126e0:	0565                	addi	a0,a0,25
1c0126e2:	4581                	li	a1,0
1c0126e4:	9522                	add	a0,a0,s0
1c0126e6:	104030ef          	jal	ra,1c0157ea <memset>
		body(ctx, ctx->buffer, 64);
1c0126ea:	04000613          	li	a2,64
1c0126ee:	85ca                	mv	a1,s2
1c0126f0:	8522                	mv	a0,s0
1c0126f2:	e16ff0ef          	jal	ra,1c011d08 <body>
		used = 0;
		available = 64;
1c0126f6:	04000613          	li	a2,64
		used = 0;
1c0126fa:	4781                	li	a5,0
	}

	memset(&ctx->buffer[used], 0, available - 8);
1c0126fc:	01878513          	addi	a0,a5,24
1c012700:	1661                	addi	a2,a2,-8
1c012702:	4581                	li	a1,0
1c012704:	9522                	add	a0,a0,s0
1c012706:	0e4030ef          	jal	ra,1c0157ea <memset>

	ctx->lo <<= 3;
1c01270a:	401c                	lw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
	OUT(&ctx->buffer[60], ctx->hi)

	body(ctx, ctx->buffer, 64);
1c01270c:	85ca                	mv	a1,s2
1c01270e:	04000613          	li	a2,64
	ctx->lo <<= 3;
1c012712:	078e                	slli	a5,a5,0x3
	OUT(&ctx->buffer[56], ctx->lo)
1c012714:	873e                	mv	a4,a5
1c012716:	04e40823          	sb	a4,80(s0)
1c01271a:	0087d713          	srli	a4,a5,0x8
	ctx->lo <<= 3;
1c01271e:	c01c                	sw	a5,0(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c012720:	04e408a3          	sb	a4,81(s0)
1c012724:	0107d713          	srli	a4,a5,0x10
1c012728:	83e1                	srli	a5,a5,0x18
1c01272a:	04f409a3          	sb	a5,83(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c01272e:	405c                	lw	a5,4(s0)
	OUT(&ctx->buffer[56], ctx->lo)
1c012730:	04e40923          	sb	a4,82(s0)
	OUT(&ctx->buffer[60], ctx->hi)
1c012734:	873e                	mv	a4,a5
1c012736:	04e40a23          	sb	a4,84(s0)
1c01273a:	0087d713          	srli	a4,a5,0x8
1c01273e:	04e40aa3          	sb	a4,85(s0)
1c012742:	0107d713          	srli	a4,a5,0x10
1c012746:	83e1                	srli	a5,a5,0x18
1c012748:	04f40ba3          	sb	a5,87(s0)
1c01274c:	04e40b23          	sb	a4,86(s0)
	body(ctx, ctx->buffer, 64);
1c012750:	8522                	mv	a0,s0
1c012752:	db6ff0ef          	jal	ra,1c011d08 <body>

	OUT(&result[0], ctx->a)
1c012756:	441c                	lw	a5,8(s0)
	OUT(&result[4], ctx->b)
	OUT(&result[8], ctx->c)
	OUT(&result[12], ctx->d)

	memset(ctx, 0, sizeof(*ctx));
1c012758:	8522                	mv	a0,s0
1c01275a:	09800613          	li	a2,152
	OUT(&result[0], ctx->a)
1c01275e:	00f48023          	sb	a5,0(s1)
1c012762:	441c                	lw	a5,8(s0)
	memset(ctx, 0, sizeof(*ctx));
1c012764:	4581                	li	a1,0
	OUT(&result[0], ctx->a)
1c012766:	83a1                	srli	a5,a5,0x8
1c012768:	00f480a3          	sb	a5,1(s1)
1c01276c:	00a45783          	lhu	a5,10(s0)
1c012770:	00f48123          	sb	a5,2(s1)
1c012774:	00b44783          	lbu	a5,11(s0)
1c012778:	00f481a3          	sb	a5,3(s1)
	OUT(&result[4], ctx->b)
1c01277c:	445c                	lw	a5,12(s0)
1c01277e:	00f48223          	sb	a5,4(s1)
1c012782:	445c                	lw	a5,12(s0)
1c012784:	83a1                	srli	a5,a5,0x8
1c012786:	00f482a3          	sb	a5,5(s1)
1c01278a:	00e45783          	lhu	a5,14(s0)
1c01278e:	00f48323          	sb	a5,6(s1)
1c012792:	00f44783          	lbu	a5,15(s0)
1c012796:	00f483a3          	sb	a5,7(s1)
	OUT(&result[8], ctx->c)
1c01279a:	481c                	lw	a5,16(s0)
1c01279c:	00f48423          	sb	a5,8(s1)
1c0127a0:	481c                	lw	a5,16(s0)
1c0127a2:	83a1                	srli	a5,a5,0x8
1c0127a4:	00f484a3          	sb	a5,9(s1)
1c0127a8:	01245783          	lhu	a5,18(s0)
1c0127ac:	00f48523          	sb	a5,10(s1)
1c0127b0:	01344783          	lbu	a5,19(s0)
1c0127b4:	00f485a3          	sb	a5,11(s1)
	OUT(&result[12], ctx->d)
1c0127b8:	485c                	lw	a5,20(s0)
1c0127ba:	00f48623          	sb	a5,12(s1)
1c0127be:	485c                	lw	a5,20(s0)
1c0127c0:	83a1                	srli	a5,a5,0x8
1c0127c2:	00f486a3          	sb	a5,13(s1)
1c0127c6:	01645783          	lhu	a5,22(s0)
1c0127ca:	00f48723          	sb	a5,14(s1)
1c0127ce:	01744783          	lbu	a5,23(s0)
1c0127d2:	00f487a3          	sb	a5,15(s1)
}
1c0127d6:	40b2                	lw	ra,12(sp)
1c0127d8:	4422                	lw	s0,8(sp)
1c0127da:	4492                	lw	s1,4(sp)
1c0127dc:	4902                	lw	s2,0(sp)
1c0127de:	0141                	addi	sp,sp,16
	memset(ctx, 0, sizeof(*ctx));
1c0127e0:	00a0306f          	j	1c0157ea <memset>

1c0127e4 <__internal_semihost>:
    return __internal_semihost(SEMIHOSTING_SYS_SEEK, (long) args);
}

int semihost_flen(int fd)
{
    return __internal_semihost(SEMIHOSTING_SYS_FLEN, (long) fd);
1c0127e4:	01f01013          	slli	zero,zero,0x1f
1c0127e8:	00100073          	ebreak
1c0127ec:	40705013          	srai	zero,zero,0x7
1c0127f0:	8082                	ret

1c0127f2 <semihost_write0>:
1c0127f2:	85aa                	mv	a1,a0
1c0127f4:	4511                	li	a0,4
1c0127f6:	fefff06f          	j	1c0127e4 <__internal_semihost>

1c0127fa <semihost_open>:
1c0127fa:	7139                	addi	sp,sp,-64
1c0127fc:	de06                	sw	ra,60(sp)
1c0127fe:	dc22                	sw	s0,56(sp)
1c012800:	c62e                	sw	a1,12(sp)
1c012802:	842a                	mv	s0,a0
1c012804:	7d1020ef          	jal	ra,1c0157d4 <strlen>
1c012808:	45b2                	lw	a1,12(sp)
1c01280a:	083c                	addi	a5,sp,24
1c01280c:	c380                	sw	s0,0(a5)
1c01280e:	087c                	addi	a5,sp,28
1c012810:	c38c                	sw	a1,0(a5)
1c012812:	101c                	addi	a5,sp,32
1c012814:	c388                	sw	a0,0(a5)
1c012816:	082c                	addi	a1,sp,24
1c012818:	4505                	li	a0,1
1c01281a:	fcbff0ef          	jal	ra,1c0127e4 <__internal_semihost>
1c01281e:	50f2                	lw	ra,60(sp)
1c012820:	5462                	lw	s0,56(sp)
1c012822:	6121                	addi	sp,sp,64
1c012824:	8082                	ret

1c012826 <semihost_close>:
1c012826:	85aa                	mv	a1,a0
1c012828:	4509                	li	a0,2
1c01282a:	fbbff06f          	j	1c0127e4 <__internal_semihost>

1c01282e <semihost_read>:
1c01282e:	7179                	addi	sp,sp,-48
1c012830:	d606                	sw	ra,44(sp)
1c012832:	003c                	addi	a5,sp,8
1c012834:	c388                	sw	a0,0(a5)
1c012836:	007c                	addi	a5,sp,12
1c012838:	c38c                	sw	a1,0(a5)
1c01283a:	4519                	li	a0,6
1c01283c:	081c                	addi	a5,sp,16
1c01283e:	002c                	addi	a1,sp,8
1c012840:	c390                	sw	a2,0(a5)
1c012842:	fa3ff0ef          	jal	ra,1c0127e4 <__internal_semihost>
1c012846:	50b2                	lw	ra,44(sp)
1c012848:	6145                	addi	sp,sp,48
1c01284a:	8082                	ret

1c01284c <semihost_write>:
1c01284c:	7179                	addi	sp,sp,-48
1c01284e:	d606                	sw	ra,44(sp)
1c012850:	003c                	addi	a5,sp,8
1c012852:	c388                	sw	a0,0(a5)
1c012854:	007c                	addi	a5,sp,12
1c012856:	c38c                	sw	a1,0(a5)
1c012858:	4515                	li	a0,5
1c01285a:	081c                	addi	a5,sp,16
1c01285c:	002c                	addi	a1,sp,8
1c01285e:	c390                	sw	a2,0(a5)
1c012860:	f85ff0ef          	jal	ra,1c0127e4 <__internal_semihost>
1c012864:	50b2                	lw	ra,44(sp)
1c012866:	6145                	addi	sp,sp,48
1c012868:	8082                	ret

1c01286a <semihost_seek>:
1c01286a:	1101                	addi	sp,sp,-32
1c01286c:	c42a                	sw	a0,8(sp)
1c01286e:	c62e                	sw	a1,12(sp)
1c012870:	4529                	li	a0,10
1c012872:	002c                	addi	a1,sp,8
1c012874:	ce06                	sw	ra,28(sp)
1c012876:	f6fff0ef          	jal	ra,1c0127e4 <__internal_semihost>
1c01287a:	40f2                	lw	ra,28(sp)
1c01287c:	6105                	addi	sp,sp,32
1c01287e:	8082                	ret

1c012880 <semihost_exit>:
}

int semihost_exit(int code)
{
    return __internal_semihost(SEMIHOSTING_SYS_EXIT, (long) code);
1c012880:	85aa                	mv	a1,a0
1c012882:	4561                	li	a0,24
1c012884:	f61ff06f          	j	1c0127e4 <__internal_semihost>

1c012888 <__bsp_init_pads>:

static int __bsp_init_pads_done = 0;

static void __bsp_init_pads()
{
  if (!__bsp_init_pads_done)
1c012888:	1c0187b7          	lui	a5,0x1c018
1c01288c:	af478793          	addi	a5,a5,-1292 # 1c017af4 <__bsp_init_pads_done>
1c012890:	4398                	lw	a4,0(a5)
1c012892:	eb05                	bnez	a4,1c0128c2 <__bsp_init_pads+0x3a>
{
1c012894:	1101                	addi	sp,sp,-32
1c012896:	ce06                	sw	ra,28(sp)
  {
    __bsp_init_pads_done = 1;
1c012898:	4705                	li	a4,1
1c01289a:	c398                	sw	a4,0(a5)
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c01289c:	000557b7          	lui	a5,0x55
1c0128a0:	50078793          	addi	a5,a5,1280 # 55500 <__L1Cl+0x45500>
1c0128a4:	c03e                	sw	a5,0(sp)
1c0128a6:	0f0007b7          	lui	a5,0xf000
1c0128aa:	c23e                	sw	a5,4(sp)
1c0128ac:	004007b7          	lui	a5,0x400
1c0128b0:	17fd                	addi	a5,a5,-1
    pi_pad_init(pads_value);
1c0128b2:	850a                	mv	a0,sp
    uint32_t pads_value[] = {0x00055500, 0x0f000000, 0x003fffff, 0x00000000};
1c0128b4:	c43e                	sw	a5,8(sp)
1c0128b6:	c602                	sw	zero,12(sp)
    pi_pad_init(pads_value);
1c0128b8:	2a3010ef          	jal	ra,1c01435a <pi_pad_init>
  }
}
1c0128bc:	40f2                	lw	ra,28(sp)
1c0128be:	6105                	addi	sp,sp,32
1c0128c0:	8082                	ret
1c0128c2:	8082                	ret

1c0128c4 <bsp_hyperram_conf_init>:

void bsp_hyperram_conf_init(struct pi_hyperram_conf *conf)
{
  conf->ram_start = CONFIG_HYPERRAM_START;
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c0128c4:	008007b7          	lui	a5,0x800
  conf->ram_start = CONFIG_HYPERRAM_START;
1c0128c8:	00052a23          	sw	zero,20(a0)
  conf->ram_size = CONFIG_HYPERRAM_SIZE;
1c0128cc:	cd1c                	sw	a5,24(a0)
  conf->skip_pads_config = 0;
1c0128ce:	00050623          	sb	zero,12(a0)
  conf->hyper_itf = CONFIG_HYPERRAM_HYPER_ITF;
1c0128d2:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERRAM_HYPER_CS;
1c0128d6:	00052423          	sw	zero,8(a0)
}
1c0128da:	8082                	ret

1c0128dc <bsp_hyperram_open>:
1c0128dc:	1141                	addi	sp,sp,-16
1c0128de:	c606                	sw	ra,12(sp)
1c0128e0:	fa9ff0ef          	jal	ra,1c012888 <__bsp_init_pads>
1c0128e4:	40b2                	lw	ra,12(sp)
1c0128e6:	4501                	li	a0,0
1c0128e8:	0141                	addi	sp,sp,16
1c0128ea:	8082                	ret

1c0128ec <bsp_hyperflash_conf_init>:


void bsp_hyperflash_conf_init(struct pi_hyperflash_conf *conf)
{
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c0128ec:	4785                	li	a5,1
  conf->hyper_itf = CONFIG_HYPERFLASH_HYPER_ITF;
1c0128ee:	00052223          	sw	zero,4(a0)
  conf->hyper_cs = CONFIG_HYPERFLASH_HYPER_CS;
1c0128f2:	c51c                	sw	a5,8(a0)
}
1c0128f4:	8082                	ret

1c0128f6 <bsp_hyperflash_open>:
1c0128f6:	1141                	addi	sp,sp,-16
1c0128f8:	c606                	sw	ra,12(sp)
1c0128fa:	f8fff0ef          	jal	ra,1c012888 <__bsp_init_pads>
1c0128fe:	40b2                	lw	ra,12(sp)
1c012900:	4501                	li	a0,0
1c012902:	0141                	addi	sp,sp,16
1c012904:	8082                	ret

1c012906 <cluster_start>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c012906:	002047b7          	lui	a5,0x204
1c01290a:	00070737          	lui	a4,0x70
1c01290e:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c012912:	0ff00713          	li	a4,255
1c012916:	002046b7          	lui	a3,0x204
1c01291a:	08e6a223          	sw	a4,132(a3) # 204084 <__L2+0x184084>
  IP_WRITE(barAddr, EU_HW_BARR_TRIGGER_MASK, coreMask);
1c01291e:	20078793          	addi	a5,a5,512
1c012922:	00e7a023          	sw	a4,0(a5)
  IP_WRITE(barAddr, EU_HW_BARR_TARGET_MASK, targetMask);
1c012926:	00e7a623          	sw	a4,12(a5)
    __rt_team_config(rt_nb_active_pe());
  }

#endif

}
1c01292a:	8082                	ret

1c01292c <__rt_init>:
{
1c01292c:	1101                	addi	sp,sp,-32
static inline void hal_pmu_bypass_set(unsigned int Value) {
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
}

static inline unsigned int hal_pmu_bypass_get() {
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET);
1c01292e:	1a104737          	lui	a4,0x1a104
1c012932:	ce06                	sw	ra,28(sp)
1c012934:	cc22                	sw	s0,24(sp)
1c012936:	ca26                	sw	s1,20(sp)
1c012938:	07072783          	lw	a5,112(a4) # 1a104070 <__l1_end+0xa10400c>
  hal_pmu_bypass_set (ARCHI_REG_FIELD_SET (hal_pmu_bypass_get (), 1, 11, 1) );
1c01293c:	c0b7c7b3          	p.bset	a5,a5,0,11
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c012940:	06f72823          	sw	a5,112(a4)
  __rt_bridge_set_available();
1c012944:	2b49                	jal	1c012ed6 <__rt_bridge_set_available>
  cpu_stack_check_enable((int)__rt_fc_stack, (int)__rt_fc_stack + __rt_fc_stack_size);
1c012946:	1b0007b7          	lui	a5,0x1b000
1c01294a:	3e878793          	addi	a5,a5,1000 # 1b0003e8 <__rt_fc_stack>
 * Stack checking
 */

static inline void cpu_stack_check_enable(unsigned int base, unsigned int end)
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c01294e:	7d005073          	csrwi	0x7d0,0
  asm volatile ("csrw  0x7D1, %0" :: "r" (base));
1c012952:	7d179073          	csrw	0x7d1,a5
1c012956:	1c017737          	lui	a4,0x1c017
1c01295a:	70c72703          	lw	a4,1804(a4) # 1c01770c <__rt_fc_stack_size>
1c01295e:	97ba                	add	a5,a5,a4
  asm volatile ("csrw  0x7D2, %0" :: "r" (end));
1c012960:	7d279073          	csrw	0x7d2,a5
  asm volatile ("csrwi 0x7D0, 1" :: );
1c012964:	7d00d073          	csrwi	0x7d0,1
  __rt_irq_init();
1c012968:	2add                	jal	1c012b5e <__rt_irq_init>

#include "archi/pulp.h"
#include "archi/soc_eu/soc_eu_v1.h"

static inline void soc_eu_eventMask_set(unsigned int reg, unsigned int value) {
  ARCHI_WRITE(ARCHI_SOC_EU_ADDR, reg, value);
1c01296a:	54fd                	li	s1,-1
1c01296c:	1a1067b7          	lui	a5,0x1a106
1c012970:	0097a223          	sw	s1,4(a5) # 1a106004 <__l1_end+0xa105fa0>
1c012974:	0097a423          	sw	s1,8(a5)
  rt_irq_set_handler(ARCHI_FC_EVT_SOC_EVT, __rt_fc_socevents_handler);
1c012978:	1c0005b7          	lui	a1,0x1c000
1c01297c:	3f458593          	addi	a1,a1,1012 # 1c0003f4 <__rt_fc_socevents_handler>
1c012980:	456d                	li	a0,27
1c012982:	2a3d                	jal	1c012ac0 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c012984:	080007b7          	lui	a5,0x8000
1c012988:	00204737          	lui	a4,0x204
1c01298c:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c012990:	00f72423          	sw	a5,8(a4)
  __rt_pmu_init();
1c012994:	2a2010ef          	jal	ra,1c013c36 <__rt_pmu_init>
  __rt_freq_init();
1c012998:	6ed000ef          	jal	ra,1c013884 <__rt_freq_init>
1c01299c:	002017b7          	lui	a5,0x201
1c0129a0:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
}

static inline void icache_enable(unsigned int base)
{
  pulp_write32(base, 0xFFFFFFFF);
1c0129a4:	c384                	sw	s1,0(a5)
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0129a6:	01402473          	csrr	s0,uhartid
1c0129aa:	1c0174b7          	lui	s1,0x1c017
  return (hart_id >> 5) & 0x3f;
1c0129ae:	8415                	srai	s0,s0,0x5
  __rt_utils_init();
1c0129b0:	24ed                	jal	1c012c9a <__rt_utils_init>
1c0129b2:	f2643433          	p.bclr	s0,s0,25,6
  __rt_allocs_init();
1c0129b6:	1af000ef          	jal	ra,1c013364 <__rt_allocs_init>
1c0129ba:	bd048493          	addi	s1,s1,-1072 # 1c016bd0 <ctor_list+0x4>
  __rt_event_sched_init();
1c0129be:	029000ef          	jal	ra,1c0131e6 <__rt_event_sched_init>
  __rt_padframe_init();
1c0129c2:	64c020ef          	jal	ra,1c01500e <__rt_padframe_init>
  for(fpp = ctor_list+1;  *fpp != 0;  ++fpp) {
1c0129c6:	0044a78b          	p.lw	a5,4(s1!)
1c0129ca:	ebad                	bnez	a5,1c012a3c <__rt_init+0x110>
  return __builtin_pulp_read_then_spr_bit_set(reg, val);
1c0129cc:	300467f3          	csrrsi	a5,mstatus,8
  if (__rt_cbsys_exec(RT_CBSYS_START)) goto error;
1c0129d0:	4501                	li	a0,0
1c0129d2:	2c61                	jal	1c012c6a <__rt_cbsys_exec>
1c0129d4:	e539                	bnez	a0,1c012a22 <__rt_init+0xf6>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0129d6:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c0129da:	8795                	srai	a5,a5,0x5
1c0129dc:	f267b7b3          	p.bclr	a5,a5,25,6
        exit(retval);
      }
    }
    else
      return cluster_master_start(NULL);
  } else if (!rt_is_fc()) {
1c0129e0:	02000713          	li	a4,32
1c0129e4:	0ae78363          	beq	a5,a4,1c012a8a <__rt_init+0x15e>
    rt_cluster_mount(1, cid, 0, NULL);
1c0129e8:	4681                	li	a3,0
1c0129ea:	4601                	li	a2,0
1c0129ec:	4581                	li	a1,0
1c0129ee:	4505                	li	a0,1
  if (rt_cluster_id() != cid)
1c0129f0:	cba1                	beqz	a5,1c012a40 <__rt_init+0x114>
    rt_cluster_mount(1, cid, 0, NULL);
1c0129f2:	794010ef          	jal	ra,1c014186 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*rt_nb_active_pe());
1c0129f6:	6591                	lui	a1,0x4
1c0129f8:	4509                	li	a0,2
1c0129fa:	0bf000ef          	jal	ra,1c0132b8 <rt_alloc>
1c0129fe:	872a                	mv	a4,a0
    if (stacks == NULL) return -1;
1c012a00:	c10d                	beqz	a0,1c012a22 <__rt_init+0xf6>
    if (rt_cluster_call(NULL, cid, cluster_start, NULL, stacks, 0x800, 0x800, rt_nb_active_pe(), event)) return -1;
1c012a02:	6805                	lui	a6,0x1
1c012a04:	80080813          	addi	a6,a6,-2048 # 800 <__rt_stack_size>
1c012a08:	1c013637          	lui	a2,0x1c013
1c012a0c:	c002                	sw	zero,0(sp)
1c012a0e:	48a1                	li	a7,8
1c012a10:	87c2                	mv	a5,a6
1c012a12:	4681                	li	a3,0
1c012a14:	90660613          	addi	a2,a2,-1786 # 1c012906 <cluster_start>
1c012a18:	4581                	li	a1,0
1c012a1a:	4501                	li	a0,0
1c012a1c:	6da010ef          	jal	ra,1c0140f6 <rt_cluster_call>
1c012a20:	c52d                	beqz	a0,1c012a8a <__rt_init+0x15e>
  rt_fatal("There was an error during runtime initialization\n");
1c012a22:	1c017537          	lui	a0,0x1c017
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012a26:	01402673          	csrr	a2,uhartid
1c012a2a:	85a2                	mv	a1,s0
1c012a2c:	f4563633          	p.bclr	a2,a2,26,5
1c012a30:	27050513          	addi	a0,a0,624 # 1c017270 <IntegerExpLUT+0x18>
1c012a34:	0bc030ef          	jal	ra,1c015af0 <printf>
1c012a38:	03c030ef          	jal	ra,1c015a74 <abort>
    (**fpp)();
1c012a3c:	9782                	jalr	a5
1c012a3e:	b761                	j	1c0129c6 <__rt_init+0x9a>
    rt_cluster_mount(1, cid, 0, NULL);
1c012a40:	746010ef          	jal	ra,1c014186 <rt_cluster_mount>
    void *stacks = rt_alloc(RT_ALLOC_CL_DATA+cid, 0x800*(rt_nb_active_pe()-1));
1c012a44:	6591                	lui	a1,0x4
1c012a46:	80058593          	addi	a1,a1,-2048 # 3800 <__rt_stack_size+0x3000>
1c012a4a:	4509                	li	a0,2
1c012a4c:	06d000ef          	jal	ra,1c0132b8 <rt_alloc>
    if (stacks == NULL) return -1;
1c012a50:	d969                	beqz	a0,1c012a22 <__rt_init+0xf6>
  IP_WRITE(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG, value);
1c012a52:	00204737          	lui	a4,0x204
1c012a56:	0ff00793          	li	a5,255
1c012a5a:	08f72223          	sw	a5,132(a4) # 204084 <__L2+0x184084>
    eu_dispatch_push((unsigned int)__rt_set_slave_stack | 1);
1c012a5e:	1c0177b7          	lui	a5,0x1c017
1c012a62:	b1478793          	addi	a5,a5,-1260 # 1c016b14 <__rt_set_slave_stack>
1c012a66:	c007c7b3          	p.bset	a5,a5,0,0
  IP_WRITE_PTR(ARCHI_EU_DEMUX_ADDR, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS, value);
1c012a6a:	08f72023          	sw	a5,128(a4)
1c012a6e:	6785                	lui	a5,0x1
1c012a70:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c012a74:	08f72023          	sw	a5,128(a4)
1c012a78:	08a72023          	sw	a0,128(a4)
}
1c012a7c:	4462                	lw	s0,24(sp)
1c012a7e:	40f2                	lw	ra,28(sp)
1c012a80:	44d2                	lw	s1,20(sp)
    cluster_start(NULL);
1c012a82:	4501                	li	a0,0
}
1c012a84:	6105                	addi	sp,sp,32
    cluster_start(NULL);
1c012a86:	e81ff06f          	j	1c012906 <cluster_start>
}
1c012a8a:	40f2                	lw	ra,28(sp)
1c012a8c:	4462                	lw	s0,24(sp)
1c012a8e:	44d2                	lw	s1,20(sp)
1c012a90:	6105                	addi	sp,sp,32
1c012a92:	8082                	ret

1c012a94 <__rt_deinit>:
{
1c012a94:	1141                	addi	sp,sp,-16
1c012a96:	c606                	sw	ra,12(sp)
1c012a98:	c422                	sw	s0,8(sp)
}

static inline void cpu_stack_check_disable()
{
  asm volatile ("csrwi 0x7D0, 0" :: );
1c012a9a:	7d005073          	csrwi	0x7d0,0
  __rt_cbsys_exec(RT_CBSYS_STOP);
1c012a9e:	4505                	li	a0,1
1c012aa0:	1c017437          	lui	s0,0x1c017
1c012aa4:	22d9                	jal	1c012c6a <__rt_cbsys_exec>
1c012aa6:	c1440413          	addi	s0,s0,-1004 # 1c016c14 <dtor_list+0x4>
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c012aaa:	0044278b          	p.lw	a5,4(s0!)
1c012aae:	e789                	bnez	a5,1c012ab8 <__rt_deinit+0x24>
}
1c012ab0:	40b2                	lw	ra,12(sp)
1c012ab2:	4422                	lw	s0,8(sp)
1c012ab4:	0141                	addi	sp,sp,16
1c012ab6:	8082                	ret
  for(fpp = dtor_list + 1;  *fpp != 0;  ++fpp) (**fpp)();
1c012ab8:	9782                	jalr	a5
1c012aba:	bfc5                	j	1c012aaa <__rt_deinit+0x16>

1c012abc <pi_open_from_conf>:
#endif


void pi_open_from_conf(struct pi_device *device, void *conf)
{
  device->config = conf;
1c012abc:	c14c                	sw	a1,4(a0)
}
1c012abe:	8082                	ret

1c012ac0 <rt_irq_set_handler>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012ac0:	014027f3          	csrr	a5,uhartid
  return hal_spr_read(0x305) & ~1;
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
  return ARCHI_L2_ADDR;
#else
  if (rt_is_fc()) {
1c012ac4:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c012ac8:	ca5797b3          	p.extractu	a5,a5,5,5
1c012acc:	02e79c63          	bne	a5,a4,1c012b04 <rt_irq_set_handler+0x44>
#if defined(ARCHI_CORE_HAS_SECURITY) && !defined(ARCHI_CORE_HAS_1_10)
    return __builtin_pulp_spr_read(SR_MTVEC);
1c012ad0:	30502773          	csrr	a4,mtvec
  irq -= 16;
#endif

  unsigned int base = __rt_get_fc_vector_base();

  unsigned int jmpAddr = base + 0x4 * irq;
1c012ad4:	050a                	slli	a0,a0,0x2
  unsigned int S = ((unsigned int) ItHandler - (ItBaseAddr+ItIndex*4));
1c012ad6:	8d89                	sub	a1,a1,a0
1c012ad8:	8d99                	sub	a1,a1,a4
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 20),  1, 31);
1c012ada:	c14586b3          	p.extract	a3,a1,0,20
1c012ade:	06f00793          	li	a5,111
1c012ae2:	c1f6a7b3          	p.insert	a5,a3,0,31
  R = __BITINSERT(R, __BITEXTRACT(S, 10,  1), 10, 21);
1c012ae6:	d21586b3          	p.extract	a3,a1,9,1
1c012aea:	d356a7b3          	p.insert	a5,a3,9,21
  R = __BITINSERT(R, __BITEXTRACT(S,  1, 11),  1, 20);
1c012aee:	c0b586b3          	p.extract	a3,a1,0,11
1c012af2:	c146a7b3          	p.insert	a5,a3,0,20
  R = __BITINSERT(R, __BITEXTRACT(S,  8, 12),  8, 12);
1c012af6:	cec585b3          	p.extract	a1,a1,7,12
1c012afa:	cec5a7b3          	p.insert	a5,a1,7,12

  *(volatile unsigned int *)jmpAddr = __rt_get_itvec(base, irq, (unsigned int)handler);
1c012afe:	00f56723          	p.sw	a5,a4(a0)

#if defined(PLP_FC_HAS_ICACHE)
  flush_all_icache_banks_common(plp_icache_fc_base());
#endif

}
1c012b02:	8082                	ret
static inline void plp_ctrl_core_bootaddr_set_remote(int cid, int core, unsigned int bootAddr) {
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
}

static inline unsigned int plp_ctrl_bootaddr_get() {
  return pulp_read32(ARCHI_CLUSTER_CTRL_ADDR + 0x40);
1c012b04:	002007b7          	lui	a5,0x200
1c012b08:	43b8                	lw	a4,64(a5)
1c012b0a:	b7e9                	j	1c012ad4 <rt_irq_set_handler+0x14>

1c012b0c <illegal_insn_handler_c>:
#include <stdlib.h>

void __attribute__((weak)) illegal_insn_handler_c()
{

}
1c012b0c:	8082                	ret

1c012b0e <__rt_handle_illegal_instr>:


extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config;
extern RT_FC_GLOBAL_DATA unsigned int __rt_debug_config_trace;

static inline unsigned int rt_debug_config() { return __rt_debug_config; }
1c012b0e:	1b0007b7          	lui	a5,0x1b000

static inline unsigned int rt_debug_config_trace() { return __rt_debug_config_trace; }

static inline int rt_debug_config_warnings() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WARNING_BIT, 1);
1c012b12:	7ec7a703          	lw	a4,2028(a5) # 1b0007ec <__rt_debug_config>

void __rt_handle_illegal_instr()
{
1c012b16:	1141                	addi	sp,sp,-16
1c012b18:	c422                	sw	s0,8(sp)
1c012b1a:	c606                	sw	ra,12(sp)
1c012b1c:	fc173733          	p.bclr	a4,a4,30,1
1c012b20:	843e                	mv	s0,a5
#ifdef __riscv__
  unsigned int mepc = hal_mepc_read();
  rt_warning("Reached illegal instruction (PC: 0x%x, opcode: 0x%x\n", mepc, *(int *)mepc);
1c012b22:	c315                	beqz	a4,1c012b46 <__rt_handle_illegal_instr+0x38>
1c012b24:	341026f3          	csrr	a3,mepc
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012b28:	01402673          	csrr	a2,uhartid
1c012b2c:	1c017537          	lui	a0,0x1c017
1c012b30:	4298                	lw	a4,0(a3)
  return (hart_id >> 5) & 0x3f;
1c012b32:	40565593          	srai	a1,a2,0x5
1c012b36:	f265b5b3          	p.bclr	a1,a1,25,6
1c012b3a:	f4563633          	p.bclr	a2,a2,26,5
1c012b3e:	2c850513          	addi	a0,a0,712 # 1c0172c8 <IntegerExpLUT+0x70>
1c012b42:	7af020ef          	jal	ra,1c015af0 <printf>
}

static inline int rt_debug_config_werror() {
  return ARCHI_REG_FIELD_GET(rt_debug_config(), RT_DEBUG_WERROR_BIT, 1);
1c012b46:	7ec42783          	lw	a5,2028(s0)
1c012b4a:	c01797b3          	p.extractu	a5,a5,0,1
1c012b4e:	c399                	beqz	a5,1c012b54 <__rt_handle_illegal_instr+0x46>
1c012b50:	725020ef          	jal	ra,1c015a74 <abort>
  illegal_insn_handler_c();
#endif
}
1c012b54:	4422                	lw	s0,8(sp)
1c012b56:	40b2                	lw	ra,12(sp)
1c012b58:	0141                	addi	sp,sp,16
  illegal_insn_handler_c();
1c012b5a:	fb3ff06f          	j	1c012b0c <illegal_insn_handler_c>

1c012b5e <__rt_irq_init>:
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_IRQ_AND, irqMask);
1c012b5e:	57fd                	li	a5,-1
1c012b60:	00204737          	lui	a4,0x204
1c012b64:	00f72823          	sw	a5,16(a4) # 204010 <__L2+0x184010>
  else eu_irq_maskClr(mask);
#elif defined(ITC_VERSION)
  hal_itc_enable_clr(mask);
#elif defined(EU_VERSION)
  eu_irq_maskClr(mask);
  if (hal_is_fc()) eu_evt_maskClr(mask);
1c012b68:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012b6c:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c012b70:	ca5797b3          	p.extractu	a5,a5,5,5
1c012b74:	00e79763          	bne	a5,a4,1c012b82 <__rt_irq_init+0x24>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c012b78:	57fd                	li	a5,-1
1c012b7a:	00204737          	lui	a4,0x204
1c012b7e:	00f72223          	sw	a5,4(a4) # 204004 <__L2+0x184004>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012b82:	014027f3          	csrr	a5,uhartid
#if defined(ARCHI_CORE_RISCV_ITC)
  hal_spr_write(0x305, base);
#else
#if defined(APB_SOC_VERSION) && APB_SOC_VERSION == 1
#else
  if (rt_is_fc()) {
1c012b86:	02000713          	li	a4,32
  return (hart_id >> 5) & 0x3f;
1c012b8a:	ca5797b3          	p.extractu	a5,a5,5,5
1c012b8e:	00e79963          	bne	a5,a4,1c012ba0 <__rt_irq_init+0x42>
#if defined(ARCHI_CORE_HAS_SECURITY)
    __builtin_pulp_spr_write(SR_MTVEC, base);
1c012b92:	1c0007b7          	lui	a5,0x1c000
1c012b96:	00078793          	mv	a5,a5
1c012b9a:	30579073          	csrw	mtvec,a5
1c012b9e:	8082                	ret
  pulp_write32(ARCHI_CLUSTER_CTRL_ADDR + 0x40, bootAddr);
1c012ba0:	1c0007b7          	lui	a5,0x1c000
1c012ba4:	00200737          	lui	a4,0x200
1c012ba8:	00078793          	mv	a5,a5
1c012bac:	c33c                	sw	a5,64(a4)
  rt_irq_mask_clr(-1);

  // As the FC code may not be at the beginning of the L2, set the
  // vector base to get proper interrupt handlers
  __rt_set_fc_vector_base((int)rt_irq_vector_base());
}
1c012bae:	8082                	ret

1c012bb0 <__rt_fc_cluster_lock_req>:
      rt_free(RT_ALLOC_FC_RET_DATA, (void *)cbsys, sizeof(rt_cbsys_t));     
      return;
    }

    prev = cbsys;
    cbsys = cbsys->next;
1c012bb0:	300476f3          	csrrci	a3,mstatus,8
1c012bb4:	08a54703          	lbu	a4,138(a0)
1c012bb8:	411c                	lw	a5,0(a0)
1c012bba:	c321                	beqz	a4,1c012bfa <__rt_fc_cluster_lock_req+0x4a>
1c012bbc:	4398                	lw	a4,0(a5)
1c012bbe:	cf09                	beqz	a4,1c012bd8 <__rt_fc_cluster_lock_req+0x28>
1c012bc0:	43d8                	lw	a4,4(a5)
1c012bc2:	cb09                	beqz	a4,1c012bd4 <__rt_fc_cluster_lock_req+0x24>
1c012bc4:	4798                	lw	a4,8(a5)
1c012bc6:	c348                	sw	a0,4(a4)
1c012bc8:	c788                	sw	a0,8(a5)
1c012bca:	00052223          	sw	zero,4(a0)
1c012bce:	30069073          	csrw	mstatus,a3
1c012bd2:	8082                	ret
1c012bd4:	c3c8                	sw	a0,4(a5)
1c012bd6:	bfcd                	j	1c012bc8 <__rt_fc_cluster_lock_req+0x18>
1c012bd8:	4705                	li	a4,1
1c012bda:	08e50423          	sb	a4,136(a0)
1c012bde:	4705                	li	a4,1
1c012be0:	c398                	sw	a4,0(a5)
1c012be2:	08954783          	lbu	a5,137(a0)
1c012be6:	00201737          	lui	a4,0x201
1c012bea:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c012bee:	04078793          	addi	a5,a5,64 # 1c000040 <__irq_vector_base+0x40>
1c012bf2:	07da                	slli	a5,a5,0x16
1c012bf4:	0007e723          	p.sw	zero,a4(a5)
1c012bf8:	bfd9                	j	1c012bce <__rt_fc_cluster_lock_req+0x1e>
1c012bfa:	43d8                	lw	a4,4(a5)
1c012bfc:	e719                	bnez	a4,1c012c0a <__rt_fc_cluster_lock_req+0x5a>
1c012bfe:	0007a023          	sw	zero,0(a5)
1c012c02:	4785                	li	a5,1
1c012c04:	08f50423          	sb	a5,136(a0)
1c012c08:	bfe9                	j	1c012be2 <__rt_fc_cluster_lock_req+0x32>
1c012c0a:	4350                	lw	a2,4(a4)
1c012c0c:	c3d0                	sw	a2,4(a5)
1c012c0e:	4785                	li	a5,1
1c012c10:	08f70423          	sb	a5,136(a4)
1c012c14:	08974783          	lbu	a5,137(a4)
1c012c18:	00201737          	lui	a4,0x201
1c012c1c:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c012c20:	04078793          	addi	a5,a5,64
1c012c24:	07da                	slli	a5,a5,0x16
1c012c26:	0007e723          	p.sw	zero,a4(a5)
1c012c2a:	bfe1                	j	1c012c02 <__rt_fc_cluster_lock_req+0x52>

1c012c2c <__rt_cbsys_add>:
  }
}

int __rt_cbsys_add(__rt_cbsys_e cbsys_id, int (*cb)(void *), void *cb_arg)
{
1c012c2c:	1101                	addi	sp,sp,-32
1c012c2e:	cc22                	sw	s0,24(sp)
1c012c30:	ca26                	sw	s1,20(sp)
1c012c32:	842a                	mv	s0,a0
1c012c34:	84ae                	mv	s1,a1
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c012c36:	4501                	li	a0,0
1c012c38:	45b1                	li	a1,12
1c012c3a:	c632                	sw	a2,12(sp)
{
1c012c3c:	ce06                	sw	ra,28(sp)
  rt_cbsys_t *cbsys = (rt_cbsys_t *)rt_alloc(RT_ALLOC_FC_RET_DATA, sizeof(rt_cbsys_t));
1c012c3e:	2dad                	jal	1c0132b8 <rt_alloc>
  if (cbsys == NULL) return -1;
1c012c40:	4632                	lw	a2,12(sp)
1c012c42:	c115                	beqz	a0,1c012c66 <__rt_cbsys_add+0x3a>

  cbsys->callback = cb;
  cbsys->arg = cb_arg;
  cbsys->next = cbsys_first[cbsys_id];
1c012c44:	1b0007b7          	lui	a5,0x1b000
1c012c48:	040a                	slli	s0,s0,0x2
1c012c4a:	7f078793          	addi	a5,a5,2032 # 1b0007f0 <cbsys_first>
1c012c4e:	97a2                	add	a5,a5,s0
1c012c50:	4398                	lw	a4,0(a5)
  cbsys->callback = cb;
1c012c52:	c104                	sw	s1,0(a0)
  cbsys->arg = cb_arg;
1c012c54:	c150                	sw	a2,4(a0)
  cbsys->next = cbsys_first[cbsys_id];
1c012c56:	c518                	sw	a4,8(a0)
  cbsys_first[cbsys_id] = cbsys;
1c012c58:	c388                	sw	a0,0(a5)

  return 0;
1c012c5a:	4501                	li	a0,0
}
1c012c5c:	40f2                	lw	ra,28(sp)
1c012c5e:	4462                	lw	s0,24(sp)
1c012c60:	44d2                	lw	s1,20(sp)
1c012c62:	6105                	addi	sp,sp,32
1c012c64:	8082                	ret
  if (cbsys == NULL) return -1;
1c012c66:	557d                	li	a0,-1
1c012c68:	bfd5                	j	1c012c5c <__rt_cbsys_add+0x30>

1c012c6a <__rt_cbsys_exec>:


int __rt_cbsys_exec(__rt_cbsys_e cbsys_id)
{
1c012c6a:	1141                	addi	sp,sp,-16
1c012c6c:	c422                	sw	s0,8(sp)
  rt_cbsys_t *cbsys = cbsys_first[cbsys_id];
1c012c6e:	1b000437          	lui	s0,0x1b000
1c012c72:	050a                	slli	a0,a0,0x2
1c012c74:	7f040413          	addi	s0,s0,2032 # 1b0007f0 <cbsys_first>
1c012c78:	20a47403          	p.lw	s0,a0(s0)
{
1c012c7c:	c606                	sw	ra,12(sp)
  while (cbsys)
1c012c7e:	e411                	bnez	s0,1c012c8a <__rt_cbsys_exec+0x20>
  {
    if (cbsys->callback(cbsys->arg)) return -1;
    cbsys = cbsys->next;
  }

  return 0;
1c012c80:	4501                	li	a0,0
}
1c012c82:	40b2                	lw	ra,12(sp)
1c012c84:	4422                	lw	s0,8(sp)
1c012c86:	0141                	addi	sp,sp,16
1c012c88:	8082                	ret
    if (cbsys->callback(cbsys->arg)) return -1;
1c012c8a:	401c                	lw	a5,0(s0)
1c012c8c:	4048                	lw	a0,4(s0)
1c012c8e:	9782                	jalr	a5
1c012c90:	e119                	bnez	a0,1c012c96 <__rt_cbsys_exec+0x2c>
    cbsys = cbsys->next;
1c012c92:	4400                	lw	s0,8(s0)
1c012c94:	b7ed                	j	1c012c7e <__rt_cbsys_exec+0x14>
    if (cbsys->callback(cbsys->arg)) return -1;
1c012c96:	557d                	li	a0,-1
1c012c98:	b7ed                	j	1c012c82 <__rt_cbsys_exec+0x18>

1c012c9a <__rt_utils_init>:

RT_FC_BOOT_CODE void __rt_utils_init()
{
  for (int i=0; i<RT_CBSYS_NB; i++)
  {
    cbsys_first[i] = NULL;
1c012c9a:	1b0007b7          	lui	a5,0x1b000
1c012c9e:	7f078793          	addi	a5,a5,2032 # 1b0007f0 <cbsys_first>
1c012ca2:	0007a023          	sw	zero,0(a5)
1c012ca6:	0007a223          	sw	zero,4(a5)
1c012caa:	0007a423          	sw	zero,8(a5)
1c012cae:	0007a623          	sw	zero,12(a5)
1c012cb2:	0007a823          	sw	zero,16(a5)
1c012cb6:	0007aa23          	sw	zero,20(a5)
  }
}
1c012cba:	8082                	ret

1c012cbc <__rt_fc_lock>:

void __rt_fc_lock(rt_fc_lock_t *lock)
{
1c012cbc:	1141                	addi	sp,sp,-16
1c012cbe:	c422                	sw	s0,8(sp)
1c012cc0:	842a                	mv	s0,a0
1c012cc2:	c606                	sw	ra,12(sp)
1c012cc4:	c226                	sw	s1,4(sp)
1c012cc6:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c012cc8:	300474f3          	csrrci	s1,mstatus,8
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  while(lock->locked)
1c012ccc:	401c                	lw	a5,0(s0)
1c012cce:	eb99                	bnez	a5,1c012ce4 <__rt_fc_lock+0x28>
  {
    //lock->fc_wait = __rt_thread_current;
    __rt_event_execute(rt_event_internal_sched(), 1);
  }
  lock->locked = 1;
1c012cd0:	4785                	li	a5,1
1c012cd2:	c01c                	sw	a5,0(s0)
  __builtin_pulp_spr_write(reg, val);
1c012cd4:	30049073          	csrw	mstatus,s1
  while (rt_tas_lock_32((uint32_t)&lock->lock) == -1)
  {

  }
#endif
}
1c012cd8:	40b2                	lw	ra,12(sp)
1c012cda:	4422                	lw	s0,8(sp)
1c012cdc:	4492                	lw	s1,4(sp)
1c012cde:	4902                	lw	s2,0(sp)
1c012ce0:	0141                	addi	sp,sp,16
1c012ce2:	8082                	ret
    __rt_event_execute(rt_event_internal_sched(), 1);
1c012ce4:	4585                	li	a1,1
1c012ce6:	01c00513          	li	a0,28
1c012cea:	2989                	jal	1c01313c <__rt_event_execute>
1c012cec:	b7c5                	j	1c012ccc <__rt_fc_lock+0x10>

1c012cee <__rt_fc_unlock>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c012cee:	300476f3          	csrrci	a3,mstatus,8

static int __rt_fc_unlock_to_cluster(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_CLUSTER)
  if (lock->waiting) {
1c012cf2:	415c                	lw	a5,4(a0)
1c012cf4:	e791                	bnez	a5,1c012d00 <__rt_fc_unlock+0x12>
{
#if defined(ARCHI_HAS_FC)
  int irq = rt_irq_disable();
  if (!__rt_fc_unlock_to_cluster(lock))
  {
    lock->locked = 0;    
1c012cf6:	00052023          	sw	zero,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c012cfa:	30069073          	csrw	mstatus,a3
  }
  rt_irq_restore(irq);
#else
  rt_tas_unlock_32((uint32_t)&lock->lock, 0);
#endif
}
1c012cfe:	8082                	ret
    lock->waiting = req->next;
1c012d00:	43d8                	lw	a4,4(a5)
1c012d02:	c158                	sw	a4,4(a0)
    req->done = 1;
1c012d04:	4705                	li	a4,1
1c012d06:	08e78423          	sb	a4,136(a5)
    __rt_cluster_notif_req_done(req->cid);
1c012d0a:	0897c783          	lbu	a5,137(a5)
  pulp_write32(evtAddr, coreSet);
1c012d0e:	00201737          	lui	a4,0x201
1c012d12:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c012d16:	04078793          	addi	a5,a5,64
1c012d1a:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c012d1c:	0007e723          	p.sw	zero,a4(a5)
1c012d20:	bfe9                	j	1c012cfa <__rt_fc_unlock+0xc>

1c012d22 <__rt_fc_cluster_lock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012d22:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c012d26:	8795                	srai	a5,a5,0x5
1c012d28:	f267b7b3          	p.bclr	a5,a5,25,6
#if defined(ARCHI_HAS_FC)

void __rt_fc_cluster_lock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c012d2c:	08f584a3          	sb	a5,137(a1)
  req->done = 0;
  req->req_lock = 1;
1c012d30:	4785                	li	a5,1
1c012d32:	08f58523          	sb	a5,138(a1)
  event->arg[0] = (uintptr_t)callback;
1c012d36:	1c0137b7          	lui	a5,0x1c013
1c012d3a:	bb078793          	addi	a5,a5,-1104 # 1c012bb0 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c012d3e:	c188                	sw	a0,0(a1)
  req->done = 0;
1c012d40:	08058423          	sb	zero,136(a1)
  event->implem.pending = 0;
1c012d44:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c012d48:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c012d4c:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c012d4e:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c012d50:	05a1                	addi	a1,a1,8

// This function will push an event from cluster to FC and the event callback
// will be executed directly from within the interrupt handler
static inline void __rt_cluster_push_fc_irq_event(rt_event_t *event)
{
  __rt_cluster_push_fc_event((rt_event_t *)(((unsigned int)event) | 0x1));
1c012d52:	c005c533          	p.bset	a0,a1,0,0
1c012d56:	2b80106f          	j	1c01400e <__rt_cluster_push_fc_event>

1c012d5a <__rt_fc_cluster_unlock>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c012d5a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c012d5e:	8795                	srai	a5,a5,0x5
1c012d60:	f267b7b3          	p.bclr	a5,a5,25,6
}

void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req)
{
  req->lock = lock;
  req->cid = rt_cluster_id();
1c012d64:	08f584a3          	sb	a5,137(a1)
  event->arg[0] = (uintptr_t)callback;
1c012d68:	1c0137b7          	lui	a5,0x1c013
1c012d6c:	bb078793          	addi	a5,a5,-1104 # 1c012bb0 <__rt_fc_cluster_lock_req>
  req->lock = lock;
1c012d70:	c188                	sw	a0,0(a1)
  req->done = 0;
1c012d72:	08058423          	sb	zero,136(a1)
  req->req_lock = 0;
1c012d76:	08058523          	sb	zero,138(a1)
  event->implem.pending = 0;
1c012d7a:	0205a623          	sw	zero,44(a1)
  event->implem.keep = 0;
1c012d7e:	0205a823          	sw	zero,48(a1)
  event->arg[0] = (uintptr_t)callback;
1c012d82:	c5dc                	sw	a5,12(a1)
  event->arg[1] = (uintptr_t)arg;
1c012d84:	c98c                	sw	a1,16(a1)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_fc_cluster_lock_req, (void *)req);
1c012d86:	05a1                	addi	a1,a1,8
1c012d88:	c005c533          	p.bset	a0,a1,0,0
1c012d8c:	2820106f          	j	1c01400e <__rt_cluster_push_fc_event>

1c012d90 <__rt_event_enqueue>:

    __rt_wait_event_check(event, call_event);
  }

  rt_irq_restore(irq);
}
1c012d90:	01c02683          	lw	a3,28(zero) # 1c <__rt_sched>
1c012d94:	00052023          	sw	zero,0(a0)
1c012d98:	01c00713          	li	a4,28
1c012d9c:	c689                	beqz	a3,1c012da6 <__rt_event_enqueue+0x16>
1c012d9e:	435c                	lw	a5,4(a4)
1c012da0:	c388                	sw	a0,0(a5)
1c012da2:	c348                	sw	a0,4(a4)
1c012da4:	8082                	ret
1c012da6:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c012daa:	bfe5                	j	1c012da2 <__rt_event_enqueue+0x12>

1c012dac <__rt_bridge_check_bridge_req.part.5>:
1c012dac:	1c017737          	lui	a4,0x1c017
1c012db0:	64c70793          	addi	a5,a4,1612 # 1c01764c <__hal_debug_struct>
1c012db4:	0a47a783          	lw	a5,164(a5)
1c012db8:	64c70713          	addi	a4,a4,1612
1c012dbc:	c789                	beqz	a5,1c012dc6 <__rt_bridge_check_bridge_req.part.5+0x1a>
1c012dbe:	4f94                	lw	a3,24(a5)
1c012dc0:	e681                	bnez	a3,1c012dc8 <__rt_bridge_check_bridge_req.part.5+0x1c>
1c012dc2:	0af72623          	sw	a5,172(a4)
1c012dc6:	8082                	ret
1c012dc8:	479c                	lw	a5,8(a5)
1c012dca:	bfcd                	j	1c012dbc <__rt_bridge_check_bridge_req.part.5+0x10>

1c012dcc <__rt_bridge_wait>:
1c012dcc:	014027f3          	csrr	a5,uhartid
1c012dd0:	02000713          	li	a4,32
1c012dd4:	ca5797b3          	p.extractu	a5,a5,5,5
1c012dd8:	02e79c63          	bne	a5,a4,1c012e10 <__rt_bridge_wait+0x44>
1c012ddc:	1141                	addi	sp,sp,-16
1c012dde:	c422                	sw	s0,8(sp)
1c012de0:	1a106437          	lui	s0,0x1a106
1c012de4:	c606                	sw	ra,12(sp)
1c012de6:	00442783          	lw	a5,4(s0) # 1a106004 <__l1_end+0xa105fa0>
1c012dea:	c187b7b3          	p.bclr	a5,a5,0,24
1c012dee:	00f42223          	sw	a5,4(s0)
1c012df2:	4585                	li	a1,1
1c012df4:	03800513          	li	a0,56
1c012df8:	18f000ef          	jal	ra,1c013786 <__rt_periph_wait_event>
1c012dfc:	00442783          	lw	a5,4(s0)
1c012e00:	c187c7b3          	p.bset	a5,a5,0,24
1c012e04:	00f42223          	sw	a5,4(s0)
1c012e08:	40b2                	lw	ra,12(sp)
1c012e0a:	4422                	lw	s0,8(sp)
1c012e0c:	0141                	addi	sp,sp,16
1c012e0e:	8082                	ret
1c012e10:	8082                	ret

1c012e12 <__rt_bridge_handle_notif>:
1c012e12:	1141                	addi	sp,sp,-16
1c012e14:	c422                	sw	s0,8(sp)
1c012e16:	1c017437          	lui	s0,0x1c017
1c012e1a:	64c40793          	addi	a5,s0,1612 # 1c01764c <__hal_debug_struct>
1c012e1e:	0a47a783          	lw	a5,164(a5)
1c012e22:	c606                	sw	ra,12(sp)
1c012e24:	c226                	sw	s1,4(sp)
1c012e26:	c04a                	sw	s2,0(sp)
1c012e28:	64c40413          	addi	s0,s0,1612
1c012e2c:	c399                	beqz	a5,1c012e32 <__rt_bridge_handle_notif+0x20>
1c012e2e:	4bd8                	lw	a4,20(a5)
1c012e30:	e31d                	bnez	a4,1c012e56 <__rt_bridge_handle_notif+0x44>
1c012e32:	0b442783          	lw	a5,180(s0)
1c012e36:	c791                	beqz	a5,1c012e42 <__rt_bridge_handle_notif+0x30>
1c012e38:	43a8                	lw	a0,64(a5)
1c012e3a:	0a042a23          	sw	zero,180(s0)
1c012e3e:	f53ff0ef          	jal	ra,1c012d90 <__rt_event_enqueue>
1c012e42:	0ac42783          	lw	a5,172(s0)
1c012e46:	ef85                	bnez	a5,1c012e7e <__rt_bridge_handle_notif+0x6c>
1c012e48:	4422                	lw	s0,8(sp)
1c012e4a:	40b2                	lw	ra,12(sp)
1c012e4c:	4492                	lw	s1,4(sp)
1c012e4e:	4902                	lw	s2,0(sp)
1c012e50:	0141                	addi	sp,sp,16
1c012e52:	f5bff06f          	j	1c012dac <__rt_bridge_check_bridge_req.part.5>
1c012e56:	4784                	lw	s1,8(a5)
1c012e58:	4fd8                	lw	a4,28(a5)
1c012e5a:	0a942223          	sw	s1,164(s0)
1c012e5e:	cb01                	beqz	a4,1c012e6e <__rt_bridge_handle_notif+0x5c>
1c012e60:	0b042703          	lw	a4,176(s0)
1c012e64:	c798                	sw	a4,8(a5)
1c012e66:	0af42823          	sw	a5,176(s0)
1c012e6a:	87a6                	mv	a5,s1
1c012e6c:	b7c1                	j	1c012e2c <__rt_bridge_handle_notif+0x1a>
1c012e6e:	43a8                	lw	a0,64(a5)
1c012e70:	30047973          	csrrci	s2,mstatus,8
1c012e74:	f1dff0ef          	jal	ra,1c012d90 <__rt_event_enqueue>
1c012e78:	30091073          	csrw	mstatus,s2
1c012e7c:	b7fd                	j	1c012e6a <__rt_bridge_handle_notif+0x58>
1c012e7e:	40b2                	lw	ra,12(sp)
1c012e80:	4422                	lw	s0,8(sp)
1c012e82:	4492                	lw	s1,4(sp)
1c012e84:	4902                	lw	s2,0(sp)
1c012e86:	0141                	addi	sp,sp,16
1c012e88:	8082                	ret

1c012e8a <__rt_bridge_check_connection>:
1c012e8a:	1c0176b7          	lui	a3,0x1c017
1c012e8e:	64c68693          	addi	a3,a3,1612 # 1c01764c <__hal_debug_struct>
1c012e92:	469c                	lw	a5,8(a3)
1c012e94:	e3a1                	bnez	a5,1c012ed4 <__rt_bridge_check_connection+0x4a>
1c012e96:	1a1047b7          	lui	a5,0x1a104
1c012e9a:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104010>
1c012e9e:	4398                	lw	a4,0(a5)
1c012ea0:	8325                	srli	a4,a4,0x9
1c012ea2:	f8373733          	p.bclr	a4,a4,28,3
1c012ea6:	02773763          	p.bneimm	a4,7,1c012ed4 <__rt_bridge_check_connection+0x4a>
1c012eaa:	1141                	addi	sp,sp,-16
1c012eac:	c422                	sw	s0,8(sp)
1c012eae:	c606                	sw	ra,12(sp)
1c012eb0:	4705                	li	a4,1
1c012eb2:	c698                	sw	a4,8(a3)
1c012eb4:	4709                	li	a4,2
1c012eb6:	c398                	sw	a4,0(a5)
1c012eb8:	843e                	mv	s0,a5
1c012eba:	401c                	lw	a5,0(s0)
1c012ebc:	83a5                	srli	a5,a5,0x9
1c012ebe:	f837b7b3          	p.bclr	a5,a5,28,3
1c012ec2:	0077a663          	p.beqimm	a5,7,1c012ece <__rt_bridge_check_connection+0x44>
1c012ec6:	40b2                	lw	ra,12(sp)
1c012ec8:	4422                	lw	s0,8(sp)
1c012eca:	0141                	addi	sp,sp,16
1c012ecc:	8082                	ret
1c012ece:	effff0ef          	jal	ra,1c012dcc <__rt_bridge_wait>
1c012ed2:	b7e5                	j	1c012eba <__rt_bridge_check_connection+0x30>
1c012ed4:	8082                	ret

1c012ed6 <__rt_bridge_set_available>:
1c012ed6:	1c0177b7          	lui	a5,0x1c017
1c012eda:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
1c012ede:	4798                	lw	a4,8(a5)
1c012ee0:	1a1047b7          	lui	a5,0x1a104
1c012ee4:	07478793          	addi	a5,a5,116 # 1a104074 <__l1_end+0xa104010>
1c012ee8:	e701                	bnez	a4,1c012ef0 <__rt_bridge_set_available+0x1a>
1c012eea:	4721                	li	a4,8
1c012eec:	c398                	sw	a4,0(a5)
1c012eee:	8082                	ret
1c012ef0:	4709                	li	a4,2
1c012ef2:	bfed                	j	1c012eec <__rt_bridge_set_available+0x16>

1c012ef4 <__rt_bridge_send_notif>:
1c012ef4:	1141                	addi	sp,sp,-16
1c012ef6:	c606                	sw	ra,12(sp)
1c012ef8:	f93ff0ef          	jal	ra,1c012e8a <__rt_bridge_check_connection>
1c012efc:	1c0177b7          	lui	a5,0x1c017
1c012f00:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
1c012f04:	479c                	lw	a5,8(a5)
1c012f06:	c789                	beqz	a5,1c012f10 <__rt_bridge_send_notif+0x1c>
1c012f08:	1a1047b7          	lui	a5,0x1a104
1c012f0c:	4719                	li	a4,6
1c012f0e:	dbf8                	sw	a4,116(a5)
1c012f10:	40b2                	lw	ra,12(sp)
1c012f12:	0141                	addi	sp,sp,16
1c012f14:	8082                	ret

1c012f16 <__rt_bridge_clear_notif>:
  #endif
  }
}

void __rt_bridge_clear_notif()
{
1c012f16:	1141                	addi	sp,sp,-16
1c012f18:	c606                	sw	ra,12(sp)
  hal_debug_struct_t *debug_struct = hal_debug_struct_get();

  __rt_bridge_check_connection();
1c012f1a:	f71ff0ef          	jal	ra,1c012e8a <__rt_bridge_check_connection>

  if (debug_struct->bridge.connected)
1c012f1e:	1c0177b7          	lui	a5,0x1c017
1c012f22:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
1c012f26:	479c                	lw	a5,8(a5)
1c012f28:	c789                	beqz	a5,1c012f32 <__rt_bridge_clear_notif+0x1c>
  {
    __rt_bridge_set_available();
  }
}
1c012f2a:	40b2                	lw	ra,12(sp)
1c012f2c:	0141                	addi	sp,sp,16
    __rt_bridge_set_available();
1c012f2e:	fa9ff06f          	j	1c012ed6 <__rt_bridge_set_available>
}
1c012f32:	40b2                	lw	ra,12(sp)
1c012f34:	0141                	addi	sp,sp,16
1c012f36:	8082                	ret

1c012f38 <__rt_bridge_printf_flush>:
{
1c012f38:	1141                	addi	sp,sp,-16
1c012f3a:	c422                	sw	s0,8(sp)
1c012f3c:	c606                	sw	ra,12(sp)
  if (debug_struct->bridge.connected)
1c012f3e:	1c017437          	lui	s0,0x1c017
  __rt_bridge_check_connection();
1c012f42:	f49ff0ef          	jal	ra,1c012e8a <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c012f46:	64c40793          	addi	a5,s0,1612 # 1c01764c <__hal_debug_struct>
1c012f4a:	479c                	lw	a5,8(a5)
1c012f4c:	c39d                	beqz	a5,1c012f72 <__rt_bridge_printf_flush+0x3a>
1c012f4e:	64c40413          	addi	s0,s0,1612
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
}

static inline int hal_debug_is_busy(hal_debug_struct_t *debug_struct)
{
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c012f52:	485c                	lw	a5,20(s0)
    if (hal_debug_is_busy(hal_debug_struct_get()) || !hal_debug_is_empty(hal_debug_struct_get()))
1c012f54:	e399                	bnez	a5,1c012f5a <__rt_bridge_printf_flush+0x22>
  return *(volatile uint32_t *)&debug_struct->putc_current == 0;
1c012f56:	4c1c                	lw	a5,24(s0)
1c012f58:	cf89                	beqz	a5,1c012f72 <__rt_bridge_printf_flush+0x3a>
      __rt_bridge_send_notif();
1c012f5a:	f9bff0ef          	jal	ra,1c012ef4 <__rt_bridge_send_notif>
  return *(volatile uint32_t *)&debug_struct->pending_putchar;
1c012f5e:	485c                	lw	a5,20(s0)
      while(hal_debug_is_busy(hal_debug_struct_get()))
1c012f60:	e791                	bnez	a5,1c012f6c <__rt_bridge_printf_flush+0x34>
}
1c012f62:	4422                	lw	s0,8(sp)
1c012f64:	40b2                	lw	ra,12(sp)
1c012f66:	0141                	addi	sp,sp,16
      __rt_bridge_clear_notif();
1c012f68:	fafff06f          	j	1c012f16 <__rt_bridge_clear_notif>
        __rt_bridge_wait();
1c012f6c:	e61ff0ef          	jal	ra,1c012dcc <__rt_bridge_wait>
1c012f70:	b7fd                	j	1c012f5e <__rt_bridge_printf_flush+0x26>
}
1c012f72:	40b2                	lw	ra,12(sp)
1c012f74:	4422                	lw	s0,8(sp)
1c012f76:	0141                	addi	sp,sp,16
1c012f78:	8082                	ret

1c012f7a <__rt_bridge_req_shutdown>:
{
1c012f7a:	1141                	addi	sp,sp,-16
1c012f7c:	c606                	sw	ra,12(sp)
1c012f7e:	c422                	sw	s0,8(sp)
  __rt_bridge_check_connection();
1c012f80:	f0bff0ef          	jal	ra,1c012e8a <__rt_bridge_check_connection>
  if (debug_struct->bridge.connected)
1c012f84:	1c0177b7          	lui	a5,0x1c017
1c012f88:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
1c012f8c:	479c                	lw	a5,8(a5)
1c012f8e:	c7a9                	beqz	a5,1c012fd8 <__rt_bridge_req_shutdown+0x5e>




static inline unsigned int apb_soc_jtag_reg_read() {
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c012f90:	1a104437          	lui	s0,0x1a104
    __rt_bridge_printf_flush();
1c012f94:	fa5ff0ef          	jal	ra,1c012f38 <__rt_bridge_printf_flush>
1c012f98:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104010>
1c012f9c:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c012f9e:	83a5                	srli	a5,a5,0x9
1c012fa0:	f837b7b3          	p.bclr	a5,a5,28,3
1c012fa4:	0277ae63          	p.beqimm	a5,7,1c012fe0 <__rt_bridge_req_shutdown+0x66>
}

static inline void apb_soc_jtag_reg_write(unsigned int value) {
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c012fa8:	4791                	li	a5,4
1c012faa:	c01c                	sw	a5,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c012fac:	1a104437          	lui	s0,0x1a104
1c012fb0:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104010>
1c012fb4:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) != 7)
1c012fb6:	83a5                	srli	a5,a5,0x9
1c012fb8:	f837b7b3          	p.bclr	a5,a5,28,3
1c012fbc:	0277b563          	p.bneimm	a5,7,1c012fe6 <__rt_bridge_req_shutdown+0x6c>
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET, value);
1c012fc0:	00042023          	sw	zero,0(s0)
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_JTAGREG_OFFSET);
1c012fc4:	1a104437          	lui	s0,0x1a104
1c012fc8:	07440413          	addi	s0,s0,116 # 1a104074 <__l1_end+0xa104010>
1c012fcc:	401c                	lw	a5,0(s0)
    while((apb_soc_jtag_reg_ext(apb_soc_jtag_reg_read()) >> 1) == 7)
1c012fce:	83a5                	srli	a5,a5,0x9
1c012fd0:	f837b7b3          	p.bclr	a5,a5,28,3
1c012fd4:	0077ac63          	p.beqimm	a5,7,1c012fec <__rt_bridge_req_shutdown+0x72>
}
1c012fd8:	40b2                	lw	ra,12(sp)
1c012fda:	4422                	lw	s0,8(sp)
1c012fdc:	0141                	addi	sp,sp,16
1c012fde:	8082                	ret
      __rt_bridge_wait();
1c012fe0:	dedff0ef          	jal	ra,1c012dcc <__rt_bridge_wait>
1c012fe4:	bf65                	j	1c012f9c <__rt_bridge_req_shutdown+0x22>
      __rt_bridge_wait();
1c012fe6:	de7ff0ef          	jal	ra,1c012dcc <__rt_bridge_wait>
1c012fea:	b7e9                	j	1c012fb4 <__rt_bridge_req_shutdown+0x3a>
      __rt_bridge_wait();
1c012fec:	de1ff0ef          	jal	ra,1c012dcc <__rt_bridge_wait>
1c012ff0:	bff1                	j	1c012fcc <__rt_bridge_req_shutdown+0x52>

1c012ff2 <__rt_bridge_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_bridge_init()
{
  hal_bridge_t *bridge = hal_bridge_get();
  
  bridge->first_req = 0;
1c012ff2:	1c0177b7          	lui	a5,0x1c017
  bridge->notif_req_addr = ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET;
  bridge->notif_req_value = 1<<RT_BRIDGE_ENQUEUE_EVENT;
#else
#if defined(EU_VERSION) && EU_VERSION >= 3
#if defined(ARCHI_HAS_FC)
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c012ff6:	1b201737          	lui	a4,0x1b201
  bridge->first_req = 0;
1c012ffa:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
  bridge->notif_req_addr = ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_BRIDGE_ENQUEUE_EVENT << 2);
1c012ffe:	e1070713          	addi	a4,a4,-496 # 1b200e10 <__fc_tcdm_end+0x1ffdf0>
1c013002:	0ae7ac23          	sw	a4,184(a5)
  bridge->notif_req_value = 1;
1c013006:	4705                	li	a4,1
  bridge->first_req = 0;
1c013008:	0a07a223          	sw	zero,164(a5)
  bridge->first_bridge_req = 0;
1c01300c:	0a07a623          	sw	zero,172(a5)
  bridge->target_req = 0;
1c013010:	0a07aa23          	sw	zero,180(a5)
  bridge->notif_req_value = 1;
1c013014:	0ae7ae23          	sw	a4,188(a5)
#endif
#endif
#endif

  __rt_bridge_eeprom_handle = NULL;
1c013018:	00400793          	li	a5,4
1c01301c:	0007a823          	sw	zero,16(a5)
  __rt_bridge_flash_handle = NULL;
1c013020:	0007a023          	sw	zero,0(a5)
}
1c013024:	8082                	ret

1c013026 <__rt_event_init>:
{
  __rt_event_execute(sched, 0);
  rt_wait_for_interrupt();
  rt_irq_enable();
  rt_irq_disable();
}
1c013026:	1141                	addi	sp,sp,-16
1c013028:	c422                	sw	s0,8(sp)
1c01302a:	c606                	sw	ra,12(sp)
1c01302c:	842a                	mv	s0,a0
1c01302e:	02052223          	sw	zero,36(a0)
1c013032:	02052423          	sw	zero,40(a0)
1c013036:	45c1                	li	a1,16
1c013038:	4501                	li	a0,0
1c01303a:	2cbd                	jal	1c0132b8 <rt_alloc>
1c01303c:	dc68                	sw	a0,124(s0)
1c01303e:	02042a23          	sw	zero,52(s0)
1c013042:	00042223          	sw	zero,4(s0)
1c013046:	40b2                	lw	ra,12(sp)
1c013048:	4422                	lw	s0,8(sp)
1c01304a:	0141                	addi	sp,sp,16
1c01304c:	8082                	ret

1c01304e <__rt_wait_event_prepare_blocking>:
1c01304e:	01800793          	li	a5,24
1c013052:	4388                	lw	a0,0(a5)
1c013054:	4118                	lw	a4,0(a0)
1c013056:	02052423          	sw	zero,40(a0)
1c01305a:	00052223          	sw	zero,4(a0)
1c01305e:	c398                	sw	a4,0(a5)
1c013060:	4785                	li	a5,1
1c013062:	d15c                	sw	a5,36(a0)
1c013064:	8082                	ret

1c013066 <rt_event_alloc>:
1c013066:	1101                	addi	sp,sp,-32
1c013068:	c64e                	sw	s3,12(sp)
1c01306a:	89ae                	mv	s3,a1
1c01306c:	ce06                	sw	ra,28(sp)
1c01306e:	cc22                	sw	s0,24(sp)
1c013070:	ca26                	sw	s1,20(sp)
1c013072:	c84a                	sw	s2,16(sp)
1c013074:	c452                	sw	s4,8(sp)
1c013076:	c256                	sw	s5,4(sp)
1c013078:	30047a73          	csrrci	s4,mstatus,8
1c01307c:	014027f3          	csrr	a5,uhartid
1c013080:	8795                	srai	a5,a5,0x5
1c013082:	f267b7b3          	p.bclr	a5,a5,25,6
1c013086:	02000713          	li	a4,32
1c01308a:	00278513          	addi	a0,a5,2
1c01308e:	00e79363          	bne	a5,a4,1c013094 <rt_event_alloc+0x2e>
1c013092:	4505                	li	a0,1
1c013094:	00799593          	slli	a1,s3,0x7
1c013098:	2405                	jal	1c0132b8 <rt_alloc>
1c01309a:	842a                	mv	s0,a0
1c01309c:	557d                	li	a0,-1
1c01309e:	c819                	beqz	s0,1c0130b4 <rt_event_alloc+0x4e>
1c0130a0:	01800493          	li	s1,24
1c0130a4:	4901                	li	s2,0
1c0130a6:	00448a93          	addi	s5,s1,4
1c0130aa:	01394e63          	blt	s2,s3,1c0130c6 <rt_event_alloc+0x60>
1c0130ae:	300a1073          	csrw	mstatus,s4
1c0130b2:	4501                	li	a0,0
1c0130b4:	40f2                	lw	ra,28(sp)
1c0130b6:	4462                	lw	s0,24(sp)
1c0130b8:	44d2                	lw	s1,20(sp)
1c0130ba:	4942                	lw	s2,16(sp)
1c0130bc:	49b2                	lw	s3,12(sp)
1c0130be:	4a22                	lw	s4,8(sp)
1c0130c0:	4a92                	lw	s5,4(sp)
1c0130c2:	6105                	addi	sp,sp,32
1c0130c4:	8082                	ret
1c0130c6:	8522                	mv	a0,s0
1c0130c8:	85d6                	mv	a1,s5
1c0130ca:	f5dff0ef          	jal	ra,1c013026 <__rt_event_init>
1c0130ce:	409c                	lw	a5,0(s1)
1c0130d0:	0905                	addi	s2,s2,1
1c0130d2:	c01c                	sw	a5,0(s0)
1c0130d4:	c080                	sw	s0,0(s1)
1c0130d6:	08040413          	addi	s0,s0,128
1c0130da:	bfc1                	j	1c0130aa <rt_event_alloc+0x44>

1c0130dc <rt_event_get>:
1c0130dc:	30047773          	csrrci	a4,mstatus,8
1c0130e0:	01800793          	li	a5,24
1c0130e4:	4388                	lw	a0,0(a5)
1c0130e6:	c509                	beqz	a0,1c0130f0 <rt_event_get+0x14>
1c0130e8:	4114                	lw	a3,0(a0)
1c0130ea:	c14c                	sw	a1,4(a0)
1c0130ec:	c510                	sw	a2,8(a0)
1c0130ee:	c394                	sw	a3,0(a5)
1c0130f0:	30071073          	csrw	mstatus,a4
1c0130f4:	8082                	ret

1c0130f6 <rt_event_get_blocking>:
1c0130f6:	30047773          	csrrci	a4,mstatus,8
1c0130fa:	01800793          	li	a5,24
1c0130fe:	4388                	lw	a0,0(a5)
1c013100:	c909                	beqz	a0,1c013112 <rt_event_get_blocking+0x1c>
1c013102:	4114                	lw	a3,0(a0)
1c013104:	00052223          	sw	zero,4(a0)
1c013108:	00052423          	sw	zero,8(a0)
1c01310c:	c394                	sw	a3,0(a5)
1c01310e:	4785                	li	a5,1
1c013110:	d15c                	sw	a5,36(a0)
1c013112:	30071073          	csrw	mstatus,a4
1c013116:	8082                	ret

1c013118 <rt_event_push>:
1c013118:	30047773          	csrrci	a4,mstatus,8
1c01311c:	01800693          	li	a3,24
1c013120:	42d4                	lw	a3,4(a3)
1c013122:	00052023          	sw	zero,0(a0)
1c013126:	01800793          	li	a5,24
1c01312a:	e691                	bnez	a3,1c013136 <rt_event_push+0x1e>
1c01312c:	c3c8                	sw	a0,4(a5)
1c01312e:	c788                	sw	a0,8(a5)
1c013130:	30071073          	csrw	mstatus,a4
1c013134:	8082                	ret
1c013136:	4794                	lw	a3,8(a5)
1c013138:	c288                	sw	a0,0(a3)
1c01313a:	bfd5                	j	1c01312e <rt_event_push+0x16>

1c01313c <__rt_event_execute>:
1c01313c:	1141                	addi	sp,sp,-16
1c01313e:	c422                	sw	s0,8(sp)
1c013140:	01800793          	li	a5,24
1c013144:	43dc                	lw	a5,4(a5)
1c013146:	c606                	sw	ra,12(sp)
1c013148:	c226                	sw	s1,4(sp)
1c01314a:	01800413          	li	s0,24
1c01314e:	ef81                	bnez	a5,1c013166 <__rt_event_execute+0x2a>
1c013150:	c1b9                	beqz	a1,1c013196 <__rt_event_execute+0x5a>
1c013152:	002047b7          	lui	a5,0x204
1c013156:	0387e703          	p.elw	a4,56(a5) # 204038 <__L2+0x184038>
1c01315a:	300467f3          	csrrsi	a5,mstatus,8
1c01315e:	300477f3          	csrrci	a5,mstatus,8
1c013162:	405c                	lw	a5,4(s0)
1c013164:	cb8d                	beqz	a5,1c013196 <__rt_event_execute+0x5a>
1c013166:	4485                	li	s1,1
1c013168:	4398                	lw	a4,0(a5)
1c01316a:	5794                	lw	a3,40(a5)
1c01316c:	00978a23          	sb	s1,20(a5)
1c013170:	c058                	sw	a4,4(s0)
1c013172:	4788                	lw	a0,8(a5)
1c013174:	43d8                	lw	a4,4(a5)
1c013176:	e691                	bnez	a3,1c013182 <__rt_event_execute+0x46>
1c013178:	53d4                	lw	a3,36(a5)
1c01317a:	e681                	bnez	a3,1c013182 <__rt_event_execute+0x46>
1c01317c:	4014                	lw	a3,0(s0)
1c01317e:	c394                	sw	a3,0(a5)
1c013180:	c01c                	sw	a5,0(s0)
1c013182:	0207a223          	sw	zero,36(a5)
1c013186:	c711                	beqz	a4,1c013192 <__rt_event_execute+0x56>
1c013188:	300467f3          	csrrsi	a5,mstatus,8
1c01318c:	9702                	jalr	a4
1c01318e:	300477f3          	csrrci	a5,mstatus,8
1c013192:	405c                	lw	a5,4(s0)
1c013194:	fbf1                	bnez	a5,1c013168 <__rt_event_execute+0x2c>
1c013196:	40b2                	lw	ra,12(sp)
1c013198:	4422                	lw	s0,8(sp)
1c01319a:	4492                	lw	s1,4(sp)
1c01319c:	0141                	addi	sp,sp,16
1c01319e:	8082                	ret

1c0131a0 <__rt_wait_event>:
  } while(event);

}

void __rt_wait_event(rt_event_t *event)
{
1c0131a0:	1141                	addi	sp,sp,-16
1c0131a2:	c422                	sw	s0,8(sp)
1c0131a4:	c606                	sw	ra,12(sp)
1c0131a6:	842a                	mv	s0,a0
  while (event->implem.pending || event->implem.saved_pending) {
1c0131a8:	505c                	lw	a5,36(s0)
1c0131aa:	ef81                	bnez	a5,1c0131c2 <__rt_wait_event+0x22>
1c0131ac:	585c                	lw	a5,52(s0)
1c0131ae:	eb91                	bnez	a5,1c0131c2 <__rt_wait_event+0x22>
    __rt_event_execute(NULL, 1);
  }

  event->next = __rt_first_free;
1c0131b0:	01800793          	li	a5,24
1c0131b4:	4398                	lw	a4,0(a5)
  __rt_first_free = event;
}
1c0131b6:	40b2                	lw	ra,12(sp)
  event->next = __rt_first_free;
1c0131b8:	c018                	sw	a4,0(s0)
  __rt_first_free = event;
1c0131ba:	c380                	sw	s0,0(a5)
}
1c0131bc:	4422                	lw	s0,8(sp)
1c0131be:	0141                	addi	sp,sp,16
1c0131c0:	8082                	ret
    __rt_event_execute(NULL, 1);
1c0131c2:	4585                	li	a1,1
1c0131c4:	4501                	li	a0,0
1c0131c6:	f77ff0ef          	jal	ra,1c01313c <__rt_event_execute>
1c0131ca:	bff9                	j	1c0131a8 <__rt_wait_event+0x8>

1c0131cc <rt_event_wait>:

void rt_event_wait(rt_event_t *event)
{
1c0131cc:	1141                	addi	sp,sp,-16
1c0131ce:	c606                	sw	ra,12(sp)
1c0131d0:	c422                	sw	s0,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0131d2:	30047473          	csrrci	s0,mstatus,8
  int irq = rt_irq_disable();
__rt_wait_event(event);
1c0131d6:	fcbff0ef          	jal	ra,1c0131a0 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c0131da:	30041073          	csrw	mstatus,s0
  rt_irq_restore(irq);
}
1c0131de:	40b2                	lw	ra,12(sp)
1c0131e0:	4422                	lw	s0,8(sp)
1c0131e2:	0141                	addi	sp,sp,16
1c0131e4:	8082                	ret

1c0131e6 <__rt_event_sched_init>:

void __rt_event_sched_init()
{
  __rt_first_free = NULL;
1c0131e6:	01800513          	li	a0,24
1c0131ea:	00052023          	sw	zero,0(a0)
  sched->first = NULL;
1c0131ee:	00052223          	sw	zero,4(a0)
  rt_event_sched_init(&__rt_sched);
  // Push one event ot the runtime scheduler as some runtime services need
  // one event.
  rt_event_alloc(&__rt_sched, 1);
1c0131f2:	4585                	li	a1,1
1c0131f4:	0511                	addi	a0,a0,4
1c0131f6:	e71ff06f          	j	1c013066 <rt_event_alloc>

1c0131fa <pi_task_push_delayed_us>:
}

void pi_task_push_delayed_us(pi_task_t *task, uint32_t delay)
{
  rt_event_push_delayed(task, delay);
1c0131fa:	ac35                	j	1c013436 <rt_event_push_delayed>

1c0131fc <pi_cl_send_task_to_fc>:
}

static inline void __rt_task_init_from_cluster(pi_task_t *task)
{
  task->implem.keep = 1;
1c0131fc:	4785                	li	a5,1
1c0131fe:	d51c                	sw	a5,40(a0)
#ifdef ARCHI_HAS_CLUSTER

void pi_cl_send_task_to_fc(pi_task_t *task)
{
  __rt_task_init_from_cluster(task);
  __rt_cluster_push_fc_event(task);
1c013200:	60f0006f          	j	1c01400e <__rt_cluster_push_fc_event>

1c013204 <rt_user_alloc_init>:
  rt_alloc_cluster(RT_ALLOC_PERIPH, size, (rt_alloc_req_t *)req);
}

void pi_cl_l2_free(void *chunk, int size, pi_cl_free_req_t *req)
{
  rt_free_cluster(RT_ALLOC_PERIPH, chunk, size, (rt_free_req_t *)req);
1c013204:	00758793          	addi	a5,a1,7
1c013208:	c407b7b3          	p.bclr	a5,a5,2,0
1c01320c:	40b785b3          	sub	a1,a5,a1
1c013210:	c11c                	sw	a5,0(a0)
1c013212:	8e0d                	sub	a2,a2,a1
1c013214:	00c05763          	blez	a2,1c013222 <rt_user_alloc_init+0x1e>
1c013218:	c4063633          	p.bclr	a2,a2,2,0
1c01321c:	c390                	sw	a2,0(a5)
1c01321e:	0007a223          	sw	zero,4(a5)
1c013222:	8082                	ret

1c013224 <rt_user_alloc>:
1c013224:	411c                	lw	a5,0(a0)
1c013226:	059d                	addi	a1,a1,7
1c013228:	c405b5b3          	p.bclr	a1,a1,2,0
1c01322c:	4701                	li	a4,0
1c01322e:	cb89                	beqz	a5,1c013240 <rt_user_alloc+0x1c>
1c013230:	4394                	lw	a3,0(a5)
1c013232:	43d0                	lw	a2,4(a5)
1c013234:	00b6c863          	blt	a3,a1,1c013244 <rt_user_alloc+0x20>
1c013238:	00b69b63          	bne	a3,a1,1c01324e <rt_user_alloc+0x2a>
1c01323c:	c719                	beqz	a4,1c01324a <rt_user_alloc+0x26>
1c01323e:	c350                	sw	a2,4(a4)
1c013240:	853e                	mv	a0,a5
1c013242:	8082                	ret
1c013244:	873e                	mv	a4,a5
1c013246:	87b2                	mv	a5,a2
1c013248:	b7dd                	j	1c01322e <rt_user_alloc+0xa>
1c01324a:	c110                	sw	a2,0(a0)
1c01324c:	bfd5                	j	1c013240 <rt_user_alloc+0x1c>
1c01324e:	00b78833          	add	a6,a5,a1
1c013252:	40b685b3          	sub	a1,a3,a1
1c013256:	00b82023          	sw	a1,0(a6)
1c01325a:	00c82223          	sw	a2,4(a6)
1c01325e:	c701                	beqz	a4,1c013266 <rt_user_alloc+0x42>
1c013260:	01072223          	sw	a6,4(a4)
1c013264:	bff1                	j	1c013240 <rt_user_alloc+0x1c>
1c013266:	01052023          	sw	a6,0(a0)
1c01326a:	bfd9                	j	1c013240 <rt_user_alloc+0x1c>

1c01326c <rt_user_free>:
1c01326c:	411c                	lw	a5,0(a0)
1c01326e:	061d                	addi	a2,a2,7
1c013270:	c4063633          	p.bclr	a2,a2,2,0
1c013274:	4701                	li	a4,0
1c013276:	c399                	beqz	a5,1c01327c <rt_user_free+0x10>
1c013278:	02b7e763          	bltu	a5,a1,1c0132a6 <rt_user_free+0x3a>
1c01327c:	00c586b3          	add	a3,a1,a2
1c013280:	02d79663          	bne	a5,a3,1c0132ac <rt_user_free+0x40>
1c013284:	4394                	lw	a3,0(a5)
1c013286:	43dc                	lw	a5,4(a5)
1c013288:	9636                	add	a2,a2,a3
1c01328a:	c190                	sw	a2,0(a1)
1c01328c:	c1dc                	sw	a5,4(a1)
1c01328e:	c31d                	beqz	a4,1c0132b4 <rt_user_free+0x48>
1c013290:	4314                	lw	a3,0(a4)
1c013292:	00d707b3          	add	a5,a4,a3
1c013296:	00f59d63          	bne	a1,a5,1c0132b0 <rt_user_free+0x44>
1c01329a:	419c                	lw	a5,0(a1)
1c01329c:	97b6                	add	a5,a5,a3
1c01329e:	c31c                	sw	a5,0(a4)
1c0132a0:	41dc                	lw	a5,4(a1)
1c0132a2:	c35c                	sw	a5,4(a4)
1c0132a4:	8082                	ret
1c0132a6:	873e                	mv	a4,a5
1c0132a8:	43dc                	lw	a5,4(a5)
1c0132aa:	b7f1                	j	1c013276 <rt_user_free+0xa>
1c0132ac:	c190                	sw	a2,0(a1)
1c0132ae:	bff9                	j	1c01328c <rt_user_free+0x20>
1c0132b0:	c34c                	sw	a1,4(a4)
1c0132b2:	8082                	ret
1c0132b4:	c10c                	sw	a1,0(a0)
1c0132b6:	8082                	ret

1c0132b8 <rt_alloc>:
1c0132b8:	4785                	li	a5,1
1c0132ba:	00a7fb63          	bleu	a0,a5,1c0132d0 <rt_alloc+0x18>
1c0132be:	1c0187b7          	lui	a5,0x1c018
1c0132c2:	b747a783          	lw	a5,-1164(a5) # 1c017b74 <__rt_alloc_l1>
1c0132c6:	1579                	addi	a0,a0,-2
1c0132c8:	050a                	slli	a0,a0,0x2
1c0132ca:	953e                	add	a0,a0,a5
1c0132cc:	f59ff06f          	j	1c013224 <rt_user_alloc>
1c0132d0:	00153763          	p.bneimm	a0,1,1c0132de <rt_alloc+0x26>
1c0132d4:	1c018537          	lui	a0,0x1c018
1c0132d8:	b7c50513          	addi	a0,a0,-1156 # 1c017b7c <__rt_alloc_fc_tcdm>
1c0132dc:	bfc5                	j	1c0132cc <rt_alloc+0x14>
1c0132de:	1c018537          	lui	a0,0x1c018
1c0132e2:	b7850513          	addi	a0,a0,-1160 # 1c017b78 <__rt_alloc_l2>
1c0132e6:	b7dd                	j	1c0132cc <rt_alloc+0x14>

1c0132e8 <rt_free>:
1c0132e8:	4785                	li	a5,1
1c0132ea:	00a7fb63          	bleu	a0,a5,1c013300 <rt_free+0x18>
1c0132ee:	1c0187b7          	lui	a5,0x1c018
1c0132f2:	b747a783          	lw	a5,-1164(a5) # 1c017b74 <__rt_alloc_l1>
1c0132f6:	1579                	addi	a0,a0,-2
1c0132f8:	050a                	slli	a0,a0,0x2
1c0132fa:	953e                	add	a0,a0,a5
1c0132fc:	f71ff06f          	j	1c01326c <rt_user_free>
1c013300:	c511                	beqz	a0,1c01330c <rt_free+0x24>
1c013302:	1c018537          	lui	a0,0x1c018
1c013306:	b7c50513          	addi	a0,a0,-1156 # 1c017b7c <__rt_alloc_fc_tcdm>
1c01330a:	bfcd                	j	1c0132fc <rt_free+0x14>
1c01330c:	1c018537          	lui	a0,0x1c018
1c013310:	b7850513          	addi	a0,a0,-1160 # 1c017b78 <__rt_alloc_l2>
1c013314:	b7e5                	j	1c0132fc <rt_free+0x14>

1c013316 <__rt_alloc_init_l1>:
1c013316:	1c0187b7          	lui	a5,0x1c018
1c01331a:	b747a703          	lw	a4,-1164(a5) # 1c017b74 <__rt_alloc_l1>
1c01331e:	100007b7          	lui	a5,0x10000
1c013322:	01651593          	slli	a1,a0,0x16
1c013326:	6641                	lui	a2,0x10
1c013328:	050a                	slli	a0,a0,0x2
1c01332a:	06478793          	addi	a5,a5,100 # 10000064 <__l1_end>
1c01332e:	f9c60613          	addi	a2,a2,-100 # ff9c <__l1_heap_size>
1c013332:	95be                	add	a1,a1,a5
1c013334:	953a                	add	a0,a0,a4
1c013336:	ecfff06f          	j	1c013204 <rt_user_alloc_init>

1c01333a <__rt_alloc_init_l1_for_fc>:
1c01333a:	100005b7          	lui	a1,0x10000
1c01333e:	01651793          	slli	a5,a0,0x16
1c013342:	06458593          	addi	a1,a1,100 # 10000064 <__l1_end>
1c013346:	00b78733          	add	a4,a5,a1
1c01334a:	050a                	slli	a0,a0,0x2
1c01334c:	0791                	addi	a5,a5,4
1c01334e:	6641                	lui	a2,0x10
1c013350:	1c0186b7          	lui	a3,0x1c018
1c013354:	f9860613          	addi	a2,a2,-104 # ff98 <__rt_stack_size+0xf798>
1c013358:	95be                	add	a1,a1,a5
1c01335a:	953a                	add	a0,a0,a4
1c01335c:	b6e6aa23          	sw	a4,-1164(a3) # 1c017b74 <__rt_alloc_l1>
1c013360:	ea5ff06f          	j	1c013204 <rt_user_alloc_init>

1c013364 <__rt_allocs_init>:
1c013364:	1c0185b7          	lui	a1,0x1c018
1c013368:	c1c58793          	addi	a5,a1,-996 # 1c017c1c <__l2_end>
1c01336c:	1c080637          	lui	a2,0x1c080
1c013370:	1c018537          	lui	a0,0x1c018
1c013374:	1141                	addi	sp,sp,-16
1c013376:	8e1d                	sub	a2,a2,a5
1c013378:	c1c58593          	addi	a1,a1,-996
1c01337c:	b7850513          	addi	a0,a0,-1160 # 1c017b78 <__rt_alloc_l2>
1c013380:	c606                	sw	ra,12(sp)
1c013382:	c422                	sw	s0,8(sp)
1c013384:	e81ff0ef          	jal	ra,1c013204 <rt_user_alloc_init>
1c013388:	1b0015b7          	lui	a1,0x1b001
1c01338c:	02058793          	addi	a5,a1,32 # 1b001020 <__fc_tcdm_end>
1c013390:	1b004637          	lui	a2,0x1b004
1c013394:	1c018437          	lui	s0,0x1c018
1c013398:	8e1d                	sub	a2,a2,a5
1c01339a:	02058593          	addi	a1,a1,32
1c01339e:	b7c40513          	addi	a0,s0,-1156 # 1c017b7c <__rt_alloc_fc_tcdm>
1c0133a2:	e63ff0ef          	jal	ra,1c013204 <rt_user_alloc_init>
1c0133a6:	014027f3          	csrr	a5,uhartid
1c0133aa:	ca5797b3          	p.extractu	a5,a5,5,5
1c0133ae:	e799                	bnez	a5,1c0133bc <__rt_allocs_init+0x58>
1c0133b0:	4422                	lw	s0,8(sp)
1c0133b2:	40b2                	lw	ra,12(sp)
1c0133b4:	4501                	li	a0,0
1c0133b6:	0141                	addi	sp,sp,16
1c0133b8:	f83ff06f          	j	1c01333a <__rt_alloc_init_l1_for_fc>
1c0133bc:	b7c40513          	addi	a0,s0,-1156
1c0133c0:	4591                	li	a1,4
1c0133c2:	e63ff0ef          	jal	ra,1c013224 <rt_user_alloc>
1c0133c6:	40b2                	lw	ra,12(sp)
1c0133c8:	4422                	lw	s0,8(sp)
1c0133ca:	1c0187b7          	lui	a5,0x1c018
1c0133ce:	b6a7aa23          	sw	a0,-1164(a5) # 1c017b74 <__rt_alloc_l1>
1c0133d2:	0141                	addi	sp,sp,16
1c0133d4:	8082                	ret

1c0133d6 <pi_cl_l1_malloc>:
}

void *pi_cl_l1_malloc(struct pi_device *device, uint32_t size)
{
  return rt_alloc(RT_ALLOC_CL_DATA, size);
1c0133d6:	4509                	li	a0,2
1c0133d8:	ee1ff06f          	j	1c0132b8 <rt_alloc>

1c0133dc <pi_cl_l1_free>:
  if (flags >= RT_ALLOC_CL_DATA) return rt_user_free(rt_alloc_l1(flags - RT_ALLOC_CL_DATA), _chunk, size);
1c0133dc:	1c0187b7          	lui	a5,0x1c018
1c0133e0:	b747a503          	lw	a0,-1164(a5) # 1c017b74 <__rt_alloc_l1>
1c0133e4:	e89ff06f          	j	1c01326c <rt_user_free>

1c0133e8 <pi_l2_malloc>:
    return rt_user_alloc(rt_alloc_l2(), size);
1c0133e8:	85aa                	mv	a1,a0
1c0133ea:	1c018537          	lui	a0,0x1c018
1c0133ee:	b7850513          	addi	a0,a0,-1160 # 1c017b78 <__rt_alloc_l2>
1c0133f2:	e33ff06f          	j	1c013224 <rt_user_alloc>

1c0133f6 <pi_l2_free>:
    rt_user_free(rt_alloc_l2(), _chunk, size);
1c0133f6:	862e                	mv	a2,a1
1c0133f8:	85aa                	mv	a1,a0
1c0133fa:	1c018537          	lui	a0,0x1c018
1c0133fe:	b7850513          	addi	a0,a0,-1160 # 1c017b78 <__rt_alloc_l2>
1c013402:	e6bff06f          	j	1c01326c <rt_user_free>

1c013406 <__rt_time_poweroff>:
  rt_event_wait(event);
}

void pi_time_wait_us(int time_us)
{
  rt_time_wait_us(time_us);
1c013406:	002007b7          	lui	a5,0x200
1c01340a:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c01340e:	0087a783          	lw	a5,8(a5)
1c013412:	1c018737          	lui	a4,0x1c018
1c013416:	aef72c23          	sw	a5,-1288(a4) # 1c017af8 <timer_count>
1c01341a:	4501                	li	a0,0
1c01341c:	8082                	ret

1c01341e <__rt_time_poweron>:
1c01341e:	1c0187b7          	lui	a5,0x1c018
1c013422:	af87a703          	lw	a4,-1288(a5) # 1c017af8 <timer_count>
1c013426:	002007b7          	lui	a5,0x200
1c01342a:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c01342e:	00e7a423          	sw	a4,8(a5)
1c013432:	4501                	li	a0,0
1c013434:	8082                	ret

1c013436 <rt_event_push_delayed>:
1c013436:	30047373          	csrrci	t1,mstatus,8
1c01343a:	1c018637          	lui	a2,0x1c018
1c01343e:	b8062703          	lw	a4,-1152(a2) # 1c017b80 <first_delayed>
1c013442:	002007b7          	lui	a5,0x200
1c013446:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c01344a:	0087a783          	lw	a5,8(a5)
1c01344e:	46f9                	li	a3,30
1c013450:	0405e5b3          	p.max	a1,a1,zero
1c013454:	02d5c5b3          	div	a1,a1,a3
1c013458:	800006b7          	lui	a3,0x80000
1c01345c:	fff6c693          	not	a3,a3
1c013460:	00d7f833          	and	a6,a5,a3
1c013464:	0585                	addi	a1,a1,1
1c013466:	97ae                	add	a5,a5,a1
1c013468:	dd1c                	sw	a5,56(a0)
1c01346a:	982e                	add	a6,a6,a1
1c01346c:	4781                	li	a5,0
1c01346e:	c719                	beqz	a4,1c01347c <rt_event_push_delayed+0x46>
1c013470:	03872883          	lw	a7,56(a4)
1c013474:	00d8f8b3          	and	a7,a7,a3
1c013478:	0108e863          	bltu	a7,a6,1c013488 <rt_event_push_delayed+0x52>
1c01347c:	cb89                	beqz	a5,1c01348e <rt_event_push_delayed+0x58>
1c01347e:	cfc8                	sw	a0,28(a5)
1c013480:	cd58                	sw	a4,28(a0)
1c013482:	30031073          	csrw	mstatus,t1
1c013486:	8082                	ret
1c013488:	87ba                	mv	a5,a4
1c01348a:	4f58                	lw	a4,28(a4)
1c01348c:	b7cd                	j	1c01346e <rt_event_push_delayed+0x38>
1c01348e:	002007b7          	lui	a5,0x200
1c013492:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c013496:	b8a62023          	sw	a0,-1152(a2)
1c01349a:	cd58                	sw	a4,28(a0)
1c01349c:	0087a703          	lw	a4,8(a5)
1c0134a0:	95ba                	add	a1,a1,a4
1c0134a2:	00b7a823          	sw	a1,16(a5)
1c0134a6:	08500713          	li	a4,133
1c0134aa:	00e7a023          	sw	a4,0(a5)
1c0134ae:	bfd1                	j	1c013482 <rt_event_push_delayed+0x4c>

1c0134b0 <rt_time_wait_us>:
1c0134b0:	1101                	addi	sp,sp,-32
1c0134b2:	85aa                	mv	a1,a0
1c0134b4:	4501                	li	a0,0
1c0134b6:	ce06                	sw	ra,28(sp)
1c0134b8:	cc22                	sw	s0,24(sp)
1c0134ba:	c62e                	sw	a1,12(sp)
1c0134bc:	c3bff0ef          	jal	ra,1c0130f6 <rt_event_get_blocking>
1c0134c0:	45b2                	lw	a1,12(sp)
1c0134c2:	842a                	mv	s0,a0
1c0134c4:	f73ff0ef          	jal	ra,1c013436 <rt_event_push_delayed>
1c0134c8:	8522                	mv	a0,s0
1c0134ca:	4462                	lw	s0,24(sp)
1c0134cc:	40f2                	lw	ra,28(sp)
1c0134ce:	6105                	addi	sp,sp,32
1c0134d0:	cfdff06f          	j	1c0131cc <rt_event_wait>

1c0134d4 <__rt_time_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_time_init()
{
  int err = 0;

  first_delayed = NULL;
1c0134d4:	1c0187b7          	lui	a5,0x1c018
1c0134d8:	b807a023          	sw	zero,-1152(a5) # 1c017b80 <first_delayed>
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c0134dc:	002007b7          	lui	a5,0x200
{
1c0134e0:	1141                	addi	sp,sp,-16
1c0134e2:	08300713          	li	a4,131
1c0134e6:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
1c0134ea:	c606                	sw	ra,12(sp)
1c0134ec:	c422                	sw	s0,8(sp)
1c0134ee:	00e7a023          	sw	a4,0(a5)
    TIMER_CFG_LO_RESET(1)  |
    TIMER_CFG_LO_CCFG(1)
  );

#if defined(ARCHI_HAS_FC)
  rt_irq_set_handler(ARCHI_FC_EVT_TIMER0_HI, __rt_timer_handler);
1c0134f2:	1c0135b7          	lui	a1,0x1c013
1c0134f6:	56058593          	addi	a1,a1,1376 # 1c013560 <__rt_timer_handler>
1c0134fa:	452d                	li	a0,11
1c0134fc:	dc4ff0ef          	jal	ra,1c012ac0 <rt_irq_set_handler>
  ARCHI_WRITE(base, EU_CORE_MASK_IRQ_OR, irqMask);
1c013500:	6785                	lui	a5,0x1
1c013502:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c013506:	00204737          	lui	a4,0x204
1c01350a:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c01350e:	00f72423          	sw	a5,8(a4)
#else
  rt_irq_set_handler(ARCHI_EVT_TIMER0_HI, __rt_timer_handler);
  rt_irq_mask_set(1<<ARCHI_EVT_TIMER0_HI);
#endif

  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c013512:	1c0135b7          	lui	a1,0x1c013
1c013516:	4601                	li	a2,0
1c013518:	40658593          	addi	a1,a1,1030 # 1c013406 <__rt_time_poweroff>
1c01351c:	4509                	li	a0,2
1c01351e:	f0eff0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c013522:	1c0135b7          	lui	a1,0x1c013
  err |= __rt_cbsys_add(RT_CBSYS_POWEROFF, __rt_time_poweroff, NULL);
1c013526:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_POWERON, __rt_time_poweron, NULL);
1c013528:	4601                	li	a2,0
1c01352a:	41e58593          	addi	a1,a1,1054 # 1c01341e <__rt_time_poweron>
1c01352e:	450d                	li	a0,3
1c013530:	efcff0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
1c013534:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize time driver\n");
1c013536:	c10d                	beqz	a0,1c013558 <__rt_time_init+0x84>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c013538:	01402673          	csrr	a2,uhartid
1c01353c:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c013540:	40565593          	srai	a1,a2,0x5
1c013544:	f265b5b3          	p.bclr	a1,a1,25,6
1c013548:	f4563633          	p.bclr	a2,a2,26,5
1c01354c:	32450513          	addi	a0,a0,804 # 1c017324 <IntegerExpLUT+0xcc>
1c013550:	5a0020ef          	jal	ra,1c015af0 <printf>
1c013554:	520020ef          	jal	ra,1c015a74 <abort>
}
1c013558:	40b2                	lw	ra,12(sp)
1c01355a:	4422                	lw	s0,8(sp)
1c01355c:	0141                	addi	sp,sp,16
1c01355e:	8082                	ret

1c013560 <__rt_timer_handler>:
#if defined(__LLVM__)
void __rt_timer_handler()
#else
void __attribute__((interrupt)) __rt_timer_handler()
#endif
{
1c013560:	7179                	addi	sp,sp,-48
1c013562:	d032                	sw	a2,32(sp)
  rt_event_t *event = first_delayed;
1c013564:	1c018637          	lui	a2,0x1c018
{
1c013568:	ca3e                	sw	a5,20(sp)
  rt_event_t *event = first_delayed;
1c01356a:	b8062783          	lw	a5,-1152(a2) # 1c017b80 <first_delayed>
{
1c01356e:	ce36                	sw	a3,28(sp)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c013570:	002006b7          	lui	a3,0x200
1c013574:	40468693          	addi	a3,a3,1028 # 200404 <__L2+0x180404>
1c013578:	d61a                	sw	t1,44(sp)
1c01357a:	d42a                	sw	a0,40(sp)
1c01357c:	d22e                	sw	a1,36(sp)
1c01357e:	cc3a                	sw	a4,24(sp)
1c013580:	c842                	sw	a6,16(sp)
1c013582:	c646                	sw	a7,12(sp)
1c013584:	c472                	sw	t3,8(sp)
1c013586:	c276                	sw	t4,4(sp)
1c013588:	0086a683          	lw	a3,8(a3)
1c01358c:	01c00593          	li	a1,28
1c013590:	01c02503          	lw	a0,28(zero) # 1c <__rt_sched>
1c013594:	41cc                	lw	a1,4(a1)

  uint32_t current_time = timer_count_get(timer_base_fc(0, 1));

  // First dequeue and push to their scheduler all events with the same number of
  // ticks as they were waiting for the same time.
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c013596:	80000337          	lui	t1,0x80000
1c01359a:	4801                	li	a6,0
1c01359c:	4881                	li	a7,0
1c01359e:	01c00e93          	li	t4,28
1c0135a2:	ffe34313          	xori	t1,t1,-2
1c0135a6:	e7ad                	bnez	a5,1c013610 <__rt_timer_handler+0xb0>
1c0135a8:	00088463          	beqz	a7,1c0135b0 <__rt_timer_handler+0x50>
1c0135ac:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0135b0:	00080463          	beqz	a6,1c0135b8 <__rt_timer_handler+0x58>
1c0135b4:	00bea223          	sw	a1,4(t4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c0135b8:	002007b7          	lui	a5,0x200
1c0135bc:	08100713          	li	a4,129
1c0135c0:	40478793          	addi	a5,a5,1028 # 200404 <__L2+0x180404>
    event = next;
  }

  // Update the wait list with the next waiting event which has a different number
  // of ticks
  first_delayed = event;
1c0135c4:	b8062023          	sw	zero,-1152(a2)
1c0135c8:	00e7a023          	sw	a4,0(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_BUFFER_CLEAR, evtMask);
1c0135cc:	6785                	lui	a5,0x1
1c0135ce:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c0135d2:	00204737          	lui	a4,0x204
1c0135d6:	02f72423          	sw	a5,40(a4) # 204028 <__L2+0x184028>
    rt_irq_clr(1 << ARCHI_FC_EVT_TIMER0_HI);
#else
    rt_irq_clr(1 << ARCHI_EVT_TIMER0_HI);
#endif
  }
}
1c0135da:	5332                	lw	t1,44(sp)
1c0135dc:	5522                	lw	a0,40(sp)
1c0135de:	5592                	lw	a1,36(sp)
1c0135e0:	5602                	lw	a2,32(sp)
1c0135e2:	46f2                	lw	a3,28(sp)
1c0135e4:	4762                	lw	a4,24(sp)
1c0135e6:	47d2                	lw	a5,20(sp)
1c0135e8:	4842                	lw	a6,16(sp)
1c0135ea:	48b2                	lw	a7,12(sp)
1c0135ec:	4e22                	lw	t3,8(sp)
1c0135ee:	4e92                	lw	t4,4(sp)
1c0135f0:	6145                	addi	sp,sp,48
1c0135f2:	30200073          	mret
  event->next = NULL;
1c0135f6:	0007a023          	sw	zero,0(a5)
    rt_event_t *next = event->implem.next;
1c0135fa:	01c7ae03          	lw	t3,28(a5)
  if (sched->first == NULL) {
1c0135fe:	c511                	beqz	a0,1c01360a <__rt_timer_handler+0xaa>
    sched->last->next = event;
1c013600:	c19c                	sw	a5,0(a1)
    event = next;
1c013602:	85be                	mv	a1,a5
1c013604:	4805                	li	a6,1
1c013606:	87f2                	mv	a5,t3
1c013608:	bf79                	j	1c0135a6 <__rt_timer_handler+0x46>
  if (sched->first == NULL) {
1c01360a:	853e                	mv	a0,a5
1c01360c:	4885                	li	a7,1
1c01360e:	bfd5                	j	1c013602 <__rt_timer_handler+0xa2>
  while (event && (current_time - event->implem.time) < 0x7fffffff)
1c013610:	0387ae03          	lw	t3,56(a5)
1c013614:	41c68e33          	sub	t3,a3,t3
1c013618:	fdc37fe3          	bleu	t3,t1,1c0135f6 <__rt_timer_handler+0x96>
1c01361c:	00088463          	beqz	a7,1c013624 <__rt_timer_handler+0xc4>
1c013620:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c013624:	00080463          	beqz	a6,1c01362c <__rt_timer_handler+0xcc>
1c013628:	00bea223          	sw	a1,4(t4)
static inline uint32_t timer_cnt_lo_get(uint32_t base) { return ARCHI_READ(base, TIMER_CNT_LO_OFFSET); }
1c01362c:	00200737          	lui	a4,0x200
1c013630:	40470713          	addi	a4,a4,1028 # 200404 <__L2+0x180404>
  first_delayed = event;
1c013634:	b8f62023          	sw	a5,-1152(a2)
1c013638:	00872603          	lw	a2,8(a4)
      first_delayed->implem.time - current_time
1c01363c:	5f9c                	lw	a5,56(a5)
1c01363e:	40d786b3          	sub	a3,a5,a3
1c013642:	96b2                	add	a3,a3,a2
static inline void timer_cmp_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CMP_LO_OFFSET, value); }
1c013644:	00d72823          	sw	a3,16(a4)
static inline void timer_cfg_lo_set(uint32_t base, uint32_t value) { ARCHI_WRITE(base, TIMER_CFG_LO_OFFSET, value); }
1c013648:	08500793          	li	a5,133
1c01364c:	00f72023          	sw	a5,0(a4)
}
1c013650:	b769                	j	1c0135da <__rt_timer_handler+0x7a>

1c013652 <rt_periph_copy>:
  }

  __rt_socevents_status[index] &= ~(1<<event);

  rt_irq_restore(irq);
}
1c013652:	7179                	addi	sp,sp,-48
1c013654:	d422                	sw	s0,40(sp)
1c013656:	842a                	mv	s0,a0
1c013658:	d606                	sw	ra,44(sp)
1c01365a:	d226                	sw	s1,36(sp)
1c01365c:	d04a                	sw	s2,32(sp)
1c01365e:	30047973          	csrrci	s2,mstatus,8
1c013662:	4015d493          	srai	s1,a1,0x1
1c013666:	1a102537          	lui	a0,0x1a102
1c01366a:	049e                	slli	s1,s1,0x7
1c01366c:	94aa                	add	s1,s1,a0
1c01366e:	00459513          	slli	a0,a1,0x4
1c013672:	8941                	andi	a0,a0,16
1c013674:	94aa                	add	s1,s1,a0
1c013676:	853e                	mv	a0,a5
1c013678:	ef89                	bnez	a5,1c013692 <rt_periph_copy+0x40>
1c01367a:	ce2e                	sw	a1,28(sp)
1c01367c:	cc32                	sw	a2,24(sp)
1c01367e:	ca36                	sw	a3,20(sp)
1c013680:	c83a                	sw	a4,16(sp)
1c013682:	c63e                	sw	a5,12(sp)
1c013684:	9cbff0ef          	jal	ra,1c01304e <__rt_wait_event_prepare_blocking>
1c013688:	47b2                	lw	a5,12(sp)
1c01368a:	4742                	lw	a4,16(sp)
1c01368c:	46d2                	lw	a3,20(sp)
1c01368e:	4662                	lw	a2,24(sp)
1c013690:	45f2                	lw	a1,28(sp)
1c013692:	e419                	bnez	s0,1c0136a0 <rt_periph_copy+0x4e>
1c013694:	03850413          	addi	s0,a0,56 # 1a102038 <__l1_end+0xa101fd4>
1c013698:	04052223          	sw	zero,68(a0)
1c01369c:	04052a23          	sw	zero,84(a0)
1c0136a0:	00c42803          	lw	a6,12(s0)
1c0136a4:	c054                	sw	a3,4(s0)
1c0136a6:	cc08                	sw	a0,24(s0)
1c0136a8:	f6483833          	p.bclr	a6,a6,27,4
1c0136ac:	4891                	li	a7,4
1c0136ae:	c0474733          	p.bset	a4,a4,0,4
1c0136b2:	0908e163          	bltu	a7,a6,1c013734 <rt_periph_copy+0xe2>
1c0136b6:	03000893          	li	a7,48
1c0136ba:	0596                	slli	a1,a1,0x5
1c0136bc:	98ae                	add	a7,a7,a1
1c0136be:	0008a303          	lw	t1,0(a7)
1c0136c2:	00042a23          	sw	zero,20(s0)
1c0136c6:	03000813          	li	a6,48
1c0136ca:	02031b63          	bnez	t1,1c013700 <rt_periph_copy+0xae>
1c0136ce:	0088a023          	sw	s0,0(a7)
1c0136d2:	00b808b3          	add	a7,a6,a1
1c0136d6:	0088a303          	lw	t1,8(a7)
1c0136da:	0088a223          	sw	s0,4(a7)
1c0136de:	02031663          	bnez	t1,1c01370a <rt_periph_copy+0xb8>
1c0136e2:	00848893          	addi	a7,s1,8
1c0136e6:	0008a883          	lw	a7,0(a7)
1c0136ea:	0208f893          	andi	a7,a7,32
1c0136ee:	00089e63          	bnez	a7,1c01370a <rt_periph_copy+0xb8>
1c0136f2:	00c4a023          	sw	a2,0(s1)
1c0136f6:	00d4a223          	sw	a3,4(s1)
1c0136fa:	00e4a423          	sw	a4,8(s1)
1c0136fe:	a005                	j	1c01371e <rt_periph_copy+0xcc>
1c013700:	0048a883          	lw	a7,4(a7)
1c013704:	0088aa23          	sw	s0,20(a7)
1c013708:	b7e9                	j	1c0136d2 <rt_periph_copy+0x80>
1c01370a:	00042823          	sw	zero,16(s0)
1c01370e:	c010                	sw	a2,0(s0)
1c013710:	c054                	sw	a3,4(s0)
1c013712:	c418                	sw	a4,8(s0)
1c013714:	00031563          	bnez	t1,1c01371e <rt_periph_copy+0xcc>
1c013718:	982e                	add	a6,a6,a1
1c01371a:	00882423          	sw	s0,8(a6)
1c01371e:	e399                	bnez	a5,1c013724 <rt_periph_copy+0xd2>
1c013720:	a81ff0ef          	jal	ra,1c0131a0 <__rt_wait_event>
1c013724:	30091073          	csrw	mstatus,s2
1c013728:	50b2                	lw	ra,44(sp)
1c01372a:	5422                	lw	s0,40(sp)
1c01372c:	5492                	lw	s1,36(sp)
1c01372e:	5902                	lw	s2,32(sp)
1c013730:	6145                	addi	sp,sp,48
1c013732:	8082                	ret
1c013734:	fe6835e3          	p.bneimm	a6,6,1c01371e <rt_periph_copy+0xcc>
1c013738:	03000893          	li	a7,48
1c01373c:	0596                	slli	a1,a1,0x5
1c01373e:	98ae                	add	a7,a7,a1
1c013740:	0008a303          	lw	t1,0(a7)
1c013744:	00042a23          	sw	zero,20(s0)
1c013748:	03000813          	li	a6,48
1c01374c:	00031f63          	bnez	t1,1c01376a <rt_periph_copy+0x118>
1c013750:	0088a023          	sw	s0,0(a7)
1c013754:	95c2                	add	a1,a1,a6
1c013756:	c1c0                	sw	s0,4(a1)
1c013758:	00031e63          	bnez	t1,1c013774 <rt_periph_copy+0x122>
1c01375c:	02442803          	lw	a6,36(s0)
1c013760:	1a1025b7          	lui	a1,0x1a102
1c013764:	1b05a023          	sw	a6,416(a1) # 1a1021a0 <__l1_end+0xa10213c>
1c013768:	b769                	j	1c0136f2 <rt_periph_copy+0xa0>
1c01376a:	0048a883          	lw	a7,4(a7)
1c01376e:	0088aa23          	sw	s0,20(a7)
1c013772:	b7cd                	j	1c013754 <rt_periph_copy+0x102>
1c013774:	c418                	sw	a4,8(s0)
1c013776:	4598                	lw	a4,8(a1)
1c013778:	c010                	sw	a2,0(s0)
1c01377a:	c054                	sw	a3,4(s0)
1c01377c:	00042823          	sw	zero,16(s0)
1c013780:	ff59                	bnez	a4,1c01371e <rt_periph_copy+0xcc>
1c013782:	c580                	sw	s0,8(a1)
1c013784:	bf69                	j	1c01371e <rt_periph_copy+0xcc>

1c013786 <__rt_periph_wait_event>:
1c013786:	30047673          	csrrci	a2,mstatus,8
1c01378a:	477d                	li	a4,31
1c01378c:	4781                	li	a5,0
1c01378e:	00a75463          	ble	a0,a4,1c013796 <__rt_periph_wait_event+0x10>
1c013792:	1501                	addi	a0,a0,-32
1c013794:	4785                	li	a5,1
1c013796:	00279713          	slli	a4,a5,0x2
1c01379a:	4685                	li	a3,1
1c01379c:	03000793          	li	a5,48
1c0137a0:	00a696b3          	sll	a3,a3,a0
1c0137a4:	97ba                	add	a5,a5,a4
1c0137a6:	00204837          	lui	a6,0x204
1c0137aa:	2807a703          	lw	a4,640(a5)
1c0137ae:	8f75                	and	a4,a4,a3
1c0137b0:	cf19                	beqz	a4,1c0137ce <__rt_periph_wait_event+0x48>
1c0137b2:	c999                	beqz	a1,1c0137c8 <__rt_periph_wait_event+0x42>
1c0137b4:	2807a683          	lw	a3,640(a5)
1c0137b8:	4705                	li	a4,1
1c0137ba:	00a71533          	sll	a0,a4,a0
1c0137be:	fff54513          	not	a0,a0
1c0137c2:	8d75                	and	a0,a0,a3
1c0137c4:	28a7a023          	sw	a0,640(a5)
1c0137c8:	30061073          	csrw	mstatus,a2
1c0137cc:	8082                	ret
1c0137ce:	03886703          	p.elw	a4,56(a6) # 204038 <__L2+0x184038>
1c0137d2:	30046773          	csrrsi	a4,mstatus,8
1c0137d6:	30047773          	csrrci	a4,mstatus,8
1c0137da:	bfc1                	j	1c0137aa <__rt_periph_wait_event+0x24>

1c0137dc <__rt_periph_init>:
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
    rt_periph_channel_t *channel = &periph_channels[i];
    channel->first = NULL;
    channel->firstToEnqueue = NULL;
    channel->base = hal_udma_channel_base(i);
    channel->callback = udma_event_handler;
1c0137dc:	1c000537          	lui	a0,0x1c000
1c0137e0:	03000693          	li	a3,48
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c0137e4:	4601                	li	a2,0
1c0137e6:	03000713          	li	a4,48
static inline unsigned int hal_udma_periph_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id);
}

static inline __attribute__((always_inline)) unsigned int hal_udma_channel_base(int id) {
  return ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_PERIPH_OFFSET(id>>1) + UDMA_CHANNEL_OFFSET(id&1);
1c0137ea:	1a1028b7          	lui	a7,0x1a102
    channel->callback = udma_event_handler;
1c0137ee:	2b450513          	addi	a0,a0,692 # 1c0002b4 <udma_event_handler>
1c0137f2:	014950fb          	lp.setupi	x1,20,1c013816 <__rt_periph_init+0x3a>
1c0137f6:	40165793          	srai	a5,a2,0x1
1c0137fa:	00461813          	slli	a6,a2,0x4
1c0137fe:	079e                	slli	a5,a5,0x7
1c013800:	97c6                	add	a5,a5,a7
1c013802:	01087813          	andi	a6,a6,16
1c013806:	97c2                	add	a5,a5,a6
    channel->first = NULL;
1c013808:	0006a023          	sw	zero,0(a3)
    channel->firstToEnqueue = NULL;
1c01380c:	0006a423          	sw	zero,8(a3)
    channel->base = hal_udma_channel_base(i);
1c013810:	c6dc                	sw	a5,12(a3)
    channel->callback = udma_event_handler;
1c013812:	cec8                	sw	a0,28(a3)
  for (unsigned int i=0; i<ARCHI_NB_PERIPH*2; i++) {
1c013814:	0605                	addi	a2,a2,1
1c013816:	02068693          	addi	a3,a3,32
  }
  
  for (int i=0; i<ARCHI_SOC_EVENT_UDMA_NB_EXTRA_EVT; i++)
  {
    __rt_udma_extra_callback[i] = __rt_soc_evt_no_udma;
1c01381a:	1c0006b7          	lui	a3,0x1c000
1c01381e:	28870613          	addi	a2,a4,648
1c013822:	45e68693          	addi	a3,a3,1118 # 1c00045e <__rt_soc_evt_no_udma>
1c013826:	00a250fb          	lp.setupi	x1,10,1c01382e <__rt_periph_init+0x52>
1c01382a:	00d6222b          	p.sw	a3,4(a2!)
1c01382e:	0001                	nop
  }

  __rt_socevents_status[0] = 0;
1c013830:	28072023          	sw	zero,640(a4)
  __rt_socevents_status[1] = 0;
1c013834:	28072223          	sw	zero,644(a4)
}
1c013838:	8082                	ret

1c01383a <rt_freq_set_and_get>:
void rt_freq_wait_convergence(int fll)
{
}

int rt_freq_set_and_get(rt_freq_domain_e domain, unsigned int freq, unsigned int *out_freq)
{
1c01383a:	1141                	addi	sp,sp,-16
1c01383c:	c226                	sw	s1,4(sp)
1c01383e:	84ae                	mv	s1,a1
1c013840:	c606                	sw	ra,12(sp)
1c013842:	c422                	sw	s0,8(sp)
1c013844:	c04a                	sw	s2,0(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c013846:	30047973          	csrrci	s2,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c01384a:	1c018437          	lui	s0,0x1c018
  int irq = rt_irq_disable();
  int err = 0;

  rt_trace(RT_TRACE_FREQ, "Setting domain frequency (domain: %d, freq: %d)\n", domain, freq);

  if (domain == RT_FREQ_DOMAIN_CL)
1c01384e:	00153f63          	p.bneimm	a0,1,1c01386c <rt_freq_set_and_get+0x32>
  {
    // On cluster side, this is straight forward as the fll is not shared
    __rt_fll_set_freq(__RT_FLL_CL, freq);
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c013852:	b8440413          	addi	s0,s0,-1148 # 1c017b84 <__rt_freq_domains>
    __rt_fll_set_freq(__RT_FLL_CL, freq);
1c013856:	294d                	jal	1c013d08 <__rt_fll_set_freq>
    __rt_freq_domains[RT_FREQ_DOMAIN_CL] = freq;
1c013858:	c044                	sw	s1,4(s0)
  __builtin_pulp_spr_write(reg, val);
1c01385a:	30091073          	csrw	mstatus,s2
  }

  rt_irq_restore(irq);

  return err;
}
1c01385e:	40b2                	lw	ra,12(sp)
1c013860:	4422                	lw	s0,8(sp)
1c013862:	4492                	lw	s1,4(sp)
1c013864:	4902                	lw	s2,0(sp)
1c013866:	4501                	li	a0,0
1c013868:	0141                	addi	sp,sp,16
1c01386a:	8082                	ret
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_BEFORE);
1c01386c:	4511                	li	a0,4
1c01386e:	bfcff0ef          	jal	ra,1c012c6a <__rt_cbsys_exec>
    __rt_fll_set_freq(0, freq);
1c013872:	85a6                	mv	a1,s1
1c013874:	4501                	li	a0,0
1c013876:	2949                	jal	1c013d08 <__rt_fll_set_freq>
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c013878:	4515                	li	a0,5
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = freq;
1c01387a:	b8942223          	sw	s1,-1148(s0)
    __rt_cbsys_exec(RT_CBSYS_PERIPH_SETFREQ_AFTER);
1c01387e:	becff0ef          	jal	ra,1c012c6a <__rt_cbsys_exec>
1c013882:	bfe1                	j	1c01385a <rt_freq_set_and_get+0x20>

1c013884 <__rt_freq_init>:

void __rt_freq_init()
{
1c013884:	1141                	addi	sp,sp,-16
1c013886:	c422                	sw	s0,8(sp)
1c013888:	c606                	sw	ra,12(sp)

  __rt_flls_constructor();
1c01388a:	29b5                	jal	1c013d06 <__rt_flls_constructor>
  return __rt_platform;
1c01388c:	1c0177b7          	lui	a5,0x1c017

  // On all chips only FLL 0 is initialized here as it is shared between periph and soc
  // while FLL 1 is used for cluster only and thus is initialized when the cluster is set on.
  if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c013890:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
1c013894:	1c018437          	lui	s0,0x1c018
1c013898:	0017ae63          	p.beqimm	a5,1,1c0138b4 <__rt_freq_init+0x30>
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = __rt_fll_init(__RT_FLL_FC);
1c01389c:	4501                	li	a0,0
1c01389e:	2991                	jal	1c013cf2 <__rt_fll_init>
1c0138a0:	b8a42223          	sw	a0,-1148(s0) # 1c017b84 <__rt_freq_domains>
  }
  else
  {
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
  }
  __rt_freq_domains[RT_FREQ_DOMAIN_CL] = 0;
1c0138a4:	b8440413          	addi	s0,s0,-1148
1c0138a8:	00042223          	sw	zero,4(s0)

}
1c0138ac:	40b2                	lw	ra,12(sp)
1c0138ae:	4422                	lw	s0,8(sp)
1c0138b0:	0141                	addi	sp,sp,16
1c0138b2:	8082                	ret
    __rt_freq_domains[RT_FREQ_DOMAIN_FC] = 40000000;
1c0138b4:	026267b7          	lui	a5,0x2626
1c0138b8:	a0078793          	addi	a5,a5,-1536 # 2625a00 <__L2+0x25a5a00>
1c0138bc:	b8f42223          	sw	a5,-1148(s0)
1c0138c0:	b7d5                	j	1c0138a4 <__rt_freq_init+0x20>

1c0138c2 <SetFllMultDivFactors>:
  if (PMURetentionState.Fields.BootType != COLD_BOOT && PMURetentionState.Fields.ClusterWakeUpState) {
          // ChangePowerSystemState(POWER_SYSTEM_STATE(PMURetentionState.Fields.WakeupState, PMURetentionState.Fields.ClusterWakeUpState), 0);
    __rt_pmu_cluster_power_up(NULL, NULL);
    if (PMU_ClusterIsRunning() && PMURetentionState.Fields.FllClusterRetention) InitOneFll(FLL_CLUSTER, 1);
  }
}
1c0138c2:	100517b3          	p.fl1	a5,a0
1c0138c6:	4769                	li	a4,26
1c0138c8:	8f1d                	sub	a4,a4,a5
1c0138ca:	4785                	li	a5,1
1c0138cc:	04f76733          	p.max	a4,a4,a5
1c0138d0:	47a1                	li	a5,8
1c0138d2:	04f74733          	p.min	a4,a4,a5
1c0138d6:	fff70693          	addi	a3,a4,-1
1c0138da:	00f55793          	srli	a5,a0,0xf
1c0138de:	00d797b3          	sll	a5,a5,a3
1c0138e2:	c19c                	sw	a5,0(a1)
1c0138e4:	07be                	slli	a5,a5,0xf
1c0138e6:	c218                	sw	a4,0(a2)
1c0138e8:	00d7d533          	srl	a0,a5,a3
1c0138ec:	8082                	ret

1c0138ee <soc_eu_fcEventMask_setEvent>:
1c0138ee:	47fd                	li	a5,31
1c0138f0:	4721                	li	a4,8
1c0138f2:	00f50463          	beq	a0,a5,1c0138fa <soc_eu_fcEventMask_setEvent+0xc>
1c0138f6:	1501                	addi	a0,a0,-32
1c0138f8:	4711                	li	a4,4
1c0138fa:	1a1066b7          	lui	a3,0x1a106
1c0138fe:	20e6f603          	p.lw	a2,a4(a3)
1c013902:	4785                	li	a5,1
1c013904:	00a79533          	sll	a0,a5,a0
1c013908:	fff54513          	not	a0,a0
1c01390c:	8d71                	and	a0,a0,a2
1c01390e:	00a6e723          	p.sw	a0,a4(a3)
1c013912:	8082                	ret

1c013914 <__rt_pmu_cluster_power_down>:
1c013914:	1c0177b7          	lui	a5,0x1c017
1c013918:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
1c01391c:	0817a363          	p.beqimm	a5,1,1c0139a2 <__rt_pmu_cluster_power_down+0x8e>
1c013920:	1141                	addi	sp,sp,-16
1c013922:	1a1046b7          	lui	a3,0x1a104
1c013926:	c606                	sw	ra,12(sp)
1c013928:	c422                	sw	s0,8(sp)
1c01392a:	c226                	sw	s1,4(sp)
1c01392c:	c04a                	sw	s2,0(sp)
1c01392e:	0706a683          	lw	a3,112(a3) # 1a104070 <__l1_end+0xa10400c>
1c013932:	1c017737          	lui	a4,0x1c017
1c013936:	72070713          	addi	a4,a4,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c01393a:	00874783          	lbu	a5,8(a4)
1c01393e:	8436                	mv	s0,a3
1c013940:	c0079933          	p.extractu	s2,a5,0,0
1c013944:	04193963          	p.bneimm	s2,1,1c013996 <__rt_pmu_cluster_power_down+0x82>
1c013948:	01069613          	slli	a2,a3,0x10
1c01394c:	04064563          	bltz	a2,1c013996 <__rt_pmu_cluster_power_down+0x82>
1c013950:	c007b7b3          	p.bclr	a5,a5,0,0
1c013954:	c0a92433          	p.insert	s0,s2,0,10
1c013958:	1a1044b7          	lui	s1,0x1a104
1c01395c:	00f70423          	sb	a5,8(a4)
1c013960:	0684a823          	sw	s0,112(s1) # 1a104070 <__l1_end+0xa10400c>
1c013964:	4585                	li	a1,1
1c013966:	02300513          	li	a0,35
1c01396a:	e1dff0ef          	jal	ra,1c013786 <__rt_periph_wait_event>
1c01396e:	4785                	li	a5,1
1c013970:	00f4a623          	sw	a5,12(s1)
1c013974:	c0302433          	p.insert	s0,zero,0,3
1c013978:	0684a823          	sw	s0,112(s1)
1c01397c:	c0d92433          	p.insert	s0,s2,0,13
1c013980:	0684a823          	sw	s0,112(s1)
1c013984:	4422                	lw	s0,8(sp)
1c013986:	40b2                	lw	ra,12(sp)
1c013988:	4492                	lw	s1,4(sp)
1c01398a:	4902                	lw	s2,0(sp)
1c01398c:	4585                	li	a1,1
1c01398e:	457d                	li	a0,31
1c013990:	0141                	addi	sp,sp,16
1c013992:	df5ff06f          	j	1c013786 <__rt_periph_wait_event>
1c013996:	40b2                	lw	ra,12(sp)
1c013998:	4422                	lw	s0,8(sp)
1c01399a:	4492                	lw	s1,4(sp)
1c01399c:	4902                	lw	s2,0(sp)
1c01399e:	0141                	addi	sp,sp,16
1c0139a0:	8082                	ret
1c0139a2:	8082                	ret

1c0139a4 <SetFllFrequency>:
1c0139a4:	7179                	addi	sp,sp,-48
1c0139a6:	d422                	sw	s0,40(sp)
1c0139a8:	d226                	sw	s1,36(sp)
1c0139aa:	1c017437          	lui	s0,0x1c017
1c0139ae:	84aa                	mv	s1,a0
1c0139b0:	d606                	sw	ra,44(sp)
1c0139b2:	852e                	mv	a0,a1
1c0139b4:	72040413          	addi	s0,s0,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c0139b8:	0014be63          	p.bneimm	s1,1,1c0139d4 <SetFllFrequency+0x30>
1c0139bc:	00844783          	lbu	a5,8(s0)
1c0139c0:	c0079733          	p.extractu	a4,a5,0,0
1c0139c4:	08172763          	p.beqimm	a4,1,1c013a52 <SetFllFrequency+0xae>
1c0139c8:	4501                	li	a0,0
1c0139ca:	50b2                	lw	ra,44(sp)
1c0139cc:	5422                	lw	s0,40(sp)
1c0139ce:	5492                	lw	s1,36(sp)
1c0139d0:	6145                	addi	sp,sp,48
1c0139d2:	8082                	ret
1c0139d4:	ce2d                	beqz	a2,1c013a4e <SetFllFrequency+0xaa>
1c0139d6:	00844783          	lbu	a5,8(s0)
1c0139da:	03200713          	li	a4,50
1c0139de:	c21797b3          	p.extractu	a5,a5,1,1
1c0139e2:	97a2                	add	a5,a5,s0
1c0139e4:	00a7c783          	lbu	a5,10(a5)
1c0139e8:	00e787db          	p.mac	a5,a5,a4,zero
1c0139ec:	22678793          	addi	a5,a5,550
1c0139f0:	ecad                	bnez	s1,1c013a6a <SetFllFrequency+0xc6>
1c0139f2:	0007a6b7          	lui	a3,0x7a
1c0139f6:	eb237737          	lui	a4,0xeb237
1c0139fa:	12068693          	addi	a3,a3,288 # 7a120 <__L1Cl+0x6a120>
1c0139fe:	c8070713          	addi	a4,a4,-896 # eb236c80 <pulp__FC+0xeb236c81>
1c013a02:	42d78733          	p.mac	a4,a5,a3
1c013a06:	fcb761e3          	bltu	a4,a1,1c0139c8 <SetFllFrequency+0x24>
1c013a0a:	c62a                	sw	a0,12(sp)
1c013a0c:	d6eff0ef          	jal	ra,1c012f7a <__rt_bridge_req_shutdown>
1c013a10:	4532                	lw	a0,12(sp)
1c013a12:	0870                	addi	a2,sp,28
1c013a14:	082c                	addi	a1,sp,24
1c013a16:	eadff0ef          	jal	ra,1c0138c2 <SetFllMultDivFactors>
1c013a1a:	4762                	lw	a4,24(sp)
1c013a1c:	800007b7          	lui	a5,0x80000
1c013a20:	1a1006b7          	lui	a3,0x1a100
1c013a24:	de0727b3          	p.insert	a5,a4,15,0
1c013a28:	4772                	lw	a4,28(sp)
1c013a2a:	c7a727b3          	p.insert	a5,a4,3,26
1c013a2e:	00449713          	slli	a4,s1,0x4
1c013a32:	0711                	addi	a4,a4,4
1c013a34:	00f6e723          	p.sw	a5,a4(a3)
1c013a38:	00249793          	slli	a5,s1,0x2
1c013a3c:	943e                	add	s0,s0,a5
1c013a3e:	d008                	sw	a0,32(s0)
1c013a40:	c808                	sw	a0,16(s0)
1c013a42:	f4c1                	bnez	s1,1c0139ca <SetFllFrequency+0x26>
1c013a44:	c62a                	sw	a0,12(sp)
1c013a46:	c90ff0ef          	jal	ra,1c012ed6 <__rt_bridge_set_available>
1c013a4a:	4532                	lw	a0,12(sp)
1c013a4c:	bfbd                	j	1c0139ca <SetFllFrequency+0x26>
1c013a4e:	f0f1                	bnez	s1,1c013a12 <SetFllFrequency+0x6e>
1c013a50:	bf6d                	j	1c013a0a <SetFllFrequency+0x66>
1c013a52:	d261                	beqz	a2,1c013a12 <SetFllFrequency+0x6e>
1c013a54:	c21797b3          	p.extractu	a5,a5,1,1
1c013a58:	97a2                	add	a5,a5,s0
1c013a5a:	00a7c783          	lbu	a5,10(a5) # 8000000a <pulp__FC+0x8000000b>
1c013a5e:	03200713          	li	a4,50
1c013a62:	00e787db          	p.mac	a5,a5,a4,zero
1c013a66:	22678793          	addi	a5,a5,550
1c013a6a:	0006b6b7          	lui	a3,0x6b
1c013a6e:	eaf5a737          	lui	a4,0xeaf5a
1c013a72:	6c068693          	addi	a3,a3,1728 # 6b6c0 <__L1Cl+0x5b6c0>
1c013a76:	5c070713          	addi	a4,a4,1472 # eaf5a5c0 <pulp__FC+0xeaf5a5c1>
1c013a7a:	42d78733          	p.mac	a4,a5,a3
1c013a7e:	f8a77ae3          	bleu	a0,a4,1c013a12 <SetFllFrequency+0x6e>
1c013a82:	b799                	j	1c0139c8 <SetFllFrequency+0x24>

1c013a84 <InitOneFll>:
1c013a84:	7179                	addi	sp,sp,-48
1c013a86:	00451713          	slli	a4,a0,0x4
1c013a8a:	ce4e                	sw	s3,28(sp)
1c013a8c:	1a1007b7          	lui	a5,0x1a100
1c013a90:	00470993          	addi	s3,a4,4
1c013a94:	d606                	sw	ra,44(sp)
1c013a96:	d422                	sw	s0,40(sp)
1c013a98:	d226                	sw	s1,36(sp)
1c013a9a:	d04a                	sw	s2,32(sp)
1c013a9c:	2137f783          	p.lw	a5,s3(a5)
1c013aa0:	1c017437          	lui	s0,0x1c017
1c013aa4:	72040413          	addi	s0,s0,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c013aa8:	00251913          	slli	s2,a0,0x2
1c013aac:	c585                	beqz	a1,1c013ad4 <InitOneFll+0x50>
1c013aae:	c7a79733          	p.extractu	a4,a5,3,26
1c013ab2:	1007d7b3          	p.exthz	a5,a5
1c013ab6:	07be                	slli	a5,a5,0xf
1c013ab8:	c701                	beqz	a4,1c013ac0 <InitOneFll+0x3c>
1c013aba:	177d                	addi	a4,a4,-1
1c013abc:	00e7d7b3          	srl	a5,a5,a4
1c013ac0:	944a                	add	s0,s0,s2
1c013ac2:	d01c                	sw	a5,32(s0)
1c013ac4:	c81c                	sw	a5,16(s0)
1c013ac6:	50b2                	lw	ra,44(sp)
1c013ac8:	5422                	lw	s0,40(sp)
1c013aca:	5492                	lw	s1,36(sp)
1c013acc:	5902                	lw	s2,32(sp)
1c013ace:	49f2                	lw	s3,28(sp)
1c013ad0:	6145                	addi	sp,sp,48
1c013ad2:	8082                	ret
1c013ad4:	0007d363          	bgez	a5,1c013ada <InitOneFll+0x56>
1c013ad8:	c105                	beqz	a0,1c013af8 <InitOneFll+0x74>
1c013ada:	810047b7          	lui	a5,0x81004
1c013ade:	1a1006b7          	lui	a3,0x1a100
1c013ae2:	00870613          	addi	a2,a4,8
1c013ae6:	10778793          	addi	a5,a5,263 # 81004107 <pulp__FC+0x81004108>
1c013aea:	00f6e623          	p.sw	a5,a2(a3)
1c013aee:	014c04b7          	lui	s1,0x14c0
1c013af2:	0731                	addi	a4,a4,12
1c013af4:	0096e723          	p.sw	s1,a4(a3)
1c013af8:	02faf537          	lui	a0,0x2faf
1c013afc:	0070                	addi	a2,sp,12
1c013afe:	002c                	addi	a1,sp,8
1c013b00:	08050513          	addi	a0,a0,128 # 2faf080 <__L2+0x2f2f080>
1c013b04:	dbfff0ef          	jal	ra,1c0138c2 <SetFllMultDivFactors>
1c013b08:	47a2                	lw	a5,8(sp)
1c013b0a:	c00004b7          	lui	s1,0xc0000
1c013b0e:	de07a4b3          	p.insert	s1,a5,15,0
1c013b12:	47b2                	lw	a5,12(sp)
1c013b14:	c7a7a4b3          	p.insert	s1,a5,3,26
1c013b18:	1a1007b7          	lui	a5,0x1a100
1c013b1c:	0097e9a3          	p.sw	s1,s3(a5)
1c013b20:	944a                	add	s0,s0,s2
1c013b22:	d008                	sw	a0,32(s0)
1c013b24:	c808                	sw	a0,16(s0)
1c013b26:	b745                	j	1c013ac6 <InitOneFll+0x42>

1c013b28 <__rt_pmu_cluster_power_up>:
1c013b28:	1141                	addi	sp,sp,-16
1c013b2a:	c226                	sw	s1,4(sp)
1c013b2c:	1c0174b7          	lui	s1,0x1c017
1c013b30:	c606                	sw	ra,12(sp)
1c013b32:	c422                	sw	s0,8(sp)
1c013b34:	c04a                	sw	s2,0(sp)
1c013b36:	72048793          	addi	a5,s1,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c013b3a:	0087c783          	lbu	a5,8(a5) # 1a100008 <__l1_end+0xa0fffa4>
1c013b3e:	4501                	li	a0,0
1c013b40:	c00797b3          	p.extractu	a5,a5,0,0
1c013b44:	e785                	bnez	a5,1c013b6c <__rt_pmu_cluster_power_up+0x44>
1c013b46:	1c0177b7          	lui	a5,0x1c017
1c013b4a:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
1c013b4e:	72048493          	addi	s1,s1,1824
1c013b52:	0217b363          	p.bneimm	a5,1,1c013b78 <__rt_pmu_cluster_power_up+0x50>
1c013b56:	1a1047b7          	lui	a5,0x1a104
1c013b5a:	0007a623          	sw	zero,12(a5) # 1a10400c <__l1_end+0xa103fa8>
1c013b5e:	0084c783          	lbu	a5,8(s1)
1c013b62:	4505                	li	a0,1
1c013b64:	c007c7b3          	p.bset	a5,a5,0,0
1c013b68:	00f48423          	sb	a5,8(s1)
1c013b6c:	40b2                	lw	ra,12(sp)
1c013b6e:	4422                	lw	s0,8(sp)
1c013b70:	4492                	lw	s1,4(sp)
1c013b72:	4902                	lw	s2,0(sp)
1c013b74:	0141                	addi	sp,sp,16
1c013b76:	8082                	ret
1c013b78:	1a104437          	lui	s0,0x1a104
1c013b7c:	07042403          	lw	s0,112(s0) # 1a104070 <__l1_end+0xa10400c>
1c013b80:	c0a417b3          	p.extractu	a5,s0,0,10
1c013b84:	ef89                	bnez	a5,1c013b9e <__rt_pmu_cluster_power_up+0x76>
1c013b86:	4785                	li	a5,1
1c013b88:	c0a7a433          	p.insert	s0,a5,0,10
1c013b8c:	1a1047b7          	lui	a5,0x1a104
1c013b90:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10400c>
1c013b94:	4585                	li	a1,1
1c013b96:	02300513          	li	a0,35
1c013b9a:	bedff0ef          	jal	ra,1c013786 <__rt_periph_wait_event>
1c013b9e:	4785                	li	a5,1
1c013ba0:	c037a433          	p.insert	s0,a5,0,3
1c013ba4:	1a104937          	lui	s2,0x1a104
1c013ba8:	06892823          	sw	s0,112(s2) # 1a104070 <__l1_end+0xa10400c>
1c013bac:	4585                	li	a1,1
1c013bae:	457d                	li	a0,31
1c013bb0:	bd7ff0ef          	jal	ra,1c013786 <__rt_periph_wait_event>
1c013bb4:	00092623          	sw	zero,12(s2)
1c013bb8:	c0d02433          	p.insert	s0,zero,0,13
1c013bbc:	06892823          	sw	s0,112(s2)
1c013bc0:	c0a02433          	p.insert	s0,zero,0,10
1c013bc4:	06892823          	sw	s0,112(s2)
1c013bc8:	4585                	li	a1,1
1c013bca:	02300513          	li	a0,35
1c013bce:	bb9ff0ef          	jal	ra,1c013786 <__rt_periph_wait_event>
1c013bd2:	01c4c783          	lbu	a5,28(s1)
1c013bd6:	0207f793          	andi	a5,a5,32
1c013bda:	e789                	bnez	a5,1c013be4 <__rt_pmu_cluster_power_up+0xbc>
1c013bdc:	4581                	li	a1,0
1c013bde:	4505                	li	a0,1
1c013be0:	ea5ff0ef          	jal	ra,1c013a84 <InitOneFll>
1c013be4:	c0e44433          	p.bset	s0,s0,0,14
1c013be8:	1a1047b7          	lui	a5,0x1a104
1c013bec:	0687a823          	sw	s0,112(a5) # 1a104070 <__l1_end+0xa10400c>
1c013bf0:	b7bd                	j	1c013b5e <__rt_pmu_cluster_power_up+0x36>

1c013bf2 <InitFlls>:

  }
}

void  __attribute__ ((noinline)) InitFlls()
{
1c013bf2:	1141                	addi	sp,sp,-16
1c013bf4:	c422                	sw	s0,8(sp)
  __rt_bridge_req_shutdown();

  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c013bf6:	1c017437          	lui	s0,0x1c017
{
1c013bfa:	c606                	sw	ra,12(sp)
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c013bfc:	72040413          	addi	s0,s0,1824 # 1c017720 <SystemStateToSCUFastSeq>
  __rt_bridge_req_shutdown();
1c013c00:	b7aff0ef          	jal	ra,1c012f7a <__rt_bridge_req_shutdown>
  InitOneFll(FLL_SOC, PMURetentionState.Fields.FllSoCRetention);
1c013c04:	01c44583          	lbu	a1,28(s0)
1c013c08:	4501                	li	a0,0
1c013c0a:	c04595b3          	p.extractu	a1,a1,0,4
1c013c0e:	e77ff0ef          	jal	ra,1c013a84 <InitOneFll>
#define PMU_ERROR_CLUSTER_STATE_CHANGE_FAILED   (0x1<<4)

extern void 		   InitPMUDriver();

static inline int 	   PMU_ClusterIsDown()    { return (CLUSTER_STATE(PMUState.State)==CLUSTER_OFF);}
static inline int 	   PMU_ClusterIsRunning() { return (CLUSTER_STATE(PMUState.State)==CLUSTER_ON);}
1c013c12:	00844783          	lbu	a5,8(s0)
1c013c16:	c00797b3          	p.extractu	a5,a5,0,0
  if (PMU_ClusterIsRunning()) InitOneFll(FLL_CLUSTER, PMURetentionState.Fields.FllClusterRetention);
1c013c1a:	0017b963          	p.bneimm	a5,1,1c013c2c <InitFlls+0x3a>
1c013c1e:	01c44583          	lbu	a1,28(s0)
1c013c22:	4505                	li	a0,1
1c013c24:	c05595b3          	p.extractu	a1,a1,0,5
1c013c28:	e5dff0ef          	jal	ra,1c013a84 <InitOneFll>

#ifdef __RT_USE_BRIDGE
  __rt_bridge_set_available();
#endif
}
1c013c2c:	4422                	lw	s0,8(sp)
1c013c2e:	40b2                	lw	ra,12(sp)
1c013c30:	0141                	addi	sp,sp,16
  __rt_bridge_set_available();
1c013c32:	aa4ff06f          	j	1c012ed6 <__rt_bridge_set_available>

1c013c36 <__rt_pmu_init>:
1c013c36:	1c0177b7          	lui	a5,0x1c017
  if (rt_platform() == ARCHI_PLATFORM_FPGA) {
1c013c3a:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
1c013c3e:	0a17a963          	p.beqimm	a5,1,1c013cf0 <__rt_pmu_init+0xba>
{
1c013c42:	1141                	addi	sp,sp,-16
  __rt_wakeup_use_fast = 0;
1c013c44:	1c0187b7          	lui	a5,0x1c018
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_DCDC_CONFIG_OFFSET);
1c013c48:	1a104637          	lui	a2,0x1a104
{
1c013c4c:	c606                	sw	ra,12(sp)
  __rt_wakeup_use_fast = 0;
1c013c4e:	b807a623          	sw	zero,-1140(a5) # 1c017b8c <__rt_wakeup_use_fast>
1c013c52:	10062703          	lw	a4,256(a2) # 1a104100 <__l1_end+0xa10409c>
  return IP_READ(ARCHI_APB_SOC_CTRL_ADDR, PMU_RETENTION_CONFIG_OFFSET);
1c013c56:	10462683          	lw	a3,260(a2)
  PMURetentionState.Raw = GetRetentiveState();
1c013c5a:	1c0177b7          	lui	a5,0x1c017
1c013c5e:	72078793          	addi	a5,a5,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c013c62:	cfd4                	sw	a3,28(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c013c64:	c2e696b3          	p.extractu	a3,a3,1,14
1c013c68:	96be                	add	a3,a3,a5
1c013c6a:	0286c683          	lbu	a3,40(a3) # 1a100028 <__l1_end+0xa0fffc4>
  PMUState.DCDC_Settings[REGU_OFF] = 0;
1c013c6e:	000786a3          	sb	zero,13(a5)
  PMUState.State = RetPMUStateToPMUState[PMURetentionState.Fields.WakeupState];
1c013c72:	00d78423          	sb	a3,8(a5)
  PMUState.DCDC_Settings[REGU_NV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Nominal*8);
1c013c76:	c80716b3          	p.extractu	a3,a4,4,0
1c013c7a:	00d78523          	sb	a3,10(a5)
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c013c7e:	c90716b3          	p.extractu	a3,a4,4,16
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c013c82:	c9871733          	p.extractu	a4,a4,4,24
  PMUState.DCDC_Settings[REGU_LV]  = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Low*8);
1c013c86:	00d785a3          	sb	a3,11(a5)
  PMUState.DCDC_Settings[REGU_RET] = __builtin_bitextractu(DCDCValue, DCDC_RANGE, DCDC_Retentive*8);
1c013c8a:	00e78623          	sb	a4,12(a5)
  Bypass.Raw = GetPMUBypass();
1c013c8e:	07062783          	lw	a5,112(a2)
  Bypass.Fields.Bypass = 1;
1c013c92:	4705                	li	a4,1
1c013c94:	c00727b3          	p.insert	a5,a4,0,0
  Bypass.Fields.BypassClock = 1;
1c013c98:	c09727b3          	p.insert	a5,a4,0,9
  IP_WRITE(ARCHI_APB_SOC_CTRL_ADDR, APB_SOC_CL_BYPASS_OFFSET, Value);
1c013c9c:	06f62823          	sw	a5,112(a2)
  InitFlls();
1c013ca0:	f53ff0ef          	jal	ra,1c013bf2 <InitFlls>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_CLUSTER_ON_OFF);
1c013ca4:	457d                	li	a0,31
1c013ca6:	c49ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_MSP);
1c013caa:	02000513          	li	a0,32
1c013cae:	c41ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_MODE_CHANGED);
1c013cb2:	02100513          	li	a0,33
1c013cb6:	c39ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_OK);
1c013cba:	02200513          	li	a0,34
1c013cbe:	c31ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_ICU_DELAYED);
1c013cc2:	02300513          	li	a0,35
1c013cc6:	c29ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_PICL_OK);
1c013cca:	02400513          	li	a0,36
1c013cce:	c21ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  soc_eu_fcEventMask_setEvent(ARCHI_SOC_EVENT_SCU_OK);
1c013cd2:	02500513          	li	a0,37
1c013cd6:	c19ff0ef          	jal	ra,1c0138ee <soc_eu_fcEventMask_setEvent>
  PMU_Write(DLC_IMR, 0x7);
1c013cda:	1a1077b7          	lui	a5,0x1a107
1c013cde:	471d                	li	a4,7
1c013ce0:	00e7a623          	sw	a4,12(a5) # 1a10700c <__l1_end+0xa106fa8>
  PMU_Write(DLC_IFR, (MAESTRO_EVENT_PICL_OK|MAESTRO_EVENT_SCU_OK));
1c013ce4:	4761                	li	a4,24
1c013ce6:	00e7a823          	sw	a4,16(a5)
}
1c013cea:	40b2                	lw	ra,12(sp)
1c013cec:	0141                	addi	sp,sp,16
1c013cee:	8082                	ret
1c013cf0:	8082                	ret

1c013cf2 <__rt_fll_init>:


unsigned int __rt_fll_init(int fll)
{
  return FllsFrequency[fll];
1c013cf2:	00251793          	slli	a5,a0,0x2
1c013cf6:	1c017537          	lui	a0,0x1c017
1c013cfa:	72050513          	addi	a0,a0,1824 # 1c017720 <SystemStateToSCUFastSeq>
1c013cfe:	953e                	add	a0,a0,a5
}
1c013d00:	5108                	lw	a0,32(a0)
1c013d02:	8082                	ret

1c013d04 <__rt_fll_deinit>:

void __rt_fll_deinit(int fll)
{
}
1c013d04:	8082                	ret

1c013d06 <__rt_flls_constructor>:

void __rt_flls_constructor()
{
}
1c013d06:	8082                	ret

1c013d08 <__rt_fll_set_freq>:

unsigned int __rt_fll_set_freq(int fll, unsigned int frequency)
{
  return SetFllFrequency(fll, frequency, 0);
1c013d08:	4601                	li	a2,0
1c013d0a:	c9bff06f          	j	1c0139a4 <SetFllFrequency>

1c013d0e <__rt_init_cluster_data>:
{
#if defined(EU_VERSION) && EU_VERSION >= 3
  eu_evt_maskSet((1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT));
  rt_team_fork(rt_nb_pe(), cluster_pe_start, NULL);
#endif
}
1c013d0e:	04050713          	addi	a4,a0,64
1c013d12:	00400793          	li	a5,4
1c013d16:	01671613          	slli	a2,a4,0x16
1c013d1a:	e6c7b7b3          	p.bclr	a5,a5,19,12
1c013d1e:	1c0186b7          	lui	a3,0x1c018
1c013d22:	97b2                	add	a5,a5,a2
1c013d24:	bbc68693          	addi	a3,a3,-1092 # 1c017bbc <_bss_end>
1c013d28:	06000713          	li	a4,96
1c013d2c:	8f95                	sub	a5,a5,a3
1c013d2e:	00f685b3          	add	a1,a3,a5
1c013d32:	02e04963          	bgtz	a4,1c013d64 <__rt_init_cluster_data+0x56>
1c013d36:	1c0187b7          	lui	a5,0x1c018
1c013d3a:	02800713          	li	a4,40
1c013d3e:	b9478793          	addi	a5,a5,-1132 # 1c017b94 <__rt_fc_cluster_data>
1c013d42:	42e507b3          	p.mac	a5,a0,a4
1c013d46:	00201737          	lui	a4,0x201
1c013d4a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c013d4e:	9732                	add	a4,a4,a2
1c013d50:	cb98                	sw	a4,16(a5)
1c013d52:	00400713          	li	a4,4
1c013d56:	e6c73733          	p.bclr	a4,a4,19,12
1c013d5a:	9732                	add	a4,a4,a2
1c013d5c:	0007a423          	sw	zero,8(a5)
1c013d60:	cbd8                	sw	a4,20(a5)
1c013d62:	8082                	ret
1c013d64:	0046a80b          	p.lw	a6,4(a3!)
1c013d68:	1771                	addi	a4,a4,-4
1c013d6a:	0105a023          	sw	a6,0(a1)
1c013d6e:	b7c1                	j	1c013d2e <__rt_init_cluster_data+0x20>

1c013d70 <__rt_cluster_init>:
1c013d70:	1c018537          	lui	a0,0x1c018
1c013d74:	1141                	addi	sp,sp,-16
1c013d76:	02800613          	li	a2,40
1c013d7a:	4581                	li	a1,0
1c013d7c:	b9450513          	addi	a0,a0,-1132 # 1c017b94 <__rt_fc_cluster_data>
1c013d80:	c606                	sw	ra,12(sp)
1c013d82:	269010ef          	jal	ra,1c0157ea <memset>
1c013d86:	1c0175b7          	lui	a1,0x1c017
1c013d8a:	b3858593          	addi	a1,a1,-1224 # 1c016b38 <__rt_dma_2d>
1c013d8e:	4525                	li	a0,9
1c013d90:	d31fe0ef          	jal	ra,1c012ac0 <rt_irq_set_handler>
1c013d94:	1c0005b7          	lui	a1,0x1c000
1c013d98:	17458593          	addi	a1,a1,372 # 1c000174 <__rt_remote_enqueue_event>
1c013d9c:	4505                	li	a0,1
1c013d9e:	d23fe0ef          	jal	ra,1c012ac0 <rt_irq_set_handler>
1c013da2:	4789                	li	a5,2
1c013da4:	00204737          	lui	a4,0x204
1c013da8:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c013dac:	00f72423          	sw	a5,8(a4)
1c013db0:	1c0005b7          	lui	a1,0x1c000
1c013db4:	13c58593          	addi	a1,a1,316 # 1c00013c <__rt_bridge_enqueue_event>
1c013db8:	4511                	li	a0,4
1c013dba:	d07fe0ef          	jal	ra,1c012ac0 <rt_irq_set_handler>
1c013dbe:	47c1                	li	a5,16
1c013dc0:	00204737          	lui	a4,0x204
1c013dc4:	00f72a23          	sw	a5,20(a4) # 204014 <__L2+0x184014>
1c013dc8:	00f72423          	sw	a5,8(a4)
1c013dcc:	40b2                	lw	ra,12(sp)
1c013dce:	4501                	li	a0,0
1c013dd0:	0141                	addi	sp,sp,16
1c013dd2:	8082                	ret

1c013dd4 <__rt_cluster_mount_step>:
{
1c013dd4:	7179                	addi	sp,sp,-48
1c013dd6:	ce4e                	sw	s3,28(sp)
1c013dd8:	cc52                	sw	s4,24(sp)
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c013dda:	1c000a37          	lui	s4,0x1c000
  return (void *)(ARCHI_CLUSTER_GLOBAL_ADDR(cid) + ((int)data & 0xFFF));
1c013dde:	00400993          	li	s3,4
1c013de2:	080a0a13          	addi	s4,s4,128 # 1c000080 <_start>
{
1c013de6:	d422                	sw	s0,40(sp)
1c013de8:	d606                	sw	ra,44(sp)
1c013dea:	d226                	sw	s1,36(sp)
1c013dec:	d04a                	sw	s2,32(sp)
1c013dee:	ca56                	sw	s5,20(sp)
1c013df0:	842a                	mv	s0,a0
1c013df2:	e6c9b9b3          	p.bclr	s3,s3,19,12
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c013df6:	ce0a3a33          	p.bclr	s4,s4,7,0
    switch (cluster->state)
1c013dfa:	4c5c                	lw	a5,28(s0)
1c013dfc:	0217ad63          	p.beqimm	a5,1,1c013e36 <__rt_cluster_mount_step+0x62>
1c013e00:	0c27a663          	p.beqimm	a5,2,1c013ecc <__rt_cluster_mount_step+0xf8>
1c013e04:	e3e1                	bnez	a5,1c013ec4 <__rt_cluster_mount_step+0xf0>
  int cid = cluster->cid;
1c013e06:	5018                	lw	a4,32(s0)
  cluster->powered_up = 0;
1c013e08:	00042c23          	sw	zero,24(s0)
  if (cid == 0)
1c013e0c:	eb01                	bnez	a4,1c013e1c <__rt_cluster_mount_step+0x48>
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c013e0e:	5048                	lw	a0,36(s0)
1c013e10:	006c                	addi	a1,sp,12
    int pending = 0;
1c013e12:	c602                	sw	zero,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c013e14:	d15ff0ef          	jal	ra,1c013b28 <__rt_pmu_cluster_power_up>
    return pending;
1c013e18:	47b2                	lw	a5,12(sp)
    cluster->powered_up = __rt_pmu_cluster_power_up(cluster->mount_event, &pending);
1c013e1a:	cc08                	sw	a0,24(s0)
    cluster->state++;
1c013e1c:	4c58                	lw	a4,28(s0)
1c013e1e:	0705                	addi	a4,a4,1
1c013e20:	cc58                	sw	a4,28(s0)
  while(!end)
1c013e22:	dfe1                	beqz	a5,1c013dfa <__rt_cluster_mount_step+0x26>
}
1c013e24:	50b2                	lw	ra,44(sp)
1c013e26:	5422                	lw	s0,40(sp)
1c013e28:	5492                	lw	s1,36(sp)
1c013e2a:	5902                	lw	s2,32(sp)
1c013e2c:	49f2                	lw	s3,28(sp)
1c013e2e:	4a62                	lw	s4,24(sp)
1c013e30:	4ad2                	lw	s5,20(sp)
1c013e32:	6145                	addi	sp,sp,48
1c013e34:	8082                	ret
1c013e36:	02042a83          	lw	s5,32(s0)
1c013e3a:	040a8493          	addi	s1,s5,64
1c013e3e:	04da                	slli	s1,s1,0x16
1c013e40:	009987b3          	add	a5,s3,s1
  pool->first_call_fc_for_cl = NULL;
1c013e44:	0007a023          	sw	zero,0(a5)
  pool->first_call_fc = NULL;
1c013e48:	0007a223          	sw	zero,4(a5)
  pool->last_call_fc = NULL;
1c013e4c:	0007a423          	sw	zero,8(a5)
  __rt_cluster_fc_task_lock = 0;
1c013e50:	100007b7          	lui	a5,0x10000
1c013e54:	0607a023          	sw	zero,96(a5) # 10000060 <__rt_cluster_fc_task_lock>
  return __rt_platform;
1c013e58:	1c0177b7          	lui	a5,0x1c017
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c013e5c:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
1c013e60:	0017af63          	p.beqimm	a5,1,1c013e7e <__rt_cluster_mount_step+0xaa>
      int init_freq = __rt_fll_init(__RT_FLL_CL);
1c013e64:	4505                	li	a0,1
1c013e66:	e8dff0ef          	jal	ra,1c013cf2 <__rt_fll_init>

  #if defined(FLL_VERSION)

  static inline int rt_freq_get(rt_freq_domain_e domain)
  {
    return __rt_freq_domains[domain];
1c013e6a:	1c0187b7          	lui	a5,0x1c018
1c013e6e:	b8478793          	addi	a5,a5,-1148 # 1c017b84 <__rt_freq_domains>
1c013e72:	43cc                	lw	a1,4(a5)
      if (freq)
1c013e74:	c9b1                	beqz	a1,1c013ec8 <__rt_cluster_mount_step+0xf4>
    return rt_freq_set_and_get(domain, freq, NULL);
1c013e76:	4601                	li	a2,0
1c013e78:	4505                	li	a0,1
1c013e7a:	9c1ff0ef          	jal	ra,1c01383a <rt_freq_set_and_get>
    IP_WRITE(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid), ARCHI_CLUSTER_CTRL_CLUSTER_CLK_GATE, 1);
1c013e7e:	00200937          	lui	s2,0x200
1c013e82:	01248733          	add	a4,s1,s2
1c013e86:	4785                	li	a5,1
1c013e88:	02f72023          	sw	a5,32(a4)
    __rt_init_cluster_data(cid);
1c013e8c:	8556                	mv	a0,s5
1c013e8e:	e81ff0ef          	jal	ra,1c013d0e <__rt_init_cluster_data>
    __rt_alloc_init_l1(cid);
1c013e92:	8556                	mv	a0,s5
1c013e94:	c82ff0ef          	jal	ra,1c013316 <__rt_alloc_init_l1>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_ICACHE_CTRL_OFFSET, 0xFFFFFFFF);
1c013e98:	002017b7          	lui	a5,0x201
1c013e9c:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c013ea0:	577d                	li	a4,-1
1c013ea2:	04090913          	addi	s2,s2,64 # 200040 <__L2+0x180040>
1c013ea6:	00e4e7a3          	p.sw	a4,a5(s1)
1c013eaa:	9926                	add	s2,s2,s1
1c013eac:	008250fb          	lp.setupi	x1,8,1c013eb4 <__rt_cluster_mount_step+0xe0>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c013eb0:	0149222b          	p.sw	s4,4(s2!)
1c013eb4:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c013eb6:	002007b7          	lui	a5,0x200
1c013eba:	07a1                	addi	a5,a5,8
1c013ebc:	0ff00713          	li	a4,255
1c013ec0:	00e4e7a3          	p.sw	a4,a5(s1)
    switch (cluster->state)
1c013ec4:	4781                	li	a5,0
1c013ec6:	bf99                	j	1c013e1c <__rt_cluster_mount_step+0x48>
    __rt_freq_domains[domain] = freq;
1c013ec8:	c3c8                	sw	a0,4(a5)
1c013eca:	bf55                	j	1c013e7e <__rt_cluster_mount_step+0xaa>
        __rt_event_restore(cluster->mount_event);
1c013ecc:	505c                	lw	a5,36(s0)
  event->implem.pending = event->implem.saved_pending;
1c013ece:	5bd8                	lw	a4,52(a5)
1c013ed0:	d3d8                	sw	a4,36(a5)
  event->arg[0] = (uintptr_t)event->implem.saved_callback;
1c013ed2:	57d8                	lw	a4,44(a5)
1c013ed4:	c3d8                	sw	a4,4(a5)
  event->arg[1] = (uintptr_t)event->implem.saved_arg;
1c013ed6:	5b98                	lw	a4,48(a5)
1c013ed8:	c798                	sw	a4,8(a5)
  event->implem.saved_pending = 0;
1c013eda:	0207aa23          	sw	zero,52(a5) # 200034 <__L2+0x180034>
        __rt_event_enqueue(cluster->mount_event);
1c013ede:	505c                	lw	a5,36(s0)
  if (sched->first) {
1c013ee0:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c013ee4:	01c00693          	li	a3,28
  event->next = NULL;
1c013ee8:	0007a023          	sw	zero,0(a5)
  if (sched->first) {
1c013eec:	c611                	beqz	a2,1c013ef8 <__rt_cluster_mount_step+0x124>
    sched->last->next = event;
1c013eee:	42d8                	lw	a4,4(a3)
1c013ef0:	c31c                	sw	a5,0(a4)
  sched->last = event;
1c013ef2:	c2dc                	sw	a5,4(a3)
        end = 1;
1c013ef4:	4785                	li	a5,1
1c013ef6:	b71d                	j	1c013e1c <__rt_cluster_mount_step+0x48>
    sched->first = event;
1c013ef8:	00f02e23          	sw	a5,28(zero) # 1c <__rt_sched>
1c013efc:	bfdd                	j	1c013ef2 <__rt_cluster_mount_step+0x11e>

1c013efe <pi_cluster_conf_init>:
  conf->id = 0;
1c013efe:	00052223          	sw	zero,4(a0)
}
1c013f02:	8082                	ret

1c013f04 <pi_cluster_open>:
{
1c013f04:	1101                	addi	sp,sp,-32
1c013f06:	ce06                	sw	ra,28(sp)
1c013f08:	cc22                	sw	s0,24(sp)
1c013f0a:	ca26                	sw	s1,20(sp)
1c013f0c:	c84a                	sw	s2,16(sp)
1c013f0e:	c64e                	sw	s3,12(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c013f10:	30047973          	csrrci	s2,mstatus,8
  struct pi_cluster_conf *conf = (struct pi_cluster_conf *)cluster_dev->config;
1c013f14:	00452983          	lw	s3,4(a0)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c013f18:	1c0184b7          	lui	s1,0x1c018
1c013f1c:	02800793          	li	a5,40
  int cid = conf->id;
1c013f20:	0049a703          	lw	a4,4(s3)
  cluster_dev->data = (void *)&__rt_fc_cluster_data[cid];
1c013f24:	b9448493          	addi	s1,s1,-1132 # 1c017b94 <__rt_fc_cluster_data>
1c013f28:	42f704b3          	p.mac	s1,a4,a5
1c013f2c:	c504                	sw	s1,8(a0)
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c013f2e:	920ff0ef          	jal	ra,1c01304e <__rt_wait_event_prepare_blocking>
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c013f32:	02000713          	li	a4,32
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c013f36:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c013f3a:	ca5797b3          	p.extractu	a5,a5,5,5
  rt_event_t *event = __rt_wait_event_prepare_blocking();
1c013f3e:	842a                	mv	s0,a0
  if (rt_is_fc() || (cid && !rt_has_fc()))
1c013f40:	04e79563          	bne	a5,a4,1c013f8a <pi_cluster_open+0x86>
  event->implem.saved_pending = event->implem.pending;
1c013f44:	515c                	lw	a5,36(a0)
    cluster->state = RT_CLUSTER_MOUNT_START;
1c013f46:	0004ae23          	sw	zero,28(s1)
    cluster->mount_event = event;
1c013f4a:	d0c8                	sw	a0,36(s1)
1c013f4c:	d95c                	sw	a5,52(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c013f4e:	415c                	lw	a5,4(a0)
  event->implem.keep = 0;
1c013f50:	02052423          	sw	zero,40(a0)
  event->implem.saved_callback = (void (*)(void *))event->arg[0];
1c013f54:	d55c                	sw	a5,44(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c013f56:	451c                	lw	a5,8(a0)
  event->arg[1] = (uintptr_t)arg;
1c013f58:	c504                	sw	s1,8(a0)
  event->implem.saved_arg = (void *)event->arg[1];
1c013f5a:	d91c                	sw	a5,48(a0)
  event->arg[0] = (uintptr_t)callback;
1c013f5c:	1c0147b7          	lui	a5,0x1c014
1c013f60:	dd478793          	addi	a5,a5,-556 # 1c013dd4 <__rt_cluster_mount_step>
1c013f64:	c15c                	sw	a5,4(a0)
  event->implem.pending = 1;  
1c013f66:	4785                	li	a5,1
1c013f68:	d15c                	sw	a5,36(a0)
    __rt_cluster_mount_step((void *)cluster);
1c013f6a:	8526                	mv	a0,s1
1c013f6c:	e69ff0ef          	jal	ra,1c013dd4 <__rt_cluster_mount_step>
  __rt_wait_event(event);
1c013f70:	8522                	mv	a0,s0
1c013f72:	a2eff0ef          	jal	ra,1c0131a0 <__rt_wait_event>
  __builtin_pulp_spr_write(reg, val);
1c013f76:	30091073          	csrw	mstatus,s2
}
1c013f7a:	40f2                	lw	ra,28(sp)
1c013f7c:	4462                	lw	s0,24(sp)
1c013f7e:	44d2                	lw	s1,20(sp)
1c013f80:	4942                	lw	s2,16(sp)
1c013f82:	49b2                	lw	s3,12(sp)
1c013f84:	4501                	li	a0,0
1c013f86:	6105                	addi	sp,sp,32
1c013f88:	8082                	ret
  if (__rt_cluster_mount(&__rt_fc_cluster_data[cid], conf->id, 0, event))
1c013f8a:	0049a483          	lw	s1,4(s3)
    __rt_init_cluster_data(cid);
1c013f8e:	8526                	mv	a0,s1
1c013f90:	d7fff0ef          	jal	ra,1c013d0e <__rt_init_cluster_data>
1c013f94:	04048513          	addi	a0,s1,64
1c013f98:	002017b7          	lui	a5,0x201
1c013f9c:	055a                	slli	a0,a0,0x16
1c013f9e:	40078793          	addi	a5,a5,1024 # 201400 <__L2+0x181400>
1c013fa2:	577d                	li	a4,-1
1c013fa4:	00e567a3          	p.sw	a4,a5(a0)
1c013fa8:	002007b7          	lui	a5,0x200
      plp_ctrl_core_bootaddr_set_remote(cid, i, ((int)_start) & 0xffffff00);
1c013fac:	1c000737          	lui	a4,0x1c000
1c013fb0:	04478793          	addi	a5,a5,68 # 200044 <__L2+0x180044>
1c013fb4:	08070713          	addi	a4,a4,128 # 1c000080 <_start>
1c013fb8:	97aa                	add	a5,a5,a0
1c013fba:	ce073733          	p.bclr	a4,a4,7,0
1c013fbe:	007250fb          	lp.setupi	x1,7,1c013fc6 <pi_cluster_open+0xc2>
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + 0x40 + core*4, bootAddr);
1c013fc2:	00e7a22b          	p.sw	a4,4(a5!)
1c013fc6:	0001                	nop
  pulp_write32(ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cid) + ARCHI_CLUSTER_CTRL_OFFSET + EOC_FETCH_OFFSET, mask);
1c013fc8:	002007b7          	lui	a5,0x200
1c013fcc:	07a1                	addi	a5,a5,8
1c013fce:	577d                	li	a4,-1
1c013fd0:	00e567a3          	p.sw	a4,a5(a0)
    rt_event_push(event);
1c013fd4:	8522                	mv	a0,s0
1c013fd6:	942ff0ef          	jal	ra,1c013118 <rt_event_push>
1c013fda:	bf59                	j	1c013f70 <pi_cluster_open+0x6c>

1c013fdc <pi_cluster_close>:
  __rt_cluster_unmount(data->cid, 0, NULL);
1c013fdc:	451c                	lw	a5,8(a0)
{
1c013fde:	1101                	addi	sp,sp,-32
1c013fe0:	cc22                	sw	s0,24(sp)
  __rt_cluster_unmount(data->cid, 0, NULL);
1c013fe2:	5380                	lw	s0,32(a5)
1c013fe4:	1c0177b7          	lui	a5,0x1c017
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c013fe8:	7147a783          	lw	a5,1812(a5) # 1c017714 <__rt_platform>
{
1c013fec:	ce06                	sw	ra,28(sp)
    if (rt_platform() != ARCHI_PLATFORM_FPGA)
1c013fee:	0017a563          	p.beqimm	a5,1,1c013ff8 <pi_cluster_close+0x1c>
      __rt_fll_deinit(__RT_FLL_CL);
1c013ff2:	4505                	li	a0,1
1c013ff4:	d11ff0ef          	jal	ra,1c013d04 <__rt_fll_deinit>
    int pending = 0;
1c013ff8:	c602                	sw	zero,12(sp)
  if (cid == 0) __rt_pmu_cluster_power_down(event, &pending);
1c013ffa:	e409                	bnez	s0,1c014004 <pi_cluster_close+0x28>
1c013ffc:	006c                	addi	a1,sp,12
1c013ffe:	4501                	li	a0,0
1c014000:	915ff0ef          	jal	ra,1c013914 <__rt_pmu_cluster_power_down>
}
1c014004:	40f2                	lw	ra,28(sp)
1c014006:	4462                	lw	s0,24(sp)
1c014008:	4501                	li	a0,0
1c01400a:	6105                	addi	sp,sp,32
1c01400c:	8082                	ret

1c01400e <__rt_cluster_push_fc_event>:
  while (rt_tas_lock_32((int)&__rt_cluster_fc_task_lock) == -1)
1c01400e:	100006b7          	lui	a3,0x10000
1c014012:	06068693          	addi	a3,a3,96 # 10000060 <__rt_cluster_fc_task_lock>
  return addr | (1<<ARCHI_L1_TAS_BIT);
1c014016:	c146c5b3          	p.bset	a1,a3,0,20
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c01401a:	4709                	li	a4,2
1c01401c:	002047b7          	lui	a5,0x204
  signed int result = *(volatile signed int *)__rt_tas_addr(addr);
1c014020:	4190                	lw	a2,0(a1)
1c014022:	05f62063          	p.beqimm	a2,-1,1c014062 <__rt_cluster_push_fc_event+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c014026:	01402773          	csrr	a4,uhartid
  while(data->events != NULL)
1c01402a:	1c0187b7          	lui	a5,0x1c018
  return (hart_id >> 5) & 0x3f;
1c01402e:	8715                	srai	a4,a4,0x5
1c014030:	f2673733          	p.bclr	a4,a4,25,6
1c014034:	02800613          	li	a2,40
1c014038:	b9478793          	addi	a5,a5,-1132 # 1c017b94 <__rt_fc_cluster_data>
1c01403c:	42c707b3          	p.mac	a5,a4,a2
1c014040:	4609                	li	a2,2
1c014042:	00204737          	lui	a4,0x204
1c014046:	43cc                	lw	a1,4(a5)
1c014048:	e585                	bnez	a1,1c014070 <__rt_cluster_push_fc_event+0x62>
  data->events = event;
1c01404a:	c3c8                	sw	a0,4(a5)
  pulp_write32(evtAddr, coreSet);
1c01404c:	1b2017b7          	lui	a5,0x1b201
1c014050:	e007a223          	sw	zero,-508(a5) # 1b200e04 <__fc_tcdm_end+0x1ffde4>
  *(volatile signed int *)addr = value;
1c014054:	0006a023          	sw	zero,0(a3)
1c014058:	002047b7          	lui	a5,0x204
1c01405c:	1007a223          	sw	zero,260(a5) # 204104 <__L2+0x184104>
}
1c014060:	8082                	ret
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c014062:	00e7a423          	sw	a4,8(a5)
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c014066:	03c7e603          	p.elw	a2,60(a5)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c01406a:	00e7a223          	sw	a4,4(a5)
1c01406e:	bf4d                	j	1c014020 <__rt_cluster_push_fc_event+0x12>
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_OR, evtMask);
1c014070:	00c72423          	sw	a2,8(a4) # 204008 <__L2+0x184008>
  value = __builtin_pulp_event_unit_read_fenced((int *)base, offset);
1c014074:	03c76583          	p.elw	a1,60(a4)
  ARCHI_WRITE(ARCHI_EU_DEMUX_ADDR, EU_CORE_MASK_AND, evtMask);
1c014078:	00c72223          	sw	a2,4(a4)
1c01407c:	b7e9                	j	1c014046 <__rt_cluster_push_fc_event+0x38>

1c01407e <__rt_cluster_new>:
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c01407e:	1c0145b7          	lui	a1,0x1c014
{
1c014082:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c014084:	4601                	li	a2,0
1c014086:	d7058593          	addi	a1,a1,-656 # 1c013d70 <__rt_cluster_init>
1c01408a:	4501                	li	a0,0
{
1c01408c:	c606                	sw	ra,12(sp)
  err |= __rt_cbsys_add(RT_CBSYS_START, __rt_cluster_init, NULL);
1c01408e:	b9ffe0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
  if (err) rt_fatal("Unable to initialize time driver\n");
1c014092:	c10d                	beqz	a0,1c0140b4 <__rt_cluster_new+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c014094:	01402673          	csrr	a2,uhartid
1c014098:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c01409c:	40565593          	srai	a1,a2,0x5
1c0140a0:	f265b5b3          	p.bclr	a1,a1,25,6
1c0140a4:	f4563633          	p.bclr	a2,a2,26,5
1c0140a8:	32450513          	addi	a0,a0,804 # 1c017324 <IntegerExpLUT+0xcc>
1c0140ac:	245010ef          	jal	ra,1c015af0 <printf>
1c0140b0:	1c5010ef          	jal	ra,1c015a74 <abort>
}
1c0140b4:	40b2                	lw	ra,12(sp)
1c0140b6:	0141                	addi	sp,sp,16
1c0140b8:	8082                	ret

1c0140ba <__rt_cluster_pulpos_emu_init>:
static struct pi_device *__rt_fc_cluster_device;
static struct pi_cluster_task __rt_pulpos_emu_global_cluster_task;


static void __attribute__((constructor)) __rt_cluster_pulpos_emu_init()
{
1c0140ba:	1141                	addi	sp,sp,-16
  int nb_cluster = rt_nb_cluster();

  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c0140bc:	45b1                	li	a1,12
1c0140be:	4505                	li	a0,1
{
1c0140c0:	c606                	sw	ra,12(sp)
  __rt_fc_cluster_device = rt_alloc(RT_ALLOC_FC_DATA, sizeof(struct pi_device)*nb_cluster);
1c0140c2:	9f6ff0ef          	jal	ra,1c0132b8 <rt_alloc>
1c0140c6:	1c0187b7          	lui	a5,0x1c018
1c0140ca:	aea7ae23          	sw	a0,-1284(a5) # 1c017afc <__rt_fc_cluster_device>
  if (__rt_fc_cluster_device == NULL) {
1c0140ce:	e10d                	bnez	a0,1c0140f0 <__rt_cluster_pulpos_emu_init+0x36>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c0140d0:	01402673          	csrr	a2,uhartid
    rt_fatal("Unable to allocate cluster control structure\n");
1c0140d4:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c0140d8:	40565593          	srai	a1,a2,0x5
1c0140dc:	f265b5b3          	p.bclr	a1,a1,25,6
1c0140e0:	f4563633          	p.bclr	a2,a2,26,5
1c0140e4:	36c50513          	addi	a0,a0,876 # 1c01736c <IntegerExpLUT+0x114>
1c0140e8:	209010ef          	jal	ra,1c015af0 <printf>
1c0140ec:	189010ef          	jal	ra,1c015a74 <abort>
    return;
  }
}
1c0140f0:	40b2                	lw	ra,12(sp)
1c0140f2:	0141                	addi	sp,sp,16
1c0140f4:	8082                	ret

1c0140f6 <rt_cluster_call>:

int rt_cluster_call(rt_cluster_call_t *_call, int cid, void (*entry)(void *arg), void *arg, void *stacks, int master_stack_size, int slave_stack_size, int nb_pe, rt_event_t *event)
{
1c0140f6:	7139                	addi	sp,sp,-64
1c0140f8:	d84a                	sw	s2,48(sp)
1c0140fa:	4906                	lw	s2,64(sp)
1c0140fc:	dc22                	sw	s0,56(sp)
1c0140fe:	842e                	mv	s0,a1
1c014100:	de06                	sw	ra,60(sp)
1c014102:	da26                	sw	s1,52(sp)
1c014104:	d64e                	sw	s3,44(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c014106:	300479f3          	csrrci	s3,mstatus,8
  __asm__ __volatile__ ("" : : : "memory");
1c01410a:	84ca                	mv	s1,s2
  if (likely(event != NULL)) return event;
1c01410c:	02091163          	bnez	s2,1c01412e <rt_cluster_call+0x38>
  return __rt_wait_event_prepare_blocking();
1c014110:	ce32                	sw	a2,28(sp)
1c014112:	cc36                	sw	a3,24(sp)
1c014114:	ca3a                	sw	a4,20(sp)
1c014116:	c83e                	sw	a5,16(sp)
1c014118:	c642                	sw	a6,12(sp)
1c01411a:	c446                	sw	a7,8(sp)
1c01411c:	f33fe0ef          	jal	ra,1c01304e <__rt_wait_event_prepare_blocking>
1c014120:	48a2                	lw	a7,8(sp)
1c014122:	4832                	lw	a6,12(sp)
1c014124:	47c2                	lw	a5,16(sp)
1c014126:	4752                	lw	a4,20(sp)
1c014128:	46e2                	lw	a3,24(sp)
1c01412a:	4672                	lw	a2,28(sp)
1c01412c:	84aa                	mv	s1,a0
static inline struct pi_cluster_task *pi_cluster_task(struct pi_cluster_task *task, void (*entry)(void*), void *arg)
{
    #if defined(PMSIS_DRIVERS)
    memset(task, 0, sizeof(struct pi_cluster_task));
    #endif  /* PMSIS_DRIVERS */
    task->entry = entry;
1c01412e:	1c0185b7          	lui	a1,0x1c018
1c014132:	8bc58513          	addi	a0,a1,-1860 # 1c0178bc <__rt_pulpos_emu_global_cluster_task>
  struct pi_cluster_task *task = &__rt_pulpos_emu_global_cluster_task;

  pi_cluster_task(task, entry, arg);

  task->stacks = stacks;
  task->stack_size = master_stack_size;
1c014136:	c55c                	sw	a5,12(a0)
  task->slave_stack_size = slave_stack_size;
  task->nb_cores = nb_pe;

  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c014138:	1c0187b7          	lui	a5,0x1c018
1c01413c:	c110                	sw	a2,0(a0)
    task->arg = arg;
1c01413e:	c154                	sw	a3,4(a0)
  task->stacks = stacks;
1c014140:	c518                	sw	a4,8(a0)
  task->slave_stack_size = slave_stack_size;
1c014142:	01052823          	sw	a6,16(a0)
  task->nb_cores = nb_pe;
1c014146:	01152a23          	sw	a7,20(a0)
  if (pi_cluster_send_task_to_cl_async(&__rt_fc_cluster_device[cid], task, call_event))
1c01414a:	afc7a503          	lw	a0,-1284(a5) # 1c017afc <__rt_fc_cluster_device>
1c01414e:	47b1                	li	a5,12
1c014150:	8626                	mv	a2,s1
1c014152:	42f40533          	p.mac	a0,s0,a5
1c014156:	8bc58593          	addi	a1,a1,-1860
1c01415a:	2061                	jal	1c0141e2 <pi_cluster_send_task_to_cl_async>
1c01415c:	842a                	mv	s0,a0
1c01415e:	cd01                	beqz	a0,1c014176 <rt_cluster_call+0x80>
  __builtin_pulp_spr_write(reg, val);
1c014160:	30099073          	csrw	mstatus,s3
  {
  	rt_irq_restore(irq);
  	return -1;
1c014164:	547d                	li	s0,-1
  __rt_wait_event_check(event, call_event);

  rt_irq_restore(irq);

  return 0;
}
1c014166:	8522                	mv	a0,s0
1c014168:	50f2                	lw	ra,60(sp)
1c01416a:	5462                	lw	s0,56(sp)
1c01416c:	54d2                	lw	s1,52(sp)
1c01416e:	5942                	lw	s2,48(sp)
1c014170:	59b2                	lw	s3,44(sp)
1c014172:	6121                	addi	sp,sp,64
1c014174:	8082                	ret
  if (event == NULL) __rt_wait_event(call_event);
1c014176:	00091563          	bnez	s2,1c014180 <rt_cluster_call+0x8a>
1c01417a:	8526                	mv	a0,s1
1c01417c:	824ff0ef          	jal	ra,1c0131a0 <__rt_wait_event>
1c014180:	30099073          	csrw	mstatus,s3
  return 0;
1c014184:	b7cd                	j	1c014166 <rt_cluster_call+0x70>

1c014186 <rt_cluster_mount>:

void rt_cluster_mount(int mount, int cid, int flags, rt_event_t *event)
{
1c014186:	7139                	addi	sp,sp,-64
1c014188:	dc22                	sw	s0,56(sp)
1c01418a:	da26                	sw	s1,52(sp)
1c01418c:	d84a                	sw	s2,48(sp)
1c01418e:	4431                	li	s0,12
1c014190:	1c0184b7          	lui	s1,0x1c018
1c014194:	de06                	sw	ra,60(sp)
1c014196:	d64e                	sw	s3,44(sp)
1c014198:	8936                	mv	s2,a3
1c01419a:	02858433          	mul	s0,a1,s0
1c01419e:	afc48493          	addi	s1,s1,-1284 # 1c017afc <__rt_fc_cluster_device>
  if (mount)
1c0141a2:	c91d                	beqz	a0,1c0141d8 <rt_cluster_mount+0x52>
  {
    struct pi_cluster_conf conf;
    pi_cluster_conf_init(&conf);
1c0141a4:	0028                	addi	a0,sp,8
1c0141a6:	89ae                	mv	s3,a1
1c0141a8:	d57ff0ef          	jal	ra,1c013efe <pi_cluster_conf_init>
    pi_open_from_conf(&__rt_fc_cluster_device[cid], &conf);
1c0141ac:	4088                	lw	a0,0(s1)
1c0141ae:	002c                	addi	a1,sp,8
1c0141b0:	9522                	add	a0,a0,s0
1c0141b2:	90bfe0ef          	jal	ra,1c012abc <pi_open_from_conf>
    conf.id = cid;
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c0141b6:	4088                	lw	a0,0(s1)
    conf.id = cid;
1c0141b8:	c64e                	sw	s3,12(sp)
    pi_cluster_open(&__rt_fc_cluster_device[cid]);
1c0141ba:	9522                	add	a0,a0,s0
1c0141bc:	d49ff0ef          	jal	ra,1c013f04 <pi_cluster_open>
  else
  {
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
  }

  if (event)
1c0141c0:	00090563          	beqz	s2,1c0141ca <rt_cluster_mount+0x44>
    rt_event_push(event);
1c0141c4:	854a                	mv	a0,s2
1c0141c6:	f53fe0ef          	jal	ra,1c013118 <rt_event_push>
}
1c0141ca:	50f2                	lw	ra,60(sp)
1c0141cc:	5462                	lw	s0,56(sp)
1c0141ce:	54d2                	lw	s1,52(sp)
1c0141d0:	5942                	lw	s2,48(sp)
1c0141d2:	59b2                	lw	s3,44(sp)
1c0141d4:	6121                	addi	sp,sp,64
1c0141d6:	8082                	ret
    pi_cluster_close(&__rt_fc_cluster_device[cid]);
1c0141d8:	4088                	lw	a0,0(s1)
1c0141da:	9522                	add	a0,a0,s0
1c0141dc:	e01ff0ef          	jal	ra,1c013fdc <pi_cluster_close>
1c0141e0:	b7c5                	j	1c0141c0 <rt_cluster_mount+0x3a>

1c0141e2 <pi_cluster_send_task_to_cl_async>:
  }
}
#endif

int pi_cluster_send_task_to_cl_async(struct pi_device *device, struct pi_cluster_task *task, pi_task_t *async_task)
{
1c0141e2:	1101                	addi	sp,sp,-32
1c0141e4:	ca26                	sw	s1,20(sp)
  rt_fc_cluster_data_t *data = (rt_fc_cluster_data_t *)device->data;
1c0141e6:	4504                	lw	s1,8(a0)
{
1c0141e8:	cc22                	sw	s0,24(sp)
1c0141ea:	c256                	sw	s5,4(sp)
1c0141ec:	842e                	mv	s0,a1
1c0141ee:	8ab2                	mv	s5,a2
1c0141f0:	ce06                	sw	ra,28(sp)
1c0141f2:	c84a                	sw	s2,16(sp)
1c0141f4:	c64e                	sw	s3,12(sp)
1c0141f6:	c452                	sw	s4,8(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0141f8:	30047a73          	csrrci	s4,mstatus,8

  int lock = __rt_cluster_lock(data);

  __rt_task_init(async_task);
  
  task->implem.pending = 1;
1c0141fc:	4785                	li	a5,1
  task->done = 0;
1c0141fe:	00060a23          	sb	zero,20(a2)
1c014202:	d1dc                	sw	a5,36(a1)

  rt_cluster_call_pool_t *cl_data = data->pool;

  if (task->nb_cores == 0)
1c014204:	49dc                	lw	a5,20(a1)
  rt_cluster_call_pool_t *cl_data = data->pool;
1c014206:	0144a983          	lw	s3,20(s1)
  if (task->nb_cores == 0)
1c01420a:	e399                	bnez	a5,1c014210 <pi_cluster_send_task_to_cl_async+0x2e>
    task->nb_cores = pi_cl_cluster_nb_cores();
1c01420c:	47a1                	li	a5,8
1c01420e:	c9dc                	sw	a5,20(a1)

  if (task->stacks == NULL)
1c014210:	441c                	lw	a5,8(s0)
1c014212:	ef85                	bnez	a5,1c01424a <pi_cluster_send_task_to_cl_async+0x68>
  {
    if (task->stack_size == 0)
1c014214:	445c                	lw	a5,12(s0)
1c014216:	eb81                	bnez	a5,1c014226 <pi_cluster_send_task_to_cl_async+0x44>
    {
      task->stack_size = 0x800;
1c014218:	6785                	lui	a5,0x1
1c01421a:	80078793          	addi	a5,a5,-2048 # 800 <__rt_stack_size>
1c01421e:	c45c                	sw	a5,12(s0)
      task->slave_stack_size = 0x400;
1c014220:	40000793          	li	a5,1024
1c014224:	c81c                	sw	a5,16(s0)
    }

    if (task->slave_stack_size == 0)
1c014226:	481c                	lw	a5,16(s0)
1c014228:	00c42903          	lw	s2,12(s0)
1c01422c:	e399                	bnez	a5,1c014232 <pi_cluster_send_task_to_cl_async+0x50>
      task->slave_stack_size = task->stack_size;
1c01422e:	01242823          	sw	s2,16(s0)

    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c014232:	485c                	lw	a5,20(s0)
1c014234:	4818                	lw	a4,16(s0)

    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c014236:	448c                	lw	a1,8(s1)
    int stacks_size = task->stack_size + task->slave_stack_size * (task->nb_cores - 1);
1c014238:	17fd                	addi	a5,a5,-1
1c01423a:	42e78933          	p.mac	s2,a5,a4
    if (data->stacks == NULL || stacks_size != data->stacks_size)
1c01423e:	c9b5                	beqz	a1,1c0142b2 <pi_cluster_send_task_to_cl_async+0xd0>
1c014240:	44d0                	lw	a2,12(s1)
1c014242:	05261f63          	bne	a2,s2,1c0142a0 <pi_cluster_send_task_to_cl_async+0xbe>

      if (data->stacks == NULL)
        goto error;
    }

    task->stacks = data->stacks;
1c014246:	449c                	lw	a5,8(s1)
1c014248:	c41c                	sw	a5,8(s0)

  task->completion_callback = async_task;
#ifdef ARCHI_HAS_CC
  task->implem.core_mask = (1<<(task->nb_cores-1)) - 1;
#else
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c01424a:	4858                	lw	a4,20(s0)
1c01424c:	4785                	li	a5,1
  task->completion_callback = async_task;
1c01424e:	01542c23          	sw	s5,24(s0)
  task->implem.core_mask = (1<<task->nb_cores) - 1;
1c014252:	00e797b3          	sll	a5,a5,a4
1c014256:	17fd                	addi	a5,a5,-1
1c014258:	d41c                	sw	a5,40(s0)
#endif

  task->next = NULL;
1c01425a:	02042023          	sw	zero,32(s0)

  rt_compiler_barrier();

  if (cl_data->last_call_fc)
1c01425e:	0089a783          	lw	a5,8(s3)
1c014262:	cbb5                	beqz	a5,1c0142d6 <pi_cluster_send_task_to_cl_async+0xf4>
  {
    cl_data->last_call_fc->next = task;
1c014264:	d380                	sw	s0,32(a5)
  else
  {
    cl_data->first_call_fc = task;
  }

  cl_data->last_call_fc = task;
1c014266:	0089a423          	sw	s0,8(s3)

  rt_compiler_barrier();
  
  if (cl_data->first_call_fc_for_cl == NULL)
1c01426a:	0009a783          	lw	a5,0(s3)
1c01426e:	e399                	bnez	a5,1c014274 <pi_cluster_send_task_to_cl_async+0x92>
    cl_data->first_call_fc_for_cl = task;
1c014270:	0089a023          	sw	s0,0(s3)
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c014274:	509c                	lw	a5,32(s1)
  pulp_write32(evtAddr, coreSet);
1c014276:	00201737          	lui	a4,0x201
1c01427a:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
  return ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(cluster) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (event << 2);
1c01427e:	04078793          	addi	a5,a5,64
1c014282:	07da                	slli	a5,a5,0x16
  pulp_write32(evtAddr, coreSet);
1c014284:	0007e723          	p.sw	zero,a4(a5)
  __builtin_pulp_spr_write(reg, val);
1c014288:	300a1073          	csrw	mstatus,s4
  rt_compiler_barrier();
  eu_evt_trig(eu_evt_trig_cluster_addr(data->cid, RT_CLUSTER_CALL_EVT), 0);

  __rt_cluster_unlock(data, lock);

  return 0;
1c01428c:	4501                	li	a0,0

error:
  __rt_cluster_unlock(data, lock);
  return -1;
}
1c01428e:	40f2                	lw	ra,28(sp)
1c014290:	4462                	lw	s0,24(sp)
1c014292:	44d2                	lw	s1,20(sp)
1c014294:	4942                	lw	s2,16(sp)
1c014296:	49b2                	lw	s3,12(sp)
1c014298:	4a22                	lw	s4,8(sp)
1c01429a:	4a92                	lw	s5,4(sp)
1c01429c:	6105                	addi	sp,sp,32
1c01429e:	8082                	ret

#if defined(ARCHI_HAS_L1)

extern rt_alloc_t *__rt_alloc_l1;

static inline rt_alloc_t *rt_alloc_l1(int cid) { return &__rt_alloc_l1[cid]; }
1c0142a0:	509c                	lw	a5,32(s1)
1c0142a2:	1c018737          	lui	a4,0x1c018
1c0142a6:	b7472503          	lw	a0,-1164(a4) # 1c017b74 <__rt_alloc_l1>
1c0142aa:	078a                	slli	a5,a5,0x2
        rt_user_free(rt_alloc_l1(data->cid), data->stacks, data->stacks_size);
1c0142ac:	953e                	add	a0,a0,a5
1c0142ae:	fbffe0ef          	jal	ra,1c01326c <rt_user_free>
1c0142b2:	509c                	lw	a5,32(s1)
1c0142b4:	1c018737          	lui	a4,0x1c018
1c0142b8:	b7472503          	lw	a0,-1164(a4) # 1c017b74 <__rt_alloc_l1>
1c0142bc:	078a                	slli	a5,a5,0x2
      data->stacks_size = stacks_size;
1c0142be:	0124a623          	sw	s2,12(s1)
      data->stacks = rt_user_alloc(rt_alloc_l1(data->cid), stacks_size);
1c0142c2:	85ca                	mv	a1,s2
1c0142c4:	953e                	add	a0,a0,a5
1c0142c6:	f5ffe0ef          	jal	ra,1c013224 <rt_user_alloc>
1c0142ca:	c488                	sw	a0,8(s1)
      if (data->stacks == NULL)
1c0142cc:	fd2d                	bnez	a0,1c014246 <pi_cluster_send_task_to_cl_async+0x64>
1c0142ce:	300a1073          	csrw	mstatus,s4
  return -1;
1c0142d2:	557d                	li	a0,-1
1c0142d4:	bf6d                	j	1c01428e <pi_cluster_send_task_to_cl_async+0xac>
    cl_data->first_call_fc = task;
1c0142d6:	0089a223          	sw	s0,4(s3)
1c0142da:	b771                	j	1c014266 <pi_cluster_send_task_to_cl_async+0x84>

1c0142dc <pi_cluster_send_task_to_cl>:



int pi_cluster_send_task_to_cl(struct pi_device *device, struct pi_cluster_task *task)
{
1c0142dc:	7175                	addi	sp,sp,-144
  task->id = PI_TASK_NONE_ID;
1c0142de:	4785                	li	a5,1
  pi_task_t fc_task;

  pi_task_block(&fc_task);

  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c0142e0:	860a                	mv	a2,sp
{
1c0142e2:	c522                	sw	s0,136(sp)
1c0142e4:	c706                	sw	ra,140(sp)
1c0142e6:	c326                	sw	s1,132(sp)
1c0142e8:	c14a                	sw	s2,128(sp)
1c0142ea:	cc3e                	sw	a5,24(sp)
  task->arg[0] = (uint32_t)0;
1c0142ec:	c202                	sw	zero,4(sp)
  task->implem.keep = 1;
1c0142ee:	d43e                	sw	a5,40(sp)
1c0142f0:	00010a23          	sb	zero,20(sp)
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c0142f4:	eefff0ef          	jal	ra,1c0141e2 <pi_cluster_send_task_to_cl_async>
  {
    return -1;
1c0142f8:	547d                	li	s0,-1
  if (pi_cluster_send_task_to_cl_async(device, task, &fc_task))
1c0142fa:	e509                	bnez	a0,1c014304 <pi_cluster_send_task_to_cl+0x28>
1c0142fc:	842a                	mv	s0,a0
  while(!task->done)
1c0142fe:	01410783          	lb	a5,20(sp)
1c014302:	cb81                	beqz	a5,1c014312 <pi_cluster_send_task_to_cl+0x36>
  }

  pi_task_wait_on(&fc_task);

  return 0;
}
1c014304:	8522                	mv	a0,s0
1c014306:	40ba                	lw	ra,140(sp)
1c014308:	442a                	lw	s0,136(sp)
1c01430a:	449a                	lw	s1,132(sp)
1c01430c:	490a                	lw	s2,128(sp)
1c01430e:	6149                	addi	sp,sp,144
1c014310:	8082                	ret
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c014312:	30047973          	csrrci	s2,mstatus,8
  __rt_event_execute(__rt_event_get_current_sched(), wait);
1c014316:	4585                	li	a1,1
1c014318:	01c00513          	li	a0,28
1c01431c:	e21fe0ef          	jal	ra,1c01313c <__rt_event_execute>
  __builtin_pulp_spr_write(reg, val);
1c014320:	30091073          	csrw	mstatus,s2
1c014324:	bfe9                	j	1c0142fe <pi_cluster_send_task_to_cl+0x22>

1c014326 <pi_pad_set_function>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c014326:	300476f3          	csrrci	a3,mstatus,8
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c01432a:	068417b7          	lui	a5,0x6841
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c01432e:	00151713          	slli	a4,a0,0x1
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c014332:	05078793          	addi	a5,a5,80 # 6841050 <__L2+0x67c1050>
  unsigned int padfunId = APB_SOC_PADFUN_NO(pad);
1c014336:	8111                	srli	a0,a0,0x4
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c014338:	953e                	add	a0,a0,a5
1c01433a:	050a                	slli	a0,a0,0x2
  unsigned int padBit = APB_SOC_PADFUN_BIT(pad);
1c01433c:	8b79                	andi	a4,a4,30
  return pulp_read32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id));
1c01433e:	4110                	lw	a2,0(a0)
  unsigned int oldval = hal_apb_soc_padfun_get(padfunId) & ~(((1<<APB_SOC_PADFUN_SIZE)-1) << padBit);
1c014340:	478d                	li	a5,3
1c014342:	00e797b3          	sll	a5,a5,a4
1c014346:	fff7c793          	not	a5,a5
1c01434a:	8ff1                	and	a5,a5,a2
  unsigned int newVal = oldval | (func << padBit);
1c01434c:	00e595b3          	sll	a1,a1,a4
1c014350:	8ddd                	or	a1,a1,a5
  pulp_write32(ARCHI_APB_SOC_CTRL_ADDR + APB_SOC_PADFUN_OFFSET(id), value);
1c014352:	c10c                	sw	a1,0(a0)
  __builtin_pulp_spr_write(reg, val);
1c014354:	30069073          	csrw	mstatus,a3
void pi_pad_set_function(pi_pad_e pad, pi_pad_func_e function)
{
  int irq = rt_irq_disable();
  hal_apb_soc_pad_set_function(pad, function);
  rt_irq_restore(irq);
}
1c014358:	8082                	ret

1c01435a <pi_pad_init>:

void pi_pad_init(uint32_t pad_values[])
{
  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, pad_values[i]);
1c01435a:	4114                	lw	a3,0(a0)
1c01435c:	1a1047b7          	lui	a5,0x1a104
1c014360:	14078713          	addi	a4,a5,320 # 1a104140 <__l1_end+0xa1040dc>
1c014364:	c314                	sw	a3,0(a4)
1c014366:	4154                	lw	a3,4(a0)
1c014368:	14478713          	addi	a4,a5,324
1c01436c:	14878793          	addi	a5,a5,328
1c014370:	c314                	sw	a3,0(a4)
1c014372:	4518                	lw	a4,8(a0)
1c014374:	c398                	sw	a4,0(a5)
  }  
}
1c014376:	8082                	ret

1c014378 <l2_memcpy>:
  req = __pi_hyper_cluster_reqs_first;
  if (req)
  {
    __pi_hyper_cluster_req_exec(req);
  }
}
1c014378:	87aa                	mv	a5,a0
1c01437a:	962e                	add	a2,a2,a1
1c01437c:	00c59363          	bne	a1,a2,1c014382 <l2_memcpy+0xa>
1c014380:	8082                	ret
1c014382:	0015c70b          	p.lbu	a4,1(a1!)
1c014386:	00e780ab          	p.sb	a4,1(a5!)
1c01438a:	bfcd                	j	1c01437c <l2_memcpy+0x4>

1c01438c <rt_event_enqueue>:
1c01438c:	300476f3          	csrrci	a3,mstatus,8
1c014390:	01c02603          	lw	a2,28(zero) # 1c <__rt_sched>
1c014394:	00052023          	sw	zero,0(a0)
1c014398:	01c00713          	li	a4,28
1c01439c:	c619                	beqz	a2,1c0143aa <rt_event_enqueue+0x1e>
1c01439e:	435c                	lw	a5,4(a4)
1c0143a0:	c388                	sw	a0,0(a5)
1c0143a2:	c348                	sw	a0,4(a4)
1c0143a4:	30069073          	csrw	mstatus,a3
1c0143a8:	8082                	ret
1c0143aa:	00a02e23          	sw	a0,28(zero) # 1c <__rt_sched>
1c0143ae:	bfd5                	j	1c0143a2 <rt_event_enqueue+0x16>

1c0143b0 <pi_task_wait_on.isra.4>:
1c0143b0:	1141                	addi	sp,sp,-16
1c0143b2:	c422                	sw	s0,8(sp)
1c0143b4:	c226                	sw	s1,4(sp)
1c0143b6:	c606                	sw	ra,12(sp)
1c0143b8:	c04a                	sw	s2,0(sp)
1c0143ba:	842a                	mv	s0,a0
1c0143bc:	00040783          	lb	a5,0(s0)
1c0143c0:	c799                	beqz	a5,1c0143ce <pi_task_wait_on.isra.4+0x1e>
1c0143c2:	40b2                	lw	ra,12(sp)
1c0143c4:	4422                	lw	s0,8(sp)
1c0143c6:	4492                	lw	s1,4(sp)
1c0143c8:	4902                	lw	s2,0(sp)
1c0143ca:	0141                	addi	sp,sp,16
1c0143cc:	8082                	ret
1c0143ce:	30047973          	csrrci	s2,mstatus,8
1c0143d2:	4585                	li	a1,1
1c0143d4:	01c00513          	li	a0,28
1c0143d8:	d65fe0ef          	jal	ra,1c01313c <__rt_event_execute>
1c0143dc:	30091073          	csrw	mstatus,s2
1c0143e0:	bff1                	j	1c0143bc <pi_task_wait_on.isra.4+0xc>

1c0143e2 <__pi_hyper_pin_settings>:
1c0143e2:	1141                	addi	sp,sp,-16
1c0143e4:	c422                	sw	s0,8(sp)
1c0143e6:	1c017437          	lui	s0,0x1c017
1c0143ea:	3c040413          	addi	s0,s0,960 # 1c0173c0 <__hyper_pad>
1c0143ee:	c226                	sw	s1,4(sp)
1c0143f0:	c606                	sw	ra,12(sp)
1c0143f2:	03440493          	addi	s1,s0,52
1c0143f6:	0044250b          	p.lw	a0,4(s0!)
1c0143fa:	458d                	li	a1,3
1c0143fc:	f2bff0ef          	jal	ra,1c014326 <pi_pad_set_function>
1c014400:	fe941be3          	bne	s0,s1,1c0143f6 <__pi_hyper_pin_settings+0x14>
1c014404:	40b2                	lw	ra,12(sp)
1c014406:	4422                	lw	s0,8(sp)
1c014408:	4492                	lw	s1,4(sp)
1c01440a:	0141                	addi	sp,sp,16
1c01440c:	8082                	ret

1c01440e <__pi_hyper_pin_reset_settings>:
1c01440e:	1141                	addi	sp,sp,-16
1c014410:	c422                	sw	s0,8(sp)
1c014412:	1c017437          	lui	s0,0x1c017
1c014416:	3c040413          	addi	s0,s0,960 # 1c0173c0 <__hyper_pad>
1c01441a:	c226                	sw	s1,4(sp)
1c01441c:	c606                	sw	ra,12(sp)
1c01441e:	03440493          	addi	s1,s0,52
1c014422:	0044250b          	p.lw	a0,4(s0!)
1c014426:	4581                	li	a1,0
1c014428:	effff0ef          	jal	ra,1c014326 <pi_pad_set_function>
1c01442c:	fe941be3          	bne	s0,s1,1c014422 <__pi_hyper_pin_reset_settings+0x14>
1c014430:	40b2                	lw	ra,12(sp)
1c014432:	4422                	lw	s0,8(sp)
1c014434:	4492                	lw	s1,4(sp)
1c014436:	0141                	addi	sp,sp,16
1c014438:	8082                	ret

1c01443a <pi_hyper_conf_init>:
1c01443a:	57fd                	li	a5,-1
1c01443c:	00f50223          	sb	a5,4(a0)
1c014440:	4785                	li	a5,1
1c014442:	c55c                	sw	a5,12(a0)
1c014444:	00052423          	sw	zero,8(a0)
1c014448:	8082                	ret

1c01444a <pi_hyper_open>:
1c01444a:	1141                	addi	sp,sp,-16
1c01444c:	c422                	sw	s0,8(sp)
1c01444e:	c04a                	sw	s2,0(sp)
1c014450:	842a                	mv	s0,a0
1c014452:	00452903          	lw	s2,4(a0)
1c014456:	4541                	li	a0,16
1c014458:	c606                	sw	ra,12(sp)
1c01445a:	c226                	sw	s1,4(sp)
1c01445c:	f8dfe0ef          	jal	ra,1c0133e8 <pi_l2_malloc>
1c014460:	c115                	beqz	a0,1c014484 <pi_hyper_open+0x3a>
1c014462:	00c92783          	lw	a5,12(s2)
1c014466:	84aa                	mv	s1,a0
1c014468:	0217b063          	p.bneimm	a5,1,1c014488 <pi_hyper_open+0x3e>
1c01446c:	000f4637          	lui	a2,0xf4
1c014470:	24060613          	addi	a2,a2,576 # f4240 <__L2+0x74240>
1c014474:	4581                	li	a1,0
1c014476:	3a5000ef          	jal	ra,1c01501a <rt_extern_alloc_init>
1c01447a:	c519                	beqz	a0,1c014488 <pi_hyper_open+0x3e>
1c01447c:	45c1                	li	a1,16
1c01447e:	8526                	mv	a0,s1
1c014480:	f77fe0ef          	jal	ra,1c0133f6 <pi_l2_free>
1c014484:	557d                	li	a0,-1
1c014486:	a0f1                	j	1c014552 <pi_hyper_open+0x108>
1c014488:	478d                	li	a5,3
1c01448a:	c0dc                	sw	a5,4(s1)
1c01448c:	00892783          	lw	a5,8(s2)
1c014490:	c49c                	sw	a5,8(s1)
1c014492:	00c92783          	lw	a5,12(s2)
1c014496:	c4dc                	sw	a5,12(s1)
1c014498:	1c0187b7          	lui	a5,0x1c018
1c01449c:	b0478793          	addi	a5,a5,-1276 # 1c017b04 <__rt_hyper_open_count>
1c0144a0:	4398                	lw	a4,0(a5)
1c0144a2:	00170693          	addi	a3,a4,1
1c0144a6:	c394                	sw	a3,0(a5)
1c0144a8:	e739                	bnez	a4,1c0144f6 <pi_hyper_open+0xac>
1c0144aa:	1a1067b7          	lui	a5,0x1a106
1c0144ae:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fa4>
1c0144b2:	c0673733          	p.bclr	a4,a4,0,6
1c0144b6:	00e7a423          	sw	a4,8(a5)
1c0144ba:	0087a703          	lw	a4,8(a5)
1c0144be:	c0773733          	p.bclr	a4,a4,0,7
1c0144c2:	00e7a423          	sw	a4,8(a5)
1c0144c6:	1a1027b7          	lui	a5,0x1a102
1c0144ca:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10271c>
1c0144ce:	4398                	lw	a4,0(a5)
1c0144d0:	c0374733          	p.bset	a4,a4,0,3
1c0144d4:	c398                	sw	a4,0(a5)
1c0144d6:	1c0007b7          	lui	a5,0x1c000
1c0144da:	4c878793          	addi	a5,a5,1224 # 1c0004c8 <__rt_hyper_handle_copy>
1c0144de:	10f02623          	sw	a5,268(zero) # 10c <_l1_preload_size+0xac>
1c0144e2:	0e002823          	sw	zero,240(zero) # f0 <_l1_preload_size+0x90>
1c0144e6:	12f02623          	sw	a5,300(zero) # 12c <_l1_preload_size+0xcc>
1c0144ea:	10002823          	sw	zero,272(zero) # 110 <_l1_preload_size+0xb0>
1c0144ee:	30f02423          	sw	a5,776(zero) # 308 <__rt_hyper_udma_handle>
1c0144f2:	ef1ff0ef          	jal	ra,1c0143e2 <__pi_hyper_pin_settings>
1c0144f6:	00c92783          	lw	a5,12(s2)
1c0144fa:	00892703          	lw	a4,8(s2)
1c0144fe:	17fd                	addi	a5,a5,-1
1c014500:	0017b793          	seqz	a5,a5
1c014504:	078a                	slli	a5,a5,0x2
1c014506:	ef21                	bnez	a4,1c01455e <pi_hyper_open+0x114>
1c014508:	1a102737          	lui	a4,0x1a102
1c01450c:	1b470613          	addi	a2,a4,436 # 1a1021b4 <__l1_end+0xa102150>
1c014510:	4214                	lw	a3,0(a2)
1c014512:	6591                	lui	a1,0x4
1c014514:	fff58513          	addi	a0,a1,-1 # 3fff <__rt_stack_size+0x37ff>
1c014518:	73b6f693          	andi	a3,a3,1851
1c01451c:	8fd5                	or	a5,a5,a3
1c01451e:	c21c                	sw	a5,0(a2)
1c014520:	1a870793          	addi	a5,a4,424
1c014524:	4394                	lw	a3,0(a5)
1c014526:	f0058593          	addi	a1,a1,-256
1c01452a:	8ee9                	and	a3,a3,a0
1c01452c:	8eed                	and	a3,a3,a1
1c01452e:	1006c6b3          	p.exths	a3,a3
1c014532:	c394                	sw	a3,0(a5)
1c014534:	4214                	lw	a3,0(a2)
1c014536:	7376f693          	andi	a3,a3,1847
1c01453a:	c214                	sw	a3,0(a2)
1c01453c:	4398                	lw	a4,0(a5)
1c01453e:	668d                	lui	a3,0x3
1c014540:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c014544:	8f69                	and	a4,a4,a0
1c014546:	8f75                	and	a4,a4,a3
1c014548:	c4874733          	p.bset	a4,a4,2,8
1c01454c:	c398                	sw	a4,0(a5)
1c01454e:	c404                	sw	s1,8(s0)
1c014550:	4501                	li	a0,0
1c014552:	40b2                	lw	ra,12(sp)
1c014554:	4422                	lw	s0,8(sp)
1c014556:	4492                	lw	s1,4(sp)
1c014558:	4902                	lw	s2,0(sp)
1c01455a:	0141                	addi	sp,sp,16
1c01455c:	8082                	ret
1c01455e:	1a102737          	lui	a4,0x1a102
1c014562:	1c470613          	addi	a2,a4,452 # 1a1021c4 <__l1_end+0xa102160>
1c014566:	4214                	lw	a3,0(a2)
1c014568:	1b870713          	addi	a4,a4,440
1c01456c:	03b6f693          	andi	a3,a3,59
1c014570:	8fd5                	or	a5,a5,a3
1c014572:	c21c                	sw	a5,0(a2)
1c014574:	431c                	lw	a5,0(a4)
1c014576:	6691                	lui	a3,0x4
1c014578:	fff68593          	addi	a1,a3,-1 # 3fff <__rt_stack_size+0x37ff>
1c01457c:	8fed                	and	a5,a5,a1
1c01457e:	f0068693          	addi	a3,a3,-256
1c014582:	8ff5                	and	a5,a5,a3
1c014584:	c007c7b3          	p.bset	a5,a5,0,0
1c014588:	1007c7b3          	p.exths	a5,a5
1c01458c:	c31c                	sw	a5,0(a4)
1c01458e:	4214                	lw	a3,0(a2)
1c014590:	0376f693          	andi	a3,a3,55
1c014594:	c214                	sw	a3,0(a2)
1c014596:	431c                	lw	a5,0(a4)
1c014598:	668d                	lui	a3,0x3
1c01459a:	0ff68693          	addi	a3,a3,255 # 30ff <__rt_stack_size+0x28ff>
1c01459e:	8fed                	and	a5,a5,a1
1c0145a0:	8ff5                	and	a5,a5,a3
1c0145a2:	c487c7b3          	p.bset	a5,a5,2,8
1c0145a6:	c31c                	sw	a5,0(a4)
1c0145a8:	b75d                	j	1c01454e <pi_hyper_open+0x104>

1c0145aa <pi_hyper_close>:
1c0145aa:	1c018737          	lui	a4,0x1c018
1c0145ae:	b0470713          	addi	a4,a4,-1276 # 1c017b04 <__rt_hyper_open_count>
1c0145b2:	431c                	lw	a5,0(a4)
1c0145b4:	1141                	addi	sp,sp,-16
1c0145b6:	c422                	sw	s0,8(sp)
1c0145b8:	c606                	sw	ra,12(sp)
1c0145ba:	17fd                	addi	a5,a5,-1
1c0145bc:	c31c                	sw	a5,0(a4)
1c0145be:	4500                	lw	s0,8(a0)
1c0145c0:	e7ad                	bnez	a5,1c01462a <pi_hyper_close+0x80>
1c0145c2:	404c                	lw	a1,4(s0)
1c0145c4:	47fd                	li	a5,31
1c0145c6:	00159693          	slli	a3,a1,0x1
1c0145ca:	06d7dd63          	ble	a3,a5,1c014644 <pi_hyper_close+0x9a>
1c0145ce:	fe068513          	addi	a0,a3,-32
1c0145d2:	4611                	li	a2,4
1c0145d4:	1a1067b7          	lui	a5,0x1a106
1c0145d8:	20c7f803          	p.lw	a6,a2(a5)
1c0145dc:	4705                	li	a4,1
1c0145de:	00a71733          	sll	a4,a4,a0
1c0145e2:	01076733          	or	a4,a4,a6
1c0145e6:	00e7e623          	p.sw	a4,a2(a5)
1c0145ea:	00168713          	addi	a4,a3,1
1c0145ee:	47fd                	li	a5,31
1c0145f0:	4621                	li	a2,8
1c0145f2:	00e7d563          	ble	a4,a5,1c0145fc <pi_hyper_close+0x52>
1c0145f6:	fe168713          	addi	a4,a3,-31
1c0145fa:	4611                	li	a2,4
1c0145fc:	1a1066b7          	lui	a3,0x1a106
1c014600:	20c6f503          	p.lw	a0,a2(a3)
1c014604:	4785                	li	a5,1
1c014606:	00e79733          	sll	a4,a5,a4
1c01460a:	8f49                	or	a4,a4,a0
1c01460c:	00e6e623          	p.sw	a4,a2(a3)
1c014610:	1a102737          	lui	a4,0x1a102
1c014614:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10271c>
1c014618:	4314                	lw	a3,0(a4)
1c01461a:	00b797b3          	sll	a5,a5,a1
1c01461e:	fff7c793          	not	a5,a5
1c014622:	8ff5                	and	a5,a5,a3
1c014624:	c31c                	sw	a5,0(a4)
1c014626:	de9ff0ef          	jal	ra,1c01440e <__pi_hyper_pin_reset_settings>
1c01462a:	445c                	lw	a5,12(s0)
1c01462c:	0017b563          	p.bneimm	a5,1,1c014636 <pi_hyper_close+0x8c>
1c014630:	8522                	mv	a0,s0
1c014632:	241000ef          	jal	ra,1c015072 <rt_extern_alloc_deinit>
1c014636:	8522                	mv	a0,s0
1c014638:	4422                	lw	s0,8(sp)
1c01463a:	40b2                	lw	ra,12(sp)
1c01463c:	45c1                	li	a1,16
1c01463e:	0141                	addi	sp,sp,16
1c014640:	db7fe06f          	j	1c0133f6 <pi_l2_free>
1c014644:	8536                	mv	a0,a3
1c014646:	4621                	li	a2,8
1c014648:	b771                	j	1c0145d4 <pi_hyper_close+0x2a>

1c01464a <__pi_hyper_copy_aligned>:
1c01464a:	40155793          	srai	a5,a0,0x1
1c01464e:	1a102837          	lui	a6,0x1a102
1c014652:	079e                	slli	a5,a5,0x7
1c014654:	0512                	slli	a0,a0,0x4
1c014656:	97c2                	add	a5,a5,a6
1c014658:	8941                	andi	a0,a0,16
1c01465a:	953e                	add	a0,a0,a5
1c01465c:	20000813          	li	a6,512
1c014660:	30800793          	li	a5,776
1c014664:	02d87c63          	bleu	a3,a6,1c01469c <__pi_hyper_copy_aligned+0x52>
1c014668:	cbd4                	sw	a3,20(a5)
1c01466a:	1c0006b7          	lui	a3,0x1c000
1c01466e:	56068693          	addi	a3,a3,1376 # 1c000560 <__rt_hyper_handle_burst>
1c014672:	c394                	sw	a3,0(a5)
1c014674:	c3c8                	sw	a0,4(a5)
1c014676:	c790                	sw	a2,8(a5)
1c014678:	c7cc                	sw	a1,12(a5)
1c01467a:	0107a823          	sw	a6,16(a5) # 1a106010 <__l1_end+0xa105fac>
1c01467e:	20000693          	li	a3,512
1c014682:	cf98                	sw	a4,24(a5)
1c014684:	1a1027b7          	lui	a5,0x1a102
1c014688:	1ac7a023          	sw	a2,416(a5) # 1a1021a0 <__l1_end+0xa10213c>
1c01468c:	00b52023          	sw	a1,0(a0)
1c014690:	00d52223          	sw	a3,4(a0)
1c014694:	47c1                	li	a5,16
1c014696:	00f52423          	sw	a5,8(a0)
1c01469a:	8082                	ret
1c01469c:	0007a823          	sw	zero,16(a5)
1c0146a0:	b7cd                	j	1c014682 <__pi_hyper_copy_aligned+0x38>

1c0146a2 <__pi_hyper_copy_exec>:
1c0146a2:	30800813          	li	a6,776
1c0146a6:	00e82e23          	sw	a4,28(a6) # 1a10201c <__l1_end+0xa101fb8>
1c0146aa:	fa25b833          	p.bclr	a6,a1,29,2
1c0146ae:	30800793          	li	a5,776
1c0146b2:	00081a63          	bnez	a6,1c0146c6 <__pi_hyper_copy_exec+0x24>
1c0146b6:	fc163833          	p.bclr	a6,a2,30,1
1c0146ba:	00081663          	bnez	a6,1c0146c6 <__pi_hyper_copy_exec+0x24>
1c0146be:	fa26b833          	p.bclr	a6,a3,29,2
1c0146c2:	00080863          	beqz	a6,1c0146d2 <__pi_hyper_copy_exec+0x30>
1c0146c6:	fc153833          	p.bclr	a6,a0,30,1
1c0146ca:	00080663          	beqz	a6,1c0146d6 <__pi_hyper_copy_exec+0x34>
1c0146ce:	0026b463          	p.bneimm	a3,2,1c0146d6 <__pi_hyper_copy_exec+0x34>
1c0146d2:	f79ff06f          	j	1c01464a <__pi_hyper_copy_aligned>
1c0146d6:	d388                	sw	a0,32(a5)
1c0146d8:	853a                	mv	a0,a4
1c0146da:	d3d0                	sw	a2,36(a5)
1c0146dc:	d78c                	sw	a1,40(a5)
1c0146de:	d7d4                	sw	a3,44(a5)
1c0146e0:	02078823          	sb	zero,48(a5)
1c0146e4:	dbd8                	sw	a4,52(a5)
1c0146e6:	aa31                	j	1c014802 <__pi_hyper_copy_misaligned>

1c0146e8 <__pi_hyper_copy>:
1c0146e8:	1141                	addi	sp,sp,-16
1c0146ea:	c606                	sw	ra,12(sp)
1c0146ec:	c422                	sw	s0,8(sp)
1c0146ee:	30047473          	csrrci	s0,mstatus,8
1c0146f2:	c781                	beqz	a5,1c0146fa <__pi_hyper_copy+0x12>
1c0146f4:	010007b7          	lui	a5,0x1000
1c0146f8:	963e                	add	a2,a2,a5
1c0146fa:	30800813          	li	a6,776
1c0146fe:	01c82803          	lw	a6,28(a6)
1c014702:	30800793          	li	a5,776
1c014706:	02080963          	beqz	a6,1c014738 <__pi_hyper_copy+0x50>
1c01470a:	0387a803          	lw	a6,56(a5) # 1000038 <__L2+0xf80038>
1c01470e:	02080363          	beqz	a6,1c014734 <__pi_hyper_copy+0x4c>
1c014712:	03c7a803          	lw	a6,60(a5)
1c014716:	00e82e23          	sw	a4,28(a6)
1c01471a:	dfd8                	sw	a4,60(a5)
1c01471c:	00072e23          	sw	zero,28(a4)
1c014720:	df08                	sw	a0,56(a4)
1c014722:	df4c                	sw	a1,60(a4)
1c014724:	c330                	sw	a2,64(a4)
1c014726:	c374                	sw	a3,68(a4)
1c014728:	30041073          	csrw	mstatus,s0
1c01472c:	40b2                	lw	ra,12(sp)
1c01472e:	4422                	lw	s0,8(sp)
1c014730:	0141                	addi	sp,sp,16
1c014732:	8082                	ret
1c014734:	df98                	sw	a4,56(a5)
1c014736:	b7d5                	j	1c01471a <__pi_hyper_copy+0x32>
1c014738:	f6bff0ef          	jal	ra,1c0146a2 <__pi_hyper_copy_exec>
1c01473c:	b7f5                	j	1c014728 <__pi_hyper_copy+0x40>

1c01473e <pi_hyper_read_async>:
1c01473e:	451c                	lw	a5,8(a0)
1c014740:	00070a23          	sb	zero,20(a4)
1c014744:	8832                	mv	a6,a2
1c014746:	43c8                	lw	a0,4(a5)
1c014748:	479c                	lw	a5,8(a5)
1c01474a:	862e                	mv	a2,a1
1c01474c:	0506                	slli	a0,a0,0x1
1c01474e:	85c2                	mv	a1,a6
1c014750:	f99ff06f          	j	1c0146e8 <__pi_hyper_copy>

1c014754 <pi_hyper_read>:
1c014754:	7175                	addi	sp,sp,-144
1c014756:	4785                	li	a5,1
1c014758:	870a                	mv	a4,sp
1c01475a:	c706                	sw	ra,140(sp)
1c01475c:	cc3e                	sw	a5,24(sp)
1c01475e:	d43e                	sw	a5,40(sp)
1c014760:	c202                	sw	zero,4(sp)
1c014762:	00010a23          	sb	zero,20(sp)
1c014766:	fd9ff0ef          	jal	ra,1c01473e <pi_hyper_read_async>
1c01476a:	0848                	addi	a0,sp,20
1c01476c:	c45ff0ef          	jal	ra,1c0143b0 <pi_task_wait_on.isra.4>
1c014770:	40ba                	lw	ra,140(sp)
1c014772:	6149                	addi	sp,sp,144
1c014774:	8082                	ret

1c014776 <pi_hyper_write_async>:
1c014776:	451c                	lw	a5,8(a0)
1c014778:	00070a23          	sb	zero,20(a4)
1c01477c:	8832                	mv	a6,a2
1c01477e:	43c8                	lw	a0,4(a5)
1c014780:	479c                	lw	a5,8(a5)
1c014782:	862e                	mv	a2,a1
1c014784:	0506                	slli	a0,a0,0x1
1c014786:	85c2                	mv	a1,a6
1c014788:	0505                	addi	a0,a0,1
1c01478a:	f5fff06f          	j	1c0146e8 <__pi_hyper_copy>

1c01478e <pi_hyper_write>:
1c01478e:	7175                	addi	sp,sp,-144
1c014790:	4785                	li	a5,1
1c014792:	870a                	mv	a4,sp
1c014794:	c706                	sw	ra,140(sp)
1c014796:	cc3e                	sw	a5,24(sp)
1c014798:	d43e                	sw	a5,40(sp)
1c01479a:	c202                	sw	zero,4(sp)
1c01479c:	00010a23          	sb	zero,20(sp)
1c0147a0:	fd7ff0ef          	jal	ra,1c014776 <pi_hyper_write_async>
1c0147a4:	0848                	addi	a0,sp,20
1c0147a6:	c0bff0ef          	jal	ra,1c0143b0 <pi_task_wait_on.isra.4>
1c0147aa:	40ba                	lw	ra,140(sp)
1c0147ac:	6149                	addi	sp,sp,144
1c0147ae:	8082                	ret

1c0147b0 <exec_pending_task>:
1c0147b0:	30800793          	li	a5,776
1c0147b4:	5f98                	lw	a4,56(a5)
1c0147b6:	c729                	beqz	a4,1c014800 <exec_pending_task+0x50>
1c0147b8:	4f54                	lw	a3,28(a4)
1c0147ba:	03872803          	lw	a6,56(a4)
1c0147be:	5f4c                	lw	a1,60(a4)
1c0147c0:	df94                	sw	a3,56(a5)
1c0147c2:	ee883533          	p.bclr	a0,a6,23,8
1c0147c6:	ce881833          	p.extractu	a6,a6,7,8
1c0147ca:	4330                	lw	a2,64(a4)
1c0147cc:	4374                	lw	a3,68(a4)
1c0147ce:	00081463          	bnez	a6,1c0147d6 <exec_pending_task+0x26>
1c0147d2:	ed1ff06f          	j	1c0146a2 <__pi_hyper_copy_exec>
1c0147d6:	04c72803          	lw	a6,76(a4)
1c0147da:	04872883          	lw	a7,72(a4)
1c0147de:	d388                	sw	a0,32(a5)
1c0147e0:	d3d0                	sw	a2,36(a5)
1c0147e2:	853a                	mv	a0,a4
1c0147e4:	0506d633          	p.minu	a2,a3,a6
1c0147e8:	cfd8                	sw	a4,28(a5)
1c0147ea:	d78c                	sw	a1,40(a5)
1c0147ec:	d7d0                	sw	a2,44(a5)
1c0147ee:	02078823          	sb	zero,48(a5)
1c0147f2:	dbd8                	sw	a4,52(a5)
1c0147f4:	c3b4                	sw	a3,64(a5)
1c0147f6:	0507a223          	sw	a6,68(a5)
1c0147fa:	0517a423          	sw	a7,72(a5)
1c0147fe:	a011                	j	1c014802 <__pi_hyper_copy_misaligned>
1c014800:	8082                	ret

1c014802 <__pi_hyper_copy_misaligned>:
1c014802:	7179                	addi	sp,sp,-48
1c014804:	d422                	sw	s0,40(sp)
1c014806:	30800793          	li	a5,776
1c01480a:	ce4e                	sw	s3,28(sp)
1c01480c:	89aa                	mv	s3,a0
1c01480e:	5388                	lw	a0,32(a5)
1c014810:	d606                	sw	ra,44(sp)
1c014812:	d226                	sw	s1,36(sp)
1c014814:	d04a                	sw	s2,32(sp)
1c014816:	cc52                	sw	s4,24(sp)
1c014818:	ca56                	sw	s5,20(sp)
1c01481a:	c85a                	sw	s6,16(sp)
1c01481c:	c65e                	sw	s7,12(sp)
1c01481e:	c462                	sw	s8,8(sp)
1c014820:	fc1537b3          	p.bclr	a5,a0,30,1
1c014824:	30800413          	li	s0,776
1c014828:	e7a1                	bnez	a5,1c014870 <__pi_hyper_copy_misaligned+0x6e>
1c01482a:	1c018c37          	lui	s8,0x1c018
1c01482e:	8e8c0913          	addi	s2,s8,-1816 # 1c0178e8 <__pi_hyper_temp_buffer>
1c014832:	4a0d                	li	s4,3
1c014834:	07c00a93          	li	s5,124
1c014838:	00190b13          	addi	s6,s2,1
1c01483c:	5408                	lw	a0,40(s0)
1c01483e:	5444                	lw	s1,44(s0)
1c014840:	5050                	lw	a2,36(s0)
1c014842:	00350793          	addi	a5,a0,3
1c014846:	c207b7b3          	p.bclr	a5,a5,1,0
1c01484a:	8f89                	sub	a5,a5,a0
1c01484c:	8bbe                	mv	s7,a5
1c01484e:	009a6363          	bltu	s4,s1,1c014854 <__pi_hyper_copy_misaligned+0x52>
1c014852:	8ba6                	mv	s7,s1
1c014854:	1c0b8663          	beqz	s7,1c014a20 <__pi_hyper_copy_misaligned+0x21e>
1c014858:	03044783          	lbu	a5,48(s0)
1c01485c:	16079f63          	bnez	a5,1c0149da <__pi_hyper_copy_misaligned+0x1d8>
1c014860:	4701                	li	a4,0
1c014862:	4691                	li	a3,4
1c014864:	c0063633          	p.bclr	a2,a2,0,0
1c014868:	8e8c0593          	addi	a1,s8,-1816
1c01486c:	5008                	lw	a0,32(s0)
1c01486e:	a889                	j	1c0148c0 <__pi_hyper_copy_misaligned+0xbe>
1c014870:	540c                	lw	a1,40(s0)
1c014872:	04442883          	lw	a7,68(s0)
1c014876:	04842303          	lw	t1,72(s0)
1c01487a:	00358793          	addi	a5,a1,3
1c01487e:	5050                	lw	a2,36(s0)
1c014880:	5454                	lw	a3,44(s0)
1c014882:	4038                	lw	a4,64(s0)
1c014884:	c207b7b3          	p.bclr	a5,a5,1,0
1c014888:	8f8d                	sub	a5,a5,a1
1c01488a:	41130333          	sub	t1,t1,a7
1c01488e:	4801                	li	a6,0
1c014890:	4e0d                	li	t3,3
1c014892:	84be                	mv	s1,a5
1c014894:	00de6363          	bltu	t3,a3,1c01489a <__pi_hyper_copy_misaligned+0x98>
1c014898:	84b6                	mv	s1,a3
1c01489a:	c4b5                	beqz	s1,1c014906 <__pi_hyper_copy_misaligned+0x104>
1c01489c:	00080563          	beqz	a6,1c0148a6 <__pi_hyper_copy_misaligned+0xa4>
1c0148a0:	d050                	sw	a2,36(s0)
1c0148a2:	d454                	sw	a3,44(s0)
1c0148a4:	c038                	sw	a4,64(s0)
1c0148a6:	03044703          	lbu	a4,48(s0)
1c0148aa:	1c018937          	lui	s2,0x1c018
1c0148ae:	8e890793          	addi	a5,s2,-1816 # 1c0178e8 <__pi_hyper_temp_buffer>
1c0148b2:	ef09                	bnez	a4,1c0148cc <__pi_hyper_copy_misaligned+0xca>
1c0148b4:	4691                	li	a3,4
1c0148b6:	c0063633          	p.bclr	a2,a2,0,0
1c0148ba:	8e890593          	addi	a1,s2,-1816
1c0148be:	157d                	addi	a0,a0,-1
1c0148c0:	d8bff0ef          	jal	ra,1c01464a <__pi_hyper_copy_aligned>
1c0148c4:	4785                	li	a5,1
1c0148c6:	02f40823          	sb	a5,48(s0)
1c0148ca:	aa3d                	j	1c014a08 <__pi_hyper_copy_misaligned+0x206>
1c0148cc:	fc163533          	p.bclr	a0,a2,30,1
1c0148d0:	953e                	add	a0,a0,a5
1c0148d2:	8626                	mv	a2,s1
1c0148d4:	02040823          	sb	zero,48(s0)
1c0148d8:	aa1ff0ef          	jal	ra,1c014378 <l2_memcpy>
1c0148dc:	5050                	lw	a2,36(s0)
1c0148de:	5008                	lw	a0,32(s0)
1c0148e0:	4701                	li	a4,0
1c0148e2:	4691                	li	a3,4
1c0148e4:	c0063633          	p.bclr	a2,a2,0,0
1c0148e8:	8e890593          	addi	a1,s2,-1816
1c0148ec:	d5fff0ef          	jal	ra,1c01464a <__pi_hyper_copy_aligned>
1c0148f0:	505c                	lw	a5,36(s0)
1c0148f2:	97a6                	add	a5,a5,s1
1c0148f4:	d05c                	sw	a5,36(s0)
1c0148f6:	541c                	lw	a5,40(s0)
1c0148f8:	97a6                	add	a5,a5,s1
1c0148fa:	d41c                	sw	a5,40(s0)
1c0148fc:	545c                	lw	a5,44(s0)
1c0148fe:	409784b3          	sub	s1,a5,s1
1c014902:	d444                	sw	s1,44(s0)
1c014904:	a211                	j	1c014a08 <__pi_hyper_copy_misaligned+0x206>
1c014906:	c2d1                	beqz	a3,1c01498a <__pi_hyper_copy_misaligned+0x188>
1c014908:	00080563          	beqz	a6,1c014912 <__pi_hyper_copy_misaligned+0x110>
1c01490c:	d050                	sw	a2,36(s0)
1c01490e:	d454                	sw	a3,44(s0)
1c014910:	c038                	sw	a4,64(s0)
1c014912:	97b2                	add	a5,a5,a2
1c014914:	fc17b7b3          	p.bclr	a5,a5,30,1
1c014918:	c206b4b3          	p.bclr	s1,a3,1,0
1c01491c:	ef89                	bnez	a5,1c014936 <__pi_hyper_copy_misaligned+0x134>
1c01491e:	4701                	li	a4,0
1c014920:	86a6                	mv	a3,s1
1c014922:	d29ff0ef          	jal	ra,1c01464a <__pi_hyper_copy_aligned>
1c014926:	505c                	lw	a5,36(s0)
1c014928:	5454                	lw	a3,44(s0)
1c01492a:	97a6                	add	a5,a5,s1
1c01492c:	d05c                	sw	a5,36(s0)
1c01492e:	541c                	lw	a5,40(s0)
1c014930:	97a6                	add	a5,a5,s1
1c014932:	d41c                	sw	a5,40(s0)
1c014934:	a881                	j	1c014984 <__pi_hyper_copy_misaligned+0x182>
1c014936:	03044703          	lbu	a4,48(s0)
1c01493a:	1c018937          	lui	s2,0x1c018
1c01493e:	8e890793          	addi	a5,s2,-1816 # 1c0178e8 <__pi_hyper_temp_buffer>
1c014942:	db2d                	beqz	a4,1c0148b4 <__pi_hyper_copy_misaligned+0xb2>
1c014944:	07c00693          	li	a3,124
1c014948:	04d4d4b3          	p.minu	s1,s1,a3
1c01494c:	00178513          	addi	a0,a5,1
1c014950:	fff48613          	addi	a2,s1,-1
1c014954:	02040823          	sb	zero,48(s0)
1c014958:	a21ff0ef          	jal	ra,1c014378 <l2_memcpy>
1c01495c:	5050                	lw	a2,36(s0)
1c01495e:	5008                	lw	a0,32(s0)
1c014960:	86a6                	mv	a3,s1
1c014962:	4701                	li	a4,0
1c014964:	c0063633          	p.bclr	a2,a2,0,0
1c014968:	8e890593          	addi	a1,s2,-1816
1c01496c:	cdfff0ef          	jal	ra,1c01464a <__pi_hyper_copy_aligned>
1c014970:	505c                	lw	a5,36(s0)
1c014972:	5454                	lw	a3,44(s0)
1c014974:	17fd                	addi	a5,a5,-1
1c014976:	97a6                	add	a5,a5,s1
1c014978:	d05c                	sw	a5,36(s0)
1c01497a:	541c                	lw	a5,40(s0)
1c01497c:	0685                	addi	a3,a3,1
1c01497e:	17fd                	addi	a5,a5,-1
1c014980:	97a6                	add	a5,a5,s1
1c014982:	d41c                	sw	a5,40(s0)
1c014984:	409684b3          	sub	s1,a3,s1
1c014988:	bfad                	j	1c014902 <__pi_hyper_copy_misaligned+0x100>
1c01498a:	e719                	bnez	a4,1c014998 <__pi_hyper_copy_misaligned+0x196>
1c01498c:	00080c63          	beqz	a6,1c0149a4 <__pi_hyper_copy_misaligned+0x1a2>
1c014990:	d050                	sw	a2,36(s0)
1c014992:	02042623          	sw	zero,44(s0)
1c014996:	a029                	j	1c0149a0 <__pi_hyper_copy_misaligned+0x19e>
1c014998:	02e8ea63          	bltu	a7,a4,1c0149cc <__pi_hyper_copy_misaligned+0x1ca>
1c01499c:	fe081ae3          	bnez	a6,1c014990 <__pi_hyper_copy_misaligned+0x18e>
1c0149a0:	04042023          	sw	zero,64(s0)
1c0149a4:	854e                	mv	a0,s3
1c0149a6:	02042a23          	sw	zero,52(s0)
1c0149aa:	00042e23          	sw	zero,28(s0)
1c0149ae:	9dfff0ef          	jal	ra,1c01438c <rt_event_enqueue>
1c0149b2:	5422                	lw	s0,40(sp)
1c0149b4:	50b2                	lw	ra,44(sp)
1c0149b6:	5492                	lw	s1,36(sp)
1c0149b8:	5902                	lw	s2,32(sp)
1c0149ba:	49f2                	lw	s3,28(sp)
1c0149bc:	4a62                	lw	s4,24(sp)
1c0149be:	4ad2                	lw	s5,20(sp)
1c0149c0:	4b42                	lw	s6,16(sp)
1c0149c2:	4bb2                	lw	s7,12(sp)
1c0149c4:	4c22                	lw	s8,8(sp)
1c0149c6:	6145                	addi	sp,sp,48
1c0149c8:	de9ff06f          	j	1c0147b0 <exec_pending_task>
1c0149cc:	41170733          	sub	a4,a4,a7
1c0149d0:	961a                	add	a2,a2,t1
1c0149d2:	4805                	li	a6,1
1c0149d4:	04e8d6b3          	p.minu	a3,a7,a4
1c0149d8:	bd6d                	j	1c014892 <__pi_hyper_copy_misaligned+0x90>
1c0149da:	fc1635b3          	p.bclr	a1,a2,30,1
1c0149de:	95ca                	add	a1,a1,s2
1c0149e0:	865e                	mv	a2,s7
1c0149e2:	02040823          	sb	zero,48(s0)
1c0149e6:	993ff0ef          	jal	ra,1c014378 <l2_memcpy>
1c0149ea:	505c                	lw	a5,36(s0)
1c0149ec:	97de                	add	a5,a5,s7
1c0149ee:	d05c                	sw	a5,36(s0)
1c0149f0:	541c                	lw	a5,40(s0)
1c0149f2:	97de                	add	a5,a5,s7
1c0149f4:	d41c                	sw	a5,40(s0)
1c0149f6:	545c                	lw	a5,44(s0)
1c0149f8:	41778bb3          	sub	s7,a5,s7
1c0149fc:	03742623          	sw	s7,44(s0)
1c014a00:	e20b9ee3          	bnez	s7,1c01483c <__pi_hyper_copy_misaligned+0x3a>
1c014a04:	545c                	lw	a5,44(s0)
1c014a06:	c7a5                	beqz	a5,1c014a6e <__pi_hyper_copy_misaligned+0x26c>
1c014a08:	50b2                	lw	ra,44(sp)
1c014a0a:	5422                	lw	s0,40(sp)
1c014a0c:	5492                	lw	s1,36(sp)
1c014a0e:	5902                	lw	s2,32(sp)
1c014a10:	49f2                	lw	s3,28(sp)
1c014a12:	4a62                	lw	s4,24(sp)
1c014a14:	4ad2                	lw	s5,20(sp)
1c014a16:	4b42                	lw	s6,16(sp)
1c014a18:	4bb2                	lw	s7,12(sp)
1c014a1a:	4c22                	lw	s8,8(sp)
1c014a1c:	6145                	addi	sp,sp,48
1c014a1e:	8082                	ret
1c014a20:	d0f5                	beqz	s1,1c014a04 <__pi_hyper_copy_misaligned+0x202>
1c014a22:	97b2                	add	a5,a5,a2
1c014a24:	fc17b7b3          	p.bclr	a5,a5,30,1
1c014a28:	c204b4b3          	p.bclr	s1,s1,1,0
1c014a2c:	e791                	bnez	a5,1c014a38 <__pi_hyper_copy_misaligned+0x236>
1c014a2e:	85aa                	mv	a1,a0
1c014a30:	4701                	li	a4,0
1c014a32:	86a6                	mv	a3,s1
1c014a34:	5008                	lw	a0,32(s0)
1c014a36:	b5f5                	j	1c014922 <__pi_hyper_copy_misaligned+0x120>
1c014a38:	03044783          	lbu	a5,48(s0)
1c014a3c:	0554d4b3          	p.minu	s1,s1,s5
1c014a40:	e789                	bnez	a5,1c014a4a <__pi_hyper_copy_misaligned+0x248>
1c014a42:	4701                	li	a4,0
1c014a44:	00448693          	addi	a3,s1,4
1c014a48:	bd31                	j	1c014864 <__pi_hyper_copy_misaligned+0x62>
1c014a4a:	8626                	mv	a2,s1
1c014a4c:	85da                	mv	a1,s6
1c014a4e:	02040823          	sb	zero,48(s0)
1c014a52:	927ff0ef          	jal	ra,1c014378 <l2_memcpy>
1c014a56:	505c                	lw	a5,36(s0)
1c014a58:	5454                	lw	a3,44(s0)
1c014a5a:	97a6                	add	a5,a5,s1
1c014a5c:	d05c                	sw	a5,36(s0)
1c014a5e:	541c                	lw	a5,40(s0)
1c014a60:	97a6                	add	a5,a5,s1
1c014a62:	409684b3          	sub	s1,a3,s1
1c014a66:	d41c                	sw	a5,40(s0)
1c014a68:	d444                	sw	s1,44(s0)
1c014a6a:	dcc9                	beqz	s1,1c014a04 <__pi_hyper_copy_misaligned+0x202>
1c014a6c:	bbc1                	j	1c01483c <__pi_hyper_copy_misaligned+0x3a>
1c014a6e:	4038                	lw	a4,64(s0)
1c014a70:	db15                	beqz	a4,1c0149a4 <__pi_hyper_copy_misaligned+0x1a2>
1c014a72:	407c                	lw	a5,68(s0)
1c014a74:	00e7ff63          	bleu	a4,a5,1c014a92 <__pi_hyper_copy_misaligned+0x290>
1c014a78:	8f1d                	sub	a4,a4,a5
1c014a7a:	c038                	sw	a4,64(s0)
1c014a7c:	4034                	lw	a3,64(s0)
1c014a7e:	d29d                	beqz	a3,1c0149a4 <__pi_hyper_copy_misaligned+0x1a2>
1c014a80:	5058                	lw	a4,36(s0)
1c014a82:	4430                	lw	a2,72(s0)
1c014a84:	9732                	add	a4,a4,a2
1c014a86:	8f1d                	sub	a4,a4,a5
1c014a88:	04d7d7b3          	p.minu	a5,a5,a3
1c014a8c:	d058                	sw	a4,36(s0)
1c014a8e:	d45c                	sw	a5,44(s0)
1c014a90:	b375                	j	1c01483c <__pi_hyper_copy_misaligned+0x3a>
1c014a92:	04042023          	sw	zero,64(s0)
1c014a96:	b7dd                	j	1c014a7c <__pi_hyper_copy_misaligned+0x27a>

1c014a98 <__pi_hyper_copy_2d>:
1c014a98:	1141                	addi	sp,sp,-16
1c014a9a:	c606                	sw	ra,12(sp)
1c014a9c:	c422                	sw	s0,8(sp)
1c014a9e:	30047473          	csrrci	s0,mstatus,8
1c014aa2:	00088563          	beqz	a7,1c014aac <__pi_hyper_copy_2d+0x14>
1c014aa6:	010008b7          	lui	a7,0x1000
1c014aaa:	9646                	add	a2,a2,a7
1c014aac:	30800893          	li	a7,776
1c014ab0:	01c8ae03          	lw	t3,28(a7) # 100001c <__L2+0xf8001c>
1c014ab4:	30800313          	li	t1,776
1c014ab8:	040e0563          	beqz	t3,1c014b02 <__pi_hyper_copy_2d+0x6a>
1c014abc:	03832883          	lw	a7,56(t1) # 80000038 <pulp__FC+0x80000039>
1c014ac0:	02088e63          	beqz	a7,1c014afc <__pi_hyper_copy_2d+0x64>
1c014ac4:	03c32883          	lw	a7,60(t1)
1c014ac8:	0108ae23          	sw	a6,28(a7)
1c014acc:	c0854533          	p.bset	a0,a0,0,8
1c014ad0:	03032e23          	sw	a6,60(t1)
1c014ad4:	00082e23          	sw	zero,28(a6)
1c014ad8:	02a82c23          	sw	a0,56(a6)
1c014adc:	02b82e23          	sw	a1,60(a6)
1c014ae0:	04c82023          	sw	a2,64(a6)
1c014ae4:	04d82223          	sw	a3,68(a6)
1c014ae8:	04e82423          	sw	a4,72(a6)
1c014aec:	04f82623          	sw	a5,76(a6)
1c014af0:	30041073          	csrw	mstatus,s0
1c014af4:	40b2                	lw	ra,12(sp)
1c014af6:	4422                	lw	s0,8(sp)
1c014af8:	0141                	addi	sp,sp,16
1c014afa:	8082                	ret
1c014afc:	03032c23          	sw	a6,56(t1)
1c014b00:	b7f1                	j	1c014acc <__pi_hyper_copy_2d+0x34>
1c014b02:	02a8a023          	sw	a0,32(a7)
1c014b06:	02c8a223          	sw	a2,36(a7)
1c014b0a:	8542                	mv	a0,a6
1c014b0c:	04f6d633          	p.minu	a2,a3,a5
1c014b10:	0108ae23          	sw	a6,28(a7)
1c014b14:	02b8a423          	sw	a1,40(a7)
1c014b18:	02c8a623          	sw	a2,44(a7)
1c014b1c:	02088823          	sb	zero,48(a7)
1c014b20:	0308aa23          	sw	a6,52(a7)
1c014b24:	04d8a023          	sw	a3,64(a7)
1c014b28:	04f8a223          	sw	a5,68(a7)
1c014b2c:	04e8a423          	sw	a4,72(a7)
1c014b30:	cd3ff0ef          	jal	ra,1c014802 <__pi_hyper_copy_misaligned>
1c014b34:	bf75                	j	1c014af0 <__pi_hyper_copy_2d+0x58>

1c014b36 <pi_hyper_read_2d_async>:
1c014b36:	8332                	mv	t1,a2
1c014b38:	4510                	lw	a2,8(a0)
1c014b3a:	00080a23          	sb	zero,20(a6)
1c014b3e:	4248                	lw	a0,4(a2)
1c014b40:	00862883          	lw	a7,8(a2)
1c014b44:	862e                	mv	a2,a1
1c014b46:	0506                	slli	a0,a0,0x1
1c014b48:	859a                	mv	a1,t1
1c014b4a:	f4fff06f          	j	1c014a98 <__pi_hyper_copy_2d>

1c014b4e <pi_hyper_write_2d_async>:
1c014b4e:	8332                	mv	t1,a2
1c014b50:	4510                	lw	a2,8(a0)
1c014b52:	00080a23          	sb	zero,20(a6)
1c014b56:	4248                	lw	a0,4(a2)
1c014b58:	00862883          	lw	a7,8(a2)
1c014b5c:	862e                	mv	a2,a1
1c014b5e:	0506                	slli	a0,a0,0x1
1c014b60:	859a                	mv	a1,t1
1c014b62:	0505                	addi	a0,a0,1
1c014b64:	f35ff06f          	j	1c014a98 <__pi_hyper_copy_2d>

1c014b68 <__rt_hyper_resume_emu_task>:
  __pi_hyper_copy_misaligned(__rt_hyper_pending_emu_task);
1c014b68:	33c02503          	lw	a0,828(zero) # 33c <__rt_hyper_pending_emu_task>
1c014b6c:	c97ff06f          	j	1c014802 <__pi_hyper_copy_misaligned>

1c014b70 <__rt_hyper_resume_copy>:
  exec_pending_task();
1c014b70:	c41ff06f          	j	1c0147b0 <exec_pending_task>

1c014b74 <__rt_hyper_init>:
  __pi_hyper_cluster_reqs_first = NULL;
1c014b74:	1c018737          	lui	a4,0x1c018
  __rt_hyper_end_task = NULL;
1c014b78:	30800793          	li	a5,776
  __pi_hyper_cluster_reqs_first = NULL;
1c014b7c:	b0072023          	sw	zero,-1280(a4) # 1c017b00 <__pi_hyper_cluster_reqs_first>
  __rt_hyper_pending_emu_channel = -1;
1c014b80:	577d                	li	a4,-1
1c014b82:	d398                	sw	a4,32(a5)
  __rt_hyper_open_count = 0;
1c014b84:	1c018737          	lui	a4,0x1c018
  __rt_hyper_end_task = NULL;
1c014b88:	0007ac23          	sw	zero,24(a5)
  __rt_hyper_current_task = NULL;
1c014b8c:	0007ae23          	sw	zero,28(a5)
  __rt_hyper_pending_tasks = NULL;
1c014b90:	0207ac23          	sw	zero,56(a5)
  __rt_hyper_open_count = 0;
1c014b94:	b0072223          	sw	zero,-1276(a4) # 1c017b04 <__rt_hyper_open_count>
  __rt_hyper_pending_emu_size = 0;
1c014b98:	0207a623          	sw	zero,44(a5)
  __rt_hyper_pending_emu_size_2d = 0;
1c014b9c:	0407a023          	sw	zero,64(a5)
}
1c014ba0:	8082                	ret

1c014ba2 <__pi_uart_flow_control_enable>:
}

static inline void plp_uart_tx_enable(int channel)
{
  unsigned int setup = plp_uart_reg_read(channel, UART_SETUP_OFFSET);
  setup |= UART_TX_ENA;
1c014ba2:	7179                	addi	sp,sp,-48
1c014ba4:	d422                	sw	s0,40(sp)
1c014ba6:	d04a                	sw	s2,32(sp)
1c014ba8:	03c50413          	addi	s0,a0,60
1c014bac:	892a                	mv	s2,a0
1c014bae:	0808                	addi	a0,sp,16
1c014bb0:	d606                	sw	ra,44(sp)
1c014bb2:	d226                	sw	s1,36(sp)
1c014bb4:	c802                	sw	zero,16(sp)
1c014bb6:	ca02                	sw	zero,20(sp)
1c014bb8:	cc02                	sw	zero,24(sp)
1c014bba:	00011e23          	sh	zero,28(sp)
1c014bbe:	00010f23          	sb	zero,30(sp)
1c014bc2:	29c9                	jal	1c015094 <pi_pwm_conf_init>
1c014bc4:	4789                	li	a5,2
1c014bc6:	00f12aa3          	sw	a5,21(sp)
1c014bca:	080c                	addi	a1,sp,16
1c014bcc:	40000793          	li	a5,1024
1c014bd0:	8522                	mv	a0,s0
1c014bd2:	00f12d23          	sw	a5,26(sp)
1c014bd6:	00010a23          	sb	zero,20(sp)
1c014bda:	ee3fd0ef          	jal	ra,1c012abc <pi_open_from_conf>
1c014bde:	8522                	mv	a0,s0
1c014be0:	21c9                	jal	1c0150a2 <pi_pwm_open>
1c014be2:	84aa                	mv	s1,a0
1c014be4:	c105                	beqz	a0,1c014c04 <__pi_uart_flow_control_enable+0x62>
1c014be6:	85aa                	mv	a1,a0
1c014be8:	1c017537          	lui	a0,0x1c017
1c014bec:	3f450513          	addi	a0,a0,1012 # 1c0173f4 <__hyper_pad+0x34>
1c014bf0:	701000ef          	jal	ra,1c015af0 <printf>
1c014bf4:	54d5                	li	s1,-11
1c014bf6:	50b2                	lw	ra,44(sp)
1c014bf8:	5422                	lw	s0,40(sp)
1c014bfa:	8526                	mv	a0,s1
1c014bfc:	5902                	lw	s2,32(sp)
1c014bfe:	5492                	lw	s1,36(sp)
1c014c00:	6145                	addi	sp,sp,48
1c014c02:	8082                	ret
1c014c04:	4601                	li	a2,0
1c014c06:	4589                	li	a1,2
1c014c08:	8522                	mv	a0,s0
1c014c0a:	232d                	jal	1c015134 <pi_pwm_ioctl>
1c014c0c:	57fd                	li	a5,-1
1c014c0e:	00f11223          	sh	a5,4(sp)
1c014c12:	01512783          	lw	a5,21(sp)
1c014c16:	0050                	addi	a2,sp,4
1c014c18:	458d                	li	a1,3
1c014c1a:	8522                	mv	a0,s0
1c014c1c:	00f12323          	sw	a5,6(sp)
1c014c20:	00012523          	sw	zero,10(sp)
1c014c24:	2b01                	jal	1c015134 <pi_pwm_ioctl>
1c014c26:	4611                	li	a2,4
1c014c28:	4581                	li	a1,0
1c014c2a:	8522                	mv	a0,s0
1c014c2c:	2321                	jal	1c015134 <pi_pwm_ioctl>
1c014c2e:	4641                	li	a2,16
1c014c30:	4581                	li	a1,0
1c014c32:	8522                	mv	a0,s0
1c014c34:	2301                	jal	1c015134 <pi_pwm_ioctl>
1c014c36:	4605                	li	a2,1
1c014c38:	4581                	li	a1,0
1c014c3a:	8522                	mv	a0,s0
1c014c3c:	29e5                	jal	1c015134 <pi_pwm_ioctl>
1c014c3e:	4581                	li	a1,0
1c014c40:	4565                	li	a0,25
1c014c42:	ee4ff0ef          	jal	ra,1c014326 <pi_pad_set_function>
1c014c46:	800005b7          	lui	a1,0x80000
1c014c4a:	4601                	li	a2,0
1c014c4c:	10158593          	addi	a1,a1,257 # 80000101 <pulp__FC+0x80000102>
1c014c50:	4501                	li	a0,0
1c014c52:	25b1                	jal	1c01529e <pi_gpio_pin_configure>
1c014c54:	4601                	li	a2,0
1c014c56:	800005b7          	lui	a1,0x80000
1c014c5a:	4501                	li	a0,0
1c014c5c:	2589                	jal	1c01529e <pi_gpio_pin_configure>
1c014c5e:	4785                	li	a5,1
1c014c60:	00f90b23          	sb	a5,22(s2)
1c014c64:	bf49                	j	1c014bf6 <__pi_uart_flow_control_enable+0x54>

1c014c66 <__rt_uart_setup>:
1c014c66:	01254783          	lbu	a5,18(a0)
1c014c6a:	01054683          	lbu	a3,16(a0)
1c014c6e:	01154703          	lbu	a4,17(a0)
1c014c72:	4550                	lw	a2,12(a0)
1c014c74:	068e                	slli	a3,a3,0x3
1c014c76:	0786                	slli	a5,a5,0x1
1c014c78:	8fd5                	or	a5,a5,a3
1c014c7a:	8fd9                	or	a5,a5,a4
1c014c7c:	4709                	li	a4,2
1c014c7e:	02e64733          	div	a4,a2,a4
1c014c82:	01454683          	lbu	a3,20(a0)
1c014c86:	06a2                	slli	a3,a3,0x8
1c014c88:	8fd5                	or	a5,a5,a3
1c014c8a:	01354683          	lbu	a3,19(a0)
1c014c8e:	06a6                	slli	a3,a3,0x9
1c014c90:	8fd5                	or	a5,a5,a3
1c014c92:	1c0186b7          	lui	a3,0x1c018
1c014c96:	b846a683          	lw	a3,-1148(a3) # 1c017b84 <__rt_freq_domains>
1c014c9a:	9736                	add	a4,a4,a3
1c014c9c:	02c75733          	divu	a4,a4,a2
1c014ca0:	177d                	addi	a4,a4,-1
1c014ca2:	0742                	slli	a4,a4,0x10
1c014ca4:	8fd9                	or	a5,a5,a4
1c014ca6:	1a102737          	lui	a4,0x1a102
1c014caa:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021c0>
1c014cae:	8082                	ret

1c014cb0 <__rt_uart_setfreq_after>:
1c014cb0:	1c017537          	lui	a0,0x1c017
1c014cb4:	74c52783          	lw	a5,1868(a0) # 1c01774c <__rt_uart>
1c014cb8:	cb99                	beqz	a5,1c014cce <__rt_uart_setfreq_after+0x1e>
1c014cba:	1141                	addi	sp,sp,-16
1c014cbc:	74c50513          	addi	a0,a0,1868
1c014cc0:	c606                	sw	ra,12(sp)
1c014cc2:	fa5ff0ef          	jal	ra,1c014c66 <__rt_uart_setup>
1c014cc6:	40b2                	lw	ra,12(sp)
1c014cc8:	4501                	li	a0,0
1c014cca:	0141                	addi	sp,sp,16
1c014ccc:	8082                	ret
1c014cce:	4501                	li	a0,0
1c014cd0:	8082                	ret

1c014cd2 <__pi_uart_copy_enqueue_exec_flow_control>:
1c014cd2:	7179                	addi	sp,sp,-48
1c014cd4:	ce4e                	sw	s3,28(sp)
1c014cd6:	45bc                	lw	a5,72(a1)
1c014cd8:	0385a983          	lw	s3,56(a1) # 80000038 <pulp__FC+0x80000039>
1c014cdc:	d422                	sw	s0,40(sp)
1c014cde:	d04a                	sw	s2,32(sp)
1c014ce0:	cc52                	sw	s4,24(sp)
1c014ce2:	d606                	sw	ra,44(sp)
1c014ce4:	d226                	sw	s1,36(sp)
1c014ce6:	842a                	mv	s0,a0
1c014ce8:	0405a903          	lw	s2,64(a1)
1c014cec:	99be                	add	s3,s3,a5
1c014cee:	04c5aa03          	lw	s4,76(a1)
1c014cf2:	45bc                	lw	a5,72(a1)
1c014cf4:	0785                	addi	a5,a5,1
1c014cf6:	c5bc                	sw	a5,72(a1)
1c014cf8:	41fc                	lw	a5,68(a1)
1c014cfa:	17fd                	addi	a5,a5,-1
1c014cfc:	c1fc                	sw	a5,68(a1)
1c014cfe:	021a3063          	p.bneimm	s4,1,1c014d1e <__pi_uart_copy_enqueue_exec_flow_control+0x4c>
1c014d02:	800004b7          	lui	s1,0x80000
1c014d06:	10148593          	addi	a1,s1,257 # 80000101 <pulp__FC+0x80000102>
1c014d0a:	0070                	addi	a2,sp,12
1c014d0c:	4501                	li	a0,0
1c014d0e:	c602                	sw	zero,12(sp)
1c014d10:	2319                	jal	1c015216 <pi_gpio_pin_read>
1c014d12:	c62a                	sw	a0,12(sp)
1c014d14:	10148493          	addi	s1,s1,257
1c014d18:	47b2                	lw	a5,12(sp)
1c014d1a:	0217ae63          	p.beqimm	a5,1,1c014d56 <__pi_uart_copy_enqueue_exec_flow_control+0x84>
1c014d1e:	01392023          	sw	s3,0(s2)
1c014d22:	4785                	li	a5,1
1c014d24:	00f92223          	sw	a5,4(s2)
1c014d28:	47c1                	li	a5,16
1c014d2a:	00f92423          	sw	a5,8(s2)
1c014d2e:	000a1c63          	bnez	s4,1c014d46 <__pi_uart_copy_enqueue_exec_flow_control+0x74>
1c014d32:	03c40413          	addi	s0,s0,60
1c014d36:	4609                	li	a2,2
1c014d38:	4581                	li	a1,0
1c014d3a:	8522                	mv	a0,s0
1c014d3c:	2ee5                	jal	1c015134 <pi_pwm_ioctl>
1c014d3e:	4605                	li	a2,1
1c014d40:	4581                	li	a1,0
1c014d42:	8522                	mv	a0,s0
1c014d44:	2ec5                	jal	1c015134 <pi_pwm_ioctl>
1c014d46:	50b2                	lw	ra,44(sp)
1c014d48:	5422                	lw	s0,40(sp)
1c014d4a:	5492                	lw	s1,36(sp)
1c014d4c:	5902                	lw	s2,32(sp)
1c014d4e:	49f2                	lw	s3,28(sp)
1c014d50:	4a62                	lw	s4,24(sp)
1c014d52:	6145                	addi	sp,sp,48
1c014d54:	8082                	ret
1c014d56:	0070                	addi	a2,sp,12
1c014d58:	85a6                	mv	a1,s1
1c014d5a:	4501                	li	a0,0
1c014d5c:	296d                	jal	1c015216 <pi_gpio_pin_read>
1c014d5e:	c62a                	sw	a0,12(sp)
1c014d60:	bf65                	j	1c014d18 <__pi_uart_copy_enqueue_exec_flow_control+0x46>

1c014d62 <__pi_uart_copy_enqueue_exec.isra.14>:
1c014d62:	5d58                	lw	a4,60(a0)
1c014d64:	000206b7          	lui	a3,0x20
1c014d68:	16ed                	addi	a3,a3,-5
1c014d6a:	413c                	lw	a5,64(a0)
1c014d6c:	5d10                	lw	a2,56(a0)
1c014d6e:	04d75733          	p.minu	a4,a4,a3
1c014d72:	5d14                	lw	a3,56(a0)
1c014d74:	96ba                	add	a3,a3,a4
1c014d76:	dd14                	sw	a3,56(a0)
1c014d78:	5d54                	lw	a3,60(a0)
1c014d7a:	8e99                	sub	a3,a3,a4
1c014d7c:	c174                	sw	a3,68(a0)
1c014d7e:	dd54                	sw	a3,60(a0)
1c014d80:	00c7a023          	sw	a2,0(a5)
1c014d84:	00e7a223          	sw	a4,4(a5)
1c014d88:	4741                	li	a4,16
1c014d8a:	00e7a423          	sw	a4,8(a5)
1c014d8e:	8082                	ret

1c014d90 <__rt_uart_wait_tx_done.isra.17>:
1c014d90:	1a102737          	lui	a4,0x1a102
1c014d94:	1141                	addi	sp,sp,-16
1c014d96:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021b4>
1c014d9a:	002046b7          	lui	a3,0x204
1c014d9e:	431c                	lw	a5,0(a4)
1c014da0:	8bc1                	andi	a5,a5,16
1c014da2:	e38d                	bnez	a5,1c014dc4 <__rt_uart_wait_tx_done.isra.17+0x34>
1c014da4:	1a102737          	lui	a4,0x1a102
1c014da8:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021bc>
1c014dac:	431c                	lw	a5,0(a4)
1c014dae:	fc17b7b3          	p.bclr	a5,a5,30,1
1c014db2:	ffed                	bnez	a5,1c014dac <__rt_uart_wait_tx_done.isra.17+0x1c>
1c014db4:	c602                	sw	zero,12(sp)
1c014db6:	7cf00713          	li	a4,1999
1c014dba:	47b2                	lw	a5,12(sp)
1c014dbc:	00f75763          	ble	a5,a4,1c014dca <__rt_uart_wait_tx_done.isra.17+0x3a>
1c014dc0:	0141                	addi	sp,sp,16
1c014dc2:	8082                	ret
1c014dc4:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c014dc8:	bfd9                	j	1c014d9e <__rt_uart_wait_tx_done.isra.17+0xe>
1c014dca:	47b2                	lw	a5,12(sp)
1c014dcc:	0785                	addi	a5,a5,1
1c014dce:	c63e                	sw	a5,12(sp)
1c014dd0:	b7ed                	j	1c014dba <__rt_uart_wait_tx_done.isra.17+0x2a>

1c014dd2 <__rt_uart_setfreq_before>:
1c014dd2:	1c0177b7          	lui	a5,0x1c017
1c014dd6:	74c7a783          	lw	a5,1868(a5) # 1c01774c <__rt_uart>
1c014dda:	c385                	beqz	a5,1c014dfa <__rt_uart_setfreq_before+0x28>
1c014ddc:	1141                	addi	sp,sp,-16
1c014dde:	c606                	sw	ra,12(sp)
1c014de0:	fb1ff0ef          	jal	ra,1c014d90 <__rt_uart_wait_tx_done.isra.17>
1c014de4:	40b2                	lw	ra,12(sp)
1c014de6:	005007b7          	lui	a5,0x500
1c014dea:	1a102737          	lui	a4,0x1a102
1c014dee:	0799                	addi	a5,a5,6
1c014df0:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021c0>
1c014df4:	4501                	li	a0,0
1c014df6:	0141                	addi	sp,sp,16
1c014df8:	8082                	ret
1c014dfa:	4501                	li	a0,0
1c014dfc:	8082                	ret

1c014dfe <__pi_uart_handle_copy>:
1c014dfe:	fc153533          	p.bclr	a0,a0,30,1
1c014e02:	872e                	mv	a4,a1
1c014e04:	01c58793          	addi	a5,a1,28
1c014e08:	c119                	beqz	a0,1c014e0e <__pi_uart_handle_copy+0x10>
1c014e0a:	02c58793          	addi	a5,a1,44
1c014e0e:	438c                	lw	a1,0(a5)
1c014e10:	41f4                	lw	a3,68(a1)
1c014e12:	c699                	beqz	a3,1c014e20 <__pi_uart_handle_copy+0x22>
1c014e14:	01674783          	lbu	a5,22(a4)
1c014e18:	c3a1                	beqz	a5,1c014e58 <__pi_uart_handle_copy+0x5a>
1c014e1a:	853a                	mv	a0,a4
1c014e1c:	eb7ff06f          	j	1c014cd2 <__pi_uart_copy_enqueue_exec_flow_control>
1c014e20:	30047573          	csrrci	a0,mstatus,8
1c014e24:	01c02803          	lw	a6,28(zero) # 1c <__rt_sched>
1c014e28:	0005a023          	sw	zero,0(a1)
1c014e2c:	01c00613          	li	a2,28
1c014e30:	02080163          	beqz	a6,1c014e52 <__pi_uart_handle_copy+0x54>
1c014e34:	4254                	lw	a3,4(a2)
1c014e36:	c28c                	sw	a1,0(a3)
1c014e38:	c24c                	sw	a1,4(a2)
1c014e3a:	30051073          	csrw	mstatus,a0
1c014e3e:	478c                	lw	a1,8(a5)
1c014e40:	c38c                	sw	a1,0(a5)
1c014e42:	cd91                	beqz	a1,1c014e5e <__pi_uart_handle_copy+0x60>
1c014e44:	4794                	lw	a3,8(a5)
1c014e46:	4ed4                	lw	a3,28(a3)
1c014e48:	c794                	sw	a3,8(a5)
1c014e4a:	f6e9                	bnez	a3,1c014e14 <__pi_uart_handle_copy+0x16>
1c014e4c:	0007a623          	sw	zero,12(a5) # 50000c <__L2+0x48000c>
1c014e50:	b7d1                	j	1c014e14 <__pi_uart_handle_copy+0x16>
1c014e52:	00b02e23          	sw	a1,28(zero) # 1c <__rt_sched>
1c014e56:	b7cd                	j	1c014e38 <__pi_uart_handle_copy+0x3a>
1c014e58:	852e                	mv	a0,a1
1c014e5a:	f09ff06f          	j	1c014d62 <__pi_uart_copy_enqueue_exec.isra.14>
1c014e5e:	8082                	ret

1c014e60 <pi_uart_conf_init>:
1c014e60:	67f1                	lui	a5,0x1c
1c014e62:	20078793          	addi	a5,a5,512 # 1c200 <__L1Cl+0xc200>
1c014e66:	c11c                	sw	a5,0(a0)
1c014e68:	010307b7          	lui	a5,0x1030
1c014e6c:	c15c                	sw	a5,4(a0)
1c014e6e:	4785                	li	a5,1
1c014e70:	00f51423          	sh	a5,8(a0)
1c014e74:	00050523          	sb	zero,10(a0)
1c014e78:	8082                	ret

1c014e7a <pi_uart_open>:
1c014e7a:	1101                	addi	sp,sp,-32
1c014e7c:	ce06                	sw	ra,28(sp)
1c014e7e:	cc22                	sw	s0,24(sp)
1c014e80:	ca26                	sw	s1,20(sp)
1c014e82:	c84a                	sw	s2,16(sp)
1c014e84:	c64e                	sw	s3,12(sp)
1c014e86:	30047973          	csrrci	s2,mstatus,8
1c014e8a:	4158                	lw	a4,4(a0)
1c014e8c:	04800593          	li	a1,72
1c014e90:	00974603          	lbu	a2,9(a4)
1c014e94:	100657b3          	p.exthz	a5,a2
1c014e98:	00379693          	slli	a3,a5,0x3
1c014e9c:	96be                	add	a3,a3,a5
1c014e9e:	1c0177b7          	lui	a5,0x1c017
1c014ea2:	74c78793          	addi	a5,a5,1868 # 1c01774c <__rt_uart>
1c014ea6:	843e                	mv	s0,a5
1c014ea8:	42b60433          	p.mac	s0,a2,a1
1c014eac:	068e                	slli	a3,a3,0x3
1c014eae:	00d784b3          	add	s1,a5,a3
1c014eb2:	c504                	sw	s1,8(a0)
1c014eb4:	00042983          	lw	s3,0(s0)
1c014eb8:	0a099c63          	bnez	s3,1c014f70 <pi_uart_open+0xf6>
1c014ebc:	4605                	li	a2,1
1c014ebe:	c010                	sw	a2,0(s0)
1c014ec0:	0047260b          	p.lw	a2,4(a4!)
1c014ec4:	06b1                	addi	a3,a3,12
1c014ec6:	97b6                	add	a5,a5,a3
1c014ec8:	00c7a22b          	p.sw	a2,4(a5!)
1c014ecc:	0047268b          	p.lw	a3,4(a4!)
1c014ed0:	00d7a22b          	p.sw	a3,4(a5!)
1c014ed4:	0047268b          	p.lw	a3,4(a4!)
1c014ed8:	00d7a22b          	p.sw	a3,4(a5!)
1c014edc:	4318                	lw	a4,0(a4)
1c014ede:	c398                	sw	a4,0(a5)
1c014ee0:	47a1                	li	a5,8
1c014ee2:	c05c                	sw	a5,4(s0)
1c014ee4:	1a1027b7          	lui	a5,0x1a102
1c014ee8:	02042623          	sw	zero,44(s0)
1c014eec:	02042823          	sw	zero,48(s0)
1c014ef0:	02042a23          	sw	zero,52(s0)
1c014ef4:	02042c23          	sw	zero,56(s0)
1c014ef8:	78078793          	addi	a5,a5,1920 # 1a102780 <__l1_end+0xa10271c>
1c014efc:	4398                	lw	a4,0(a5)
1c014efe:	c0474733          	p.bset	a4,a4,0,4
1c014f02:	c398                	sw	a4,0(a5)
1c014f04:	1a1067b7          	lui	a5,0x1a106
1c014f08:	0087a703          	lw	a4,8(a5) # 1a106008 <__l1_end+0xa105fa4>
1c014f0c:	c0873733          	p.bclr	a4,a4,0,8
1c014f10:	00e7a423          	sw	a4,8(a5)
1c014f14:	0087a703          	lw	a4,8(a5)
1c014f18:	c0973733          	p.bclr	a4,a4,0,9
1c014f1c:	00e7a423          	sw	a4,8(a5)
1c014f20:	1c0007b7          	lui	a5,0x1c000
1c014f24:	5da78793          	addi	a5,a5,1498 # 1c0005da <__pi_uart_handle_copy_asm>
1c014f28:	8526                	mv	a0,s1
1c014f2a:	14f02623          	sw	a5,332(zero) # 14c <_l1_preload_size+0xec>
1c014f2e:	16f02623          	sw	a5,364(zero) # 16c <_l1_preload_size+0x10c>
1c014f32:	12902823          	sw	s1,304(zero) # 130 <_l1_preload_size+0xd0>
1c014f36:	14902823          	sw	s1,336(zero) # 150 <_l1_preload_size+0xf0>
1c014f3a:	d2dff0ef          	jal	ra,1c014c66 <__rt_uart_setup>
1c014f3e:	01644783          	lbu	a5,22(s0)
1c014f42:	c785                	beqz	a5,1c014f6a <pi_uart_open+0xf0>
1c014f44:	8526                	mv	a0,s1
1c014f46:	c5dff0ef          	jal	ra,1c014ba2 <__pi_uart_flow_control_enable>
1c014f4a:	c105                	beqz	a0,1c014f6a <pi_uart_open+0xf0>
1c014f4c:	1c017537          	lui	a0,0x1c017
1c014f50:	45c50513          	addi	a0,a0,1116 # 1c01745c <__hyper_pad+0x9c>
1c014f54:	23d000ef          	jal	ra,1c015990 <puts>
1c014f58:	59f9                	li	s3,-2
1c014f5a:	40f2                	lw	ra,28(sp)
1c014f5c:	4462                	lw	s0,24(sp)
1c014f5e:	854e                	mv	a0,s3
1c014f60:	44d2                	lw	s1,20(sp)
1c014f62:	4942                	lw	s2,16(sp)
1c014f64:	49b2                	lw	s3,12(sp)
1c014f66:	6105                	addi	sp,sp,32
1c014f68:	8082                	ret
1c014f6a:	30091073          	csrw	mstatus,s2
1c014f6e:	b7f5                	j	1c014f5a <pi_uart_open+0xe0>
1c014f70:	59fd                	li	s3,-1
1c014f72:	b7e5                	j	1c014f5a <pi_uart_open+0xe0>

1c014f74 <__pi_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c014f74:	1c0155b7          	lui	a1,0x1c015
{
1c014f78:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c014f7a:	4601                	li	a2,0
1c014f7c:	dd258593          	addi	a1,a1,-558 # 1c014dd2 <__rt_uart_setfreq_before>
1c014f80:	4511                	li	a0,4
{
1c014f82:	c606                	sw	ra,12(sp)
1c014f84:	c422                	sw	s0,8(sp)
1c014f86:	c226                	sw	s1,4(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c014f88:	ca5fd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c014f8c:	1c0155b7          	lui	a1,0x1c015
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c014f90:	84aa                	mv	s1,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c014f92:	4601                	li	a2,0
1c014f94:	cb058593          	addi	a1,a1,-848 # 1c014cb0 <__rt_uart_setfreq_after>
1c014f98:	4515                	li	a0,5


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c014f9a:	1c017437          	lui	s0,0x1c017
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c014f9e:	c8ffd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
    __rt_uart[i].open_count = 0;
1c014fa2:	74c40413          	addi	s0,s0,1868 # 1c01774c <__rt_uart>
1c014fa6:	85a2                	mv	a1,s0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c014fa8:	8cc9                	or	s1,s1,a0
    __rt_uart[i].open_count = 0;
1c014faa:	0205a62b          	p.sw	zero,44(a1!)
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i))+1, &__rt_uart[i].tx_channel);
1c014fae:	4525                	li	a0,9
1c014fb0:	20f1                	jal	1c01507c <__rt_udma_channel_init>
    __rt_udma_channel_init(UDMA_EVENT_ID(ARCHI_UDMA_UART_ID(i)), &__rt_uart[i].rx_channel);
1c014fb2:	01c40593          	addi	a1,s0,28
1c014fb6:	4521                	li	a0,8
1c014fb8:	20d1                	jal	1c01507c <__rt_udma_channel_init>
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c014fba:	c08d                	beqz	s1,1c014fdc <__pi_uart_init+0x68>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c014fbc:	01402673          	csrr	a2,uhartid
1c014fc0:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c014fc4:	40565593          	srai	a1,a2,0x5
1c014fc8:	f265b5b3          	p.bclr	a1,a1,25,6
1c014fcc:	f4563633          	p.bclr	a2,a2,26,5
1c014fd0:	41450513          	addi	a0,a0,1044 # 1c017414 <__hyper_pad+0x54>
1c014fd4:	31d000ef          	jal	ra,1c015af0 <printf>
1c014fd8:	29d000ef          	jal	ra,1c015a74 <abort>
}
1c014fdc:	40b2                	lw	ra,12(sp)
1c014fde:	4422                	lw	s0,8(sp)
1c014fe0:	4492                	lw	s1,4(sp)
1c014fe2:	0141                	addi	sp,sp,16
1c014fe4:	8082                	ret

1c014fe6 <rt_padframe_set>:
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c014fe6:	300476f3          	csrrci	a3,mstatus,8

void rt_padframe_set(rt_padframe_profile_t *profile)
{
  int irq = rt_irq_disable();

  unsigned int *config = profile->config;
1c014fea:	4158                	lw	a4,4(a0)
1c014fec:	1a1047b7          	lui	a5,0x1a104
1c014ff0:	14078613          	addi	a2,a5,320 # 1a104140 <__l1_end+0xa1040dc>

  for (int i=0; i<ARCHI_APB_SOC_PADFUN_NB; i++)
  {
    hal_apb_soc_padfun_set(i, config[i]);
1c014ff4:	430c                	lw	a1,0(a4)
1c014ff6:	c20c                	sw	a1,0(a2)
1c014ff8:	434c                	lw	a1,4(a4)
1c014ffa:	14478613          	addi	a2,a5,324
1c014ffe:	14878793          	addi	a5,a5,328
1c015002:	c20c                	sw	a1,0(a2)
1c015004:	4718                	lw	a4,8(a4)
1c015006:	c398                	sw	a4,0(a5)
  __builtin_pulp_spr_write(reg, val);
1c015008:	30069073          	csrw	mstatus,a3
  }

  rt_irq_restore(irq);
}
1c01500c:	8082                	ret

1c01500e <__rt_padframe_init>:
  rt_padframe_set(&__rt_padframe_profiles[0]);
1c01500e:	1c017537          	lui	a0,0x1c017
1c015012:	63450513          	addi	a0,a0,1588 # 1c017634 <__rt_padframe_profiles>
1c015016:	fd1ff06f          	j	1c014fe6 <rt_padframe_set>

1c01501a <rt_extern_alloc_init>:
  }
  printf("=============================================\n");
}

int rt_extern_alloc_init(rt_extern_alloc_t *a, void *addr, int size)
{
1c01501a:	1101                	addi	sp,sp,-32
1c01501c:	c84a                	sw	s2,16(sp)
1c01501e:	ce06                	sw	ra,28(sp)
1c015020:	cc22                	sw	s0,24(sp)
1c015022:	ca26                	sw	s1,20(sp)
1c015024:	892a                	mv	s2,a0
  if (size)
1c015026:	c229                	beqz	a2,1c015068 <rt_extern_alloc_init+0x4e>
  {
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c015028:	00758493          	addi	s1,a1,7
1c01502c:	842e                	mv	s0,a1
  return (rt_alloc_chunk_extern_t *)rt_alloc(RT_ALLOC_FC_DATA, sizeof(rt_alloc_chunk_extern_t));
1c01502e:	4505                	li	a0,1
1c015030:	45b1                	li	a1,12
1c015032:	c632                	sw	a2,12(sp)
1c015034:	a84fe0ef          	jal	ra,1c0132b8 <rt_alloc>
    unsigned int start_addr = ALIGN_UP((int)addr, MIN_CHUNK_SIZE);
1c015038:	c404b4b3          	p.bclr	s1,s1,2,0
    rt_alloc_chunk_extern_t *chunk = __rt_alloc_chunk();
    if (chunk == NULL) return -1;
1c01503c:	4632                	lw	a2,12(sp)
1c01503e:	c905                	beqz	a0,1c01506e <rt_extern_alloc_init+0x54>
    size = size - (start_addr - (unsigned int)addr);
1c015040:	9432                	add	s0,s0,a2
1c015042:	8c05                	sub	s0,s0,s1
  }
  else
  {
    a->first_free = NULL;
  }
  return 0;
1c015044:	4601                	li	a2,0
    if (size > 0) {
1c015046:	00805a63          	blez	s0,1c01505a <rt_extern_alloc_init+0x40>
      a->first_free = chunk;
1c01504a:	00a92023          	sw	a0,0(s2)
      chunk->size = ALIGN_DOWN(size, MIN_CHUNK_SIZE);
1c01504e:	c4043433          	p.bclr	s0,s0,2,0
1c015052:	c100                	sw	s0,0(a0)
      chunk->next = NULL;
1c015054:	00052223          	sw	zero,4(a0)
      chunk->addr = start_addr;
1c015058:	c504                	sw	s1,8(a0)
}
1c01505a:	40f2                	lw	ra,28(sp)
1c01505c:	4462                	lw	s0,24(sp)
1c01505e:	44d2                	lw	s1,20(sp)
1c015060:	4942                	lw	s2,16(sp)
1c015062:	8532                	mv	a0,a2
1c015064:	6105                	addi	sp,sp,32
1c015066:	8082                	ret
    a->first_free = NULL;
1c015068:	00052023          	sw	zero,0(a0)
1c01506c:	b7fd                	j	1c01505a <rt_extern_alloc_init+0x40>
    if (chunk == NULL) return -1;
1c01506e:	567d                	li	a2,-1
1c015070:	b7ed                	j	1c01505a <rt_extern_alloc_init+0x40>

1c015072 <rt_extern_alloc_deinit>:
  rt_free(RT_ALLOC_FC_DATA, (void *)pt, sizeof(rt_alloc_chunk_extern_t));
1c015072:	410c                	lw	a1,0(a0)
1c015074:	4631                	li	a2,12
1c015076:	4505                	li	a0,1
1c015078:	a70fe06f          	j	1c0132e8 <rt_free>

1c01507c <__rt_udma_channel_init>:



void __rt_udma_channel_init(int channel_id, rt_udma_channel_t *channel)
{
  channel->pendings[0] = NULL;
1c01507c:	0005a023          	sw	zero,0(a1)
  channel->pendings[1] = NULL;
1c015080:	0005a223          	sw	zero,4(a1)
  channel->waitings_first = NULL;
1c015084:	0005a423          	sw	zero,8(a1)
  __rt_udma_channels[channel_id] = channel;
1c015088:	050a                	slli	a0,a0,0x2
1c01508a:	35400793          	li	a5,852
1c01508e:	00b7e523          	p.sw	a1,a0(a5)
}
1c015092:	8082                	ret

1c015094 <pi_pwm_conf_init>:
    {
        th_timer = 0;
    }
    else if (duty_cycle != 100)
    {
        th_timer = (th_hi * (100 - duty_cycle)) / 100;
1c015094:	479d                	li	a5,7
1c015096:	c11c                	sw	a5,0(a0)
1c015098:	00050223          	sb	zero,4(a0)
1c01509c:	000522a3          	sw	zero,5(a0)
1c0150a0:	8082                	ret

1c0150a2 <pi_pwm_open>:
1c0150a2:	30047873          	csrrci	a6,mstatus,8
1c0150a6:	414c                	lw	a1,4(a0)
1c0150a8:	1c0186b7          	lui	a3,0x1c018
1c0150ac:	96868693          	addi	a3,a3,-1688 # 1c017968 <__pos_pwm>
1c0150b0:	0045c783          	lbu	a5,4(a1)
1c0150b4:	0027d613          	srli	a2,a5,0x2
1c0150b8:	fa27b7b3          	p.bclr	a5,a5,29,2
1c0150bc:	1007d8b3          	p.exthz	a7,a5
1c0150c0:	00289713          	slli	a4,a7,0x2
1c0150c4:	9746                	add	a4,a4,a7
1c0150c6:	070a                	slli	a4,a4,0x2
1c0150c8:	05800893          	li	a7,88
1c0150cc:	43160733          	p.mac	a4,a2,a7
1c0150d0:	0711                	addi	a4,a4,4
1c0150d2:	9736                	add	a4,a4,a3
1c0150d4:	c518                	sw	a4,8(a0)
1c0150d6:	05800713          	li	a4,88
1c0150da:	02e60633          	mul	a2,a2,a4
1c0150de:	4751                	li	a4,20
1c0150e0:	8532                	mv	a0,a2
1c0150e2:	42e78533          	p.mac	a0,a5,a4
1c0150e6:	00a68733          	add	a4,a3,a0
1c0150ea:	4b08                	lw	a0,16(a4)
1c0150ec:	00150893          	addi	a7,a0,1
1c0150f0:	01172823          	sw	a7,16(a4)
1c0150f4:	ed05                	bnez	a0,1c01512c <pi_pwm_open+0x8a>
1c0150f6:	96b2                	add	a3,a3,a2
1c0150f8:	4af0                	lw	a2,84(a3)
1c0150fa:	0605                	addi	a2,a2,1
1c0150fc:	caf0                	sw	a2,84(a3)
1c0150fe:	1a105637          	lui	a2,0x1a105
1c015102:	10462503          	lw	a0,260(a2) # 1a105104 <__l1_end+0xa1050a0>
1c015106:	4685                	li	a3,1
1c015108:	00f696b3          	sll	a3,a3,a5
1c01510c:	8ec9                	or	a3,a3,a0
1c01510e:	10d62223          	sw	a3,260(a2)
1c015112:	006846b7          	lui	a3,0x684
1c015116:	14068693          	addi	a3,a3,320 # 684140 <__L2+0x604140>
1c01511a:	97b6                	add	a5,a5,a3
1c01511c:	0055a683          	lw	a3,5(a1)
1c015120:	079a                	slli	a5,a5,0x6
1c015122:	cb5c                	sw	a5,20(a4)
1c015124:	c754                	sw	a3,12(a4)
1c015126:	6705                	lui	a4,0x1
1c015128:	00e7a223          	sw	a4,4(a5)
1c01512c:	30081073          	csrw	mstatus,a6
1c015130:	4501                	li	a0,0
1c015132:	8082                	ret

1c015134 <pi_pwm_ioctl>:
1c015134:	451c                	lw	a5,8(a0)
1c015136:	0025aa63          	p.beqimm	a1,2,1c01514a <pi_pwm_ioctl+0x16>
1c01513a:	0035ac63          	p.beqimm	a1,3,1c015152 <pi_pwm_ioctl+0x1e>
1c01513e:	e19d                	bnez	a1,1c015164 <pi_pwm_ioctl+0x30>
1c015140:	4b9c                	lw	a5,16(a5)
1c015142:	00c7a023          	sw	a2,0(a5)
1c015146:	4501                	li	a0,0
1c015148:	8082                	ret
1c01514a:	4b9c                	lw	a5,16(a5)
1c01514c:	00c7a423          	sw	a2,8(a5)
1c015150:	bfdd                	j	1c015146 <pi_pwm_ioctl+0x12>
1c015152:	4b94                	lw	a3,16(a5)
1c015154:	479c                	lw	a5,8(a5)
1c015156:	6741                	lui	a4,0x10
1c015158:	177d                	addi	a4,a4,-1
1c01515a:	078d                	addi	a5,a5,3
1c01515c:	078a                	slli	a5,a5,0x2
1c01515e:	00e6e7a3          	p.sw	a4,a5(a3)
1c015162:	b7d5                	j	1c015146 <pi_pwm_ioctl+0x12>
1c015164:	557d                	li	a0,-1
1c015166:	8082                	ret

1c015168 <__pos_pwm_init>:
static void __attribute__((constructor)) __pos_pwm_init()
{
    for (int i=0; i<ARCHI_PWM_NB; i++)
    {
        pos_pwm_t *pwm = &__pos_pwm[i];
        pwm->open_count = 0;
1c015168:	1c018737          	lui	a4,0x1c018
1c01516c:	96870793          	addi	a5,a4,-1688 # 1c017968 <__pos_pwm>
1c015170:	0407aa23          	sw	zero,84(a5)
        pwm->id = i;

        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c015174:	4601                	li	a2,0
        pwm->id = i;
1c015176:	0007a22b          	p.sw	zero,4(a5!)
1c01517a:	96870713          	addi	a4,a4,-1688
1c01517e:	0043d0fb          	lp.setupi	x1,4,1c01518c <__pos_pwm_init+0x24>
        {
            pos_pwm_timer_t *timer = &pwm->timers[j];
            timer->open_count = 0;
            timer->pwm = pwm;
            timer->id = j;
1c015182:	c3d0                	sw	a2,4(a5)
            timer->open_count = 0;
1c015184:	0007a623          	sw	zero,12(a5)
            timer->pwm = pwm;
1c015188:	c398                	sw	a4,0(a5)
        for (int j=0; j<ARCHI_PWM_NB_TIMERS; j++)
1c01518a:	0605                	addi	a2,a2,1
1c01518c:	07d1                	addi	a5,a5,20
        }
    }
}
1c01518e:	8082                	ret

1c015190 <__pi_gpio_handler>:
  pin = (pin & PI_GPIO_NUM_MASK);
  uint32_t mask = (1 << pin);

  gpio->event_task[pin] = NULL;
  return 0;
}
1c015190:	1141                	addi	sp,sp,-16
1c015192:	1a1017b7          	lui	a5,0x1a101
1c015196:	1c0186b7          	lui	a3,0x1c018
1c01519a:	c422                	sw	s0,8(sp)
1c01519c:	4f80                	lw	s0,24(a5)
1c01519e:	9c068793          	addi	a5,a3,-1600 # 1c0179c0 <__rt_gpio>
1c0151a2:	c226                	sw	s1,4(sp)
1c0151a4:	4bc4                	lw	s1,20(a5)
1c0151a6:	c606                	sw	ra,12(sp)
1c0151a8:	c780                	sw	s0,8(a5)
1c0151aa:	cc91                	beqz	s1,1c0151c6 <__pi_gpio_handler+0x36>
1c0151ac:	409c                	lw	a5,0(s1)
1c0151ae:	8fe1                	and	a5,a5,s0
1c0151b0:	c781                	beqz	a5,1c0151b8 <__pi_gpio_handler+0x28>
1c0151b2:	40dc                	lw	a5,4(s1)
1c0151b4:	4488                	lw	a0,8(s1)
1c0151b6:	9782                	jalr	a5
1c0151b8:	44c4                	lw	s1,12(s1)
1c0151ba:	f8ed                	bnez	s1,1c0151ac <__pi_gpio_handler+0x1c>
1c0151bc:	40b2                	lw	ra,12(sp)
1c0151be:	4422                	lw	s0,8(sp)
1c0151c0:	4492                	lw	s1,4(sp)
1c0151c2:	0141                	addi	sp,sp,16
1c0151c4:	8082                	ret
1c0151c6:	9c068693          	addi	a3,a3,-1600
1c0151ca:	46dc                	lw	a5,12(a3)
1c0151cc:	4701                	li	a4,0
1c0151ce:	8fe1                	and	a5,a5,s0
1c0151d0:	01c00513          	li	a0,28
1c0151d4:	d7e5                	beqz	a5,1c0151bc <__pi_gpio_handler+0x2c>
1c0151d6:	fc17b633          	p.bclr	a2,a5,30,1
1c0151da:	c615                	beqz	a2,1c015206 <__pi_gpio_handler+0x76>
1c0151dc:	00470613          	addi	a2,a4,4
1c0151e0:	060a                	slli	a2,a2,0x2
1c0151e2:	9636                	add	a2,a2,a3
1c0151e4:	4610                	lw	a2,8(a2)
1c0151e6:	c205                	beqz	a2,1c015206 <__pi_gpio_handler+0x76>
1c0151e8:	30047873          	csrrci	a6,mstatus,8
1c0151ec:	01c02883          	lw	a7,28(zero) # 1c <__rt_sched>
1c0151f0:	00062023          	sw	zero,0(a2)
1c0151f4:	00088e63          	beqz	a7,1c015210 <__pi_gpio_handler+0x80>
1c0151f8:	00452883          	lw	a7,4(a0)
1c0151fc:	00c8a023          	sw	a2,0(a7)
1c015200:	c150                	sw	a2,4(a0)
1c015202:	30081073          	csrw	mstatus,a6
1c015206:	0705                	addi	a4,a4,1
1c015208:	8385                	srli	a5,a5,0x1
1c01520a:	0ff77713          	andi	a4,a4,255
1c01520e:	b7d9                	j	1c0151d4 <__pi_gpio_handler+0x44>
1c015210:	00c02e23          	sw	a2,28(zero) # 1c <__rt_sched>
1c015214:	b7f5                	j	1c015200 <__pi_gpio_handler+0x70>

1c015216 <pi_gpio_pin_read>:
1c015216:	4508                	lw	a0,8(a0)
1c015218:	0ff5f693          	andi	a3,a1,255
1c01521c:	4785                	li	a5,1
1c01521e:	4558                	lw	a4,12(a0)
1c015220:	00d797b3          	sll	a5,a5,a3
1c015224:	8f7d                	and	a4,a4,a5
1c015226:	00f70763          	beq	a4,a5,1c015234 <pi_gpio_pin_read+0x1e>
1c01522a:	490c                	lw	a1,16(a0)
1c01522c:	5555                	li	a0,-11
1c01522e:	8dfd                	and	a1,a1,a5
1c015230:	00f59c63          	bne	a1,a5,1c015248 <pi_gpio_pin_read+0x32>
1c015234:	1a1017b7          	lui	a5,0x1a101
1c015238:	cb09                	beqz	a4,1c01524a <pi_gpio_pin_read+0x34>
1c01523a:	43cc                	lw	a1,4(a5)
1c01523c:	00d5d5b3          	srl	a1,a1,a3
1c015240:	fc15b5b3          	p.bclr	a1,a1,30,1
1c015244:	c20c                	sw	a1,0(a2)
1c015246:	4501                	li	a0,0
1c015248:	8082                	ret
1c01524a:	438c                	lw	a1,0(a5)
1c01524c:	bfc5                	j	1c01523c <pi_gpio_pin_read+0x26>

1c01524e <pi_gpio_mask_configure>:
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
}

static inline unsigned int hal_gpio_paddir_get()
{
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR);
1c01524e:	1a1017b7          	lui	a5,0x1a101
1c015252:	439c                	lw	a5,0(a5)
1c015254:	fff5c713          	not	a4,a1

int pi_gpio_mask_configure(struct pi_device *device, uint32_t mask, pi_gpio_flags_e flags)
{
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
  int is_out = flags & PI_GPIO_OUTPUT;
1c015258:	8a11                	andi	a2,a2,4
  pi_gpio_t *gpio = (pi_gpio_t *) device->data;
1c01525a:	4514                	lw	a3,8(a0)
  {
    current |= mask;
  }
  else
  {
    current &= ~mask;
1c01525c:	00f77533          	and	a0,a4,a5
  if (is_out)
1c015260:	c219                	beqz	a2,1c015266 <pi_gpio_mask_configure+0x18>
    current |= mask;
1c015262:	00f5e533          	or	a0,a1,a5
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_PADDIR, value);
1c015266:	1a1017b7          	lui	a5,0x1a101
1c01526a:	c388                	sw	a0,0(a5)
1c01526c:	0106a803          	lw	a6,16(a3)
1c015270:	46c8                	lw	a0,12(a3)
  hal_gpio_set_dir(mask, is_out);

  if (is_out)
1c015272:	ce01                	beqz	a2,1c01528a <pi_gpio_mask_configure+0x3c>
  {
    gpio->input_mask &= ~mask;
    gpio->output_mask |= mask;
1c015274:	0105e5b3          	or	a1,a1,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c015278:	07f1                	addi	a5,a5,28
1c01527a:	ca8c                	sw	a1,16(a3)
1c01527c:	438c                	lw	a1,0(a5)
    gpio->input_mask &= ~mask;
1c01527e:	8d79                	and	a0,a0,a4
1c015280:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() & ~mask);
1c015282:	8f6d                	and	a4,a4,a1
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c015284:	c398                	sw	a4,0(a5)
    gpio->output_mask &= ~mask;
    hal_gpio_en_set(hal_gpio_en_get() | mask);
  }

  return 0;
}
1c015286:	4501                	li	a0,0
1c015288:	8082                	ret
    gpio->output_mask &= ~mask;
1c01528a:	01077733          	and	a4,a4,a6
  return pulp_read32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN);
1c01528e:	07f1                	addi	a5,a5,28
1c015290:	ca98                	sw	a4,16(a3)
1c015292:	4398                	lw	a4,0(a5)
    gpio->input_mask |= mask;
1c015294:	8d4d                	or	a0,a0,a1
1c015296:	c6c8                	sw	a0,12(a3)
    hal_gpio_en_set(hal_gpio_en_get() | mask);
1c015298:	8dd9                	or	a1,a1,a4
  pulp_write32(ARCHI_GPIO_ADDR + ARCHI_GPIO_EN, value);
1c01529a:	c38c                	sw	a1,0(a5)
1c01529c:	b7ed                	j	1c015286 <pi_gpio_mask_configure+0x38>

1c01529e <pi_gpio_pin_configure>:
{
1c01529e:	1101                	addi	sp,sp,-32
1c0152a0:	cc22                	sw	s0,24(sp)
1c0152a2:	ca26                	sw	s1,20(sp)
1c0152a4:	ce06                	sw	ra,28(sp)
1c0152a6:	84aa                	mv	s1,a0
1c0152a8:	842e                	mv	s0,a1
  if (pin & PI_GPIO_IS_GPIO_MASK)
1c0152aa:	0005db63          	bgez	a1,1c0152c0 <pi_gpio_pin_configure+0x22>
    pi_pad_e pad = ((pin & PI_GPIO_PAD_MASK) >> PI_GPIO_PAD_SHIFT);
1c0152ae:	4085d513          	srai	a0,a1,0x8
    pi_pad_set_function(pad, PI_PAD_FUNC1);
1c0152b2:	0ff57513          	andi	a0,a0,255
1c0152b6:	4585                	li	a1,1
1c0152b8:	c632                	sw	a2,12(sp)
1c0152ba:	86cff0ef          	jal	ra,1c014326 <pi_pad_set_function>
1c0152be:	4632                	lw	a2,12(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c0152c0:	4585                	li	a1,1
1c0152c2:	008595b3          	sll	a1,a1,s0
}
1c0152c6:	4462                	lw	s0,24(sp)
1c0152c8:	40f2                	lw	ra,28(sp)
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c0152ca:	8526                	mv	a0,s1
}
1c0152cc:	44d2                	lw	s1,20(sp)
1c0152ce:	6105                	addi	sp,sp,32
  return pi_gpio_mask_configure(device, 1<<pin, flags);
1c0152d0:	f7fff06f          	j	1c01524e <pi_gpio_mask_configure>

1c0152d4 <__rt_i2s_resume>:
  conf->pdm = 1;
  conf->dual = 0;
  conf->width = 16;
  conf->id = -1;
  conf->flags = 0;
}
1c0152d4:	1c0187b7          	lui	a5,0x1c018
1c0152d8:	4d18                	lw	a4,24(a0)
1c0152da:	b847a783          	lw	a5,-1148(a5) # 1c017b84 <__rt_freq_domains>
1c0152de:	068416b7          	lui	a3,0x6841
1c0152e2:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c0152e6:	02e7c7b3          	div	a5,a5,a4
1c0152ea:	02954703          	lbu	a4,41(a0)
1c0152ee:	177d                	addi	a4,a4,-1
1c0152f0:	c0874733          	p.bset	a4,a4,0,8
1c0152f4:	17fd                	addi	a5,a5,-1
1c0152f6:	8785                	srai	a5,a5,0x1
1c0152f8:	07c2                	slli	a5,a5,0x10
1c0152fa:	8fd9                	or	a5,a5,a4
1c0152fc:	02554703          	lbu	a4,37(a0)
1c015300:	9736                	add	a4,a4,a3
1c015302:	070a                	slli	a4,a4,0x2
1c015304:	c31c                	sw	a5,0(a4)
1c015306:	8082                	ret

1c015308 <__rt_i2s_setfreq_after>:
1c015308:	1141                	addi	sp,sp,-16
1c01530a:	1c0187b7          	lui	a5,0x1c018
1c01530e:	c422                	sw	s0,8(sp)
1c015310:	b087a403          	lw	s0,-1272(a5) # 1c017b08 <__rt_i2s_first>
1c015314:	c606                	sw	ra,12(sp)
1c015316:	e411                	bnez	s0,1c015322 <__rt_i2s_setfreq_after+0x1a>
1c015318:	40b2                	lw	ra,12(sp)
1c01531a:	4422                	lw	s0,8(sp)
1c01531c:	4501                	li	a0,0
1c01531e:	0141                	addi	sp,sp,16
1c015320:	8082                	ret
1c015322:	02844783          	lbu	a5,40(s0)
1c015326:	c781                	beqz	a5,1c01532e <__rt_i2s_setfreq_after+0x26>
1c015328:	8522                	mv	a0,s0
1c01532a:	fabff0ef          	jal	ra,1c0152d4 <__rt_i2s_resume>
1c01532e:	4c40                	lw	s0,28(s0)
1c015330:	b7dd                	j	1c015316 <__rt_i2s_setfreq_after+0xe>

1c015332 <__rt_i2s_setfreq_before>:
1c015332:	1c0187b7          	lui	a5,0x1c018
1c015336:	b087a783          	lw	a5,-1272(a5) # 1c017b08 <__rt_i2s_first>
1c01533a:	068416b7          	lui	a3,0x6841
1c01533e:	90968693          	addi	a3,a3,-1783 # 6840909 <__L2+0x67c0909>
1c015342:	e399                	bnez	a5,1c015348 <__rt_i2s_setfreq_before+0x16>
1c015344:	4501                	li	a0,0
1c015346:	8082                	ret
1c015348:	0287c703          	lbu	a4,40(a5)
1c01534c:	c719                	beqz	a4,1c01535a <__rt_i2s_setfreq_before+0x28>
1c01534e:	0257c703          	lbu	a4,37(a5)
1c015352:	9736                	add	a4,a4,a3
1c015354:	070a                	slli	a4,a4,0x2
1c015356:	00072023          	sw	zero,0(a4)
1c01535a:	4fdc                	lw	a5,28(a5)
1c01535c:	b7dd                	j	1c015342 <__rt_i2s_setfreq_before+0x10>

1c01535e <__rt_i2s_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that the I2S channels are stopped and resumed
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c01535e:	1c0155b7          	lui	a1,0x1c015
{
1c015362:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c015364:	4601                	li	a2,0
1c015366:	33258593          	addi	a1,a1,818 # 1c015332 <__rt_i2s_setfreq_before>
1c01536a:	4511                	li	a0,4
{
1c01536c:	c606                	sw	ra,12(sp)
1c01536e:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c015370:	8bdfd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c015374:	1c0155b7          	lui	a1,0x1c015
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_i2s_setfreq_before, NULL);
1c015378:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_i2s_setfreq_after, NULL);
1c01537a:	4601                	li	a2,0
1c01537c:	30858593          	addi	a1,a1,776 # 1c015308 <__rt_i2s_setfreq_after>
1c015380:	4515                	li	a0,5
1c015382:	8abfd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
1c015386:	8d41                	or	a0,a0,s0

  if (err) rt_fatal("Unable to initialize i2s driver\n");
1c015388:	c105                	beqz	a0,1c0153a8 <__rt_i2s_init+0x4a>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c01538a:	01402673          	csrr	a2,uhartid
1c01538e:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c015392:	40565593          	srai	a1,a2,0x5
1c015396:	f265b5b3          	p.bclr	a1,a1,25,6
1c01539a:	f4563633          	p.bclr	a2,a2,26,5
1c01539e:	49450513          	addi	a0,a0,1172 # 1c017494 <__hyper_pad+0xd4>
1c0153a2:	74e000ef          	jal	ra,1c015af0 <printf>
1c0153a6:	25f9                	jal	1c015a74 <abort>
}
1c0153a8:	40b2                	lw	ra,12(sp)
1c0153aa:	4422                	lw	s0,8(sp)
1c0153ac:	0141                	addi	sp,sp,16
1c0153ae:	8082                	ret

1c0153b0 <__rt_himax_init>:
    .capture   = &__rt_himax_capture
};

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_himax_init()
{
  camera_isAwaked = 0;
1c0153b0:	1b0017b7          	lui	a5,0x1b001
1c0153b4:	80078423          	sb	zero,-2040(a5) # 1b000808 <camera_isAwaked>
}
1c0153b8:	8082                	ret

1c0153ba <__rt_rtc_init>:
}


RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_rtc_init()
{
  __rtc_handler = NULL;
1c0153ba:	3a800793          	li	a5,936
1c0153be:	0207ac23          	sw	zero,56(a5)
  dev_rtc.open_count = 0;
1c0153c2:	02078823          	sb	zero,48(a5)
  __rt_rtc_init_done = 0;
1c0153c6:	0207aa23          	sw	zero,52(a5)
}
1c0153ca:	8082                	ret

1c0153cc <__rt_spim_init>:

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_spim_init()
{
  for (int i=0; i<ARCHI_UDMA_NB_SPIM; i++)
  {
    __rt_spim_open_count[i] = 0;
1c0153cc:	1c0187b7          	lui	a5,0x1c018
1c0153d0:	b0c78793          	addi	a5,a5,-1268 # 1c017b0c <__rt_spim_open_count>
1c0153d4:	0007a023          	sw	zero,0(a5)
1c0153d8:	0007a223          	sw	zero,4(a5)
  }
}
1c0153dc:	8082                	ret

1c0153de <__rt_io_end_of_flush>:
  if (rt_iodev() == RT_IODEV_UART)
  {
    __rt_io_start(NULL);
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
1c0153de:	1c0187b7          	lui	a5,0x1c018
1c0153e2:	b007ac23          	sw	zero,-1256(a5) # 1c017b18 <__rt_io_pending_flush>
1c0153e6:	00052c23          	sw	zero,24(a0)
1c0153ea:	8082                	ret

1c0153ec <__rt_io_uart_wait_req>:
1c0153ec:	1141                	addi	sp,sp,-16
1c0153ee:	c226                	sw	s1,4(sp)
1c0153f0:	84aa                	mv	s1,a0
1c0153f2:	c606                	sw	ra,12(sp)
1c0153f4:	c422                	sw	s0,8(sp)
1c0153f6:	c04a                	sw	s2,0(sp)
1c0153f8:	30047973          	csrrci	s2,mstatus,8
1c0153fc:	1c018437          	lui	s0,0x1c018
1c015400:	b1440413          	addi	s0,s0,-1260 # 1c017b14 <__rt_io_event_current>
1c015404:	4008                	lw	a0,0(s0)
1c015406:	c509                	beqz	a0,1c015410 <__rt_io_uart_wait_req+0x24>
1c015408:	dc5fd0ef          	jal	ra,1c0131cc <rt_event_wait>
1c01540c:	00042023          	sw	zero,0(s0)
1c015410:	4785                	li	a5,1
1c015412:	08f48023          	sb	a5,128(s1)
1c015416:	0814c783          	lbu	a5,129(s1)
1c01541a:	00201737          	lui	a4,0x201
1c01541e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c015422:	04078793          	addi	a5,a5,64
1c015426:	07da                	slli	a5,a5,0x16
1c015428:	0007e723          	p.sw	zero,a4(a5)
1c01542c:	30091073          	csrw	mstatus,s2
1c015430:	40b2                	lw	ra,12(sp)
1c015432:	4422                	lw	s0,8(sp)
1c015434:	4492                	lw	s1,4(sp)
1c015436:	4902                	lw	s2,0(sp)
1c015438:	0141                	addi	sp,sp,16
1c01543a:	8082                	ret

1c01543c <__rt_do_putc_host>:
1c01543c:	1c018737          	lui	a4,0x1c018
1c015440:	b1c70793          	addi	a5,a4,-1252 # 1c017b1c <__rt_putc_host_buffer_index>
1c015444:	4390                	lw	a2,0(a5)
1c015446:	b1c70713          	addi	a4,a4,-1252
1c01544a:	00160693          	addi	a3,a2,1
1c01544e:	c394                	sw	a3,0(a5)
1c015450:	1c0177b7          	lui	a5,0x1c017
1c015454:	79478593          	addi	a1,a5,1940 # 1c017794 <__rt_putc_host_buffer>
1c015458:	00a5c623          	p.sb	a0,a2(a1)
1c01545c:	07f00593          	li	a1,127
1c015460:	79478613          	addi	a2,a5,1940
1c015464:	00b68463          	beq	a3,a1,1c01546c <__rt_do_putc_host+0x30>
1c015468:	00a53a63          	p.bneimm	a0,10,1c01547c <__rt_do_putc_host+0x40>
1c01546c:	79478513          	addi	a0,a5,1940
1c015470:	000646a3          	p.sb	zero,a3(a2)
1c015474:	00072023          	sw	zero,0(a4)
1c015478:	b7afd06f          	j	1c0127f2 <semihost_write0>
1c01547c:	8082                	ret

1c01547e <__rt_io_start>:
1c01547e:	1101                	addi	sp,sp,-32
1c015480:	0028                	addi	a0,sp,8
1c015482:	ce06                	sw	ra,28(sp)
1c015484:	cc22                	sw	s0,24(sp)
1c015486:	3b8010ef          	jal	ra,1c01683e <rt_uart_conf_init>
1c01548a:	4585                	li	a1,1
1c01548c:	4501                	li	a0,0
1c01548e:	bd9fd0ef          	jal	ra,1c013066 <rt_event_alloc>
1c015492:	547d                	li	s0,-1
1c015494:	ed0d                	bnez	a0,1c0154ce <__rt_io_start+0x50>
1c015496:	1c0177b7          	lui	a5,0x1c017
1c01549a:	7107a783          	lw	a5,1808(a5) # 1c017710 <__rt_iodev_uart_baudrate>
1c01549e:	842a                	mv	s0,a0
1c0154a0:	1c018537          	lui	a0,0x1c018
1c0154a4:	01c00593          	li	a1,28
1c0154a8:	a5850513          	addi	a0,a0,-1448 # 1c017a58 <__rt_io_event>
1c0154ac:	c43e                	sw	a5,8(sp)
1c0154ae:	b79fd0ef          	jal	ra,1c013026 <__rt_event_init>
1c0154b2:	1c0187b7          	lui	a5,0x1c018
1c0154b6:	af07a503          	lw	a0,-1296(a5) # 1c017af0 <__rt_iodev_uart_channel>
1c0154ba:	4681                	li	a3,0
1c0154bc:	4601                	li	a2,0
1c0154be:	002c                	addi	a1,sp,8
1c0154c0:	0511                	addi	a0,a0,4
1c0154c2:	38c010ef          	jal	ra,1c01684e <__rt_uart_open>
1c0154c6:	1c0187b7          	lui	a5,0x1c018
1c0154ca:	b2a7a023          	sw	a0,-1248(a5) # 1c017b20 <_rt_io_uart>
1c0154ce:	8522                	mv	a0,s0
1c0154d0:	40f2                	lw	ra,28(sp)
1c0154d2:	4462                	lw	s0,24(sp)
1c0154d4:	6105                	addi	sp,sp,32
1c0154d6:	8082                	ret

1c0154d8 <rt_event_execute.isra.4.constprop.12>:
1c0154d8:	1141                	addi	sp,sp,-16
1c0154da:	c606                	sw	ra,12(sp)
1c0154dc:	c422                	sw	s0,8(sp)
1c0154de:	30047473          	csrrci	s0,mstatus,8
1c0154e2:	4585                	li	a1,1
1c0154e4:	01c00513          	li	a0,28
1c0154e8:	c55fd0ef          	jal	ra,1c01313c <__rt_event_execute>
1c0154ec:	30041073          	csrw	mstatus,s0
1c0154f0:	40b2                	lw	ra,12(sp)
1c0154f2:	4422                	lw	s0,8(sp)
1c0154f4:	0141                	addi	sp,sp,16
1c0154f6:	8082                	ret

1c0154f8 <__rt_io_lock>:
1c0154f8:	1c0177b7          	lui	a5,0x1c017
1c0154fc:	65c7a783          	lw	a5,1628(a5) # 1c01765c <__hal_debug_struct+0x10>
1c015500:	cf81                	beqz	a5,1c015518 <__rt_io_lock+0x20>
1c015502:	1c0187b7          	lui	a5,0x1c018
1c015506:	b207a783          	lw	a5,-1248(a5) # 1c017b20 <_rt_io_uart>
1c01550a:	e799                	bnez	a5,1c015518 <__rt_io_lock+0x20>
1c01550c:	1c0187b7          	lui	a5,0x1c018
1c015510:	aec7a783          	lw	a5,-1300(a5) # 1c017aec <__rt_iodev>
1c015514:	0427b963          	p.bneimm	a5,2,1c015566 <__rt_io_lock+0x6e>
1c015518:	7135                	addi	sp,sp,-160
1c01551a:	014027f3          	csrr	a5,uhartid
1c01551e:	cf06                	sw	ra,156(sp)
1c015520:	ca5797b3          	p.extractu	a5,a5,5,5
1c015524:	02000713          	li	a4,32
1c015528:	1b001537          	lui	a0,0x1b001
1c01552c:	00e79963          	bne	a5,a4,1c01553e <__rt_io_lock+0x46>
1c015530:	80c50513          	addi	a0,a0,-2036 # 1b00080c <__rt_io_fc_lock>
1c015534:	f88fd0ef          	jal	ra,1c012cbc <__rt_fc_lock>
1c015538:	40fa                	lw	ra,156(sp)
1c01553a:	610d                	addi	sp,sp,160
1c01553c:	8082                	ret
1c01553e:	004c                	addi	a1,sp,4
1c015540:	80c50513          	addi	a0,a0,-2036
1c015544:	fdefd0ef          	jal	ra,1c012d22 <__rt_fc_cluster_lock>
1c015548:	4689                	li	a3,2
1c01554a:	00204737          	lui	a4,0x204
1c01554e:	08c14783          	lbu	a5,140(sp)
1c015552:	0ff7f793          	andi	a5,a5,255
1c015556:	f3ed                	bnez	a5,1c015538 <__rt_io_lock+0x40>
1c015558:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c01555c:	03c76783          	p.elw	a5,60(a4)
1c015560:	00d72223          	sw	a3,4(a4)
1c015564:	b7ed                	j	1c01554e <__rt_io_lock+0x56>
1c015566:	8082                	ret

1c015568 <__rt_putc_host_cluster_req>:
1c015568:	1141                	addi	sp,sp,-16
1c01556a:	c422                	sw	s0,8(sp)
1c01556c:	c606                	sw	ra,12(sp)
1c01556e:	842a                	mv	s0,a0
1c015570:	08954503          	lbu	a0,137(a0)
1c015574:	ec9ff0ef          	jal	ra,1c01543c <__rt_do_putc_host>
1c015578:	08844783          	lbu	a5,136(s0)
1c01557c:	4705                	li	a4,1
1c01557e:	08e42223          	sw	a4,132(s0)
1c015582:	00201737          	lui	a4,0x201
1c015586:	40b2                	lw	ra,12(sp)
1c015588:	4422                	lw	s0,8(sp)
1c01558a:	04078793          	addi	a5,a5,64
1c01558e:	07da                	slli	a5,a5,0x16
1c015590:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c015594:	0007e723          	p.sw	zero,a4(a5)
1c015598:	0141                	addi	sp,sp,16
1c01559a:	8082                	ret

1c01559c <__rt_io_unlock>:
1c01559c:	1c0177b7          	lui	a5,0x1c017
1c0155a0:	65c7a783          	lw	a5,1628(a5) # 1c01765c <__hal_debug_struct+0x10>
1c0155a4:	cf81                	beqz	a5,1c0155bc <__rt_io_unlock+0x20>
1c0155a6:	1c0187b7          	lui	a5,0x1c018
1c0155aa:	b207a783          	lw	a5,-1248(a5) # 1c017b20 <_rt_io_uart>
1c0155ae:	e799                	bnez	a5,1c0155bc <__rt_io_unlock+0x20>
1c0155b0:	1c0187b7          	lui	a5,0x1c018
1c0155b4:	aec7a783          	lw	a5,-1300(a5) # 1c017aec <__rt_iodev>
1c0155b8:	0427b963          	p.bneimm	a5,2,1c01560a <__rt_io_unlock+0x6e>
1c0155bc:	7135                	addi	sp,sp,-160
1c0155be:	014027f3          	csrr	a5,uhartid
1c0155c2:	cf06                	sw	ra,156(sp)
1c0155c4:	ca5797b3          	p.extractu	a5,a5,5,5
1c0155c8:	02000713          	li	a4,32
1c0155cc:	1b001537          	lui	a0,0x1b001
1c0155d0:	00e79963          	bne	a5,a4,1c0155e2 <__rt_io_unlock+0x46>
1c0155d4:	80c50513          	addi	a0,a0,-2036 # 1b00080c <__rt_io_fc_lock>
1c0155d8:	f16fd0ef          	jal	ra,1c012cee <__rt_fc_unlock>
1c0155dc:	40fa                	lw	ra,156(sp)
1c0155de:	610d                	addi	sp,sp,160
1c0155e0:	8082                	ret
1c0155e2:	004c                	addi	a1,sp,4
1c0155e4:	80c50513          	addi	a0,a0,-2036
1c0155e8:	f72fd0ef          	jal	ra,1c012d5a <__rt_fc_cluster_unlock>
1c0155ec:	4689                	li	a3,2
1c0155ee:	00204737          	lui	a4,0x204
1c0155f2:	08c14783          	lbu	a5,140(sp)
1c0155f6:	0ff7f793          	andi	a5,a5,255
1c0155fa:	f3ed                	bnez	a5,1c0155dc <__rt_io_unlock+0x40>
1c0155fc:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c015600:	03c76783          	p.elw	a5,60(a4)
1c015604:	00d72223          	sw	a3,4(a4)
1c015608:	b7ed                	j	1c0155f2 <__rt_io_unlock+0x56>
1c01560a:	8082                	ret

1c01560c <__rt_io_uart_flush.constprop.11>:
1c01560c:	7171                	addi	sp,sp,-176
1c01560e:	d522                	sw	s0,168(sp)
1c015610:	d706                	sw	ra,172(sp)
1c015612:	d326                	sw	s1,164(sp)
1c015614:	d14a                	sw	s2,160(sp)
1c015616:	cf4e                	sw	s3,156(sp)
1c015618:	cd52                	sw	s4,152(sp)
1c01561a:	1c018437          	lui	s0,0x1c018
1c01561e:	b1842783          	lw	a5,-1256(s0) # 1c017b18 <__rt_io_pending_flush>
1c015622:	b1840993          	addi	s3,s0,-1256
1c015626:	efad                	bnez	a5,1c0156a0 <__rt_io_uart_flush.constprop.11+0x94>
1c015628:	1c017637          	lui	a2,0x1c017
1c01562c:	64c60793          	addi	a5,a2,1612 # 1c01764c <__hal_debug_struct>
1c015630:	4f80                	lw	s0,24(a5)
1c015632:	64c60a13          	addi	s4,a2,1612
1c015636:	cc29                	beqz	s0,1c015690 <__rt_io_uart_flush.constprop.11+0x84>
1c015638:	1c018737          	lui	a4,0x1c018
1c01563c:	014027f3          	csrr	a5,uhartid
1c015640:	b2072483          	lw	s1,-1248(a4) # 1c017b20 <_rt_io_uart>
1c015644:	ca5797b3          	p.extractu	a5,a5,5,5
1c015648:	02000713          	li	a4,32
1c01564c:	1c017937          	lui	s2,0x1c017
1c015650:	06e79263          	bne	a5,a4,1c0156b4 <__rt_io_uart_flush.constprop.11+0xa8>
1c015654:	1c0155b7          	lui	a1,0x1c015
1c015658:	4785                	li	a5,1
1c01565a:	64c60613          	addi	a2,a2,1612
1c01565e:	3de58593          	addi	a1,a1,990 # 1c0153de <__rt_io_end_of_flush>
1c015662:	4501                	li	a0,0
1c015664:	00f9a023          	sw	a5,0(s3)
1c015668:	a75fd0ef          	jal	ra,1c0130dc <rt_event_get>
1c01566c:	40cc                	lw	a1,4(s1)
1c01566e:	87aa                	mv	a5,a0
1c015670:	4701                	li	a4,0
1c015672:	0586                	slli	a1,a1,0x1
1c015674:	86a2                	mv	a3,s0
1c015676:	66890613          	addi	a2,s2,1640 # 1c017668 <__hal_debug_struct+0x1c>
1c01567a:	0585                	addi	a1,a1,1
1c01567c:	4501                	li	a0,0
1c01567e:	fd5fd0ef          	jal	ra,1c013652 <rt_periph_copy>
1c015682:	f1bff0ef          	jal	ra,1c01559c <__rt_io_unlock>
1c015686:	0009a783          	lw	a5,0(s3)
1c01568a:	e395                	bnez	a5,1c0156ae <__rt_io_uart_flush.constprop.11+0xa2>
1c01568c:	e6dff0ef          	jal	ra,1c0154f8 <__rt_io_lock>
1c015690:	50ba                	lw	ra,172(sp)
1c015692:	542a                	lw	s0,168(sp)
1c015694:	549a                	lw	s1,164(sp)
1c015696:	590a                	lw	s2,160(sp)
1c015698:	49fa                	lw	s3,156(sp)
1c01569a:	4a6a                	lw	s4,152(sp)
1c01569c:	614d                	addi	sp,sp,176
1c01569e:	8082                	ret
1c0156a0:	efdff0ef          	jal	ra,1c01559c <__rt_io_unlock>
1c0156a4:	e35ff0ef          	jal	ra,1c0154d8 <rt_event_execute.isra.4.constprop.12>
1c0156a8:	e51ff0ef          	jal	ra,1c0154f8 <__rt_io_lock>
1c0156ac:	bf8d                	j	1c01561e <__rt_io_uart_flush.constprop.11+0x12>
1c0156ae:	e2bff0ef          	jal	ra,1c0154d8 <rt_event_execute.isra.4.constprop.12>
1c0156b2:	bfd1                	j	1c015686 <__rt_io_uart_flush.constprop.11+0x7a>
1c0156b4:	868a                	mv	a3,sp
1c0156b6:	8622                	mv	a2,s0
1c0156b8:	66890593          	addi	a1,s2,1640
1c0156bc:	8526                	mv	a0,s1
1c0156be:	26c010ef          	jal	ra,1c01692a <rt_uart_cluster_write>
1c0156c2:	4689                	li	a3,2
1c0156c4:	00204737          	lui	a4,0x204
1c0156c8:	08c14783          	lbu	a5,140(sp)
1c0156cc:	0ff7f793          	andi	a5,a5,255
1c0156d0:	c781                	beqz	a5,1c0156d8 <__rt_io_uart_flush.constprop.11+0xcc>
1c0156d2:	000a2c23          	sw	zero,24(s4)
1c0156d6:	bf6d                	j	1c015690 <__rt_io_uart_flush.constprop.11+0x84>
1c0156d8:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c0156dc:	03c76783          	p.elw	a5,60(a4)
1c0156e0:	00d72223          	sw	a3,4(a4)
1c0156e4:	b7d5                	j	1c0156c8 <__rt_io_uart_flush.constprop.11+0xbc>

1c0156e6 <__rt_io_uart_wait_pending>:
1c0156e6:	7135                	addi	sp,sp,-160
1c0156e8:	cd22                	sw	s0,152(sp)
1c0156ea:	cf06                	sw	ra,156(sp)
1c0156ec:	1c018437          	lui	s0,0x1c018
1c0156f0:	b1842783          	lw	a5,-1256(s0) # 1c017b18 <__rt_io_pending_flush>
1c0156f4:	eb85                	bnez	a5,1c015724 <__rt_io_uart_wait_pending+0x3e>
1c0156f6:	1c018437          	lui	s0,0x1c018
1c0156fa:	b1440413          	addi	s0,s0,-1260 # 1c017b14 <__rt_io_event_current>
1c0156fe:	4008                	lw	a0,0(s0)
1c015700:	cd11                	beqz	a0,1c01571c <__rt_io_uart_wait_pending+0x36>
1c015702:	014027f3          	csrr	a5,uhartid
1c015706:	8795                	srai	a5,a5,0x5
1c015708:	f267b7b3          	p.bclr	a5,a5,25,6
1c01570c:	02000713          	li	a4,32
1c015710:	02e79163          	bne	a5,a4,1c015732 <__rt_io_uart_wait_pending+0x4c>
1c015714:	ab9fd0ef          	jal	ra,1c0131cc <rt_event_wait>
1c015718:	00042023          	sw	zero,0(s0)
1c01571c:	40fa                	lw	ra,156(sp)
1c01571e:	446a                	lw	s0,152(sp)
1c015720:	610d                	addi	sp,sp,160
1c015722:	8082                	ret
1c015724:	e79ff0ef          	jal	ra,1c01559c <__rt_io_unlock>
1c015728:	db1ff0ef          	jal	ra,1c0154d8 <rt_event_execute.isra.4.constprop.12>
1c01572c:	dcdff0ef          	jal	ra,1c0154f8 <__rt_io_lock>
1c015730:	b7c1                	j	1c0156f0 <__rt_io_uart_wait_pending+0xa>
1c015732:	08f106a3          	sb	a5,141(sp)
1c015736:	1c0157b7          	lui	a5,0x1c015
1c01573a:	3ec78793          	addi	a5,a5,1004 # 1c0153ec <__rt_io_uart_wait_req>
1c01573e:	4705                	li	a4,1
1c015740:	c83e                	sw	a5,16(sp)
1c015742:	0068                	addi	a0,sp,12
1c015744:	1c0187b7          	lui	a5,0x1c018
1c015748:	a6e7ae23          	sw	a4,-1412(a5) # 1c017a7c <__rt_io_event+0x24>
1c01574c:	08010623          	sb	zero,140(sp)
1c015750:	d802                	sw	zero,48(sp)
1c015752:	da02                	sw	zero,52(sp)
1c015754:	ca2a                	sw	a0,20(sp)
1c015756:	8b9fe0ef          	jal	ra,1c01400e <__rt_cluster_push_fc_event>
1c01575a:	4689                	li	a3,2
1c01575c:	00204737          	lui	a4,0x204
1c015760:	08c14783          	lbu	a5,140(sp)
1c015764:	0ff7f793          	andi	a5,a5,255
1c015768:	fbd5                	bnez	a5,1c01571c <__rt_io_uart_wait_pending+0x36>
1c01576a:	00d72423          	sw	a3,8(a4) # 204008 <__L2+0x184008>
1c01576e:	03c76783          	p.elw	a5,60(a4)
1c015772:	00d72223          	sw	a3,4(a4)
1c015776:	b7ed                	j	1c015760 <__rt_io_uart_wait_pending+0x7a>

1c015778 <__rt_io_stop>:
1c015778:	1141                	addi	sp,sp,-16
1c01577a:	c422                	sw	s0,8(sp)
1c01577c:	1c018437          	lui	s0,0x1c018
1c015780:	c606                	sw	ra,12(sp)
1c015782:	b2040413          	addi	s0,s0,-1248 # 1c017b20 <_rt_io_uart>
1c015786:	f61ff0ef          	jal	ra,1c0156e6 <__rt_io_uart_wait_pending>
1c01578a:	4008                	lw	a0,0(s0)
1c01578c:	4581                	li	a1,0
1c01578e:	14e010ef          	jal	ra,1c0168dc <rt_uart_close>
1c015792:	40b2                	lw	ra,12(sp)
1c015794:	00042023          	sw	zero,0(s0)
1c015798:	4422                	lw	s0,8(sp)
1c01579a:	4501                	li	a0,0
1c01579c:	0141                	addi	sp,sp,16
1c01579e:	8082                	ret

1c0157a0 <strcmp>:
1c0157a0:	0015478b          	p.lbu	a5,1(a0!)
1c0157a4:	0015c70b          	p.lbu	a4,1(a1!)
1c0157a8:	c399                	beqz	a5,1c0157ae <strcmp+0xe>
1c0157aa:	fee78be3          	beq	a5,a4,1c0157a0 <strcmp>
1c0157ae:	40e78533          	sub	a0,a5,a4
1c0157b2:	8082                	ret

1c0157b4 <strncmp>:
1c0157b4:	ce11                	beqz	a2,1c0157d0 <strncmp+0x1c>
1c0157b6:	962a                	add	a2,a2,a0
1c0157b8:	0015478b          	p.lbu	a5,1(a0!)
1c0157bc:	0015c70b          	p.lbu	a4,1(a1!)
1c0157c0:	00e79563          	bne	a5,a4,1c0157ca <strncmp+0x16>
1c0157c4:	00c50363          	beq	a0,a2,1c0157ca <strncmp+0x16>
1c0157c8:	fbe5                	bnez	a5,1c0157b8 <strncmp+0x4>
1c0157ca:	40e78533          	sub	a0,a5,a4
1c0157ce:	8082                	ret
1c0157d0:	4501                	li	a0,0
1c0157d2:	8082                	ret

1c0157d4 <strlen>:
1c0157d4:	87aa                	mv	a5,a0
1c0157d6:	0007c703          	lbu	a4,0(a5)
1c0157da:	00178693          	addi	a3,a5,1
1c0157de:	e701                	bnez	a4,1c0157e6 <strlen+0x12>
1c0157e0:	40a78533          	sub	a0,a5,a0
1c0157e4:	8082                	ret
1c0157e6:	87b6                	mv	a5,a3
1c0157e8:	b7fd                	j	1c0157d6 <strlen+0x2>

1c0157ea <memset>:
1c0157ea:	962a                	add	a2,a2,a0
1c0157ec:	87aa                	mv	a5,a0
1c0157ee:	00c79363          	bne	a5,a2,1c0157f4 <memset+0xa>
1c0157f2:	8082                	ret
1c0157f4:	00b780ab          	p.sb	a1,1(a5!)
1c0157f8:	bfdd                	j	1c0157ee <memset+0x4>

1c0157fa <memcpy>:
1c0157fa:	00a5e733          	or	a4,a1,a0
1c0157fe:	fa273733          	p.bclr	a4,a4,29,2
1c015802:	87aa                	mv	a5,a0
1c015804:	c709                	beqz	a4,1c01580e <memcpy+0x14>
1c015806:	962e                	add	a2,a2,a1
1c015808:	00c59f63          	bne	a1,a2,1c015826 <memcpy+0x2c>
1c01580c:	8082                	ret
1c01580e:	fa263733          	p.bclr	a4,a2,29,2
1c015812:	fb75                	bnez	a4,1c015806 <memcpy+0xc>
1c015814:	962e                	add	a2,a2,a1
1c015816:	00c59363          	bne	a1,a2,1c01581c <memcpy+0x22>
1c01581a:	8082                	ret
1c01581c:	0045a70b          	p.lw	a4,4(a1!)
1c015820:	00e7a22b          	p.sw	a4,4(a5!)
1c015824:	bfcd                	j	1c015816 <memcpy+0x1c>
1c015826:	0015c70b          	p.lbu	a4,1(a1!)
1c01582a:	00e780ab          	p.sb	a4,1(a5!)
1c01582e:	bfe9                	j	1c015808 <memcpy+0xe>

1c015830 <strchr>:
1c015830:	0ff5f593          	andi	a1,a1,255
1c015834:	00054703          	lbu	a4,0(a0)
1c015838:	87aa                	mv	a5,a0
1c01583a:	0505                	addi	a0,a0,1
1c01583c:	00b70563          	beq	a4,a1,1c015846 <strchr+0x16>
1c015840:	fb75                	bnez	a4,1c015834 <strchr+0x4>
1c015842:	c191                	beqz	a1,1c015846 <strchr+0x16>
1c015844:	4781                	li	a5,0
1c015846:	853e                	mv	a0,a5
1c015848:	8082                	ret

1c01584a <__rt_putc_debug_bridge>:
1c01584a:	1141                	addi	sp,sp,-16
1c01584c:	c422                	sw	s0,8(sp)
1c01584e:	1c017437          	lui	s0,0x1c017
1c015852:	c226                	sw	s1,4(sp)
1c015854:	c606                	sw	ra,12(sp)
1c015856:	84aa                	mv	s1,a0
1c015858:	64c40413          	addi	s0,s0,1612 # 1c01764c <__hal_debug_struct>
1c01585c:	485c                	lw	a5,20(s0)
1c01585e:	c791                	beqz	a5,1c01586a <__rt_putc_debug_bridge+0x20>
1c015860:	06400513          	li	a0,100
1c015864:	c4dfd0ef          	jal	ra,1c0134b0 <rt_time_wait_us>
1c015868:	bfd5                	j	1c01585c <__rt_putc_debug_bridge+0x12>
1c01586a:	4c1c                	lw	a5,24(s0)
1c01586c:	00178713          	addi	a4,a5,1
1c015870:	97a2                	add	a5,a5,s0
1c015872:	00978e23          	sb	s1,28(a5)
1c015876:	cc18                	sw	a4,24(s0)
1c015878:	4c14                	lw	a3,24(s0)
1c01587a:	08000793          	li	a5,128
1c01587e:	00f68463          	beq	a3,a5,1c015886 <__rt_putc_debug_bridge+0x3c>
1c015882:	00a4b663          	p.bneimm	s1,10,1c01588e <__rt_putc_debug_bridge+0x44>
1c015886:	c701                	beqz	a4,1c01588e <__rt_putc_debug_bridge+0x44>
1c015888:	c858                	sw	a4,20(s0)
1c01588a:	00042c23          	sw	zero,24(s0)
1c01588e:	4c1c                	lw	a5,24(s0)
1c015890:	e799                	bnez	a5,1c01589e <__rt_putc_debug_bridge+0x54>
1c015892:	4422                	lw	s0,8(sp)
1c015894:	40b2                	lw	ra,12(sp)
1c015896:	4492                	lw	s1,4(sp)
1c015898:	0141                	addi	sp,sp,16
1c01589a:	e9efd06f          	j	1c012f38 <__rt_bridge_printf_flush>
1c01589e:	40b2                	lw	ra,12(sp)
1c0158a0:	4422                	lw	s0,8(sp)
1c0158a2:	4492                	lw	s1,4(sp)
1c0158a4:	0141                	addi	sp,sp,16
1c0158a6:	8082                	ret

1c0158a8 <__rt_putc_uart>:
1c0158a8:	1101                	addi	sp,sp,-32
1c0158aa:	c62a                	sw	a0,12(sp)
1c0158ac:	ce06                	sw	ra,28(sp)
1c0158ae:	e39ff0ef          	jal	ra,1c0156e6 <__rt_io_uart_wait_pending>
1c0158b2:	1c0177b7          	lui	a5,0x1c017
1c0158b6:	64c78793          	addi	a5,a5,1612 # 1c01764c <__hal_debug_struct>
1c0158ba:	4f94                	lw	a3,24(a5)
1c0158bc:	4532                	lw	a0,12(sp)
1c0158be:	00168713          	addi	a4,a3,1
1c0158c2:	cf98                	sw	a4,24(a5)
1c0158c4:	97b6                	add	a5,a5,a3
1c0158c6:	00a78e23          	sb	a0,28(a5)
1c0158ca:	08000793          	li	a5,128
1c0158ce:	00f70463          	beq	a4,a5,1c0158d6 <__rt_putc_uart+0x2e>
1c0158d2:	00a53663          	p.bneimm	a0,10,1c0158de <__rt_putc_uart+0x36>
1c0158d6:	40f2                	lw	ra,28(sp)
1c0158d8:	6105                	addi	sp,sp,32
1c0158da:	d33ff06f          	j	1c01560c <__rt_io_uart_flush.constprop.11>
1c0158de:	40f2                	lw	ra,28(sp)
1c0158e0:	6105                	addi	sp,sp,32
1c0158e2:	8082                	ret

1c0158e4 <tfp_putc.isra.9>:
1c0158e4:	1c0187b7          	lui	a5,0x1c018
1c0158e8:	aec7a783          	lw	a5,-1300(a5) # 1c017aec <__rt_iodev>
1c0158ec:	7135                	addi	sp,sp,-160
1c0158ee:	cf06                	sw	ra,156(sp)
1c0158f0:	0427bf63          	p.bneimm	a5,2,1c01594e <tfp_putc.isra.9+0x6a>
1c0158f4:	014027f3          	csrr	a5,uhartid
1c0158f8:	8795                	srai	a5,a5,0x5
1c0158fa:	f267b7b3          	p.bclr	a5,a5,25,6
1c0158fe:	02000713          	li	a4,32
1c015902:	00e79763          	bne	a5,a4,1c015910 <tfp_putc.isra.9+0x2c>
1c015906:	b37ff0ef          	jal	ra,1c01543c <__rt_do_putc_host>
1c01590a:	40fa                	lw	ra,156(sp)
1c01590c:	610d                	addi	sp,sp,160
1c01590e:	8082                	ret
1c015910:	08f10623          	sb	a5,140(sp)
1c015914:	1c0157b7          	lui	a5,0x1c015
1c015918:	4705                	li	a4,1
1c01591a:	56878793          	addi	a5,a5,1384 # 1c015568 <__rt_putc_host_cluster_req>
1c01591e:	08a106a3          	sb	a0,141(sp)
1c015922:	0048                	addi	a0,sp,4
1c015924:	d63a                	sw	a4,44(sp)
1c015926:	c43e                	sw	a5,8(sp)
1c015928:	c502                	sw	zero,136(sp)
1c01592a:	ce02                	sw	zero,28(sp)
1c01592c:	c62a                	sw	a0,12(sp)
1c01592e:	00010c23          	sb	zero,24(sp)
1c015932:	edcfe0ef          	jal	ra,1c01400e <__rt_cluster_push_fc_event>
1c015936:	4709                	li	a4,2
1c015938:	002047b7          	lui	a5,0x204
1c01593c:	46aa                	lw	a3,136(sp)
1c01593e:	f6f1                	bnez	a3,1c01590a <tfp_putc.isra.9+0x26>
1c015940:	00e7a423          	sw	a4,8(a5) # 204008 <__L2+0x184008>
1c015944:	03c7e683          	p.elw	a3,60(a5)
1c015948:	00e7a223          	sw	a4,4(a5)
1c01594c:	bfc5                	j	1c01593c <tfp_putc.isra.9+0x58>
1c01594e:	1c0187b7          	lui	a5,0x1c018
1c015952:	b207a783          	lw	a5,-1248(a5) # 1c017b20 <_rt_io_uart>
1c015956:	c781                	beqz	a5,1c01595e <tfp_putc.isra.9+0x7a>
1c015958:	f51ff0ef          	jal	ra,1c0158a8 <__rt_putc_uart>
1c01595c:	b77d                	j	1c01590a <tfp_putc.isra.9+0x26>
1c01595e:	1c0177b7          	lui	a5,0x1c017
1c015962:	65c7a783          	lw	a5,1628(a5) # 1c01765c <__hal_debug_struct+0x10>
1c015966:	c395                	beqz	a5,1c01598a <tfp_putc.isra.9+0xa6>
1c015968:	014027f3          	csrr	a5,uhartid
1c01596c:	00379713          	slli	a4,a5,0x3
1c015970:	1a1106b7          	lui	a3,0x1a110
1c015974:	ee873733          	p.bclr	a4,a4,23,8
1c015978:	9736                	add	a4,a4,a3
1c01597a:	6689                	lui	a3,0x2
1c01597c:	078a                	slli	a5,a5,0x2
1c01597e:	f8068693          	addi	a3,a3,-128 # 1f80 <__rt_stack_size+0x1780>
1c015982:	8ff5                	and	a5,a5,a3
1c015984:	00a767a3          	p.sw	a0,a5(a4)
1c015988:	b749                	j	1c01590a <tfp_putc.isra.9+0x26>
1c01598a:	ec1ff0ef          	jal	ra,1c01584a <__rt_putc_debug_bridge>
1c01598e:	bfb5                	j	1c01590a <tfp_putc.isra.9+0x26>

1c015990 <puts>:
1c015990:	1141                	addi	sp,sp,-16
1c015992:	c422                	sw	s0,8(sp)
1c015994:	c606                	sw	ra,12(sp)
1c015996:	842a                	mv	s0,a0
1c015998:	b61ff0ef          	jal	ra,1c0154f8 <__rt_io_lock>
1c01599c:	0014450b          	p.lbu	a0,1(s0!)
1c0159a0:	c501                	beqz	a0,1c0159a8 <puts+0x18>
1c0159a2:	f43ff0ef          	jal	ra,1c0158e4 <tfp_putc.isra.9>
1c0159a6:	bfdd                	j	1c01599c <puts+0xc>
1c0159a8:	4529                	li	a0,10
1c0159aa:	f3bff0ef          	jal	ra,1c0158e4 <tfp_putc.isra.9>
1c0159ae:	befff0ef          	jal	ra,1c01559c <__rt_io_unlock>
1c0159b2:	40b2                	lw	ra,12(sp)
1c0159b4:	4422                	lw	s0,8(sp)
1c0159b6:	4501                	li	a0,0
1c0159b8:	0141                	addi	sp,sp,16
1c0159ba:	8082                	ret

1c0159bc <fputc_locked>:
1c0159bc:	1141                	addi	sp,sp,-16
1c0159be:	c422                	sw	s0,8(sp)
1c0159c0:	842a                	mv	s0,a0
1c0159c2:	0ff57513          	andi	a0,a0,255
1c0159c6:	c606                	sw	ra,12(sp)
1c0159c8:	f1dff0ef          	jal	ra,1c0158e4 <tfp_putc.isra.9>
1c0159cc:	8522                	mv	a0,s0
1c0159ce:	40b2                	lw	ra,12(sp)
1c0159d0:	4422                	lw	s0,8(sp)
1c0159d2:	0141                	addi	sp,sp,16
1c0159d4:	8082                	ret

1c0159d6 <_prf_locked>:
1c0159d6:	1101                	addi	sp,sp,-32
1c0159d8:	ce06                	sw	ra,28(sp)
1c0159da:	c02a                	sw	a0,0(sp)
1c0159dc:	c62e                	sw	a1,12(sp)
1c0159de:	c432                	sw	a2,8(sp)
1c0159e0:	c236                	sw	a3,4(sp)
1c0159e2:	b17ff0ef          	jal	ra,1c0154f8 <__rt_io_lock>
1c0159e6:	4692                	lw	a3,4(sp)
1c0159e8:	4622                	lw	a2,8(sp)
1c0159ea:	45b2                	lw	a1,12(sp)
1c0159ec:	4502                	lw	a0,0(sp)
1c0159ee:	2ca1                	jal	1c015c46 <_prf>
1c0159f0:	c02a                	sw	a0,0(sp)
1c0159f2:	babff0ef          	jal	ra,1c01559c <__rt_io_unlock>
1c0159f6:	40f2                	lw	ra,28(sp)
1c0159f8:	4502                	lw	a0,0(sp)
1c0159fa:	6105                	addi	sp,sp,32
1c0159fc:	8082                	ret

1c0159fe <exit>:
1c0159fe:	1101                	addi	sp,sp,-32
1c015a00:	cc22                	sw	s0,24(sp)
1c015a02:	c84a                	sw	s2,16(sp)
1c015a04:	c62a                	sw	a0,12(sp)
1c015a06:	ce06                	sw	ra,28(sp)
1c015a08:	ca26                	sw	s1,20(sp)
1c015a0a:	88afd0ef          	jal	ra,1c012a94 <__rt_deinit>
1c015a0e:	4532                	lw	a0,12(sp)
1c015a10:	1a104437          	lui	s0,0x1a104
1c015a14:	0a040793          	addi	a5,s0,160 # 1a1040a0 <__l1_end+0xa10403c>
1c015a18:	c1f54933          	p.bset	s2,a0,0,31
1c015a1c:	0127a023          	sw	s2,0(a5)
1c015a20:	1c0187b7          	lui	a5,0x1c018
1c015a24:	aec7a783          	lw	a5,-1300(a5) # 1c017aec <__rt_iodev>
1c015a28:	0027bf63          	p.bneimm	a5,2,1c015a46 <exit+0x48>
1c015a2c:	c901                	beqz	a0,1c015a3c <exit+0x3e>
1c015a2e:	00020537          	lui	a0,0x20
1c015a32:	02350513          	addi	a0,a0,35 # 20023 <__L1Cl+0x10023>
1c015a36:	e4bfc0ef          	jal	ra,1c012880 <semihost_exit>
1c015a3a:	a001                	j	1c015a3a <exit+0x3c>
1c015a3c:	00020537          	lui	a0,0x20
1c015a40:	02650513          	addi	a0,a0,38 # 20026 <__L1Cl+0x10026>
1c015a44:	bfcd                	j	1c015a36 <exit+0x38>
1c015a46:	1c0174b7          	lui	s1,0x1c017
1c015a4a:	64c48493          	addi	s1,s1,1612 # 1c01764c <__hal_debug_struct>
1c015a4e:	ceafd0ef          	jal	ra,1c012f38 <__rt_bridge_printf_flush>
1c015a52:	0124a623          	sw	s2,12(s1)
1c015a56:	c9efd0ef          	jal	ra,1c012ef4 <__rt_bridge_send_notif>
1c015a5a:	449c                	lw	a5,8(s1)
1c015a5c:	dff9                	beqz	a5,1c015a3a <exit+0x3c>
1c015a5e:	07440413          	addi	s0,s0,116
1c015a62:	401c                	lw	a5,0(s0)
1c015a64:	83a5                	srli	a5,a5,0x9
1c015a66:	f837b7b3          	p.bclr	a5,a5,28,3
1c015a6a:	fe77bce3          	p.bneimm	a5,7,1c015a62 <exit+0x64>
1c015a6e:	ca8fd0ef          	jal	ra,1c012f16 <__rt_bridge_clear_notif>
1c015a72:	b7e1                	j	1c015a3a <exit+0x3c>

1c015a74 <abort>:
1c015a74:	1141                	addi	sp,sp,-16
1c015a76:	557d                	li	a0,-1
1c015a78:	c606                	sw	ra,12(sp)
1c015a7a:	f85ff0ef          	jal	ra,1c0159fe <exit>

1c015a7e <__rt_io_init>:
#endif
}

RT_FC_BOOT_CODE void __attribute__((constructor)) __rt_io_init()
{
  __rt_putc_host_buffer_index = 0;
1c015a7e:	1c0187b7          	lui	a5,0x1c018
1c015a82:	b007ae23          	sw	zero,-1252(a5) # 1c017b1c <__rt_putc_host_buffer_index>
void __rt_fc_cluster_unlock(rt_fc_lock_t *lock, rt_fc_lock_req_t *req);

static inline void __rt_fc_lock_init(rt_fc_lock_t *lock)
{
#if defined(ARCHI_HAS_FC)
  lock->waiting = NULL;
1c015a86:	1b0017b7          	lui	a5,0x1b001
1c015a8a:	80c78793          	addi	a5,a5,-2036 # 1b00080c <__rt_io_fc_lock>
1c015a8e:	0007a223          	sw	zero,4(a5)
  lock->locked = 0;
1c015a92:	0007a023          	sw	zero,0(a5)
  lock->fc_wait = NULL;
1c015a96:	0007a623          	sw	zero,12(a5)
  __rt_fc_lock_init(&__rt_io_fc_lock);

#if defined(__RT_USE_UART)
  _rt_io_uart = NULL;
1c015a9a:	1c0187b7          	lui	a5,0x1c018
1c015a9e:	b207a023          	sw	zero,-1248(a5) # 1c017b20 <_rt_io_uart>
  __rt_io_event_current = NULL;
1c015aa2:	1c0187b7          	lui	a5,0x1c018
1c015aa6:	b007aa23          	sw	zero,-1260(a5) # 1c017b14 <__rt_io_event_current>
  return __rt_iodev;
1c015aaa:	1c0187b7          	lui	a5,0x1c018

  if (rt_iodev() == RT_IODEV_UART)
1c015aae:	aec7a783          	lw	a5,-1300(a5) # 1c017aec <__rt_iodev>
1c015ab2:	0217be63          	p.bneimm	a5,1,1c015aee <__rt_io_init+0x70>
  {
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c015ab6:	1c0155b7          	lui	a1,0x1c015
{
1c015aba:	1141                	addi	sp,sp,-16
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c015abc:	4601                	li	a2,0
1c015abe:	47e58593          	addi	a1,a1,1150 # 1c01547e <__rt_io_start>
1c015ac2:	4501                	li	a0,0
{
1c015ac4:	c606                	sw	ra,12(sp)
    __rt_cbsys_add(RT_CBSYS_START, __rt_io_start, NULL);
1c015ac6:	966fd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
    __rt_cbsys_add(RT_CBSYS_STOP, __rt_io_stop, NULL);
1c015aca:	1c0155b7          	lui	a1,0x1c015
1c015ace:	77858593          	addi	a1,a1,1912 # 1c015778 <__rt_io_stop>
1c015ad2:	4601                	li	a2,0
1c015ad4:	4505                	li	a0,1
1c015ad6:	956fd0ef          	jal	ra,1c012c2c <__rt_cbsys_add>
    __rt_io_pending_flush = 0;
    rt_event_alloc(NULL, 1);
  }
#endif

}
1c015ada:	40b2                	lw	ra,12(sp)
    __rt_io_pending_flush = 0;
1c015adc:	1c0187b7          	lui	a5,0x1c018
1c015ae0:	b007ac23          	sw	zero,-1256(a5) # 1c017b18 <__rt_io_pending_flush>
    rt_event_alloc(NULL, 1);
1c015ae4:	4585                	li	a1,1
1c015ae6:	4501                	li	a0,0
}
1c015ae8:	0141                	addi	sp,sp,16
    rt_event_alloc(NULL, 1);
1c015aea:	d7cfd06f          	j	1c013066 <rt_event_alloc>
1c015aee:	8082                	ret

1c015af0 <printf>:

	return r;
}

int printf(const char *format, ...)
{
1c015af0:	7139                	addi	sp,sp,-64
1c015af2:	d432                	sw	a2,40(sp)
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c015af4:	862a                	mv	a2,a0
1c015af6:	1c016537          	lui	a0,0x1c016
{
1c015afa:	d22e                	sw	a1,36(sp)
1c015afc:	d636                	sw	a3,44(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c015afe:	4589                	li	a1,2
	va_start(vargs, format);
1c015b00:	1054                	addi	a3,sp,36
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c015b02:	9bc50513          	addi	a0,a0,-1604 # 1c0159bc <fputc_locked>
{
1c015b06:	ce06                	sw	ra,28(sp)
1c015b08:	d83a                	sw	a4,48(sp)
1c015b0a:	da3e                	sw	a5,52(sp)
1c015b0c:	dc42                	sw	a6,56(sp)
1c015b0e:	de46                	sw	a7,60(sp)
	va_start(vargs, format);
1c015b10:	c636                	sw	a3,12(sp)
	r = _prf_locked(fputc_locked, DESC(stdout), format, vargs);
1c015b12:	ec5ff0ef          	jal	ra,1c0159d6 <_prf_locked>
	va_end(vargs);

	return r;
}
1c015b16:	40f2                	lw	ra,28(sp)
1c015b18:	6121                	addi	sp,sp,64
1c015b1a:	8082                	ret

1c015b1c <_to_x>:
 * Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes).
 */
static int _to_x(char *buf, unsigned VALTYPE n, unsigned int base)
{
1c015b1c:	7179                	addi	sp,sp,-48
1c015b1e:	d422                	sw	s0,40(sp)
1c015b20:	d226                	sw	s1,36(sp)
1c015b22:	ce4e                	sw	s3,28(sp)
1c015b24:	cc52                	sw	s4,24(sp)
1c015b26:	ca56                	sw	s5,20(sp)
1c015b28:	c85a                	sw	s6,16(sp)
1c015b2a:	d606                	sw	ra,44(sp)
1c015b2c:	d04a                	sw	s2,32(sp)
1c015b2e:	c65e                	sw	s7,12(sp)
1c015b30:	84aa                	mv	s1,a0
1c015b32:	89ae                	mv	s3,a1
1c015b34:	8a32                	mv	s4,a2
1c015b36:	8ab6                	mv	s5,a3
1c015b38:	842a                	mv	s0,a0

	do {
		unsigned int d = n % base;

		n /= base;
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c015b3a:	4b25                	li	s6,9
		unsigned int d = n % base;
1c015b3c:	8656                	mv	a2,s5
1c015b3e:	4681                	li	a3,0
1c015b40:	854e                	mv	a0,s3
1c015b42:	85d2                	mv	a1,s4
1c015b44:	e03ea0ef          	jal	ra,1c000946 <__umoddi3>
		n /= base;
1c015b48:	85d2                	mv	a1,s4
		unsigned int d = n % base;
1c015b4a:	892a                	mv	s2,a0
		n /= base;
1c015b4c:	8656                	mv	a2,s5
1c015b4e:	854e                	mv	a0,s3
1c015b50:	4681                	li	a3,0
1c015b52:	ab9ea0ef          	jal	ra,1c00060a <__udivdi3>
1c015b56:	89aa                	mv	s3,a0
1c015b58:	8a2e                	mv	s4,a1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c015b5a:	02700713          	li	a4,39
1c015b5e:	012b6363          	bltu	s6,s2,1c015b64 <_to_x+0x48>
1c015b62:	4701                	li	a4,0
1c015b64:	03090913          	addi	s2,s2,48
1c015b68:	974a                	add	a4,a4,s2
1c015b6a:	00e40023          	sb	a4,0(s0)
	} while (n);
1c015b6e:	8dc9                	or	a1,a1,a0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
1c015b70:	00140793          	addi	a5,s0,1
	} while (n);
1c015b74:	e195                	bnez	a1,1c015b98 <_to_x+0x7c>

	*buf = 0;
1c015b76:	00078023          	sb	zero,0(a5)
	len = buf - start;
1c015b7a:	40978533          	sub	a0,a5,s1

	for (buf--; buf > start; buf--, start++) {
1c015b7e:	0084ef63          	bltu	s1,s0,1c015b9c <_to_x+0x80>
		*buf = *start;
		*start = tmp;
	}

	return len;
}
1c015b82:	50b2                	lw	ra,44(sp)
1c015b84:	5422                	lw	s0,40(sp)
1c015b86:	5492                	lw	s1,36(sp)
1c015b88:	5902                	lw	s2,32(sp)
1c015b8a:	49f2                	lw	s3,28(sp)
1c015b8c:	4a62                	lw	s4,24(sp)
1c015b8e:	4ad2                	lw	s5,20(sp)
1c015b90:	4b42                	lw	s6,16(sp)
1c015b92:	4bb2                	lw	s7,12(sp)
1c015b94:	6145                	addi	sp,sp,48
1c015b96:	8082                	ret
1c015b98:	843e                	mv	s0,a5
1c015b9a:	b74d                	j	1c015b3c <_to_x+0x20>
		*buf = *start;
1c015b9c:	0004c703          	lbu	a4,0(s1)
		char tmp = *buf;
1c015ba0:	00044783          	lbu	a5,0(s0)
		*buf = *start;
1c015ba4:	fee40fab          	p.sb	a4,-1(s0!)
		*start = tmp;
1c015ba8:	00f480ab          	p.sb	a5,1(s1!)
1c015bac:	bfc9                	j	1c015b7e <_to_x+0x62>

1c015bae <_rlrshift>:
	return (buf + _to_udec(buf, value)) - start;
}

static	void _rlrshift(uint64_t *v)
{
	*v = (*v & 1) + (*v >> 1);
1c015bae:	411c                	lw	a5,0(a0)
1c015bb0:	4154                	lw	a3,4(a0)
1c015bb2:	fc17b733          	p.bclr	a4,a5,30,1
1c015bb6:	01f69613          	slli	a2,a3,0x1f
1c015bba:	8385                	srli	a5,a5,0x1
1c015bbc:	8fd1                	or	a5,a5,a2
1c015bbe:	97ba                	add	a5,a5,a4
1c015bc0:	8285                	srli	a3,a3,0x1
1c015bc2:	00e7b733          	sltu	a4,a5,a4
1c015bc6:	9736                	add	a4,a4,a3
1c015bc8:	c11c                	sw	a5,0(a0)
1c015bca:	c158                	sw	a4,4(a0)
}
1c015bcc:	8082                	ret

1c015bce <_ldiv5>:
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t hi;
	uint64_t rem = *v, quot = 0U, q;
1c015bce:	4118                	lw	a4,0(a0)
1c015bd0:	4154                	lw	a3,4(a0)
	 */
	rem += 2U;

	for (i = 0; i < 3; i++) {
		hi = rem >> shifts[i];
		q = (uint64_t)(hi / 5U) << shifts[i];
1c015bd2:	4615                	li	a2,5
	rem += 2U;
1c015bd4:	00270793          	addi	a5,a4,2
1c015bd8:	00e7b733          	sltu	a4,a5,a4
1c015bdc:	9736                	add	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c015bde:	02c755b3          	divu	a1,a4,a2
		rem -= q * 5U;
1c015be2:	42b61733          	p.msu	a4,a2,a1
		hi = rem >> shifts[i];
1c015be6:	01d71693          	slli	a3,a4,0x1d
1c015bea:	0037d713          	srli	a4,a5,0x3
1c015bee:	8f55                	or	a4,a4,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c015bf0:	02c75733          	divu	a4,a4,a2
1c015bf4:	01d75693          	srli	a3,a4,0x1d
1c015bf8:	070e                	slli	a4,a4,0x3
		rem -= q * 5U;
1c015bfa:	42e617b3          	p.msu	a5,a2,a4
		quot += q;
1c015bfe:	95b6                	add	a1,a1,a3
		q = (uint64_t)(hi / 5U) << shifts[i];
1c015c00:	02c7d7b3          	divu	a5,a5,a2
		quot += q;
1c015c04:	973e                	add	a4,a4,a5
1c015c06:	00f737b3          	sltu	a5,a4,a5
1c015c0a:	97ae                	add	a5,a5,a1
	}

	*v = quot;
1c015c0c:	c118                	sw	a4,0(a0)
1c015c0e:	c15c                	sw	a5,4(a0)
}
1c015c10:	8082                	ret

1c015c12 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	char rval;

	if (*digit_count > 0) {
1c015c12:	419c                	lw	a5,0(a1)
		*digit_count -= 1;
		*fr = *fr * 10U;
		rval = ((*fr >> 60) & 0xF) + '0';
		*fr &= 0x0FFFFFFFFFFFFFFFull;
	} else {
		rval = '0';
1c015c14:	03000713          	li	a4,48
	if (*digit_count > 0) {
1c015c18:	02f05563          	blez	a5,1c015c42 <_get_digit+0x30>
		*digit_count -= 1;
1c015c1c:	17fd                	addi	a5,a5,-1
1c015c1e:	c19c                	sw	a5,0(a1)
		*fr = *fr * 10U;
1c015c20:	411c                	lw	a5,0(a0)
1c015c22:	4729                	li	a4,10
1c015c24:	4150                	lw	a2,4(a0)
1c015c26:	02f706b3          	mul	a3,a4,a5
1c015c2a:	02f737b3          	mulhu	a5,a4,a5
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c015c2e:	c114                	sw	a3,0(a0)
		*fr = *fr * 10U;
1c015c30:	42c707b3          	p.mac	a5,a4,a2
		rval = ((*fr >> 60) & 0xF) + '0';
1c015c34:	01c7d713          	srli	a4,a5,0x1c
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c015c38:	c7c7b7b3          	p.bclr	a5,a5,3,28
		rval = ((*fr >> 60) & 0xF) + '0';
1c015c3c:	03070713          	addi	a4,a4,48
		*fr &= 0x0FFFFFFFFFFFFFFFull;
1c015c40:	c15c                	sw	a5,4(a0)
	}

	return rval;
}
1c015c42:	853a                	mv	a0,a4
1c015c44:	8082                	ret

1c015c46 <_prf>:
	*sptr = p;
	return i;
}

int _prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
1c015c46:	7135                	addi	sp,sp,-160
1c015c48:	c94a                	sw	s2,144(sp)
1c015c4a:	c74e                	sw	s3,140(sp)
1c015c4c:	c15a                	sw	s6,128(sp)
1c015c4e:	dede                	sw	s7,124(sp)
1c015c50:	cf06                	sw	ra,156(sp)
1c015c52:	cd22                	sw	s0,152(sp)
1c015c54:	cb26                	sw	s1,148(sp)
1c015c56:	c552                	sw	s4,136(sp)
1c015c58:	c356                	sw	s5,132(sp)
1c015c5a:	dce2                	sw	s8,120(sp)
1c015c5c:	dae6                	sw	s9,116(sp)
1c015c5e:	d8ea                	sw	s10,112(sp)
1c015c60:	d6ee                	sw	s11,108(sp)
1c015c62:	8b2a                	mv	s6,a0
1c015c64:	8bae                	mv	s7,a1
1c015c66:	8936                	mv	s2,a3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
1c015c68:	4981                	li	s3,0

	while ((c = *format++)) {
1c015c6a:	00064503          	lbu	a0,0(a2)
1c015c6e:	00160c13          	addi	s8,a2,1
1c015c72:	c911                	beqz	a0,1c015c86 <_prf+0x40>
		if (c != '%') {
1c015c74:	02500793          	li	a5,37
1c015c78:	14f50563          	beq	a0,a5,1c015dc2 <_prf+0x17c>
			PUTC(c);
1c015c7c:	85de                	mv	a1,s7
1c015c7e:	9b02                	jalr	s6
1c015c80:	13f53fe3          	p.bneimm	a0,-1,1c0165be <_prf+0x978>
1c015c84:	59fd                	li	s3,-1
		}
	}
	return count;

#undef PUTC
}
1c015c86:	40fa                	lw	ra,156(sp)
1c015c88:	446a                	lw	s0,152(sp)
1c015c8a:	854e                	mv	a0,s3
1c015c8c:	44da                	lw	s1,148(sp)
1c015c8e:	494a                	lw	s2,144(sp)
1c015c90:	49ba                	lw	s3,140(sp)
1c015c92:	4a2a                	lw	s4,136(sp)
1c015c94:	4a9a                	lw	s5,132(sp)
1c015c96:	4b0a                	lw	s6,128(sp)
1c015c98:	5bf6                	lw	s7,124(sp)
1c015c9a:	5c66                	lw	s8,120(sp)
1c015c9c:	5cd6                	lw	s9,116(sp)
1c015c9e:	5d46                	lw	s10,112(sp)
1c015ca0:	5db6                	lw	s11,108(sp)
1c015ca2:	610d                	addi	sp,sp,160
1c015ca4:	8082                	ret
				switch (c) {
1c015ca6:	108d8663          	beq	s11,s0,1c015db2 <_prf+0x16c>
1c015caa:	0fb46863          	bltu	s0,s11,1c015d9a <_prf+0x154>
1c015cae:	fc0d8ce3          	beqz	s11,1c015c86 <_prf+0x40>
1c015cb2:	0ecd8d63          	beq	s11,a2,1c015dac <_prf+0x166>
					fplus = true;
1c015cb6:	8c52                	mv	s8,s4
			while (strchr("-+ #0", (c = *format++)) != NULL) {
1c015cb8:	000c4d83          	lbu	s11,0(s8)
1c015cbc:	1c017737          	lui	a4,0x1c017
1c015cc0:	4dc70513          	addi	a0,a4,1244 # 1c0174dc <__hyper_pad+0x11c>
1c015cc4:	85ee                	mv	a1,s11
1c015cc6:	c232                	sw	a2,4(sp)
1c015cc8:	b69ff0ef          	jal	ra,1c015830 <strchr>
1c015ccc:	001c0a13          	addi	s4,s8,1
1c015cd0:	4612                	lw	a2,4(sp)
1c015cd2:	f971                	bnez	a0,1c015ca6 <_prf+0x60>
			if (c == '*') {
1c015cd4:	02a00713          	li	a4,42
1c015cd8:	10ed9563          	bne	s11,a4,1c015de2 <_prf+0x19c>
				width = va_arg(vargs, int);
1c015cdc:	00092c83          	lw	s9,0(s2)
1c015ce0:	00490713          	addi	a4,s2,4
				if (width < 0) {
1c015ce4:	000cd663          	bgez	s9,1c015cf0 <_prf+0xaa>
					fminus = true;
1c015ce8:	4785                	li	a5,1
					width = -width;
1c015cea:	41900cb3          	neg	s9,s9
					fminus = true;
1c015cee:	cc3e                	sw	a5,24(sp)
				c = *format++;
1c015cf0:	000a4d83          	lbu	s11,0(s4)
				width = va_arg(vargs, int);
1c015cf4:	893a                	mv	s2,a4
				c = *format++;
1c015cf6:	002c0a13          	addi	s4,s8,2
			if (c == '.') {
1c015cfa:	02e00713          	li	a4,46
			precision = -1;
1c015cfe:	547d                	li	s0,-1
			if (c == '.') {
1c015d00:	00ed9f63          	bne	s11,a4,1c015d1e <_prf+0xd8>
				if (c == '*') {
1c015d04:	000a4703          	lbu	a4,0(s4)
1c015d08:	02a00793          	li	a5,42
1c015d0c:	10f71e63          	bne	a4,a5,1c015e28 <_prf+0x1e2>
					precision = va_arg(vargs, int);
1c015d10:	00092403          	lw	s0,0(s2)
				c = *format++;
1c015d14:	0a05                	addi	s4,s4,1
					precision = va_arg(vargs, int);
1c015d16:	0911                	addi	s2,s2,4
				c = *format++;
1c015d18:	000a4d83          	lbu	s11,0(s4)
1c015d1c:	0a05                	addi	s4,s4,1
			if (strchr("hlz", c) != NULL) {
1c015d1e:	1c017737          	lui	a4,0x1c017
1c015d22:	85ee                	mv	a1,s11
1c015d24:	4e470513          	addi	a0,a4,1252 # 1c0174e4 <__hyper_pad+0x124>
1c015d28:	84ee                	mv	s1,s11
1c015d2a:	b07ff0ef          	jal	ra,1c015830 <strchr>
1c015d2e:	10050e63          	beqz	a0,1c015e4a <_prf+0x204>
				if (i == 'l' && c == 'l') {
1c015d32:	06c00693          	li	a3,108
				c = *format++;
1c015d36:	001a0c13          	addi	s8,s4,1
1c015d3a:	000a4d83          	lbu	s11,0(s4)
				if (i == 'l' && c == 'l') {
1c015d3e:	0ed49963          	bne	s1,a3,1c015e30 <_prf+0x1ea>
1c015d42:	009d9863          	bne	s11,s1,1c015d52 <_prf+0x10c>
					c = *format++;
1c015d46:	001a4d83          	lbu	s11,1(s4)
1c015d4a:	002a0c13          	addi	s8,s4,2
					i = 'L';
1c015d4e:	04c00493          	li	s1,76
			switch (c) {
1c015d52:	06700693          	li	a3,103
1c015d56:	17b6e263          	bltu	a3,s11,1c015eba <_prf+0x274>
1c015d5a:	06500693          	li	a3,101
1c015d5e:	32ddfc63          	bleu	a3,s11,1c016096 <_prf+0x450>
1c015d62:	04700693          	li	a3,71
1c015d66:	0fb6e563          	bltu	a3,s11,1c015e50 <_prf+0x20a>
1c015d6a:	04500713          	li	a4,69
1c015d6e:	32edf463          	bleu	a4,s11,1c016096 <_prf+0x450>
1c015d72:	f00d8ae3          	beqz	s11,1c015c86 <_prf+0x40>
1c015d76:	02500713          	li	a4,37
1c015d7a:	02ed8de3          	beq	s11,a4,1c0165b4 <_prf+0x96e>
				PUTC('%');
1c015d7e:	85de                	mv	a1,s7
1c015d80:	02500513          	li	a0,37
1c015d84:	9b02                	jalr	s6
1c015d86:	eff52fe3          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
				PUTC(c);
1c015d8a:	85de                	mv	a1,s7
1c015d8c:	856e                	mv	a0,s11
1c015d8e:	9b02                	jalr	s6
1c015d90:	eff52ae3          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
				count += 2;
1c015d94:	0989                	addi	s3,s3,2
1c015d96:	02b0006f          	j	1c0165c0 <_prf+0x97a>
				switch (c) {
1c015d9a:	039d8163          	beq	s11,s9,1c015dbc <_prf+0x176>
1c015d9e:	009d8c63          	beq	s11,s1,1c015db6 <_prf+0x170>
1c015da2:	f1ad9ae3          	bne	s11,s10,1c015cb6 <_prf+0x70>
					fplus = true;
1c015da6:	4705                	li	a4,1
1c015da8:	c63a                	sw	a4,12(sp)
					break;
1c015daa:	b731                	j	1c015cb6 <_prf+0x70>
					fspace = true;
1c015dac:	4785                	li	a5,1
1c015dae:	c83e                	sw	a5,16(sp)
					break;
1c015db0:	b719                	j	1c015cb6 <_prf+0x70>
					falt = true;
1c015db2:	4a85                	li	s5,1
					break;
1c015db4:	b709                	j	1c015cb6 <_prf+0x70>
					fzero = true;
1c015db6:	4705                	li	a4,1
1c015db8:	ce3a                	sw	a4,28(sp)
					break;
1c015dba:	bdf5                	j	1c015cb6 <_prf+0x70>
					fminus = true;
1c015dbc:	4785                	li	a5,1
1c015dbe:	cc3e                	sw	a5,24(sp)
1c015dc0:	bddd                	j	1c015cb6 <_prf+0x70>
			fminus = fplus = fspace = falt = fzero = false;
1c015dc2:	ce02                	sw	zero,28(sp)
1c015dc4:	c802                	sw	zero,16(sp)
1c015dc6:	c602                	sw	zero,12(sp)
1c015dc8:	cc02                	sw	zero,24(sp)
1c015dca:	4a81                	li	s5,0
				switch (c) {
1c015dcc:	02300413          	li	s0,35
1c015dd0:	02d00c93          	li	s9,45
1c015dd4:	03000493          	li	s1,48
1c015dd8:	02b00d13          	li	s10,43
1c015ddc:	02000613          	li	a2,32
1c015de0:	bde1                	j	1c015cb8 <_prf+0x72>
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
1c015de2:	fd0d8713          	addi	a4,s11,-48
			} else if (!isdigit(c)) {
1c015de6:	46a5                	li	a3,9
				width = 0;
1c015de8:	4c81                	li	s9,0
			} else if (!isdigit(c)) {
1c015dea:	f0e6e8e3          	bltu	a3,a4,1c015cfa <_prf+0xb4>
	while (isdigit(*p)) {
1c015dee:	4725                	li	a4,9
		i = 10 * i + *p++ - '0';
1c015df0:	4629                	li	a2,10
	while (isdigit(*p)) {
1c015df2:	8a62                	mv	s4,s8
1c015df4:	001a4d8b          	p.lbu	s11,1(s4!)
1c015df8:	fd0d8693          	addi	a3,s11,-48
1c015dfc:	eed76fe3          	bltu	a4,a3,1c015cfa <_prf+0xb4>
		i = 10 * i + *p++ - '0';
1c015e00:	87ee                	mv	a5,s11
1c015e02:	42cc87b3          	p.mac	a5,s9,a2
1c015e06:	8c52                	mv	s8,s4
1c015e08:	fd078c93          	addi	s9,a5,-48
1c015e0c:	b7dd                	j	1c015df2 <_prf+0x1ac>
1c015e0e:	42b407b3          	p.mac	a5,s0,a1
1c015e12:	8a3a                	mv	s4,a4
1c015e14:	fd078413          	addi	s0,a5,-48
	while (isdigit(*p)) {
1c015e18:	8752                	mv	a4,s4
1c015e1a:	0017478b          	p.lbu	a5,1(a4!)
1c015e1e:	fd078613          	addi	a2,a5,-48
1c015e22:	fec6f6e3          	bleu	a2,a3,1c015e0e <_prf+0x1c8>
1c015e26:	bdcd                	j	1c015d18 <_prf+0xd2>
	int i = 0;
1c015e28:	4401                	li	s0,0
	while (isdigit(*p)) {
1c015e2a:	46a5                	li	a3,9
		i = 10 * i + *p++ - '0';
1c015e2c:	45a9                	li	a1,10
1c015e2e:	b7ed                	j	1c015e18 <_prf+0x1d2>
				} else if (i == 'h' && c == 'h') {
1c015e30:	06800693          	li	a3,104
1c015e34:	f0d49fe3          	bne	s1,a3,1c015d52 <_prf+0x10c>
1c015e38:	f09d9de3          	bne	s11,s1,1c015d52 <_prf+0x10c>
					c = *format++;
1c015e3c:	002a0c13          	addi	s8,s4,2
1c015e40:	001a4d83          	lbu	s11,1(s4)
					i = 'H';
1c015e44:	04800493          	li	s1,72
1c015e48:	b729                	j	1c015d52 <_prf+0x10c>
1c015e4a:	8c52                	mv	s8,s4
			i = 0;
1c015e4c:	4481                	li	s1,0
1c015e4e:	b711                	j	1c015d52 <_prf+0x10c>
			switch (c) {
1c015e50:	06300693          	li	a3,99
1c015e54:	12dd8a63          	beq	s11,a3,1c015f88 <_prf+0x342>
1c015e58:	09b6e163          	bltu	a3,s11,1c015eda <_prf+0x294>
1c015e5c:	05800693          	li	a3,88
1c015e60:	f0dd9fe3          	bne	s11,a3,1c015d7e <_prf+0x138>
				switch (i) {
1c015e64:	06c00693          	li	a3,108
1c015e68:	6cd48363          	beq	s1,a3,1c01652e <_prf+0x8e8>
1c015e6c:	07a00693          	li	a3,122
1c015e70:	6ad48f63          	beq	s1,a3,1c01652e <_prf+0x8e8>
1c015e74:	04c00693          	li	a3,76
1c015e78:	6ad49b63          	bne	s1,a3,1c01652e <_prf+0x8e8>
					val = va_arg(vargs, unsigned long long);
1c015e7c:	091d                	addi	s2,s2,7
1c015e7e:	c4093933          	p.bclr	s2,s2,2,0
1c015e82:	00092583          	lw	a1,0(s2)
1c015e86:	00492603          	lw	a2,4(s2)
1c015e8a:	00890a13          	addi	s4,s2,8
				if (c == 'o') {
1c015e8e:	06f00713          	li	a4,111
1c015e92:	00c4                	addi	s1,sp,68
1c015e94:	6aed9d63          	bne	s11,a4,1c01654e <_prf+0x908>
	if (alt_form) {
1c015e98:	6a0a8163          	beqz	s5,1c01653a <_prf+0x8f4>
		*buf++ = '0';
1c015e9c:	03000793          	li	a5,48
1c015ea0:	04f10223          	sb	a5,68(sp)
		if (!value) {
1c015ea4:	00c5e7b3          	or	a5,a1,a2
		*buf++ = '0';
1c015ea8:	04510513          	addi	a0,sp,69
		if (!value) {
1c015eac:	68079863          	bnez	a5,1c01653c <_prf+0x8f6>
			*buf++ = 0;
1c015eb0:	040102a3          	sb	zero,69(sp)
			prefix = 0;
1c015eb4:	4901                	li	s2,0
			return 1;
1c015eb6:	4d85                	li	s11,1
1c015eb8:	a069                	j	1c015f42 <_prf+0x2fc>
			switch (c) {
1c015eba:	07000693          	li	a3,112
1c015ebe:	62dd8f63          	beq	s11,a3,1c0164fc <_prf+0x8b6>
1c015ec2:	09b6e663          	bltu	a3,s11,1c015f4e <_prf+0x308>
1c015ec6:	06e00693          	li	a3,110
1c015eca:	5edd8463          	beq	s11,a3,1c0164b2 <_prf+0x86c>
1c015ece:	f9b6ebe3          	bltu	a3,s11,1c015e64 <_prf+0x21e>
1c015ed2:	06900693          	li	a3,105
1c015ed6:	eadd94e3          	bne	s11,a3,1c015d7e <_prf+0x138>
				switch (i) {
1c015eda:	06c00793          	li	a5,108
1c015ede:	18f48563          	beq	s1,a5,1c016068 <_prf+0x422>
1c015ee2:	07a00793          	li	a5,122
1c015ee6:	18f48163          	beq	s1,a5,1c016068 <_prf+0x422>
1c015eea:	04c00793          	li	a5,76
1c015eee:	16f49d63          	bne	s1,a5,1c016068 <_prf+0x422>
					val = va_arg(vargs, long long);
1c015ef2:	091d                	addi	s2,s2,7
1c015ef4:	c4093933          	p.bclr	s2,s2,2,0
1c015ef8:	00092583          	lw	a1,0(s2)
1c015efc:	00492a83          	lw	s5,4(s2)
1c015f00:	00890a13          	addi	s4,s2,8
1c015f04:	04410d93          	addi	s11,sp,68
	if (value < 0) {
1c015f08:	160ad763          	bgez	s5,1c016076 <_prf+0x430>
		*buf++ = '-';
1c015f0c:	02d00793          	li	a5,45
		value = -value;
1c015f10:	40b005b3          	neg	a1,a1
		*buf++ = '-';
1c015f14:	04f10223          	sb	a5,68(sp)
		value = -value;
1c015f18:	41500633          	neg	a2,s5
1c015f1c:	00b037b3          	snez	a5,a1
1c015f20:	8e1d                	sub	a2,a2,a5
		*buf++ = ' ';
1c015f22:	04510913          	addi	s2,sp,69
	return _to_x(buf, value, 10);
1c015f26:	854a                	mv	a0,s2
1c015f28:	46a9                	li	a3,10
1c015f2a:	bf3ff0ef          	jal	ra,1c015b1c <_to_x>
				if (fplus || fspace || val < 0) {
1c015f2e:	47b2                	lw	a5,12(sp)
	return (buf + _to_udec(buf, value)) - start;
1c015f30:	954a                	add	a0,a0,s2
1c015f32:	41b50db3          	sub	s11,a0,s11
					prefix = 1;
1c015f36:	4905                	li	s2,1
				if (fplus || fspace || val < 0) {
1c015f38:	e789                	bnez	a5,1c015f42 <_prf+0x2fc>
1c015f3a:	4742                	lw	a4,16(sp)
1c015f3c:	e319                	bnez	a4,1c015f42 <_prf+0x2fc>
1c015f3e:	01fad913          	srli	s2,s5,0x1f
			if (precision >= 0) {
1c015f42:	04045c63          	bgez	s0,1c015f9a <_prf+0x354>
			zero.predot = zero.postdot = zero.trail = 0;
1c015f46:	4401                	li	s0,0
1c015f48:	4a81                	li	s5,0
1c015f4a:	4681                	li	a3,0
1c015f4c:	a401                	j	1c01614c <_prf+0x506>
			switch (c) {
1c015f4e:	07500693          	li	a3,117
1c015f52:	f0dd89e3          	beq	s11,a3,1c015e64 <_prf+0x21e>
1c015f56:	07800693          	li	a3,120
1c015f5a:	f0dd85e3          	beq	s11,a3,1c015e64 <_prf+0x21e>
1c015f5e:	07300713          	li	a4,115
1c015f62:	e0ed9ee3          	bne	s11,a4,1c015d7e <_prf+0x138>
				cptr = va_arg(vargs, char *);
1c015f66:	00490a13          	addi	s4,s2,4
1c015f6a:	00092783          	lw	a5,0(s2)
				if (precision < 0) {
1c015f6e:	00045663          	bgez	s0,1c015f7a <_prf+0x334>
					precision = INT_MAX;
1c015f72:	80000737          	lui	a4,0x80000
1c015f76:	fff74413          	not	s0,a4
1c015f7a:	86be                	mv	a3,a5
				for (clen = 0; clen < precision; clen++) {
1c015f7c:	4d81                	li	s11,0
1c015f7e:	5bb41263          	bne	s0,s11,1c016522 <_prf+0x8dc>
1c015f82:	4901                	li	s2,0
1c015f84:	4401                	li	s0,0
1c015f86:	a819                	j	1c015f9c <_prf+0x356>
				buf[0] = va_arg(vargs, int);
1c015f88:	00092783          	lw	a5,0(s2)
1c015f8c:	00490a13          	addi	s4,s2,4
				clen = 1;
1c015f90:	4d85                	li	s11,1
				buf[0] = va_arg(vargs, int);
1c015f92:	04f10223          	sb	a5,68(sp)
				break;
1c015f96:	4901                	li	s2,0
1c015f98:	4401                	li	s0,0
1c015f9a:	00dc                	addi	a5,sp,68
				zero_head = precision - clen + prefix;
1c015f9c:	41b40d33          	sub	s10,s0,s11
1c015fa0:	9d4a                	add	s10,s10,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c015fa2:	4401                	li	s0,0
1c015fa4:	4a81                	li	s5,0
1c015fa6:	4681                	li	a3,0
1c015fa8:	040d6d33          	p.max	s10,s10,zero
			if (!fminus && width > 0) {
1c015fac:	4762                	lw	a4,24(sp)
			width -= clen + zero_head;
1c015fae:	01bd0633          	add	a2,s10,s11
1c015fb2:	40cc8cb3          	sub	s9,s9,a2
			if (!fminus && width > 0) {
1c015fb6:	e701                	bnez	a4,1c015fbe <_prf+0x378>
1c015fb8:	84e6                	mv	s1,s9
1c015fba:	63904263          	bgtz	s9,1c0165de <_prf+0x998>
1c015fbe:	012784b3          	add	s1,a5,s2
			while (prefix-- > 0) {
1c015fc2:	62979463          	bne	a5,s1,1c0165ea <_prf+0x9a4>
1c015fc6:	84ea                	mv	s1,s10
			while (zero_head-- > 0) {
1c015fc8:	14fd                	addi	s1,s1,-1
1c015fca:	63f4bc63          	p.bneimm	s1,-1,1c016602 <_prf+0x9bc>
			clen -= prefix;
1c015fce:	412d84b3          	sub	s1,s11,s2
1c015fd2:	8726                	mv	a4,s1
			if (zero.predot) {
1c015fd4:	c295                	beqz	a3,1c015ff8 <_prf+0x3b2>
				c = *cptr;
1c015fd6:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c)) {
1c015fda:	8dbe                	mv	s11,a5
1c015fdc:	00978833          	add	a6,a5,s1
1c015fe0:	4625                	li	a2,9
1c015fe2:	fd050593          	addi	a1,a0,-48
1c015fe6:	41b80733          	sub	a4,a6,s11
1c015fea:	62b67863          	bleu	a1,a2,1c01661a <_prf+0x9d4>
1c015fee:	8636                	mv	a2,a3
				while (zero.predot-- > 0) {
1c015ff0:	64061363          	bnez	a2,1c016636 <_prf+0x9f0>
				clen -= zero.predot;
1c015ff4:	8f15                	sub	a4,a4,a3
1c015ff6:	87ee                	mv	a5,s11
			if (zero.postdot) {
1c015ff8:	020a8e63          	beqz	s5,1c016034 <_prf+0x3ee>
1c015ffc:	8dbe                	mv	s11,a5
1c015ffe:	00e78833          	add	a6,a5,a4
				} while (c != '.');
1c016002:	02e00613          	li	a2,46
					c = *cptr++;
1c016006:	001dc68b          	p.lbu	a3,1(s11!)
					PUTC(c);
1c01600a:	85de                	mv	a1,s7
1c01600c:	c232                	sw	a2,4(sp)
1c01600e:	8536                	mv	a0,a3
1c016010:	c036                	sw	a3,0(sp)
1c016012:	c442                	sw	a6,8(sp)
1c016014:	9b02                	jalr	s6
1c016016:	4612                	lw	a2,4(sp)
1c016018:	4682                	lw	a3,0(sp)
1c01601a:	4822                	lw	a6,8(sp)
1c01601c:	c7f524e3          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
1c016020:	41b80733          	sub	a4,a6,s11
				} while (c != '.');
1c016024:	fec691e3          	bne	a3,a2,1c016006 <_prf+0x3c0>
1c016028:	86d6                	mv	a3,s5
				while (zero.postdot-- > 0) {
1c01602a:	62d04563          	bgtz	a3,1c016654 <_prf+0xa0e>
				clen -= zero.postdot;
1c01602e:	41570733          	sub	a4,a4,s5
					c = *cptr++;
1c016032:	87ee                	mv	a5,s11
			if (zero.trail) {
1c016034:	c415                	beqz	s0,1c016060 <_prf+0x41a>
				c = *cptr;
1c016036:	0007c503          	lbu	a0,0(a5)
				while (isdigit(c) || c == '.') {
1c01603a:	8dbe                	mv	s11,a5
1c01603c:	973e                	add	a4,a4,a5
1c01603e:	4625                	li	a2,9
1c016040:	02e00693          	li	a3,46
1c016044:	fd050593          	addi	a1,a0,-48
1c016048:	41b70ab3          	sub	s5,a4,s11
1c01604c:	62b67163          	bleu	a1,a2,1c01666e <_prf+0xa28>
1c016050:	60d50f63          	beq	a0,a3,1c01666e <_prf+0xa28>
1c016054:	8722                	mv	a4,s0
				while (zero.trail-- > 0) {
1c016056:	62e04a63          	bgtz	a4,1c01668a <_prf+0xa44>
				clen -= zero.trail;
1c01605a:	408a8733          	sub	a4,s5,s0
1c01605e:	87ee                	mv	a5,s11
1c016060:	843e                	mv	s0,a5
1c016062:	00e78ab3          	add	s5,a5,a4
1c016066:	a599                	j	1c0166ac <_prf+0xa66>
					val = va_arg(vargs, int);
1c016068:	00092583          	lw	a1,0(s2)
1c01606c:	00490a13          	addi	s4,s2,4
1c016070:	41f5da93          	srai	s5,a1,0x1f
					break;
1c016074:	bd41                	j	1c015f04 <_prf+0x2be>
	} else if (fplus) {
1c016076:	47b2                	lw	a5,12(sp)
1c016078:	c799                	beqz	a5,1c016086 <_prf+0x440>
		*buf++ = '+';
1c01607a:	02b00793          	li	a5,43
		*buf++ = ' ';
1c01607e:	04f10223          	sb	a5,68(sp)
1c016082:	8656                	mv	a2,s5
1c016084:	bd79                	j	1c015f22 <_prf+0x2dc>
	} else if (fspace) {
1c016086:	4742                	lw	a4,16(sp)
1c016088:	c701                	beqz	a4,1c016090 <_prf+0x44a>
		*buf++ = ' ';
1c01608a:	02000793          	li	a5,32
1c01608e:	bfc5                	j	1c01607e <_prf+0x438>
	} else if (fspace) {
1c016090:	8656                	mv	a2,s5
1c016092:	896e                	mv	s2,s11
1c016094:	bd49                	j	1c015f26 <_prf+0x2e0>
				u.d = va_arg(vargs, double);
1c016096:	091d                	addi	s2,s2,7
1c016098:	c4093933          	p.bclr	s2,s2,2,0
				double_val = u.i;
1c01609c:	00092583          	lw	a1,0(s2)
1c0160a0:	00492683          	lw	a3,4(s2)
	fract = (double_temp << 11) & ~HIGHBIT64;
1c0160a4:	800007b7          	lui	a5,0x80000
1c0160a8:	0155d613          	srli	a2,a1,0x15
1c0160ac:	00b69713          	slli	a4,a3,0xb
1c0160b0:	8f51                	or	a4,a4,a2
1c0160b2:	fff7c793          	not	a5,a5
1c0160b6:	05ae                	slli	a1,a1,0xb
1c0160b8:	8f7d                	and	a4,a4,a5
				u.d = va_arg(vargs, double);
1c0160ba:	00890a13          	addi	s4,s2,8
	fract = (double_temp << 11) & ~HIGHBIT64;
1c0160be:	d82e                	sw	a1,48(sp)
	exp = double_temp >> 52 & 0x7ff;
1c0160c0:	0146d913          	srli	s2,a3,0x14
	fract = (double_temp << 11) & ~HIGHBIT64;
1c0160c4:	da3a                	sw	a4,52(sp)
	exp = double_temp >> 52 & 0x7ff;
1c0160c6:	e8b93933          	p.bclr	s2,s2,20,11
	if (sign) {
1c0160ca:	0806d863          	bgez	a3,1c01615a <_prf+0x514>
		*buf++ = '-';
1c0160ce:	02d00693          	li	a3,45
		*buf++ = ' ';
1c0160d2:	04d10223          	sb	a3,68(sp)
1c0160d6:	04510493          	addi	s1,sp,69
	if (exp == 0x7ff) {
1c0160da:	7ff00693          	li	a3,2047
1c0160de:	0cd91363          	bne	s2,a3,1c0161a4 <_prf+0x55e>
		if (!fract) {
1c0160e2:	8f4d                	or	a4,a4,a1
1c0160e4:	fbfd8793          	addi	a5,s11,-65
1c0160e8:	00348513          	addi	a0,s1,3
1c0160ec:	eb49                	bnez	a4,1c01617e <_prf+0x538>
			if (isupper(c)) {
1c0160ee:	4765                	li	a4,25
1c0160f0:	06f76f63          	bltu	a4,a5,1c01616e <_prf+0x528>
				*buf++ = 'I';
1c0160f4:	6795                	lui	a5,0x5
1c0160f6:	e4978793          	addi	a5,a5,-439 # 4e49 <__rt_stack_size+0x4649>
1c0160fa:	00f49023          	sh	a5,0(s1)
				*buf++ = 'N';
1c0160fe:	04600793          	li	a5,70
		return buf - start;
1c016102:	04410913          	addi	s2,sp,68
				*buf++ = 'a';
1c016106:	00f48123          	sb	a5,2(s1)
		*buf = 0;
1c01610a:	000481a3          	sb	zero,3(s1)
		return buf - start;
1c01610e:	41250533          	sub	a0,a0,s2
			zero.predot = zero.postdot = zero.trail = 0;
1c016112:	4401                	li	s0,0
1c016114:	4a81                	li	s5,0
1c016116:	4681                	li	a3,0
				if (fplus || fspace || (buf[0] == '-')) {
1c016118:	4732                	lw	a4,12(sp)
					prefix = 1;
1c01611a:	4905                	li	s2,1
				if (fplus || fspace || (buf[0] == '-')) {
1c01611c:	eb09                	bnez	a4,1c01612e <_prf+0x4e8>
1c01611e:	47c2                	lw	a5,16(sp)
1c016120:	e799                	bnez	a5,1c01612e <_prf+0x4e8>
1c016122:	04414903          	lbu	s2,68(sp)
1c016126:	fd390913          	addi	s2,s2,-45
1c01612a:	00193913          	seqz	s2,s2
				if (!isdigit(buf[prefix])) {
1c01612e:	1098                	addi	a4,sp,96
1c016130:	012707b3          	add	a5,a4,s2
1c016134:	fe47c783          	lbu	a5,-28(a5)
				clen += zero.predot + zero.postdot + zero.trail;
1c016138:	015684b3          	add	s1,a3,s5
1c01613c:	94a2                	add	s1,s1,s0
1c01613e:	fd078793          	addi	a5,a5,-48
				if (!isdigit(buf[prefix])) {
1c016142:	4625                	li	a2,9
				clen += zero.predot + zero.postdot + zero.trail;
1c016144:	00a48db3          	add	s11,s1,a0
				if (!isdigit(buf[prefix])) {
1c016148:	46f66e63          	bltu	a2,a5,1c0165c4 <_prf+0x97e>
			} else if (fzero) {
1c01614c:	47f2                	lw	a5,28(sp)
1c01614e:	46078b63          	beqz	a5,1c0165c4 <_prf+0x97e>
				zero_head = width - clen;
1c016152:	41bc8d33          	sub	s10,s9,s11
1c016156:	00dc                	addi	a5,sp,68
1c016158:	bd81                	j	1c015fa8 <_prf+0x362>
	} else if (fplus) {
1c01615a:	47b2                	lw	a5,12(sp)
		*buf++ = '+';
1c01615c:	02b00693          	li	a3,43
	} else if (fplus) {
1c016160:	fbad                	bnez	a5,1c0160d2 <_prf+0x48c>
	} else if (fspace) {
1c016162:	47c2                	lw	a5,16(sp)
1c016164:	00c4                	addi	s1,sp,68
1c016166:	dbb5                	beqz	a5,1c0160da <_prf+0x494>
		*buf++ = ' ';
1c016168:	02000693          	li	a3,32
1c01616c:	b79d                	j	1c0160d2 <_prf+0x48c>
				*buf++ = 'i';
1c01616e:	679d                	lui	a5,0x7
1c016170:	e6978793          	addi	a5,a5,-407 # 6e69 <__rt_stack_size+0x6669>
1c016174:	00f49023          	sh	a5,0(s1)
				*buf++ = 'n';
1c016178:	06600793          	li	a5,102
1c01617c:	b759                	j	1c016102 <_prf+0x4bc>
			if (isupper(c)) {
1c01617e:	4765                	li	a4,25
1c016180:	00f76a63          	bltu	a4,a5,1c016194 <_prf+0x54e>
				*buf++ = 'N';
1c016184:	6791                	lui	a5,0x4
1c016186:	14e78793          	addi	a5,a5,334 # 414e <__rt_stack_size+0x394e>
1c01618a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'A';
1c01618e:	04e00793          	li	a5,78
1c016192:	bf85                	j	1c016102 <_prf+0x4bc>
				*buf++ = 'n';
1c016194:	6799                	lui	a5,0x6
1c016196:	16e78793          	addi	a5,a5,366 # 616e <__rt_stack_size+0x596e>
1c01619a:	00f49023          	sh	a5,0(s1)
				*buf++ = 'a';
1c01619e:	06e00793          	li	a5,110
1c0161a2:	b785                	j	1c016102 <_prf+0x4bc>
	if (c == 'F') {
1c0161a4:	04600693          	li	a3,70
1c0161a8:	00dd9463          	bne	s11,a3,1c0161b0 <_prf+0x56a>
		c = 'f';
1c0161ac:	06600d93          	li	s11,102
	if ((exp | fract) != 0) {
1c0161b0:	41f95613          	srai	a2,s2,0x1f
1c0161b4:	00b966b3          	or	a3,s2,a1
1c0161b8:	8e59                	or	a2,a2,a4
1c0161ba:	8ed1                	or	a3,a3,a2
1c0161bc:	1c068263          	beqz	a3,1c016380 <_prf+0x73a>
		if (exp == 0) {
1c0161c0:	10090d63          	beqz	s2,1c0162da <_prf+0x694>
		fract |= HIGHBIT64;
1c0161c4:	5752                	lw	a4,52(sp)
1c0161c6:	800007b7          	lui	a5,0x80000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
1c0161ca:	c0290913          	addi	s2,s2,-1022
		fract |= HIGHBIT64;
1c0161ce:	8f5d                	or	a4,a4,a5
1c0161d0:	da3a                	sw	a4,52(sp)
1c0161d2:	4d01                	li	s10,0
	while (exp <= -3) {
1c0161d4:	5779                	li	a4,-2
1c0161d6:	10e94f63          	blt	s2,a4,1c0162f4 <_prf+0x6ae>
	while (exp > 0) {
1c0161da:	17204663          	bgtz	s2,1c016346 <_prf+0x700>
		_rlrshift(&fract);
1c0161de:	1808                	addi	a0,sp,48
		exp++;
1c0161e0:	0905                	addi	s2,s2,1
		_rlrshift(&fract);
1c0161e2:	9cdff0ef          	jal	ra,1c015bae <_rlrshift>
	while (exp < (0 + 4)) {
1c0161e6:	fe493ce3          	p.bneimm	s2,4,1c0161de <_prf+0x598>
	if (precision < 0) {
1c0161ea:	00045363          	bgez	s0,1c0161f0 <_prf+0x5aa>
		precision = 6;		/* Default precision if none given */
1c0161ee:	4419                	li	s0,6
	if ((c == 'g') || (c == 'G')) {
1c0161f0:	0dfdf713          	andi	a4,s11,223
1c0161f4:	04700693          	li	a3,71
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c0161f8:	ca02                	sw	zero,20(sp)
	if ((c == 'g') || (c == 'G')) {
1c0161fa:	02d71563          	bne	a4,a3,1c016224 <_prf+0x5de>
		if (decexp < (-4 + 1) || decexp > precision) {
1c0161fe:	5775                	li	a4,-3
1c016200:	00ed4463          	blt	s10,a4,1c016208 <_prf+0x5c2>
1c016204:	19a45163          	ble	s10,s0,1c016386 <_prf+0x740>
			c += 'e' - 'g';
1c016208:	ffed8793          	addi	a5,s11,-2
1c01620c:	0ff7fd93          	andi	s11,a5,255
			if (precision > 0) {
1c016210:	4c040e63          	beqz	s0,1c0166ec <_prf+0xaa6>
				precision--;
1c016214:	147d                	addi	s0,s0,-1
		if (!falt && (precision > 0)) {
1c016216:	4c0a9b63          	bnez	s5,1c0166ec <_prf+0xaa6>
1c01621a:	00802933          	sgtz	s2,s0
1c01621e:	0ff97913          	andi	s2,s2,255
1c016222:	ca4a                	sw	s2,20(sp)
	if (c == 'f') {
1c016224:	06600713          	li	a4,102
1c016228:	4ced9363          	bne	s11,a4,1c0166ee <_prf+0xaa8>
		exp = precision + decexp;
1c01622c:	008d0733          	add	a4,s10,s0
		if (exp < 0) {
1c016230:	06600d93          	li	s11,102
1c016234:	4a075f63          	bgez	a4,1c0166f2 <_prf+0xaac>
	digit_count = 16;
1c016238:	4741                	li	a4,16
1c01623a:	d63a                	sw	a4,44(sp)
			exp = 0;
1c01623c:	4901                	li	s2,0
	ltemp = 0x0800000000000000;
1c01623e:	4601                	li	a2,0
1c016240:	080006b7          	lui	a3,0x8000
1c016244:	dc32                	sw	a2,56(sp)
1c016246:	de36                	sw	a3,60(sp)
	while (exp--) {
1c016248:	197d                	addi	s2,s2,-1
1c01624a:	15f93563          	p.bneimm	s2,-1,1c016394 <_prf+0x74e>
	fract += ltemp;
1c01624e:	5742                	lw	a4,48(sp)
1c016250:	56e2                	lw	a3,56(sp)
1c016252:	5652                	lw	a2,52(sp)
1c016254:	55f2                	lw	a1,60(sp)
1c016256:	96ba                	add	a3,a3,a4
1c016258:	00e6b733          	sltu	a4,a3,a4
1c01625c:	962e                	add	a2,a2,a1
1c01625e:	9732                	add	a4,a4,a2
1c016260:	da3a                	sw	a4,52(sp)
1c016262:	d836                	sw	a3,48(sp)
	if ((fract >> 32) & 0xF0000000) {
1c016264:	f6073733          	p.bclr	a4,a4,27,0
1c016268:	cb01                	beqz	a4,1c016278 <_prf+0x632>
		_ldiv5(&fract);
1c01626a:	1808                	addi	a0,sp,48
1c01626c:	963ff0ef          	jal	ra,1c015bce <_ldiv5>
		_rlrshift(&fract);
1c016270:	1808                	addi	a0,sp,48
1c016272:	93dff0ef          	jal	ra,1c015bae <_rlrshift>
		decexp++;
1c016276:	0d05                	addi	s10,s10,1
	if (c == 'f') {
1c016278:	06600713          	li	a4,102
1c01627c:	16ed9163          	bne	s11,a4,1c0163de <_prf+0x798>
		if (decexp > 0) {
1c016280:	8926                	mv	s2,s1
1c016282:	13a04963          	bgtz	s10,1c0163b4 <_prf+0x76e>
			*buf++ = '0';
1c016286:	03000713          	li	a4,48
1c01628a:	00e48023          	sb	a4,0(s1)
1c01628e:	00148913          	addi	s2,s1,1
			zero.predot = zero.postdot = zero.trail = 0;
1c016292:	4681                	li	a3,0
		if (falt || (precision > 0)) {
1c016294:	120a8763          	beqz	s5,1c0163c2 <_prf+0x77c>
			*buf++ = '.';
1c016298:	02e00593          	li	a1,46
1c01629c:	00b90023          	sb	a1,0(s2)
1c0162a0:	00190713          	addi	a4,s2,1
		if (decexp < 0 && precision > 0) {
1c0162a4:	440d0263          	beqz	s10,1c0166e8 <_prf+0xaa2>
1c0162a8:	12805863          	blez	s0,1c0163d8 <_prf+0x792>
			zp->postdot = -decexp;
1c0162ac:	41a00ab3          	neg	s5,s10
1c0162b0:	048acab3          	p.min	s5,s5,s0
			precision -= zp->postdot;
1c0162b4:	41540433          	sub	s0,s0,s5
			zero.predot = zero.postdot = zero.trail = 0;
1c0162b8:	893a                	mv	s2,a4
		while (precision > 0 && digit_count > 0) {
1c0162ba:	10805763          	blez	s0,1c0163c8 <_prf+0x782>
1c0162be:	5732                	lw	a4,44(sp)
1c0162c0:	10e05463          	blez	a4,1c0163c8 <_prf+0x782>
			*buf++ = _get_digit(&fract, &digit_count);
1c0162c4:	106c                	addi	a1,sp,44
1c0162c6:	1808                	addi	a0,sp,48
1c0162c8:	c036                	sw	a3,0(sp)
1c0162ca:	949ff0ef          	jal	ra,1c015c12 <_get_digit>
1c0162ce:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c0162d2:	147d                	addi	s0,s0,-1
1c0162d4:	4682                	lw	a3,0(sp)
1c0162d6:	b7d5                	j	1c0162ba <_prf+0x674>
				exp--;
1c0162d8:	197d                	addi	s2,s2,-1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
1c0162da:	01f5d693          	srli	a3,a1,0x1f
1c0162de:	0706                	slli	a4,a4,0x1
1c0162e0:	8f55                	or	a4,a4,a3
1c0162e2:	0586                	slli	a1,a1,0x1
1c0162e4:	fe075ae3          	bgez	a4,1c0162d8 <_prf+0x692>
1c0162e8:	d82e                	sw	a1,48(sp)
1c0162ea:	da3a                	sw	a4,52(sp)
1c0162ec:	bde1                	j	1c0161c4 <_prf+0x57e>
			_rlrshift(&fract);
1c0162ee:	1808                	addi	a0,sp,48
1c0162f0:	8bfff0ef          	jal	ra,1c015bae <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
1c0162f4:	55d2                	lw	a1,52(sp)
1c0162f6:	33333737          	lui	a4,0x33333
1c0162fa:	33270713          	addi	a4,a4,818 # 33333332 <__l2_end+0x1731b716>
1c0162fe:	5642                	lw	a2,48(sp)
1c016300:	0905                	addi	s2,s2,1
1c016302:	feb766e3          	bltu	a4,a1,1c0162ee <_prf+0x6a8>
		fract *= 5U;
1c016306:	4695                	li	a3,5
1c016308:	02c6b733          	mulhu	a4,a3,a2
		decexp--;
1c01630c:	1d7d                	addi	s10,s10,-1
		fract *= 5U;
1c01630e:	02c68633          	mul	a2,a3,a2
1c016312:	42b68733          	p.mac	a4,a3,a1
1c016316:	d832                	sw	a2,48(sp)
		decexp--;
1c016318:	4681                	li	a3,0
		fract *= 5U;
1c01631a:	da3a                	sw	a4,52(sp)
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c01631c:	800007b7          	lui	a5,0x80000
1c016320:	fff7c793          	not	a5,a5
1c016324:	00e7f763          	bleu	a4,a5,1c016332 <_prf+0x6ec>
1c016328:	ea0686e3          	beqz	a3,1c0161d4 <_prf+0x58e>
1c01632c:	d832                	sw	a2,48(sp)
1c01632e:	da3a                	sw	a4,52(sp)
1c016330:	b555                	j	1c0161d4 <_prf+0x58e>
			fract <<= 1;
1c016332:	01f65593          	srli	a1,a2,0x1f
1c016336:	00171693          	slli	a3,a4,0x1
1c01633a:	00d5e733          	or	a4,a1,a3
1c01633e:	0606                	slli	a2,a2,0x1
			exp--;
1c016340:	197d                	addi	s2,s2,-1
1c016342:	4685                	li	a3,1
1c016344:	bfe1                	j	1c01631c <_prf+0x6d6>
		_ldiv5(&fract);
1c016346:	1808                	addi	a0,sp,48
1c016348:	887ff0ef          	jal	ra,1c015bce <_ldiv5>
1c01634c:	5642                	lw	a2,48(sp)
1c01634e:	5752                	lw	a4,52(sp)
		exp--;
1c016350:	197d                	addi	s2,s2,-1
		decexp++;
1c016352:	0d05                	addi	s10,s10,1
1c016354:	4681                	li	a3,0
		while ((fract >> 32) <= (MAXFP1 / 2)) {
1c016356:	800007b7          	lui	a5,0x80000
1c01635a:	fff7c793          	not	a5,a5
1c01635e:	00e7f763          	bleu	a4,a5,1c01636c <_prf+0x726>
1c016362:	e6068ce3          	beqz	a3,1c0161da <_prf+0x594>
1c016366:	d832                	sw	a2,48(sp)
1c016368:	da3a                	sw	a4,52(sp)
1c01636a:	bd85                	j	1c0161da <_prf+0x594>
			fract <<= 1;
1c01636c:	01f65593          	srli	a1,a2,0x1f
1c016370:	00171693          	slli	a3,a4,0x1
1c016374:	00d5e733          	or	a4,a1,a3
1c016378:	0606                	slli	a2,a2,0x1
			exp--;
1c01637a:	197d                	addi	s2,s2,-1
1c01637c:	4685                	li	a3,1
1c01637e:	bfe1                	j	1c016356 <_prf+0x710>
	if ((exp | fract) != 0) {
1c016380:	4d01                	li	s10,0
1c016382:	4901                	li	s2,0
1c016384:	bda9                	j	1c0161de <_prf+0x598>
			precision -= decexp;
1c016386:	41a40433          	sub	s0,s0,s10
		if (!falt && (precision > 0)) {
1c01638a:	ea0a91e3          	bnez	s5,1c01622c <_prf+0x5e6>
			c = 'f';
1c01638e:	06600d93          	li	s11,102
1c016392:	b561                	j	1c01621a <_prf+0x5d4>
		_ldiv5(&ltemp);
1c016394:	1828                	addi	a0,sp,56
1c016396:	839ff0ef          	jal	ra,1c015bce <_ldiv5>
		_rlrshift(&ltemp);
1c01639a:	1828                	addi	a0,sp,56
1c01639c:	813ff0ef          	jal	ra,1c015bae <_rlrshift>
1c0163a0:	b565                	j	1c016248 <_prf+0x602>
				*buf++ = _get_digit(&fract, &digit_count);
1c0163a2:	106c                	addi	a1,sp,44
1c0163a4:	1808                	addi	a0,sp,48
1c0163a6:	86dff0ef          	jal	ra,1c015c12 <_get_digit>
1c0163aa:	00a900ab          	p.sb	a0,1(s2!)
				decexp--;
1c0163ae:	1d7d                	addi	s10,s10,-1
			while (decexp > 0 && digit_count > 0) {
1c0163b0:	000d0563          	beqz	s10,1c0163ba <_prf+0x774>
1c0163b4:	5732                	lw	a4,44(sp)
1c0163b6:	fee046e3          	bgtz	a4,1c0163a2 <_prf+0x75c>
		if (falt || (precision > 0)) {
1c0163ba:	300a9f63          	bnez	s5,1c0166d8 <_prf+0xa92>
			zp->predot = decexp;
1c0163be:	86ea                	mv	a3,s10
			decexp = 0;
1c0163c0:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c0163c2:	4a81                	li	s5,0
		if (falt || (precision > 0)) {
1c0163c4:	ec804ae3          	bgtz	s0,1c016298 <_prf+0x652>
	if (prune_zero) {
1c0163c8:	4752                	lw	a4,20(sp)
1c0163ca:	eb31                	bnez	a4,1c01641e <_prf+0x7d8>
	return buf - start;
1c0163cc:	00c8                	addi	a0,sp,68
	*buf = 0;
1c0163ce:	00090023          	sb	zero,0(s2)
	return buf - start;
1c0163d2:	40a90533          	sub	a0,s2,a0
1c0163d6:	b389                	j	1c016118 <_prf+0x4d2>
			*buf++ = '.';
1c0163d8:	893a                	mv	s2,a4
			zero.predot = zero.postdot = zero.trail = 0;
1c0163da:	4a81                	li	s5,0
1c0163dc:	b7f5                	j	1c0163c8 <_prf+0x782>
		*buf = _get_digit(&fract, &digit_count);
1c0163de:	106c                	addi	a1,sp,44
1c0163e0:	1808                	addi	a0,sp,48
1c0163e2:	831ff0ef          	jal	ra,1c015c12 <_get_digit>
1c0163e6:	00a48023          	sb	a0,0(s1)
		if (*buf++ != '0') {
1c0163ea:	03000713          	li	a4,48
1c0163ee:	00e50363          	beq	a0,a4,1c0163f4 <_prf+0x7ae>
			decexp--;
1c0163f2:	1d7d                	addi	s10,s10,-1
		if (falt || (precision > 0)) {
1c0163f4:	000a9663          	bnez	s5,1c016400 <_prf+0x7ba>
		if (*buf++ != '0') {
1c0163f8:	00148913          	addi	s2,s1,1
		if (falt || (precision > 0)) {
1c0163fc:	00805d63          	blez	s0,1c016416 <_prf+0x7d0>
			*buf++ = '.';
1c016400:	02e00713          	li	a4,46
1c016404:	00248913          	addi	s2,s1,2
1c016408:	00e480a3          	sb	a4,1(s1)
		while (precision > 0 && digit_count > 0) {
1c01640c:	00805563          	blez	s0,1c016416 <_prf+0x7d0>
1c016410:	5732                	lw	a4,44(sp)
1c016412:	08e04663          	bgtz	a4,1c01649e <_prf+0x858>
	if (prune_zero) {
1c016416:	47d2                	lw	a5,20(sp)
			zero.predot = zero.postdot = zero.trail = 0;
1c016418:	4a81                	li	s5,0
1c01641a:	4681                	li	a3,0
	if (prune_zero) {
1c01641c:	cf99                	beqz	a5,1c01643a <_prf+0x7f4>
		while (*--buf == '0')
1c01641e:	03000513          	li	a0,48
1c016422:	fff90713          	addi	a4,s2,-1
1c016426:	00074583          	lbu	a1,0(a4)
1c01642a:	08a58263          	beq	a1,a0,1c0164ae <_prf+0x868>
		if (*buf != '.') {
1c01642e:	02e00513          	li	a0,46
		zp->trail = 0;
1c016432:	4401                	li	s0,0
		if (*buf != '.') {
1c016434:	00a59363          	bne	a1,a0,1c01643a <_prf+0x7f4>
		while (*--buf == '0')
1c016438:	893a                	mv	s2,a4
	if ((c == 'e') || (c == 'E')) {
1c01643a:	0dfdf713          	andi	a4,s11,223
1c01643e:	04500593          	li	a1,69
1c016442:	f8b715e3          	bne	a4,a1,1c0163cc <_prf+0x786>
		*buf++ = c;
1c016446:	85ca                	mv	a1,s2
1c016448:	01b5812b          	p.sb	s11,2(a1!)
			*buf++ = '+';
1c01644c:	02b00793          	li	a5,43
		if (decexp < 0) {
1c016450:	000d5663          	bgez	s10,1c01645c <_prf+0x816>
			decexp = -decexp;
1c016454:	41a00d33          	neg	s10,s10
			*buf++ = '-';
1c016458:	02d00793          	li	a5,45
			*buf++ = '+';
1c01645c:	00f900a3          	sb	a5,1(s2)
		if (decexp >= 100) {
1c016460:	06300793          	li	a5,99
1c016464:	01a7de63          	ble	s10,a5,1c016480 <_prf+0x83a>
			*buf++ = (decexp / 100) + '0';
1c016468:	06400713          	li	a4,100
1c01646c:	02ed47b3          	div	a5,s10,a4
1c016470:	00390593          	addi	a1,s2,3
			decexp %= 100;
1c016474:	02ed6d33          	rem	s10,s10,a4
			*buf++ = (decexp / 100) + '0';
1c016478:	03078793          	addi	a5,a5,48 # 80000030 <pulp__FC+0x80000031>
1c01647c:	00f90123          	sb	a5,2(s2)
		*buf++ = (decexp / 10) + '0';
1c016480:	47a9                	li	a5,10
1c016482:	892e                	mv	s2,a1
1c016484:	02fd4733          	div	a4,s10,a5
		decexp %= 10;
1c016488:	02fd68b3          	rem	a7,s10,a5
		*buf++ = (decexp / 10) + '0';
1c01648c:	03070713          	addi	a4,a4,48
1c016490:	00e9012b          	p.sb	a4,2(s2!)
		*buf++ = decexp + '0';
1c016494:	03088893          	addi	a7,a7,48
1c016498:	011580a3          	sb	a7,1(a1)
1c01649c:	bf05                	j	1c0163cc <_prf+0x786>
			*buf++ = _get_digit(&fract, &digit_count);
1c01649e:	106c                	addi	a1,sp,44
1c0164a0:	1808                	addi	a0,sp,48
1c0164a2:	f70ff0ef          	jal	ra,1c015c12 <_get_digit>
1c0164a6:	00a900ab          	p.sb	a0,1(s2!)
			precision--;
1c0164aa:	147d                	addi	s0,s0,-1
1c0164ac:	b785                	j	1c01640c <_prf+0x7c6>
		while (*--buf == '0')
1c0164ae:	893a                	mv	s2,a4
1c0164b0:	bf8d                	j	1c016422 <_prf+0x7dc>
1c0164b2:	8a4a                	mv	s4,s2
				switch (i) {
1c0164b4:	04c00693          	li	a3,76
1c0164b8:	004a278b          	p.lw	a5,4(s4!)
1c0164bc:	02d48a63          	beq	s1,a3,1c0164f0 <_prf+0x8aa>
1c0164c0:	0096c963          	blt	a3,s1,1c0164d2 <_prf+0x88c>
1c0164c4:	04800693          	li	a3,72
1c0164c8:	02d48063          	beq	s1,a3,1c0164e8 <_prf+0x8a2>
					*va_arg(vargs, int *) = count;
1c0164cc:	0137a023          	sw	s3,0(a5)
					break;
1c0164d0:	a801                	j	1c0164e0 <_prf+0x89a>
				switch (i) {
1c0164d2:	06800693          	li	a3,104
1c0164d6:	fed49be3          	bne	s1,a3,1c0164cc <_prf+0x886>
					*va_arg(vargs, short *) = count;
1c0164da:	874e                	mv	a4,s3
1c0164dc:	00e79023          	sh	a4,0(a5)
				continue;
1c0164e0:	8952                	mv	s2,s4
1c0164e2:	8662                	mv	a2,s8
1c0164e4:	f86ff06f          	j	1c015c6a <_prf+0x24>
					*va_arg(vargs, char *) = count;
1c0164e8:	874e                	mv	a4,s3
1c0164ea:	00e78023          	sb	a4,0(a5)
					break;
1c0164ee:	bfcd                	j	1c0164e0 <_prf+0x89a>
					*va_arg(vargs, long long *) = count;
1c0164f0:	41f9d713          	srai	a4,s3,0x1f
1c0164f4:	0137a023          	sw	s3,0(a5)
1c0164f8:	c3d8                	sw	a4,4(a5)
					break;
1c0164fa:	b7dd                	j	1c0164e0 <_prf+0x89a>
				clen = _to_hex(buf, val, true, 'x');
1c0164fc:	00092583          	lw	a1,0(s2)
		*buf++ = '0';
1c016500:	77e1                	lui	a5,0xffff8
1c016502:	8307c793          	xori	a5,a5,-2000
	len = _to_x(buf, value, 16);
1c016506:	46c1                	li	a3,16
1c016508:	4601                	li	a2,0
1c01650a:	04610513          	addi	a0,sp,70
		*buf++ = '0';
1c01650e:	04f11223          	sh	a5,68(sp)
	len = _to_x(buf, value, 16);
1c016512:	e0aff0ef          	jal	ra,1c015b1c <_to_x>
				val = (uintptr_t) va_arg(vargs, void *);
1c016516:	00490a13          	addi	s4,s2,4
	return len + (buf - buf0);
1c01651a:	00250d93          	addi	s11,a0,2
				prefix = 2;
1c01651e:	4909                	li	s2,2
				break;
1c016520:	b40d                	j	1c015f42 <_prf+0x2fc>
					if (cptr[clen] == '\0') {
1c016522:	0016c60b          	p.lbu	a2,1(a3!) # 8000001 <__L2+0x7f80001>
1c016526:	a4060ee3          	beqz	a2,1c015f82 <_prf+0x33c>
				for (clen = 0; clen < precision; clen++) {
1c01652a:	0d85                	addi	s11,s11,1
1c01652c:	bc89                	j	1c015f7e <_prf+0x338>
					val = va_arg(vargs, unsigned int);
1c01652e:	00490a13          	addi	s4,s2,4
1c016532:	00092583          	lw	a1,0(s2)
1c016536:	4601                	li	a2,0
					break;
1c016538:	ba99                	j	1c015e8e <_prf+0x248>
	if (alt_form) {
1c01653a:	8526                	mv	a0,s1
	return (buf - buf0) + _to_x(buf, value, 8);
1c01653c:	46a1                	li	a3,8
1c01653e:	409504b3          	sub	s1,a0,s1
1c016542:	ddaff0ef          	jal	ra,1c015b1c <_to_x>
1c016546:	00a48db3          	add	s11,s1,a0
			prefix = 0;
1c01654a:	4901                	li	s2,0
1c01654c:	badd                	j	1c015f42 <_prf+0x2fc>
				} else if (c == 'u') {
1c01654e:	07500713          	li	a4,117
1c016552:	00ed9863          	bne	s11,a4,1c016562 <_prf+0x91c>
	return _to_x(buf, value, 10);
1c016556:	46a9                	li	a3,10
1c016558:	8526                	mv	a0,s1
1c01655a:	dc2ff0ef          	jal	ra,1c015b1c <_to_x>
1c01655e:	8daa                	mv	s11,a0
1c016560:	b7ed                	j	1c01654a <_prf+0x904>
	if (alt_form) {
1c016562:	8d26                	mv	s10,s1
1c016564:	000a8963          	beqz	s5,1c016576 <_prf+0x930>
		*buf++ = '0';
1c016568:	7761                	lui	a4,0xffff8
1c01656a:	83074713          	xori	a4,a4,-2000
1c01656e:	04e11223          	sh	a4,68(sp)
		*buf++ = 'x';
1c016572:	04610d13          	addi	s10,sp,70
	len = _to_x(buf, value, 16);
1c016576:	46c1                	li	a3,16
1c016578:	856a                	mv	a0,s10
1c01657a:	da2ff0ef          	jal	ra,1c015b1c <_to_x>
	if (prefix == 'X') {
1c01657e:	05800713          	li	a4,88
1c016582:	02ed9263          	bne	s11,a4,1c0165a6 <_prf+0x960>
1c016586:	87a6                	mv	a5,s1
		if (*buf >= 'a' && *buf <= 'z') {
1c016588:	45e5                	li	a1,25
1c01658a:	0017c68b          	p.lbu	a3,1(a5!) # ffff8001 <pulp__FC+0xffff8002>
1c01658e:	f9f68613          	addi	a2,a3,-97
1c016592:	0ff67613          	andi	a2,a2,255
1c016596:	00c5e563          	bltu	a1,a2,1c0165a0 <_prf+0x95a>
			*buf += 'A' - 'a';
1c01659a:	1681                	addi	a3,a3,-32
1c01659c:	fed78fa3          	sb	a3,-1(a5)
	} while (*buf++);
1c0165a0:	fff7c703          	lbu	a4,-1(a5)
1c0165a4:	f37d                	bnez	a4,1c01658a <_prf+0x944>
	return len + (buf - buf0);
1c0165a6:	409d0733          	sub	a4,s10,s1
1c0165aa:	00a70db3          	add	s11,a4,a0
			prefix = 0;
1c0165ae:	001a9913          	slli	s2,s5,0x1
1c0165b2:	ba41                	j	1c015f42 <_prf+0x2fc>
				PUTC('%');
1c0165b4:	85de                	mv	a1,s7
1c0165b6:	02500513          	li	a0,37
1c0165ba:	ec4ff06f          	j	1c015c7e <_prf+0x38>
				count++;
1c0165be:	0985                	addi	s3,s3,1
				continue;
1c0165c0:	8a4a                	mv	s4,s2
1c0165c2:	bf39                	j	1c0164e0 <_prf+0x89a>
1c0165c4:	00dc                	addi	a5,sp,68
				zero_head = 0;
1c0165c6:	4d01                	li	s10,0
1c0165c8:	b2d5                	j	1c015fac <_prf+0x366>
					PUTC(' ');
1c0165ca:	85de                	mv	a1,s7
1c0165cc:	02000513          	li	a0,32
1c0165d0:	c036                	sw	a3,0(sp)
1c0165d2:	c43e                	sw	a5,8(sp)
1c0165d4:	9b02                	jalr	s6
1c0165d6:	4682                	lw	a3,0(sp)
1c0165d8:	47a2                	lw	a5,8(sp)
1c0165da:	ebf52563          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
				while (width-- > 0) {
1c0165de:	14fd                	addi	s1,s1,-1
1c0165e0:	fff4b5e3          	p.bneimm	s1,-1,1c0165ca <_prf+0x984>
				count += width;
1c0165e4:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c0165e6:	5cfd                	li	s9,-1
1c0165e8:	bad9                	j	1c015fbe <_prf+0x378>
				PUTC(*cptr++);
1c0165ea:	0017c50b          	p.lbu	a0,1(a5!)
1c0165ee:	85de                	mv	a1,s7
1c0165f0:	c036                	sw	a3,0(sp)
1c0165f2:	c43e                	sw	a5,8(sp)
1c0165f4:	9b02                	jalr	s6
1c0165f6:	4682                	lw	a3,0(sp)
1c0165f8:	47a2                	lw	a5,8(sp)
1c0165fa:	9df534e3          	p.bneimm	a0,-1,1c015fc2 <_prf+0x37c>
1c0165fe:	e86ff06f          	j	1c015c84 <_prf+0x3e>
				PUTC('0');
1c016602:	85de                	mv	a1,s7
1c016604:	03000513          	li	a0,48
1c016608:	c036                	sw	a3,0(sp)
1c01660a:	c43e                	sw	a5,8(sp)
1c01660c:	9b02                	jalr	s6
1c01660e:	4682                	lw	a3,0(sp)
1c016610:	47a2                	lw	a5,8(sp)
1c016612:	9bf53be3          	p.bneimm	a0,-1,1c015fc8 <_prf+0x382>
1c016616:	e6eff06f          	j	1c015c84 <_prf+0x3e>
					PUTC(c);
1c01661a:	85de                	mv	a1,s7
1c01661c:	c232                	sw	a2,4(sp)
1c01661e:	c036                	sw	a3,0(sp)
1c016620:	c442                	sw	a6,8(sp)
1c016622:	9b02                	jalr	s6
1c016624:	4612                	lw	a2,4(sp)
1c016626:	4682                	lw	a3,0(sp)
1c016628:	4822                	lw	a6,8(sp)
1c01662a:	e5f52d63          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
					c = *++cptr;
1c01662e:	0d85                	addi	s11,s11,1
1c016630:	000dc503          	lbu	a0,0(s11)
1c016634:	b27d                	j	1c015fe2 <_prf+0x39c>
					PUTC('0');
1c016636:	85de                	mv	a1,s7
1c016638:	03000513          	li	a0,48
1c01663c:	c232                	sw	a2,4(sp)
1c01663e:	c036                	sw	a3,0(sp)
1c016640:	c43a                	sw	a4,8(sp)
1c016642:	9b02                	jalr	s6
1c016644:	4612                	lw	a2,4(sp)
1c016646:	4682                	lw	a3,0(sp)
1c016648:	4722                	lw	a4,8(sp)
1c01664a:	167d                	addi	a2,a2,-1
1c01664c:	9bf532e3          	p.bneimm	a0,-1,1c015ff0 <_prf+0x3aa>
1c016650:	e34ff06f          	j	1c015c84 <_prf+0x3e>
					PUTC('0');
1c016654:	85de                	mv	a1,s7
1c016656:	03000513          	li	a0,48
1c01665a:	c036                	sw	a3,0(sp)
1c01665c:	c43a                	sw	a4,8(sp)
1c01665e:	9b02                	jalr	s6
1c016660:	4682                	lw	a3,0(sp)
1c016662:	4722                	lw	a4,8(sp)
1c016664:	16fd                	addi	a3,a3,-1
1c016666:	9df532e3          	p.bneimm	a0,-1,1c01602a <_prf+0x3e4>
1c01666a:	e1aff06f          	j	1c015c84 <_prf+0x3e>
					PUTC(c);
1c01666e:	85de                	mv	a1,s7
1c016670:	c232                	sw	a2,4(sp)
1c016672:	c036                	sw	a3,0(sp)
1c016674:	c43a                	sw	a4,8(sp)
1c016676:	9b02                	jalr	s6
1c016678:	4612                	lw	a2,4(sp)
1c01667a:	4682                	lw	a3,0(sp)
1c01667c:	4722                	lw	a4,8(sp)
1c01667e:	e1f52363          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
					c = *++cptr;
1c016682:	0d85                	addi	s11,s11,1
1c016684:	000dc503          	lbu	a0,0(s11)
1c016688:	ba75                	j	1c016044 <_prf+0x3fe>
					PUTC('0');
1c01668a:	85de                	mv	a1,s7
1c01668c:	03000513          	li	a0,48
1c016690:	c43a                	sw	a4,8(sp)
1c016692:	9b02                	jalr	s6
1c016694:	4722                	lw	a4,8(sp)
1c016696:	177d                	addi	a4,a4,-1
1c016698:	9bf53fe3          	p.bneimm	a0,-1,1c016056 <_prf+0x410>
1c01669c:	de8ff06f          	j	1c015c84 <_prf+0x3e>
				PUTC(*cptr++);
1c0166a0:	0014450b          	p.lbu	a0,1(s0!)
1c0166a4:	85de                	mv	a1,s7
1c0166a6:	9b02                	jalr	s6
1c0166a8:	ddf52e63          	p.beqimm	a0,-1,1c015c84 <_prf+0x3e>
1c0166ac:	408a87b3          	sub	a5,s5,s0
			while (clen-- > 0) {
1c0166b0:	fef048e3          	bgtz	a5,1c0166a0 <_prf+0xa5a>
			count += prefix;
1c0166b4:	994e                	add	s2,s2,s3
			count += zero_head;
1c0166b6:	012d09b3          	add	s3,s10,s2
			count += clen;
1c0166ba:	99a6                	add	s3,s3,s1
			if (width > 0) {
1c0166bc:	e39052e3          	blez	s9,1c0164e0 <_prf+0x89a>
				count += width;
1c0166c0:	99e6                	add	s3,s3,s9
				while (width-- > 0) {
1c0166c2:	1cfd                	addi	s9,s9,-1
1c0166c4:	e1fcaee3          	p.beqimm	s9,-1,1c0164e0 <_prf+0x89a>
					PUTC(' ');
1c0166c8:	85de                	mv	a1,s7
1c0166ca:	02000513          	li	a0,32
1c0166ce:	9b02                	jalr	s6
1c0166d0:	fff539e3          	p.bneimm	a0,-1,1c0166c2 <_prf+0xa7c>
1c0166d4:	db0ff06f          	j	1c015c84 <_prf+0x3e>
			*buf++ = '.';
1c0166d8:	02e00693          	li	a3,46
1c0166dc:	00d90023          	sb	a3,0(s2)
1c0166e0:	00190713          	addi	a4,s2,1
			zp->predot = decexp;
1c0166e4:	86ea                	mv	a3,s10
			decexp = 0;
1c0166e6:	4d01                	li	s10,0
			zero.predot = zero.postdot = zero.trail = 0;
1c0166e8:	4a81                	li	s5,0
1c0166ea:	b6f9                	j	1c0162b8 <_prf+0x672>
	prune_zero = false;		/* Assume trailing 0's allowed     */
1c0166ec:	ca02                	sw	zero,20(sp)
		exp = precision + 1;
1c0166ee:	00140713          	addi	a4,s0,1
	digit_count = 16;
1c0166f2:	46c1                	li	a3,16
1c0166f4:	d636                	sw	a3,44(sp)
1c0166f6:	04d74933          	p.min	s2,a4,a3
1c0166fa:	b691                	j	1c01623e <_prf+0x5f8>

1c0166fc <__rt_uart_cluster_req_done>:
  }

  return __rt_uart_open(channel, conf, event, dev_name);
  
error:
  rt_warning("[UART] Failed to open uart device\n");
1c0166fc:	300476f3          	csrrci	a3,mstatus,8
1c016700:	4785                	li	a5,1
1c016702:	08f50623          	sb	a5,140(a0)
1c016706:	08d54783          	lbu	a5,141(a0)
1c01670a:	00201737          	lui	a4,0x201
1c01670e:	e0470713          	addi	a4,a4,-508 # 200e04 <__L2+0x180e04>
1c016712:	04078793          	addi	a5,a5,64
1c016716:	07da                	slli	a5,a5,0x16
1c016718:	0007e723          	p.sw	zero,a4(a5)
1c01671c:	30069073          	csrw	mstatus,a3
1c016720:	8082                	ret

1c016722 <__rt_uart_setup.isra.5>:
1c016722:	1c018737          	lui	a4,0x1c018
1c016726:	b8472703          	lw	a4,-1148(a4) # 1c017b84 <__rt_freq_domains>
1c01672a:	00155793          	srli	a5,a0,0x1
1c01672e:	97ba                	add	a5,a5,a4
1c016730:	02a7d7b3          	divu	a5,a5,a0
1c016734:	1a102737          	lui	a4,0x1a102
1c016738:	17fd                	addi	a5,a5,-1
1c01673a:	07c2                	slli	a5,a5,0x10
1c01673c:	3067e793          	ori	a5,a5,774
1c016740:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021c0>
1c016744:	8082                	ret

1c016746 <__rt_uart_setfreq_after>:
1c016746:	1c0187b7          	lui	a5,0x1c018
1c01674a:	ad878793          	addi	a5,a5,-1320 # 1c017ad8 <__rt_uart>
1c01674e:	4398                	lw	a4,0(a5)
1c016750:	cb11                	beqz	a4,1c016764 <__rt_uart_setfreq_after+0x1e>
1c016752:	4788                	lw	a0,8(a5)
1c016754:	1141                	addi	sp,sp,-16
1c016756:	c606                	sw	ra,12(sp)
1c016758:	fcbff0ef          	jal	ra,1c016722 <__rt_uart_setup.isra.5>
1c01675c:	40b2                	lw	ra,12(sp)
1c01675e:	4501                	li	a0,0
1c016760:	0141                	addi	sp,sp,16
1c016762:	8082                	ret
1c016764:	4501                	li	a0,0
1c016766:	8082                	ret

1c016768 <__rt_uart_wait_tx_done.isra.6>:
1c016768:	1a102737          	lui	a4,0x1a102
1c01676c:	1141                	addi	sp,sp,-16
1c01676e:	21870713          	addi	a4,a4,536 # 1a102218 <__l1_end+0xa1021b4>
1c016772:	002046b7          	lui	a3,0x204
1c016776:	431c                	lw	a5,0(a4)
1c016778:	8bc1                	andi	a5,a5,16
1c01677a:	e38d                	bnez	a5,1c01679c <__rt_uart_wait_tx_done.isra.6+0x34>
1c01677c:	1a102737          	lui	a4,0x1a102
1c016780:	22070713          	addi	a4,a4,544 # 1a102220 <__l1_end+0xa1021bc>
1c016784:	431c                	lw	a5,0(a4)
1c016786:	fc17b7b3          	p.bclr	a5,a5,30,1
1c01678a:	ffed                	bnez	a5,1c016784 <__rt_uart_wait_tx_done.isra.6+0x1c>
1c01678c:	c602                	sw	zero,12(sp)
1c01678e:	7cf00713          	li	a4,1999
1c016792:	47b2                	lw	a5,12(sp)
1c016794:	00f75763          	ble	a5,a4,1c0167a2 <__rt_uart_wait_tx_done.isra.6+0x3a>
1c016798:	0141                	addi	sp,sp,16
1c01679a:	8082                	ret
1c01679c:	0386e783          	p.elw	a5,56(a3) # 204038 <__L2+0x184038>
1c0167a0:	bfd9                	j	1c016776 <__rt_uart_wait_tx_done.isra.6+0xe>
1c0167a2:	47b2                	lw	a5,12(sp)
1c0167a4:	0785                	addi	a5,a5,1
1c0167a6:	c63e                	sw	a5,12(sp)
1c0167a8:	b7ed                	j	1c016792 <__rt_uart_wait_tx_done.isra.6+0x2a>

1c0167aa <__rt_uart_setfreq_before>:
1c0167aa:	1c0187b7          	lui	a5,0x1c018
1c0167ae:	ad87a783          	lw	a5,-1320(a5) # 1c017ad8 <__rt_uart>
1c0167b2:	c385                	beqz	a5,1c0167d2 <__rt_uart_setfreq_before+0x28>
1c0167b4:	1141                	addi	sp,sp,-16
1c0167b6:	c606                	sw	ra,12(sp)
1c0167b8:	fb1ff0ef          	jal	ra,1c016768 <__rt_uart_wait_tx_done.isra.6>
1c0167bc:	40b2                	lw	ra,12(sp)
1c0167be:	005007b7          	lui	a5,0x500
1c0167c2:	1a102737          	lui	a4,0x1a102
1c0167c6:	0799                	addi	a5,a5,6
1c0167c8:	22f72223          	sw	a5,548(a4) # 1a102224 <__l1_end+0xa1021c0>
1c0167cc:	4501                	li	a0,0
1c0167ce:	0141                	addi	sp,sp,16
1c0167d0:	8082                	ret
1c0167d2:	4501                	li	a0,0
1c0167d4:	8082                	ret

1c0167d6 <__rt_uart_cluster_req>:
1c0167d6:	1141                	addi	sp,sp,-16
1c0167d8:	c606                	sw	ra,12(sp)
1c0167da:	c422                	sw	s0,8(sp)
1c0167dc:	30047473          	csrrci	s0,mstatus,8
1c0167e0:	1c0167b7          	lui	a5,0x1c016
1c0167e4:	6fc78793          	addi	a5,a5,1788 # 1c0166fc <__rt_uart_cluster_req_done>
1c0167e8:	c91c                	sw	a5,16(a0)
1c0167ea:	4785                	li	a5,1
1c0167ec:	d91c                	sw	a5,48(a0)
1c0167ee:	411c                	lw	a5,0(a0)
1c0167f0:	02052a23          	sw	zero,52(a0)
1c0167f4:	c948                	sw	a0,20(a0)
1c0167f6:	43cc                	lw	a1,4(a5)
1c0167f8:	4514                	lw	a3,8(a0)
1c0167fa:	4150                	lw	a2,4(a0)
1c0167fc:	0586                	slli	a1,a1,0x1
1c0167fe:	00c50793          	addi	a5,a0,12
1c016802:	4701                	li	a4,0
1c016804:	0585                	addi	a1,a1,1
1c016806:	4501                	li	a0,0
1c016808:	e4bfc0ef          	jal	ra,1c013652 <rt_periph_copy>
1c01680c:	30041073          	csrw	mstatus,s0
1c016810:	40b2                	lw	ra,12(sp)
1c016812:	4422                	lw	s0,8(sp)
1c016814:	0141                	addi	sp,sp,16
1c016816:	8082                	ret

1c016818 <soc_eu_fcEventMask_setEvent>:
1c016818:	47fd                	li	a5,31
1c01681a:	4721                	li	a4,8
1c01681c:	00a7d463          	ble	a0,a5,1c016824 <soc_eu_fcEventMask_setEvent+0xc>
1c016820:	1501                	addi	a0,a0,-32
1c016822:	4711                	li	a4,4
1c016824:	1a1066b7          	lui	a3,0x1a106
1c016828:	20e6f603          	p.lw	a2,a4(a3)
1c01682c:	4785                	li	a5,1
1c01682e:	00a79533          	sll	a0,a5,a0
1c016832:	fff54513          	not	a0,a0
1c016836:	8d71                	and	a0,a0,a2
1c016838:	00a6e723          	p.sw	a0,a4(a3)
1c01683c:	8082                	ret

1c01683e <rt_uart_conf_init>:
1c01683e:	000997b7          	lui	a5,0x99
1c016842:	96878793          	addi	a5,a5,-1688 # 98968 <__L2+0x18968>
1c016846:	c11c                	sw	a5,0(a0)
1c016848:	57fd                	li	a5,-1
1c01684a:	c15c                	sw	a5,4(a0)
1c01684c:	8082                	ret

1c01684e <__rt_uart_open>:
1c01684e:	1141                	addi	sp,sp,-16
1c016850:	c606                	sw	ra,12(sp)
1c016852:	c422                	sw	s0,8(sp)
1c016854:	c226                	sw	s1,4(sp)
1c016856:	c04a                	sw	s2,0(sp)
1c016858:	30047973          	csrrci	s2,mstatus,8
1c01685c:	cd8d                	beqz	a1,1c016896 <__rt_uart_open+0x48>
1c01685e:	4198                	lw	a4,0(a1)
1c016860:	1c0186b7          	lui	a3,0x1c018
1c016864:	ffc50793          	addi	a5,a0,-4
1c016868:	ad868413          	addi	s0,a3,-1320 # 1c017ad8 <__rt_uart>
1c01686c:	0792                	slli	a5,a5,0x4
1c01686e:	943e                	add	s0,s0,a5
1c016870:	4010                	lw	a2,0(s0)
1c016872:	ad868693          	addi	a3,a3,-1320
1c016876:	c60d                	beqz	a2,1c0168a0 <__rt_uart_open+0x52>
1c016878:	c589                	beqz	a1,1c016882 <__rt_uart_open+0x34>
1c01687a:	418c                	lw	a1,0(a1)
1c01687c:	4418                	lw	a4,8(s0)
1c01687e:	04e59d63          	bne	a1,a4,1c0168d8 <__rt_uart_open+0x8a>
1c016882:	0605                	addi	a2,a2,1
1c016884:	00c6e7a3          	p.sw	a2,a5(a3)
1c016888:	8522                	mv	a0,s0
1c01688a:	40b2                	lw	ra,12(sp)
1c01688c:	4422                	lw	s0,8(sp)
1c01688e:	4492                	lw	s1,4(sp)
1c016890:	4902                	lw	s2,0(sp)
1c016892:	0141                	addi	sp,sp,16
1c016894:	8082                	ret
1c016896:	00099737          	lui	a4,0x99
1c01689a:	96870713          	addi	a4,a4,-1688 # 98968 <__L2+0x18968>
1c01689e:	b7c9                	j	1c016860 <__rt_uart_open+0x12>
1c0168a0:	c418                	sw	a4,8(s0)
1c0168a2:	4785                	li	a5,1
1c0168a4:	1a102737          	lui	a4,0x1a102
1c0168a8:	78070713          	addi	a4,a4,1920 # 1a102780 <__l1_end+0xa10271c>
1c0168ac:	c01c                	sw	a5,0(s0)
1c0168ae:	c048                	sw	a0,4(s0)
1c0168b0:	4314                	lw	a3,0(a4)
1c0168b2:	00a797b3          	sll	a5,a5,a0
1c0168b6:	00151493          	slli	s1,a0,0x1
1c0168ba:	8fd5                	or	a5,a5,a3
1c0168bc:	c31c                	sw	a5,0(a4)
1c0168be:	8526                	mv	a0,s1
1c0168c0:	f59ff0ef          	jal	ra,1c016818 <soc_eu_fcEventMask_setEvent>
1c0168c4:	00148513          	addi	a0,s1,1
1c0168c8:	f51ff0ef          	jal	ra,1c016818 <soc_eu_fcEventMask_setEvent>
1c0168cc:	4408                	lw	a0,8(s0)
1c0168ce:	e55ff0ef          	jal	ra,1c016722 <__rt_uart_setup.isra.5>
1c0168d2:	30091073          	csrw	mstatus,s2
1c0168d6:	bf4d                	j	1c016888 <__rt_uart_open+0x3a>
1c0168d8:	4401                	li	s0,0
1c0168da:	b77d                	j	1c016888 <__rt_uart_open+0x3a>

1c0168dc <rt_uart_close>:
}



void rt_uart_close(rt_uart_t *uart, rt_event_t *event)
{
1c0168dc:	1141                	addi	sp,sp,-16
1c0168de:	c606                	sw	ra,12(sp)
1c0168e0:	c422                	sw	s0,8(sp)
1c0168e2:	c226                	sw	s1,4(sp)
  return __builtin_pulp_read_then_spr_bit_clr(reg, val);
1c0168e4:	300474f3          	csrrci	s1,mstatus,8
  int irq = rt_irq_disable();

  rt_trace(RT_TRACE_DEV_CTRL, "[UART] Closing uart device (handle: %p)\n", uart);

  uart->open_count--;
1c0168e8:	411c                	lw	a5,0(a0)
1c0168ea:	17fd                	addi	a5,a5,-1
1c0168ec:	c11c                	sw	a5,0(a0)

  if (uart->open_count == 0)
1c0168ee:	e79d                	bnez	a5,1c01691c <rt_uart_close+0x40>
1c0168f0:	842a                	mv	s0,a0
  {
      // First wait for pending transfers to finish before stoppping uart in case
      // some printf are still pending
      __rt_uart_wait_tx_done(uart);
1c0168f2:	e77ff0ef          	jal	ra,1c016768 <__rt_uart_wait_tx_done.isra.6>
  pulp_write32(ARCHI_UDMA_ADDR + UDMA_UART_OFFSET(channel) + UDMA_CHANNEL_CUSTOM_OFFSET + UART_SETUP_OFFSET, 0x00500006);
1c0168f6:	1a102737          	lui	a4,0x1a102
1c0168fa:	005007b7          	lui	a5,0x500
1c0168fe:	22470693          	addi	a3,a4,548 # 1a102224 <__l1_end+0xa1021c0>
1c016902:	0799                	addi	a5,a5,6
1c016904:	c29c                	sw	a5,0(a3)
      // Set enable bits for uart channel back to 0 
      // This is needed to be able to propagate new configs when re-opening
      plp_uart_disable(uart->channel - ARCHI_UDMA_UART_ID(0));      

      // Then stop the uart
      plp_udma_cg_set(plp_udma_cg_get() & ~(1<<uart->channel));
1c016906:	4050                	lw	a2,4(s0)
  return pulp_read32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET);
1c016908:	78070713          	addi	a4,a4,1920
1c01690c:	4314                	lw	a3,0(a4)
1c01690e:	4785                	li	a5,1
1c016910:	00c797b3          	sll	a5,a5,a2
1c016914:	fff7c793          	not	a5,a5
1c016918:	8ff5                	and	a5,a5,a3
  pulp_write32(ARCHI_SOC_PERIPHERALS_ADDR + ARCHI_UDMA_OFFSET + UDMA_CONF_OFFSET + UDMA_CONF_CG_OFFSET, value);
1c01691a:	c31c                	sw	a5,0(a4)
  __builtin_pulp_spr_write(reg, val);
1c01691c:	30049073          	csrw	mstatus,s1
  }

  rt_irq_restore(irq);
}
1c016920:	40b2                	lw	ra,12(sp)
1c016922:	4422                	lw	s0,8(sp)
1c016924:	4492                	lw	s1,4(sp)
1c016926:	0141                	addi	sp,sp,16
1c016928:	8082                	ret

1c01692a <rt_uart_cluster_write>:
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c01692a:	014027f3          	csrr	a5,uhartid
  return (hart_id >> 5) & 0x3f;
1c01692e:	8795                	srai	a5,a5,0x5
1c016930:	f267b7b3          	p.bclr	a5,a5,25,6
void rt_uart_cluster_write(rt_uart_t *handle, void *buffer, size_t size, rt_uart_req_t *req)
{
  req->uart = handle;
  req->buffer = buffer;
  req->size = size;
  req->cid = rt_cluster_id();
1c016934:	08f686a3          	sb	a5,141(a3)
  event->arg[0] = (uintptr_t)callback;
1c016938:	1c0167b7          	lui	a5,0x1c016
1c01693c:	7d678793          	addi	a5,a5,2006 # 1c0167d6 <__rt_uart_cluster_req>
1c016940:	ca9c                	sw	a5,16(a3)
  event->implem.pending = 1;  
1c016942:	4785                	li	a5,1
  req->uart = handle;
1c016944:	c288                	sw	a0,0(a3)
  req->buffer = buffer;
1c016946:	c2cc                	sw	a1,4(a3)
  req->size = size;
1c016948:	c690                	sw	a2,8(a3)
  req->done = 0;
1c01694a:	08068623          	sb	zero,140(a3)
  event->implem.keep = 0;
1c01694e:	0206aa23          	sw	zero,52(a3)
  event->arg[1] = (uintptr_t)arg;
1c016952:	cad4                	sw	a3,20(a3)
  event->implem.pending = 1;  
1c016954:	da9c                	sw	a5,48(a3)
  __rt_init_event(&req->event, __rt_cluster_sched_get(), __rt_uart_cluster_req, (void *)req);
  __rt_event_set_pending(&req->event);
  __rt_cluster_push_fc_event(&req->event);
1c016956:	00c68513          	addi	a0,a3,12
1c01695a:	eb4fd06f          	j	1c01400e <__rt_cluster_push_fc_event>

1c01695e <__rt_uart_init>:
{
  // In case the peripheral clock can dynamically change, we need to be notified
  // when this happens so that we flush pending transfers before updating the frequency
  int err = 0;

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c01695e:	1c0165b7          	lui	a1,0x1c016
{
1c016962:	1141                	addi	sp,sp,-16
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c016964:	4601                	li	a2,0
1c016966:	7aa58593          	addi	a1,a1,1962 # 1c0167aa <__rt_uart_setfreq_before>
1c01696a:	4511                	li	a0,4
{
1c01696c:	c606                	sw	ra,12(sp)
1c01696e:	c422                	sw	s0,8(sp)
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c016970:	abcfc0ef          	jal	ra,1c012c2c <__rt_cbsys_add>

  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c016974:	1c0165b7          	lui	a1,0x1c016
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_BEFORE, __rt_uart_setfreq_before, NULL);
1c016978:	842a                	mv	s0,a0
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c01697a:	4601                	li	a2,0
1c01697c:	74658593          	addi	a1,a1,1862 # 1c016746 <__rt_uart_setfreq_after>
1c016980:	4515                	li	a0,5
1c016982:	aaafc0ef          	jal	ra,1c012c2c <__rt_cbsys_add>


  for (int i=0; i<ARCHI_UDMA_NB_UART; i++)
  {
    __rt_uart[i].open_count = 0;
1c016986:	1c0187b7          	lui	a5,0x1c018
1c01698a:	ac07ac23          	sw	zero,-1320(a5) # 1c017ad8 <__rt_uart>
  err |= __rt_cbsys_add(RT_CBSYS_PERIPH_SETFREQ_AFTER, __rt_uart_setfreq_after, NULL);
1c01698e:	8d41                	or	a0,a0,s0
  }

  if (err) rt_fatal("Unable to initialize uart driver\n");
1c016990:	c10d                	beqz	a0,1c0169b2 <__rt_uart_init+0x54>
  asm("csrr %0, 0x014" : "=r" (hart_id) : );
1c016992:	01402673          	csrr	a2,uhartid
1c016996:	1c017537          	lui	a0,0x1c017
  return (hart_id >> 5) & 0x3f;
1c01699a:	40565593          	srai	a1,a2,0x5
1c01699e:	f265b5b3          	p.bclr	a1,a1,25,6
1c0169a2:	f4563633          	p.bclr	a2,a2,26,5
1c0169a6:	41450513          	addi	a0,a0,1044 # 1c017414 <__hyper_pad+0x54>
1c0169aa:	946ff0ef          	jal	ra,1c015af0 <printf>
1c0169ae:	8c6ff0ef          	jal	ra,1c015a74 <abort>
}
1c0169b2:	40b2                	lw	ra,12(sp)
1c0169b4:	4422                	lw	s0,8(sp)
1c0169b6:	0141                	addi	sp,sp,16
1c0169b8:	8082                	ret
	...

1c0169bc <__cluster_text_start>:
  .global __rt_pe_start
__rt_pe_start:

#endif

    csrr    a0, 0xF14
1c0169bc:	f1402573          	csrr	a0,mhartid
    andi    a1, a0, 0x1f
1c0169c0:	01f57593          	andi	a1,a0,31
    srli    a0, a0, 5
1c0169c4:	8115                	srli	a0,a0,0x5
    
    // Activate a few events
    li      t0, (1<<PULP_DISPATCH_EVENT) | (1<<PULP_HW_BAR_EVENT) | (1<<PULP_MUTEX_EVENT)
1c0169c6:	000702b7          	lui	t0,0x70
    li      t1, ARCHI_EU_DEMUX_ADDR
1c0169ca:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK(t1)
1c0169ce:	00532023          	sw	t0,0(t1) # 204000 <__L2+0x184000>

#ifndef ARCHI_NO_L1_TINY
    sw      x0, %tiny(__rt_dma_first_pending)(x0)
1c0169d2:	00002a23          	sw	zero,20(zero) # 14 <__rt_bridge_eeprom_handle>

#ifdef ARCHI_HAS_CC
    li      t2, ARCHI_CC_CORE_ID
    bne     a1, t2, __rt_slave_start
#else
    bne     a1, x0, __rt_slave_start
1c0169d6:	10059063          	bnez	a1,1c016ad6 <__rt_slave_start>
#endif

    li      t0, (1<<ARCHI_CL_EVT_DMA1)
1c0169da:	20000293          	li	t0,512
    li      t1, ARCHI_EU_DEMUX_ADDR
1c0169de:	00204337          	lui	t1,0x204
    sw      t0, EU_CORE_MASK_IRQ_OR(t1)
1c0169e2:	00532a23          	sw	t0,20(t1) # 204014 <__L2+0x184014>



    // Prepare few values that will be kept in saved registers to optimize the loop
    la      s0, __rt_cluster_pool
1c0169e6:	e3fe9417          	auipc	s0,0xe3fe9
1c0169ea:	61e40413          	addi	s0,s0,1566 # 4 <__rt_bridge_flash_handle>
    li      s3, ARCHI_EU_DEMUX_ADDR
1c0169ee:	002049b7          	lui	s3,0x204
    li      s4, 1<<RT_CLUSTER_CALL_EVT
1c0169f2:	4a09                	li	s4,2
    la      s5, __rt_master_event
1c0169f4:	00000a97          	auipc	s5,0x0
1c0169f8:	038a8a93          	addi	s5,s5,56 # 1c016a2c <__rt_master_event>
    la      s7, __rt_fc_cluster_data
1c0169fc:	00001b97          	auipc	s7,0x1
1c016a00:	198b8b93          	addi	s7,s7,408 # 1c017b94 <__rt_fc_cluster_data>
    li      t2, RT_FC_CLUSTER_DATA_T_SIZEOF
1c016a04:	02800393          	li	t2,40
    mul     t2, t2, a0
1c016a08:	02a383b3          	mul	t2,t2,a0
    add     s7, s7, t2
1c016a0c:	9b9e                	add	s7,s7,t2
    addi    s7, s7, RT_FC_CLUSTER_DATA_T_EVENTS
1c016a0e:	0b91                	addi	s7,s7,4
#if defined(ARCHI_HAS_FC)
#if defined(ITC_VERSION)
    li      s9, ARCHI_FC_ITC_ADDR + ITC_STATUS_SET_OFFSET
    li      s8, 1<<RT_FC_ENQUEUE_EVENT
#else
    li      s9, ARCHI_FC_GLOBAL_ADDR + ARCHI_FC_PERIPHERALS_OFFSET + ARCHI_FC_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
1c016a10:	1b201cb7          	lui	s9,0x1b201
1c016a14:	e04c8c93          	addi	s9,s9,-508 # 1b200e04 <__fc_tcdm_end+0x1ffde4>
    li      s8, 1
1c016a18:	4c05                	li	s8,1
    // In case there is no FC, the event must be sent to cluster 0 event unit
    li      s9, ARCHI_CLUSTER_PERIPHERALS_GLOBAL_ADDR(0) + ARCHI_EU_OFFSET + EU_SW_EVENTS_AREA_BASE + EU_CORE_TRIGG_SW_EVENT + (RT_FC_ENQUEUE_EVENT << 2)
    li      s8, 1    
#endif
#ifndef ARCHI_HAS_NO_DISPATCH
    la      s10, __rt_set_slave_stack
1c016a1a:	00000d17          	auipc	s10,0x0
1c016a1e:	0fad0d13          	addi	s10,s10,250 # 1c016b14 <__rt_set_slave_stack>
    ori     s10, s10, 1
1c016a22:	001d6d13          	ori	s10,s10,1
#endif

    csrwi   0x300, 0x8
1c016a26:	30045073          	csrwi	mstatus,8

    j       __rt_master_loop
1c016a2a:	a819                	j	1c016a40 <__rt_master_loop>

1c016a2c <__rt_master_event>:



__rt_master_event:
    beq     s6, x0, __rt_master_loop
1c016a2c:	000b0a63          	beqz	s6,1c016a40 <__rt_master_loop>

1c016a30 <__rt_push_event_to_fc_retry>:

__rt_push_event_to_fc_retry:
    // Now we have to push the termination event to FC side
    // First wait until the slot for posting events is free
    lw      t0, 0(s7)
1c016a30:	000ba283          	lw	t0,0(s7)
    bne     t0, x0, __rt_push_event_to_fc_wait
1c016a34:	08029a63          	bnez	t0,1c016ac8 <__rt_push_event_to_fc_wait>

    // Push it
    sw      s6, 0(s7)
1c016a38:	016ba023          	sw	s6,0(s7)

    // And notify the FC side with a HW event in case it is sleeping
    sw      s8, 0(s9)
1c016a3c:	018ca023          	sw	s8,0(s9)

1c016a40 <__rt_master_loop>:


__rt_master_loop:
    // Check if a task is ready in the pool
    lw      t3, 0(s0)
1c016a40:	00042e03          	lw	t3,0(s0)
    // Check if a call is ready, e.g. if nb_pe is not zero
    // otherwise go to sleep
    beq     t3, x0, __rt_master_sleep
1c016a44:	060e0b63          	beqz	t3,1c016aba <__rt_master_sleep>

1c016a48 <__rt_master_loop_update_next>:

__rt_master_loop_update_next:
    lw      t4, RT_CLUSTER_TASK_NEXT(t3)
1c016a48:	020e2e83          	lw	t4,32(t3)
    sw      x0, RT_CLUSTER_TASK_PENDING(t3)
1c016a4c:	020e2223          	sw	zero,36(t3)
    sw      t4, 0(s0)
1c016a50:	01d42023          	sw	t4,0(s0)

    // Check again next pointer in case it was updated by the FC.
    // If so, do it it again as this will ensure that either we see the new
    // value or the FC sees our write
    lw      t5, RT_CLUSTER_TASK_NEXT(t3)
1c016a54:	020e2f03          	lw	t5,32(t3)
    bne     t4, t5, __rt_master_loop_update_next
1c016a58:	ffee98e3          	bne	t4,t5,1c016a48 <__rt_master_loop_update_next>
    li      a4, 0
    ebreak
#endif

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c016a5c:	7d005073          	csrwi	0x7d0,0
#endif

    // Reads entry point information
    lw      a0, RT_CLUSTER_TASK_ARG(t3)
1c016a60:	004e2503          	lw	a0,4(t3)
    lw      t0, RT_CLUSTER_TASK_ENTRY(t3)
1c016a64:	000e2283          	lw	t0,0(t3)
    lw      sp, RT_CLUSTER_TASK_STACKS(t3)
1c016a68:	008e2103          	lw	sp,8(t3)
    lw      t1, RT_CLUSTER_TASK_STACK_SIZE(t3)
1c016a6c:	00ce2303          	lw	t1,12(t3)
    lw      t2, RT_CLUSTER_TASK_SLAVE_STACK_SIZE(t3)
1c016a70:	010e2383          	lw	t2,16(t3)
    lw      t5, RT_CLUSTER_TASK_CORE_MASK(t3)
1c016a74:	028e2f03          	lw	t5,40(t3)
    lw      s6, RT_CLUSTER_TASK_COMPLETION_CALLBACK(t3)
1c016a78:	018e2b03          	lw	s6,24(t3)
    lw      t6, RT_CLUSTER_TASK_NB_CORES(t3)
1c016a7c:	014e2f83          	lw	t6,20(t3)
    mv      ra, s5
1c016a80:	80d6                	mv	ra,s5

    add     sp, sp, t1
1c016a82:	911a                	add	sp,sp,t1

#ifdef ARCHI_NO_L1_TINY
    la      t4, __rt_cluster_nb_active_pe
    sw      t6, 0(t4)
#else
    sw      t6, %tiny(__rt_cluster_nb_active_pe)(x0)
1c016a84:	01f02c23          	sw	t6,24(zero) # 18 <__rt_first_free>
#endif

#ifdef __RT_USE_ASSERT
    // Update stack checking information
    beqz    t1, __rt_no_stack_check
1c016a88:	00030a63          	beqz	t1,1c016a9c <__rt_no_stack_check>
    sub     t4, sp, t1
1c016a8c:	40610eb3          	sub	t4,sp,t1
    csrw    0x7D1, t4
1c016a90:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c016a94:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c016a98:	7d00d073          	csrwi	0x7d0,1

1c016a9c <__rt_no_stack_check>:
#endif

__rt_no_stack_check:
    // Whatever the number of cores, we need to setup the barrier as the master code is compiled to use it
    sw      t5, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_TEAM_CONFIG(s3)
1c016a9c:	09e9a223          	sw	t5,132(s3) # 204084 <__L2+0x184084>
#ifdef ARCHI_HAS_CC
    // When we have a cluster controller, don't configure the slave barrier
    // if we don't have have any slave
    beqz    t5, __rt_master_no_slave_barrier
#endif
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_MASK(s3)
1c016aa0:	21e9a023          	sw	t5,512(s3)
    sw      t5, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK(s3)
1c016aa4:	21e9a623          	sw	t5,524(s3)

1c016aa8 <__rt_master_no_slave_barrier>:
    sw      t6, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TARGET_MASK + EU_BARRIER_SIZE(s3)
#endif

    // Set stack on slaves
    // For that we push first the function for setting stack, then the stack size and the base
    p.beqimm t5, 0, __rt_master_loop_no_slave
1c016aa8:	000f2863          	p.beqimm	t5,0,1c016ab8 <__rt_master_loop_no_slave>
    sw      s10, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c016aac:	09a9a023          	sw	s10,128(s3)
    sw      t2, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c016ab0:	0879a023          	sw	t2,128(s3)
    sw      sp, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s3)
1c016ab4:	0829a023          	sw	sp,128(s3)

1c016ab8 <__rt_master_loop_no_slave>:

__rt_master_loop_no_slave:

    // Call the entry point, this will directly come back to the master loop
    jr      t0
1c016ab8:	8282                	jr	t0

1c016aba <__rt_master_sleep>:
    lw      a1, %tiny(__rt_pe_trace)(x0)
    li      a2, 1
    ebreak
#endif

    sw      s4, EU_CORE_MASK_OR(s3)
1c016aba:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c016abe:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c016ac2:	0149a223          	sw	s4,4(s3)
    j       __rt_master_loop
1c016ac6:	bfad                	j	1c016a40 <__rt_master_loop>

1c016ac8 <__rt_push_event_to_fc_wait>:




__rt_push_event_to_fc_wait:
    sw      s4, EU_CORE_MASK_OR(s3)
1c016ac8:	0149a423          	sw	s4,8(s3)
    p.elw   x0, EU_CORE_EVENT_WAIT_CLEAR(s3)
1c016acc:	03c9e003          	p.elw	zero,60(s3)
    sw      s4, EU_CORE_MASK_AND(s3)
1c016ad0:	0149a223          	sw	s4,4(s3)
    j       __rt_push_event_to_fc_retry
1c016ad4:	bfb1                	j	1c016a30 <__rt_push_event_to_fc_retry>

1c016ad6 <__rt_slave_start>:
__rt_slave_start:


#ifndef ARCHI_HAS_NO_DISPATCH

    li      s2, ARCHI_EU_DEMUX_ADDR
1c016ad6:	00204937          	lui	s2,0x204
    csrr    s3, 0xF14
1c016ada:	f14029f3          	csrr	s3,mhartid
    and     s3, s3, 0x1f
1c016ade:	01f9f993          	andi	s3,s3,31
    la      s4, __rt_fork_return
1c016ae2:	00000a17          	auipc	s4,0x0
1c016ae6:	012a0a13          	addi	s4,s4,18 # 1c016af4 <__rt_fork_return>
    la      s5, __rt_wait_for_dispatch
1c016aea:	00000a97          	auipc	s5,0x0
1c016aee:	00ea8a93          	addi	s5,s5,14 # 1c016af8 <__rt_wait_for_dispatch>
    j       __rt_wait_for_dispatch
1c016af2:	a019                	j	1c016af8 <__rt_wait_for_dispatch>

1c016af4 <__rt_fork_return>:
    // When the cluster has a controller barrier 0 is used for normal team barrier
    // and barrier 1 is used for end of offload
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR + EU_BARRIER_SIZE(s2)
#else
#ifndef ARCHI_HAS_NO_BARRIER
    p.elw   t0, EU_BARRIER_DEMUX_OFFSET + EU_HW_BARR_TRIGGER_WAIT_CLEAR(s2)
1c016af4:	21c96283          	p.elw	t0,540(s2) # 20421c <__L2+0x18421c>

1c016af8 <__rt_wait_for_dispatch>:
    li      a2, 1
    ebreak
#endif

    // Wait for PC + arg information from dispatcher
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c016af8:	08096283          	p.elw	t0,128(s2)
    p.elw   a0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c016afc:	08096503          	p.elw	a0,128(s2)
    ebreak
    mv      a0, t1
#endif

    // Check if this is an entry with a barrier at the end (fork entry)
    andi    t1, t0, 1
1c016b00:	0012f313          	andi	t1,t0,1
    bne     t1, zero, __rt_other_entry
1c016b04:	00031563          	bnez	t1,1c016b0e <__rt_other_entry>

1c016b08 <__rt_fork_entry>:

__rt_fork_entry:

    // Jump to the handler and prepare r9 to jump back just before the main loop
    add     ra, s4, x0
1c016b08:	000a00b3          	add	ra,s4,zero
    jr      t0
1c016b0c:	8282                	jr	t0

1c016b0e <__rt_other_entry>:

__rt_other_entry:

  // Jump to the handler and prepare r9 to jump back directly to the main loop
    add     ra, s5, x0
1c016b0e:	000a80b3          	add	ra,s5,zero
    jr      t0
1c016b12:	8282                	jr	t0

1c016b14 <__rt_set_slave_stack>:

  .global __rt_set_slave_stack
__rt_set_slave_stack:

#ifdef __RT_USE_ASSERT
    csrwi   0x7D0, 0
1c016b14:	7d005073          	csrwi	0x7d0,0
#endif

    // Multiply the stack size by the core ID and add the stack base to get our stack
    p.elw   t0, EU_DISPATCH_DEMUX_OFFSET + EU_DISPATCH_FIFO_ACCESS(s2)
1c016b18:	08096283          	p.elw	t0,128(s2)
    // If the cluster has a cluster controller, the first slave has core ID 0
    // and thus we need to take the next stack
    addi     t5, s3, 1
    p.mul   t4, t5, a0
#else
    p.mul   t4, s3, a0
1c016b1c:	02a98eb3          	mul	t4,s3,a0
#endif
    add     sp, t4, t0
1c016b20:	005e8133          	add	sp,t4,t0

#ifdef __RT_USE_ASSERT
    beqz    a0, __rt_no_stack_check_end
1c016b24:	c909                	beqz	a0,1c016b36 <__rt_no_stack_check_end>
    sub     t4, sp, a0
1c016b26:	40a10eb3          	sub	t4,sp,a0
    csrw    0x7D1, t4
1c016b2a:	7d1e9073          	csrw	0x7d1,t4
    csrw    0x7D2, sp
1c016b2e:	7d211073          	csrw	0x7d2,sp
    csrwi   0x7D0, 1
1c016b32:	7d00d073          	csrwi	0x7d0,1

1c016b36 <__rt_no_stack_check_end>:
#endif
__rt_no_stack_check_end:
    ret
1c016b36:	8082                	ret

1c016b38 <__rt_dma_2d>:
#if defined(ARCHI_HAS_CLUSTER)
#ifndef ARCHI_NO_L1_TINY
    .global __rt_dma_2d
__rt_dma_2d:

    sw  x8, -4(sp)
1c016b38:	fe812e23          	sw	s0,-4(sp)
    sw  x9, -8(sp)
1c016b3c:	fe912c23          	sw	s1,-8(sp)
    sw  a0, -12(sp)
1c016b40:	fea12a23          	sw	a0,-12(sp)
    sw  a1, -16(sp)
1c016b44:	feb12823          	sw	a1,-16(sp)
    sw  a2, -20(sp)
1c016b48:	fec12623          	sw	a2,-20(sp)

    li  a2, ARCHI_MCHAN_DEMUX_ADDR
1c016b4c:	00204637          	lui	a2,0x204
1c016b50:	40060613          	addi	a2,a2,1024 # 204400 <__L2+0x184400>

    lw  x8, %tiny(__rt_dma_first_pending)(x0)
1c016b54:	01402403          	lw	s0,20(zero) # 14 <__rt_bridge_eeprom_handle>

    lw  a1, CL_DMA_CMD_T_ID(x8)
1c016b58:	400c                	lw	a1,0(s0)
    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c016b5a:	4408                	lw	a0,8(s0)
    p.bsetr a1, x0, a1
1c016b5c:	80b045b3          	p.bsetr	a1,zero,a1
    sw  a1, MCHAN_STATUS_OFFSET(a2)
1c016b60:	c24c                	sw	a1,4(a2)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c016b62:	480c                	lw	a1,16(s0)

    beqz a0, __rt_dma_2d_done
1c016b64:	c131                	beqz	a0,1c016ba8 <__rt_dma_2d_done>

1c016b66 <__rt_dma_2d_redo>:

__rt_dma_2d_redo:
    lw  x9, CL_DMA_CMD_T_CMD(x8)
1c016b66:	4044                	lw	s1,4(s0)
    
    bgt a0, a1, __rt_dma_2d_not_last
1c016b68:	00a5c363          	blt	a1,a0,1c016b6e <__rt_dma_2d_not_last>
    mv  a1, a0
1c016b6c:	85aa                	mv	a1,a0

1c016b6e <__rt_dma_2d_not_last>:

__rt_dma_2d_not_last:
    lw  a0, MCHAN_CMD_OFFSET(a2)
1c016b6e:	4208                	lw	a0,0(a2)
    sw  a0, CL_DMA_CMD_T_ID(x8)
1c016b70:	c008                	sw	a0,0(s0)

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c016b72:	4408                	lw	a0,8(s0)

    p.inserti x9, a1, MCHAN_CMD_CMD_LEN_WIDTH-1, MCHAN_CMD_CMD_LEN_BIT
1c016b74:	de05a4b3          	p.insert	s1,a1,15,0

    sw  x9, MCHAN_CMD_OFFSET(a2)   // cmd
1c016b78:	c204                	sw	s1,0(a2)

    sub a0, a0, a1
1c016b7a:	8d0d                	sub	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_SIZE(x8)
1c016b7c:	c408                	sw	a0,8(s0)

    lw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c016b7e:	4848                	lw	a0,20(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // local address
1c016b80:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c016b82:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_LOC_ADDR(x8)
1c016b84:	c848                	sw	a0,20(s0)


    lw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c016b86:	4c08                	lw	a0,24(s0)
    lw  a1, CL_DMA_CMD_T_STRIDE(x8)
1c016b88:	444c                	lw	a1,12(s0)

    sw  a0, MCHAN_CMD_OFFSET(a2)   // external address
1c016b8a:	c208                	sw	a0,0(a2)
    add a0, a0, a1
1c016b8c:	952e                	add	a0,a0,a1
    sw  a0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c016b8e:	cc08                	sw	a0,24(s0)

1c016b90 <__rt_dma_2d_exit>:

__rt_dma_2d_exit:
    lw  x8, -4(sp)
1c016b90:	ffc12403          	lw	s0,-4(sp)
    lw  x9, -8(sp)
1c016b94:	ff812483          	lw	s1,-8(sp)
    lw  a0, -12(sp)
1c016b98:	ff412503          	lw	a0,-12(sp)
    lw  a1, -16(sp)
1c016b9c:	ff012583          	lw	a1,-16(sp)
    lw  a2, -20(sp)
1c016ba0:	fec12603          	lw	a2,-20(sp)

    mret
1c016ba4:	30200073          	mret

1c016ba8 <__rt_dma_2d_done>:

__rt_dma_2d_done:
    sw  x0, CL_DMA_CMD_T_EXT_ADDR(x8)
1c016ba8:	00042c23          	sw	zero,24(s0)

    lw  x9, CL_DMA_CMD_T_NEXT(x8)
1c016bac:	4c44                	lw	s1,28(s0)
    sw  x9, %tiny(__rt_dma_first_pending)(x0)
1c016bae:	00902a23          	sw	s1,20(zero) # 14 <__rt_bridge_eeprom_handle>

    li  x8, ARCHI_EU_DEMUX_ADDR + EU_SW_EVENTS_DEMUX_OFFSET + (RT_DMA_EVENT<<2)
1c016bb2:	00204437          	lui	s0,0x204
1c016bb6:	11440413          	addi	s0,s0,276 # 204114 <__L2+0x184114>
    sw  x0, EU_CORE_TRIGG_SW_EVENT(x8)
1c016bba:	00042023          	sw	zero,0(s0)

    beqz x9, __rt_dma_2d_exit
1c016bbe:	d8e9                	beqz	s1,1c016b90 <__rt_dma_2d_exit>

    mv  x8, x9
1c016bc0:	8426                	mv	s0,s1

    lw  a0, CL_DMA_CMD_T_SIZE(x8)
1c016bc2:	4408                	lw	a0,8(s0)
    lw  a1, CL_DMA_CMD_T_LENGTH(x8)
1c016bc4:	480c                	lw	a1,16(s0)

    j   __rt_dma_2d_redo
1c016bc6:	b745                	j	1c016b66 <__rt_dma_2d_redo>
